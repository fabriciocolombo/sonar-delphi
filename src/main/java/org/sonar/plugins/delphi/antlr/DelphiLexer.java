/*
 * Sonar Delphi Plugin
 * Copyright (C) 2011 Sabre Airline Solutions and Fabricio Colombo
 * Author(s):
 * Przemyslaw Kociolek (przemyslaw.kociolek@sabre.com)
 * Michal Wojcik (michal.wojcik@sabre.com)
 * Fabricio Colombo (fabricio.colombo.mva@gmail.com)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
 */
package org.sonar.plugins.delphi.antlr;

/**
 * Delphi Lexer class generated by Antlr. Provides tokens.
 **/


import org.antlr.runtime.*;

@SuppressWarnings("all")
public class DelphiLexer extends Lexer {
    public static final int EOF = -1;
    public static final int T__200 = 200;
    public static final int T__201 = 201;
    public static final int ABSOLUTE = 4;
    public static final int ABSTRACT = 5;
    public static final int ADD = 6;
    public static final int AND = 7;
    public static final int ANSISTRING = 8;
    public static final int ARRAY = 9;
    public static final int AS = 10;
    public static final int ASM = 11;
    public static final int ASSEMBLER = 12;
    public static final int ASSEMBLY = 13;
    public static final int ASSIGN = 14;
    public static final int AT = 15;
    public static final int AT2 = 16;
    public static final int AUTOMATED = 17;
    public static final int Alpha = 18;
    public static final int BEGIN = 19;
    public static final int BREAK = 20;
    public static final int CASE = 21;
    public static final int CDECL = 22;
    public static final int CLASS = 23;
    public static final int COLON = 24;
    public static final int COMMA = 25;
    public static final int COMMENT = 26;
    public static final int CONST = 27;
    public static final int CONSTRUCTOR = 28;
    public static final int CONTAINS = 29;
    public static final int CONTINUE = 30;
    public static final int ControlString = 31;
    public static final int Controlchar = 32;
    public static final int DEFAULT = 33;
    public static final int DEPRECATED = 34;
    public static final int DESTRUCTOR = 35;
    public static final int DISPID = 36;
    public static final int DISPINTERFACE = 37;
    public static final int DIV = 38;
    public static final int DO = 39;
    public static final int DOT = 40;
    public static final int DOTDOT = 41;
    public static final int DOWNTO = 42;
    public static final int DQ = 43;
    public static final int DW = 44;
    public static final int DYNAMIC = 45;
    public static final int Digit = 46;
    public static final int Digitseq = 47;
    public static final int ELSE = 48;
    public static final int END = 49;
    public static final int EQUAL = 50;
    public static final int EXCEPT = 51;
    public static final int EXIT = 52;
    public static final int EXPERIMENTAL = 53;
    public static final int EXPORT = 54;
    public static final int EXPORTS = 55;
    public static final int EXTERNAL = 56;
    public static final int FALSE = 57;
    public static final int FAR = 58;
    public static final int FILE = 59;
    public static final int FINAL = 60;
    public static final int FINALIZATION = 61;
    public static final int FINALLY = 62;
    public static final int FOR = 63;
    public static final int FORWARD = 64;
    public static final int FUNCTION = 65;
    public static final int GE = 66;
    public static final int GOTO = 67;
    public static final int GT = 68;
    public static final int HELPER = 69;
    public static final int Hexdigit = 70;
    public static final int Hexdigitseq = 71;
    public static final int IF = 72;
    public static final int IMPLEMENTATION = 73;
    public static final int IMPLEMENTS = 74;
    public static final int IN = 75;
    public static final int INDEX = 76;
    public static final int INHERITED = 77;
    public static final int INITIALIZATION = 78;
    public static final int INLINE = 79;
    public static final int INTERFACE = 80;
    public static final int IS = 81;
    public static final int LABEL = 82;
    public static final int LBRACK = 83;
    public static final int LBRACK2 = 84;
    public static final int LCURLY = 85;
    public static final int LE = 86;
    public static final int LIBRARY = 87;
    public static final int LOCAL = 88;
    public static final int LPAREN = 89;
    public static final int LT = 90;
    public static final int MESSAGE = 91;
    public static final int MINUS = 92;
    public static final int MOD = 93;
    public static final int NAME = 94;
    public static final int NEAR = 95;
    public static final int NIL = 96;
    public static final int NODEFAULT = 97;
    public static final int NOT = 98;
    public static final int NOT_EQUAL = 99;
    public static final int OBJECT = 100;
    public static final int OF = 101;
    public static final int ON = 102;
    public static final int OPERATOR = 103;
    public static final int OR = 104;
    public static final int OUT = 105;
    public static final int OVERLOAD = 106;
    public static final int OVERRIDE = 107;
    public static final int PACKAGE = 108;
    public static final int PACKED = 109;
    public static final int PASCAL = 110;
    public static final int PLATFORM = 111;
    public static final int PLUS = 112;
    public static final int POINTER = 113;
    public static final int POINTER2 = 114;
    public static final int PRIVATE = 115;
    public static final int PROCEDURE = 116;
    public static final int PROGRAM = 117;
    public static final int PROPERTY = 118;
    public static final int PROTECTED = 119;
    public static final int PUBLIC = 120;
    public static final int PUBLISHED = 121;
    public static final int QuotedString = 122;
    public static final int RAISE = 123;
    public static final int RBRACK = 124;
    public static final int RBRACK2 = 125;
    public static final int RCURLY = 126;
    public static final int READ = 127;
    public static final int READONLY = 128;
    public static final int RECORD = 129;
    public static final int REFERENCE = 130;
    public static final int REGISTER = 131;
    public static final int REINTRODUCE = 132;
    public static final int REMOVE = 133;
    public static final int REPEAT = 134;
    public static final int REQUIRES = 135;
    public static final int RESIDENT = 136;
    public static final int RESOURCESTRING = 137;
    public static final int RPAREN = 138;
    public static final int SAFECALL = 139;
    public static final int SEALED = 140;
    public static final int SEMI = 141;
    public static final int SET = 142;
    public static final int SHL = 143;
    public static final int SHR = 144;
    public static final int SLASH = 145;
    public static final int STAR = 146;
    public static final int STATIC = 147;
    public static final int STDCALL = 148;
    public static final int STORED = 149;
    public static final int STRICT = 150;
    public static final int STRING = 151;
    public static final int THEN = 152;
    public static final int THREADVAR = 153;
    public static final int TO = 154;
    public static final int TRUE = 155;
    public static final int TRY = 156;
    public static final int TYPE = 157;
    public static final int TkAnonymousExpression = 158;
    public static final int TkAsmHexLabel = 159;
    public static final int TkAsmHexNum = 160;
    public static final int TkClass = 161;
    public static final int TkClassField = 162;
    public static final int TkClassOfType = 163;
    public static final int TkClassParents = 164;
    public static final int TkCustomAttribute = 165;
    public static final int TkCustomAttributeArgs = 166;
    public static final int TkFunctionArgs = 167;
    public static final int TkFunctionBody = 168;
    public static final int TkFunctionName = 169;
    public static final int TkFunctionReturn = 170;
    public static final int TkGlobalFunction = 171;
    public static final int TkGuid = 172;
    public static final int TkHexNum = 173;
    public static final int TkIdentifier = 174;
    public static final int TkIntNum = 175;
    public static final int TkInterface = 176;
    public static final int TkNewType = 177;
    public static final int TkObject = 178;
    public static final int TkRealNum = 179;
    public static final int TkRecord = 180;
    public static final int TkRecordHelper = 181;
    public static final int TkVariableIdents = 182;
    public static final int TkVariableParam = 183;
    public static final int TkVariableType = 184;
    public static final int UNIT = 185;
    public static final int UNSAFE = 186;
    public static final int UNTIL = 187;
    public static final int USES = 188;
    public static final int UnicodeBOM = 189;
    public static final int VAR = 190;
    public static final int VARARGS = 191;
    public static final int VARIANT = 192;
    public static final int VIRTUAL = 193;
    public static final int WHILE = 194;
    public static final int WITH = 195;
    public static final int WRITE = 196;
    public static final int WRITEONLY = 197;
    public static final int WS = 198;
    public static final int XOR = 199;
    static final String DFA18_eotS =
            "\2\uffff\1\73\25\62\3\uffff\1\u008a\1\u008c\3\uffff\1\u008f\1\u0091\1" +
                    "\u0093\3\uffff\1\u0096\1\uffff\1\u0097\1\uffff\10\62\1\uffff\1\62\1\u00a1" +
                    "\1\u00a2\6\uffff\4\62\1\u00af\1\u00b0\4\62\3\uffff\10\62\1\u00be\1\u00bf" +
                    "\1\u00c0\12\62\1\u00d0\1\62\1\u00d7\1\u00d8\12\62\1\u00e4\1\u00e5\1\62" +
                    "\1\u00e7\16\62\1\u0106\12\62\17\uffff\11\62\2\uffff\1\u00a2\1\uffff\2" +
                    "\u011e\1\uffff\1\62\1\u0121\1\u0122\2\62\1\u0125\1\62\2\uffff\13\62\1" +
                    "\u0133\1\62\3\uffff\2\62\1\u0137\4\62\1\u013d\3\62\1\u0142\3\62\1\uffff" +
                    "\6\62\2\uffff\4\62\1\u0150\2\62\1\u0153\1\62\1\u0155\1\62\2\uffff\1\62" +
                    "\1\uffff\1\u0158\24\62\1\u0171\1\u0172\1\u0173\6\62\1\uffff\1\u017a\6" +
                    "\62\1\u0183\4\62\1\u0188\11\62\1\u00a4\1\uffff\2\62\2\uffff\2\62\1\uffff" +
                    "\4\62\1\u019b\10\62\1\uffff\2\62\1\u01a7\1\uffff\1\62\1\u01a9\3\62\1\uffff" +
                    "\1\62\1\u01ae\2\62\1\uffff\1\62\1\u01b2\13\62\1\uffff\1\u01be\1\u01bf" +
                    "\1\uffff\1\62\1\uffff\2\62\1\uffff\14\62\1\u01d2\13\62\3\uffff\4\62\1" +
                    "\u01e3\1\62\1\uffff\1\u01e5\1\u01e6\1\u01e7\2\62\1\u01ea\2\62\1\uffff" +
                    "\2\62\1\u01ef\1\62\1\uffff\11\62\1\u00a4\3\62\1\u01fd\2\62\1\u0200\1\u0201" +
                    "\1\uffff\1\u0202\1\u0203\1\u0205\10\62\1\uffff\1\62\1\uffff\3\62\1\u0213" +
                    "\1\uffff\1\u0216\2\62\1\uffff\2\62\1\u021b\4\62\1\u0220\1\62\1\u0222\1" +
                    "\62\2\uffff\20\62\1\u0235\1\62\1\uffff\20\62\1\uffff\1\62\3\uffff\1\62" +
                    "\1\u0249\1\uffff\3\62\1\u024d\1\uffff\1\u024f\2\62\1\u0253\11\62\1\uffff" +
                    "\2\62\4\uffff\1\62\1\uffff\5\62\1\u0265\1\62\1\u0267\1\62\1\u0269\1\62" +
                    "\1\u026c\1\62\1\uffff\2\62\1\uffff\2\62\1\u0272\1\62\1\uffff\2\62\1\u0276" +
                    "\1\62\1\uffff\1\62\1\uffff\2\62\1\u027b\4\62\1\u0280\1\u0281\7\62\1\u0289" +
                    "\1\62\1\uffff\1\62\1\u028c\3\62\1\u0290\1\u0291\4\62\1\u0296\1\u0297\1" +
                    "\62\1\u0299\1\u029a\1\u029b\1\62\1\u029d\1\uffff\3\62\1\uffff\1\62\1\uffff" +
                    "\3\62\1\uffff\16\62\1\u02b6\2\62\1\uffff\1\62\1\uffff\1\u02ba\1\uffff" +
                    "\1\62\1\u02bc\1\uffff\2\62\1\u02bf\1\u02c0\1\62\1\uffff\3\62\1\uffff\1" +
                    "\62\1\u02c6\1\u02c7\1\62\1\uffff\3\62\1\u02cc\2\uffff\1\62\1\u02ce\1\u02cf" +
                    "\1\62\1\u02d1\2\62\1\uffff\2\62\1\uffff\3\62\2\uffff\4\62\2\uffff\1\u02dd" +
                    "\3\uffff\1\62\1\uffff\1\u02df\1\u02e0\1\u02e1\14\62\1\u02ef\1\u02f0\2" +
                    "\62\1\u02f3\2\62\1\u02f6\1\u02f7\1\uffff\3\62\1\uffff\1\62\1\uffff\1\u02fc" +
                    "\1\62\2\uffff\1\u02fe\4\62\2\uffff\1\62\1\u0304\1\u0305\1\u0306\1\uffff" +
                    "\1\u0307\2\uffff\1\62\1\uffff\1\u0309\2\62\1\u030c\1\62\1\u030e\1\62\1" +
                    "\u0310\1\u0311\1\62\1\u0313\1\uffff\1\62\3\uffff\6\62\1\u031b\6\62\2\uffff" +
                    "\1\62\1\u0323\1\uffff\1\u0324\1\62\2\uffff\4\62\1\uffff\1\62\1\uffff\1" +
                    "\62\1\u032d\1\62\1\u032f\1\u0330\4\uffff\1\u0331\1\uffff\1\u0332\1\u0333" +
                    "\1\uffff\1\u0334\1\uffff\1\62\2\uffff\1\62\1\uffff\1\u0337\1\u0338\5\62" +
                    "\1\uffff\6\62\1\u034a\2\uffff\1\62\1\u034c\1\u034d\4\62\1\u0352\1\uffff" +
                    "\1\62\6\uffff\2\62\2\uffff\21\62\1\uffff\1\u0368\2\uffff\4\62\1\uffff" +
                    "\1\62\1\u036e\11\62\1\u0378\1\u0379\3\62\1\u037d\4\62\1\uffff\1\62\1\u0383" +
                    "\1\u0384\2\62\1\uffff\11\62\2\uffff\3\62\1\uffff\4\62\1\u0397\2\uffff" +
                    "\4\62\1\u039c\1\u039d\1\u039e\2\62\1\u03a1\1\u03a2\1\u03a3\2\62\1\u03a6" +
                    "\3\62\1\uffff\1\u03aa\1\u03ab\1\u03ac\1\62\3\uffff\2\62\3\uffff\1\u03b0" +
                    "\1\u03b1\1\uffff\1\62\1\u03b3\1\62\3\uffff\1\u03b5\1\u03b6\1\62\2\uffff" +
                    "\1\u03b8\1\uffff\1\62\2\uffff\1\u03bb\1\uffff\2\62\1\uffff\6\62\1\u03c4" +
                    "\1\u03c5\2\uffff";
    static final String DFA18_eofS =
            "\u03c6\uffff";
    static final String DFA18_minS =
            "\1\11\1\uffff\1\100\6\60\1\157\1\145\1\146\1\141\1\145\1\141\1\142\3\141" +
                    "\1\150\1\156\1\141\1\150\1\157\3\uffff\1\57\1\75\3\uffff\2\75\1\52\3\uffff" +
                    "\1\51\1\uffff\1\0\1\uffff\2\60\2\105\1\116\1\102\1\101\1\60\1\uffff\1" +
                    "\60\1\0\1\56\6\uffff\2\60\1\144\1\162\2\60\1\164\3\60\3\uffff\1\60\1\145" +
                    "\2\60\1\141\1\156\1\60\1\163\3\60\1\156\1\163\1\144\1\143\1\60\1\154\1" +
                    "\162\1\156\1\164\1\154\1\60\1\160\2\60\2\142\1\143\1\163\1\144\1\155\1" +
                    "\141\1\154\1\144\1\152\2\60\1\145\1\60\1\164\1\145\1\143\1\141\2\151\1" +
                    "\142\1\151\1\141\1\146\1\141\1\154\1\141\1\145\1\60\1\165\1\160\1\151" +
                    "\1\145\2\162\1\151\1\164\1\151\1\162\17\uffff\1\116\1\123\1\101\1\127" +
                    "\1\103\1\124\1\112\1\122\1\117\2\uffff\1\56\1\uffff\1\53\1\60\1\uffff" +
                    "\1\157\2\60\1\151\1\141\1\60\1\145\2\uffff\1\157\1\151\1\141\1\145\1\60" +
                    "\2\163\1\60\1\162\1\164\1\160\1\60\1\156\3\uffff\1\141\1\145\1\60\1\145" +
                    "\1\164\2\145\1\60\1\163\1\145\1\141\1\60\1\143\1\157\1\160\1\uffff\1\154" +
                    "\2\145\1\164\1\151\1\145\2\uffff\1\145\1\162\1\141\1\163\1\60\1\145\1" +
                    "\162\1\60\1\145\1\60\1\145\2\uffff\1\162\1\uffff\1\60\1\162\1\153\1\143" +
                    "\1\164\1\156\1\166\1\143\1\154\1\163\1\144\1\157\1\145\1\151\1\156\1\157" +
                    "\1\145\1\165\1\151\1\145\1\154\3\60\1\164\1\143\1\162\1\151\1\156\1\145" +
                    "\1\uffff\1\60\2\145\1\164\1\141\1\151\1\163\1\60\1\164\1\154\1\150\1\164" +
                    "\1\60\1\103\1\124\1\123\1\137\1\117\2\105\1\111\1\116\1\60\1\uffff\1\154" +
                    "\1\162\2\uffff\1\163\1\171\1\uffff\2\155\1\156\1\153\2\60\1\163\1\164" +
                    "\1\141\1\60\1\145\1\162\1\151\1\uffff\1\164\1\155\1\60\1\uffff\1\160\1" +
                    "\60\3\162\1\uffff\1\145\1\60\1\154\1\141\1\uffff\1\164\1\60\2\145\1\170" +
                    "\1\162\1\151\1\156\1\162\1\154\1\141\1\154\1\141\1\uffff\2\60\1\uffff" +
                    "\1\146\1\uffff\1\143\1\141\1\uffff\1\154\2\141\1\146\1\164\1\141\1\145" +
                    "\1\162\2\145\1\151\1\145\1\60\2\162\1\163\1\164\1\166\1\141\1\151\1\144" +
                    "\1\165\1\143\1\145\3\uffff\1\151\1\141\1\145\1\143\1\60\1\141\1\uffff" +
                    "\3\60\1\146\1\154\1\60\1\162\1\141\1\uffff\1\165\1\145\1\60\1\145\1\uffff" +
                    "\1\124\1\117\1\123\1\124\2\122\1\103\1\101\1\131\1\60\1\165\1\141\1\164" +
                    "\1\60\1\142\1\141\2\60\1\uffff\3\60\1\151\1\156\1\154\1\143\1\165\1\144" +
                    "\1\157\1\151\1\uffff\1\164\1\uffff\1\151\1\164\1\156\1\60\1\uffff\1\60" +
                    "\1\162\1\151\1\uffff\1\162\1\155\1\60\1\151\1\141\1\145\1\146\1\60\1\162" +
                    "\1\60\1\147\2\uffff\1\141\2\164\1\157\1\151\1\147\1\144\1\154\1\157\1" +
                    "\145\1\164\1\144\1\141\1\162\2\143\1\60\1\156\1\uffff\1\144\1\145\1\164" +
                    "\1\162\1\145\1\164\1\162\1\145\1\162\1\141\1\144\1\143\1\154\1\144\1\164" +
                    "\1\147\1\uffff\1\144\3\uffff\1\145\1\60\1\uffff\1\147\1\156\1\141\1\60" +
                    "\1\uffff\1\60\1\111\1\115\1\60\1\131\1\104\1\106\1\124\1\102\1\115\1\164" +
                    "\1\143\1\162\1\uffff\1\154\1\164\4\uffff\1\165\1\uffff\1\156\1\165\1\164" +
                    "\1\141\1\143\1\60\1\164\1\60\1\143\1\60\1\155\1\60\1\141\1\uffff\1\172" +
                    "\1\171\1\uffff\1\144\1\157\1\60\1\145\1\uffff\1\164\1\154\1\60\1\141\1" +
                    "\uffff\1\171\1\uffff\1\145\1\165\1\60\1\157\1\141\1\144\1\145\2\60\2\162" +
                    "\1\145\1\165\1\155\2\164\1\60\1\150\1\uffff\1\154\1\60\1\156\1\145\1\157" +
                    "\2\60\1\145\1\156\1\143\1\154\2\60\1\154\3\60\1\166\1\60\1\uffff\1\163" +
                    "\1\164\1\154\1\uffff\1\156\1\uffff\1\117\1\137\1\106\1\uffff\1\120\1\137" +
                    "\1\101\1\137\1\114\1\117\1\145\1\164\1\151\2\145\1\143\1\163\1\145\1\60" +
                    "\2\164\1\uffff\1\145\1\uffff\1\60\1\uffff\1\145\1\60\1\uffff\1\154\1\141" +
                    "\2\60\1\156\1\uffff\1\156\1\145\1\151\1\uffff\1\143\2\60\1\154\1\uffff" +
                    "\1\162\1\144\1\145\1\60\2\uffff\1\155\2\60\1\162\1\60\1\171\1\145\1\uffff" +
                    "\1\145\1\171\1\uffff\1\143\1\162\1\144\2\uffff\1\163\1\164\1\145\1\154" +
                    "\2\uffff\1\60\3\uffff\1\141\1\uffff\3\60\1\154\1\116\1\101\1\106\1\101" +
                    "\1\111\1\105\1\110\1\103\1\124\1\105\1\125\2\60\1\156\1\162\1\60\1\144" +
                    "\1\164\2\60\1\uffff\1\145\1\157\1\162\1\uffff\1\156\1\uffff\1\60\1\164" +
                    "\2\uffff\1\60\1\164\1\144\1\172\1\145\2\uffff\1\164\3\60\1\uffff\1\60" +
                    "\2\uffff\1\145\1\uffff\1\60\2\144\1\60\1\145\1\60\1\165\2\60\1\163\1\60" +
                    "\1\uffff\1\162\3\uffff\1\171\1\137\1\124\1\137\1\122\1\105\1\60\1\131" +
                    "\2\105\1\131\1\137\1\123\2\uffff\1\147\1\60\1\uffff\1\60\1\157\2\uffff" +
                    "\1\144\1\162\1\146\1\164\1\uffff\1\151\1\uffff\1\141\1\60\1\141\2\60\4" +
                    "\uffff\1\60\1\uffff\2\60\1\uffff\1\60\1\uffff\1\143\2\uffff\1\164\1\uffff" +
                    "\2\60\1\101\2\124\1\105\1\114\1\uffff\1\120\1\114\1\137\1\120\1\111\1" +
                    "\137\1\60\2\uffff\1\162\2\60\2\141\1\157\1\164\1\60\1\uffff\1\164\6\uffff" +
                    "\1\145\1\162\2\uffff\1\114\1\101\1\122\1\117\1\105\1\122\1\131\1\116\1" +
                    "\104\1\105\1\120\1\107\1\105\1\131\1\104\1\101\1\105\1\uffff\1\60\2\uffff" +
                    "\1\143\1\154\1\156\1\151\1\uffff\1\151\1\60\1\151\1\117\1\115\1\107\1" +
                    "\104\1\124\1\111\1\120\1\124\2\60\1\105\1\131\1\125\1\60\1\120\1\105\1" +
                    "\122\1\130\1\uffff\1\145\2\60\2\157\1\uffff\1\156\1\102\1\105\1\123\1" +
                    "\131\1\125\1\102\1\105\1\123\2\uffff\1\122\1\120\1\111\1\uffff\1\105\1" +
                    "\116\1\101\1\120\1\60\2\uffff\2\156\1\147\1\101\3\60\1\122\1\125\3\60" +
                    "\1\105\1\104\1\60\1\124\1\115\1\122\1\uffff\3\60\1\114\3\uffff\1\116\1" +
                    "\124\3\uffff\2\60\1\uffff\1\123\1\60\1\105\3\uffff\2\60\1\105\2\uffff" +
                    "\1\60\1\uffff\1\123\2\uffff\1\60\1\uffff\1\123\1\101\1\uffff\1\111\1\122" +
                    "\1\117\1\107\1\116\1\123\2\60\2\uffff";
    static final String DFA18_maxS =
            "\1\ufffe\1\uffff\1\100\1\165\1\162\1\157\1\171\1\170\1\165\1\157\1\145" +
                    "\1\163\3\157\1\166\1\165\1\145\1\164\1\171\1\163\1\151\1\162\1\157\3\uffff" +
                    "\1\57\1\75\3\uffff\1\76\1\75\1\56\3\uffff\1\56\1\uffff\1\uffff\1\uffff" +
                    "\2\150\2\105\1\116\1\102\1\101\1\150\1\uffff\1\150\1\uffff\1\150\6\uffff" +
                    "\1\163\1\150\1\163\1\162\2\ufffe\1\164\3\150\3\uffff\1\150\1\145\1\163" +
                    "\1\150\1\141\1\156\1\163\1\166\3\ufffe\1\156\1\163\1\144\1\164\1\162\1" +
                    "\156\1\162\1\156\1\164\1\154\1\ufffe\1\160\2\ufffe\2\142\1\143\1\163\1" +
                    "\144\1\155\1\141\1\154\1\164\1\152\2\ufffe\1\145\1\ufffe\1\164\1\145\1" +
                    "\163\1\141\1\151\1\157\1\142\1\151\1\163\1\146\1\164\3\162\1\ufffe\1\171" +
                    "\1\160\1\164\1\145\2\162\1\151\1\164\1\151\1\162\17\uffff\1\116\1\123" +
                    "\1\101\1\127\1\103\1\124\1\112\1\122\1\117\2\uffff\1\150\1\uffff\2\150" +
                    "\1\uffff\1\164\2\ufffe\1\151\1\141\1\ufffe\1\145\2\uffff\1\157\1\151\1" +
                    "\141\1\145\1\150\1\163\1\164\1\150\1\162\1\164\1\160\1\ufffe\1\156\3\uffff" +
                    "\1\141\1\145\1\ufffe\1\145\1\164\1\157\1\145\1\ufffe\1\163\1\145\1\141" +
                    "\1\ufffe\1\143\1\157\1\160\1\uffff\1\154\2\145\1\164\1\151\1\145\2\uffff" +
                    "\1\145\1\162\1\141\1\163\1\ufffe\1\145\1\162\1\ufffe\1\145\1\ufffe\1\145" +
                    "\2\uffff\1\162\1\uffff\1\ufffe\1\162\1\153\1\143\1\164\1\156\1\166\1\164" +
                    "\1\154\1\163\1\144\1\157\1\145\1\151\1\156\1\157\1\145\1\165\1\157\1\145" +
                    "\1\154\3\ufffe\1\164\1\143\1\162\1\151\1\156\1\145\1\uffff\1\ufffe\2\145" +
                    "\1\164\1\141\1\151\1\163\1\ufffe\1\164\1\154\1\150\1\164\1\ufffe\1\103" +
                    "\1\124\1\123\1\137\1\117\2\105\1\111\1\116\1\150\1\uffff\1\154\1\162\2" +
                    "\uffff\1\163\1\171\1\uffff\2\155\1\156\1\153\1\ufffe\1\154\1\163\1\164" +
                    "\1\151\1\165\1\145\1\162\1\151\1\uffff\1\164\1\155\1\ufffe\1\uffff\1\160" +
                    "\1\ufffe\3\162\1\uffff\1\145\1\ufffe\1\154\1\141\1\uffff\1\164\1\ufffe" +
                    "\2\145\1\170\1\162\1\151\1\156\1\162\1\154\1\141\1\154\1\141\1\uffff\2" +
                    "\ufffe\1\uffff\1\146\1\uffff\1\143\1\141\1\uffff\1\162\1\145\1\141\1\146" +
                    "\1\164\1\141\1\145\1\162\2\145\1\151\1\145\1\ufffe\2\162\1\163\1\164\1" +
                    "\166\1\141\1\151\1\144\1\165\1\143\1\145\3\uffff\1\151\1\141\1\145\1\156" +
                    "\1\ufffe\1\141\1\uffff\3\ufffe\1\146\1\154\1\ufffe\1\162\1\141\1\uffff" +
                    "\1\165\1\145\1\ufffe\1\145\1\uffff\1\124\1\117\1\123\1\124\2\122\1\103" +
                    "\1\101\1\131\1\150\1\165\1\141\1\164\1\ufffe\1\142\1\141\2\ufffe\1\uffff" +
                    "\3\ufffe\1\151\1\156\1\154\1\143\1\165\1\156\1\157\1\151\1\uffff\1\164" +
                    "\1\uffff\1\151\1\164\1\156\1\ufffe\1\uffff\1\ufffe\1\162\1\151\1\uffff" +
                    "\1\162\1\155\1\ufffe\1\151\1\141\1\145\1\146\1\ufffe\1\162\1\ufffe\1\147" +
                    "\2\uffff\1\141\2\164\1\157\1\151\1\147\1\144\1\154\1\157\1\145\1\164\1" +
                    "\144\1\141\1\162\1\143\1\163\1\ufffe\1\156\1\uffff\1\144\1\145\1\164\1" +
                    "\162\1\145\1\164\1\162\1\145\1\162\1\141\1\144\1\143\1\154\1\144\1\164" +
                    "\1\147\1\uffff\1\144\3\uffff\1\145\1\ufffe\1\uffff\1\147\1\156\1\141\1" +
                    "\ufffe\1\uffff\1\ufffe\1\111\1\115\1\ufffe\1\131\1\104\1\106\1\124\1\102" +
                    "\1\115\1\164\1\143\1\162\1\uffff\1\154\1\164\4\uffff\1\165\1\uffff\1\156" +
                    "\1\165\1\164\1\141\1\143\1\ufffe\1\164\1\ufffe\1\143\1\ufffe\1\155\1\ufffe" +
                    "\1\141\1\uffff\1\172\1\171\1\uffff\1\144\1\157\1\ufffe\1\145\1\uffff\1" +
                    "\164\1\154\1\ufffe\1\141\1\uffff\1\171\1\uffff\1\145\1\165\1\ufffe\1\157" +
                    "\1\141\1\144\1\145\2\ufffe\2\162\1\145\1\165\1\155\2\164\1\ufffe\1\150" +
                    "\1\uffff\1\154\1\ufffe\1\156\1\145\1\157\2\ufffe\1\145\1\156\1\143\1\154" +
                    "\2\ufffe\1\154\3\ufffe\1\166\1\ufffe\1\uffff\1\163\1\164\1\154\1\uffff" +
                    "\1\156\1\uffff\1\117\1\137\1\120\1\uffff\1\120\1\137\1\101\1\137\1\114" +
                    "\1\117\1\145\1\164\1\151\1\171\1\145\1\143\1\163\1\145\1\ufffe\2\164\1" +
                    "\uffff\1\145\1\uffff\1\ufffe\1\uffff\1\145\1\ufffe\1\uffff\1\154\1\141" +
                    "\2\ufffe\1\156\1\uffff\1\156\1\145\1\151\1\uffff\1\143\2\ufffe\1\154\1" +
                    "\uffff\1\162\1\144\1\145\1\ufffe\2\uffff\1\155\2\ufffe\1\162\1\ufffe\1" +
                    "\171\1\145\1\uffff\1\145\1\171\1\uffff\1\143\1\162\1\144\2\uffff\1\163" +
                    "\1\164\1\145\1\154\2\uffff\1\ufffe\3\uffff\1\141\1\uffff\3\ufffe\1\154" +
                    "\1\116\1\101\1\106\1\101\1\111\1\105\1\124\1\103\1\124\1\105\1\125\2\ufffe" +
                    "\1\156\1\162\1\ufffe\1\144\1\164\2\ufffe\1\uffff\1\145\1\157\1\162\1\uffff" +
                    "\1\156\1\uffff\1\ufffe\1\164\2\uffff\1\ufffe\1\164\1\144\1\172\1\145\2" +
                    "\uffff\1\164\3\ufffe\1\uffff\1\ufffe\2\uffff\1\145\1\uffff\1\ufffe\2\144" +
                    "\1\ufffe\1\145\1\ufffe\1\165\2\ufffe\1\163\1\ufffe\1\uffff\1\162\3\uffff" +
                    "\1\171\1\137\1\124\1\137\1\122\1\105\1\ufffe\1\131\2\105\1\131\1\137\1" +
                    "\123\2\uffff\1\147\1\ufffe\1\uffff\1\ufffe\1\157\2\uffff\1\144\1\162\1" +
                    "\146\1\164\1\uffff\1\151\1\uffff\1\163\1\ufffe\1\141\2\ufffe\4\uffff\1" +
                    "\ufffe\1\uffff\2\ufffe\1\uffff\1\ufffe\1\uffff\1\143\2\uffff\1\164\1\uffff" +
                    "\2\ufffe\1\122\2\124\1\105\1\114\1\uffff\1\120\1\114\1\137\1\120\1\124" +
                    "\1\137\1\ufffe\2\uffff\1\162\2\ufffe\2\141\1\157\1\164\1\ufffe\1\uffff" +
                    "\1\164\6\uffff\1\145\1\162\2\uffff\1\114\1\101\1\122\1\117\1\105\1\122" +
                    "\1\131\1\116\1\104\1\105\1\120\1\124\1\105\1\131\1\104\1\101\1\105\1\uffff" +
                    "\1\ufffe\2\uffff\1\143\1\154\1\156\1\151\1\uffff\1\151\1\ufffe\1\151\1" +
                    "\117\1\115\1\107\1\104\1\124\1\111\1\120\1\124\2\ufffe\1\105\1\131\1\125" +
                    "\1\ufffe\1\120\1\105\1\122\1\130\1\uffff\1\145\2\ufffe\2\157\1\uffff\1" +
                    "\156\1\102\1\105\1\123\1\131\1\125\1\102\1\105\1\123\2\uffff\1\122\1\120" +
                    "\1\111\1\uffff\1\105\1\116\1\101\1\120\1\ufffe\2\uffff\2\156\1\147\1\101" +
                    "\3\ufffe\1\122\1\125\3\ufffe\1\105\1\104\1\ufffe\1\124\1\115\1\122\1\uffff" +
                    "\3\ufffe\1\114\3\uffff\1\116\1\124\3\uffff\2\ufffe\1\uffff\1\123\1\ufffe" +
                    "\1\105\3\uffff\2\ufffe\1\105\2\uffff\1\ufffe\1\uffff\1\123\2\uffff\1\ufffe" +
                    "\1\uffff\1\123\1\101\1\uffff\1\111\1\122\1\117\1\107\1\116\1\123\2\ufffe" +
                    "\2\uffff";
    static final String DFA18_acceptS =
            "\1\uffff\1\1\26\uffff\1\u0087\1\u0088\1\u0089\2\uffff\1\u008c\1\u008d" +
                    "\1\u008f\3\uffff\1\u0096\1\u0097\1\u0099\1\uffff\1\u009b\1\uffff\1\u00a0" +
                    "\10\uffff\1\u00b6\3\uffff\1\u00b9\1\u00bc\1\u00bd\1\u00c0\1\2\1\u009c" +
                    "\12\uffff\2\u00b6\1\u00bb\100\uffff\1\u00bf\1\u008a\1\u008b\1\u008e\1" +
                    "\u0090\1\u0092\1\u0091\1\u0093\1\u0094\1\u0098\1\u0095\1\u009a\1\u009e" +
                    "\1\u009d\1\u009f\11\uffff\1\u00c1\1\u00b7\1\uffff\1\u00b8\2\uffff\1\u00ba" +
                    "\7\uffff\1\11\1\15\15\uffff\1\36\1\40\1\41\17\uffff\1\65\6\uffff\1\70" +
                    "\1\76\13\uffff\1\112\1\113\1\uffff\1\115\36\uffff\1\165\27\uffff\1\u00be" +
                    "\2\uffff\1\5\1\6\2\uffff\1\12\15\uffff\1\35\3\uffff\1\44\5\uffff\1\53" +
                    "\4\uffff\1\60\15\uffff\1\103\2\uffff\1\106\1\uffff\1\110\2\uffff\1\116" +
                    "\30\uffff\1\153\1\154\1\155\6\uffff\1\166\10\uffff\1\174\4\uffff\1\u0084" +
                    "\22\uffff\1\21\13\uffff\1\43\1\uffff\1\46\4\uffff\1\54\3\uffff\1\63\13" +
                    "\uffff\1\104\1\105\22\uffff\1\136\20\uffff\1\163\1\uffff\1\u0086\1\167" +
                    "\1\170\2\uffff\1\173\4\uffff\1\u0081\15\uffff\1\10\2\uffff\1\17\1\20\1" +
                    "\22\1\23\1\uffff\1\24\15\uffff\1\u0085\2\uffff\1\55\4\uffff\1\71\4\uffff" +
                    "\1\77\1\uffff\1\101\22\uffff\1\135\23\uffff\1\172\3\uffff\1\u0080\1\uffff" +
                    "\1\u0082\3\uffff\1\u00a9\21\uffff\1\33\1\uffff\1\37\1\uffff\1\45\2\uffff" +
                    "\1\50\5\uffff\1\64\3\uffff\1\74\4\uffff\1\111\4\uffff\1\122\1\123\7\uffff" +
                    "\1\133\2\uffff\1\140\3\uffff\1\144\1\145\4\uffff\1\152\1\156\1\uffff\1" +
                    "\160\1\161\1\162\1\uffff\1\171\30\uffff\1\30\3\uffff\1\42\1\uffff\1\51" +
                    "\2\uffff\1\57\1\61\5\uffff\1\100\1\102\4\uffff\1\121\1\uffff\1\125\1\126" +
                    "\1\uffff\1\130\13\uffff\1\157\1\uffff\1\175\1\176\1\177\15\uffff\1\3\1" +
                    "\4\2\uffff\1\14\2\uffff\1\26\1\27\4\uffff\1\52\1\uffff\1\62\5\uffff\1" +
                    "\114\1\117\1\120\1\124\1\uffff\1\131\2\uffff\1\137\1\uffff\1\142\1\uffff" +
                    "\1\146\1\147\1\uffff\1\151\7\uffff\1\u00a8\7\uffff\1\13\1\16\10\uffff" +
                    "\1\72\1\uffff\1\75\1\107\1\127\1\132\1\134\1\141\2\uffff\1\164\1\u0083" +
                    "\21\uffff\1\7\1\uffff\1\31\1\32\4\uffff\1\67\25\uffff\1\25\5\uffff\1\143" +
                    "\11\uffff\1\u00b4\1\u00aa\3\uffff\1\u00ad\5\uffff\1\47\1\56\22\uffff\1" +
                    "\34\4\uffff\1\u00a2\1\u00a3\1\u00a4\2\uffff\1\u00ae\1\u00b3\1\u00ab\2" +
                    "\uffff\1\u00af\3\uffff\1\66\1\73\1\150\3\uffff\1\u00ac\1\u00b2\1\uffff" +
                    "\1\u00b1\1\uffff\1\u00a1\1\u00a5\1\uffff\1\u00b0\2\uffff\1\u00a6\10\uffff" +
                    "\1\u00b5\1\u00a7";
    static final String DFA18_specialS =
            "\50\uffff\1\1\13\uffff\1\0\u0391\uffff}>";
    // $ANTLR end "T__200"
    static final String[] DFA18_transitionS = {
            "\2\71\1\uffff\2\71\22\uffff\1\71\2\uffff\1\70\1\66\1\uffff\1\1\1\67\1" +
                    "\42\1\43\1\32\1\30\1\35\1\31\1\46\1\33\12\65\1\34\1\36\1\40\1\37\1\41" +
                    "\1\uffff\1\2\1\61\1\63\1\53\2\63\1\52\2\62\1\56\4\62\1\54\1\57\2\62\1" +
                    "\55\3\62\1\60\4\62\1\44\1\uffff\1\45\1\47\1\62\1\uffff\1\3\1\4\1\5\1" +
                    "\6\1\7\1\10\1\11\1\12\1\13\2\62\1\14\1\15\1\16\1\17\1\20\1\62\1\21\1" +
                    "\22\1\23\1\24\1\25\1\26\1\27\2\62\1\50\1\uffff\1\51\2\uffff\ufe7f\62" +
                    "\1\64\u00ff\62",
            "",
            "\1\72",
            "\12\105\1\110\6\uffff\6\104\1\uffff\1\107\30\uffff\1\103\1\74\1\103" +
                    "\1\75\2\103\1\uffff\1\106\5\uffff\1\76\3\uffff\1\77\1\100\1\101\1\102",
            "\12\105\1\110\6\uffff\6\104\1\uffff\1\107\30\uffff\4\103\1\111\1\103" +
                    "\1\uffff\1\106\11\uffff\1\112",
            "\12\105\1\110\6\uffff\6\104\1\uffff\1\107\30\uffff\1\113\2\103\1\114" +
                    "\2\103\1\uffff\1\106\3\uffff\1\115\2\uffff\1\116",
            "\12\105\1\110\6\uffff\6\104\1\uffff\1\107\30\uffff\4\103\1\117\1\103" +
                    "\1\uffff\1\106\1\120\5\uffff\1\121\1\uffff\1\122\5\uffff\1\123\1\uffff" +
                    "\1\124",
            "\12\105\1\110\6\uffff\6\104\1\uffff\1\107\30\uffff\6\103\1\uffff\1\106" +
                    "\3\uffff\1\125\1\uffff\1\126\11\uffff\1\127",
            "\12\105\1\110\6\uffff\6\104\1\uffff\1\107\30\uffff\1\130\5\103\1\uffff" +
                    "\1\106\1\131\5\uffff\1\132\5\uffff\1\133",
            "\1\134",
            "\1\135",
            "\1\136\6\uffff\1\137\1\140\4\uffff\1\141",
            "\1\142\7\uffff\1\143\5\uffff\1\144",
            "\1\145\11\uffff\1\146",
            "\1\147\3\uffff\1\150\3\uffff\1\151\5\uffff\1\152",
            "\1\153\3\uffff\1\154\7\uffff\1\155\1\uffff\1\156\1\uffff\1\157\2\uffff" +
                    "\1\160\1\161",
            "\1\162\12\uffff\1\163\2\uffff\1\164\2\uffff\1\165\2\uffff\1\166",
            "\1\167\3\uffff\1\170",
            "\1\171\3\uffff\1\172\2\uffff\1\173\13\uffff\1\174",
            "\1\175\6\uffff\1\176\2\uffff\1\177\6\uffff\1\u0080",
            "\1\u0081\4\uffff\1\u0082",
            "\1\u0083\7\uffff\1\u0084",
            "\1\u0085\1\u0086\10\uffff\1\u0087",
            "\1\u0088",
            "",
            "",
            "",
            "\1\u0089",
            "\1\u008b",
            "",
            "",
            "",
            "\1\u008e\1\u008d",
            "\1\u0090",
            "\1\u0089\3\uffff\1\u0092",
            "",
            "",
            "",
            "\1\u0094\4\uffff\1\u0095",
            "",
            "\0\u0089",
            "",
            "\12\105\1\110\6\uffff\6\104\1\uffff\1\107\14\uffff\1\u0098\13\uffff" +
                    "\6\103\1\uffff\1\106",
            "\12\105\1\110\6\uffff\6\104\1\uffff\1\107\3\uffff\1\u009a\10\uffff\1" +
                    "\u0099\13\uffff\6\103\1\uffff\1\106",
            "\1\u009b",
            "\1\u009c",
            "\1\u009d",
            "\1\u009e",
            "\1\u009f",
            "\12\105\1\110\6\uffff\6\104\1\uffff\1\107\5\uffff\1\u00a0\22\uffff\6" +
                    "\103\1\uffff\1\106",
            "",
            "\12\105\1\110\6\uffff\6\104\1\uffff\1\107\30\uffff\6\103\1\uffff\1\106",
            "\ufeff\62\1\uffff\u0100\62",
            "\1\u00a4\1\uffff\12\u00a3\1\110\6\uffff\4\u00a6\1\u00a5\1\u00a6\1\uffff" +
                    "\1\u00a7\30\uffff\4\u00a6\1\u00a5\1\u00a6\1\uffff\1\u00a7",
            "",
            "",
            "",
            "",
            "",
            "",
            "\12\105\1\110\6\uffff\6\104\1\uffff\1\107\30\uffff\6\103\1\uffff\1\106" +
                    "\12\uffff\1\u00a8",
            "\12\105\1\110\6\uffff\6\104\1\uffff\1\107\30\uffff\3\103\1\u00a9\2\103" +
                    "\1\uffff\1\106",
            "\1\u00aa\16\uffff\1\u00ab",
            "\1\u00ac",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\14\62\1\u00ad\5\62\1\u00ae" +
                    "\7\62\5\uffff\uff7f\62",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u00b1",
            "\12\105\1\110\6\uffff\6\104\1\uffff\1\107\30\uffff\6\103\1\uffff\1\106",
            "\12\105\1\110\6\uffff\6\104\1\uffff\1\107\30\uffff\6\103\1\uffff\1\106",
            "\12\105\1\110\6\uffff\6\104\1\uffff\1\107\30\uffff\6\103\1\uffff\1\106",
            "",
            "",
            "",
            "\12\105\1\110\6\uffff\6\104\1\uffff\1\107\30\uffff\6\103\1\u00b2\1\106",
            "\1\u00b3",
            "\12\105\1\110\6\uffff\6\104\1\uffff\1\107\30\uffff\6\103\1\uffff\1\106" +
                    "\12\uffff\1\u00b4",
            "\12\105\1\110\6\uffff\6\104\1\uffff\1\107\30\uffff\4\103\1\u00b5\1\103" +
                    "\1\uffff\1\106",
            "\1\u00b6",
            "\1\u00b7",
            "\12\105\1\110\6\uffff\6\104\1\uffff\1\107\30\uffff\5\103\1\u00b8\1\uffff" +
                    "\1\106\7\uffff\1\u00b9\2\uffff\1\u00ba",
            "\1\u00bb\2\uffff\1\u00bc",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\26\62\1\u00bd\3\62\5\uffff" +
                    "\uff7f\62",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u00c1",
            "\1\u00c2",
            "\1\u00c3",
            "\1\u00c4\5\uffff\1\u00c5\6\uffff\1\u00c6\3\uffff\1\u00c7",
            "\12\105\1\110\6\uffff\6\104\1\uffff\1\107\30\uffff\6\103\1\uffff\1\106" +
                    "\3\uffff\1\u00c9\5\uffff\1\u00c8",
            "\1\u00ca\1\uffff\1\u00cb",
            "\1\u00cc",
            "\1\u00cd",
            "\1\u00ce",
            "\1\u00cf",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u00d1",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\3\62\1\u00d2\3\62\1\u00d3" +
                    "\1\u00d4\2\62\1\u00d5\7\62\1\u00d6\6\62\5\uffff\uff7f\62",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u00d9",
            "\1\u00da",
            "\1\u00db",
            "\1\u00dc",
            "\1\u00dd",
            "\1\u00de",
            "\1\u00df",
            "\1\u00e0",
            "\1\u00e1\17\uffff\1\u00e2",
            "\1\u00e3",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u00e6",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u00e8",
            "\1\u00e9",
            "\1\u00ea\17\uffff\1\u00eb",
            "\1\u00ec",
            "\1\u00ed",
            "\1\u00ee\5\uffff\1\u00ef",
            "\1\u00f0",
            "\1\u00f1",
            "\1\u00f2\1\uffff\1\u00f3\2\uffff\1\u00f4\1\u00f5\1\uffff\1\u00f6\3\uffff" +
                    "\1\u00f7\2\uffff\1\u00f8\1\u00f9\1\uffff\1\u00fa",
            "\1\u00fb",
            "\1\u00fc\22\uffff\1\u00fd",
            "\1\u00fe\5\uffff\1\u00ff",
            "\1\u0100\2\uffff\1\u0101\12\uffff\1\u0102\2\uffff\1\u0103",
            "\1\u0104\14\uffff\1\u0105",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u0108\3\uffff\1\u0107",
            "\1\u0109",
            "\1\u010a\11\uffff\1\u010b\1\u010c",
            "\1\u010d",
            "\1\u010e",
            "\1\u010f",
            "\1\u0110",
            "\1\u0111",
            "\1\u0112",
            "\1\u0113",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0114",
            "\1\u0115",
            "\1\u0116",
            "\1\u0117",
            "\1\u0118",
            "\1\u0119",
            "\1\u011a",
            "\1\u011b",
            "\1\u011c",
            "",
            "",
            "\1\u00a4\1\uffff\12\u00a3\1\110\6\uffff\4\u00a6\1\u00a5\1\u00a6\1\uffff" +
                    "\1\u00a7\30\uffff\4\u00a6\1\u00a5\1\u00a6\1\uffff\1\u00a7",
            "",
            "\1\u00a4\1\uffff\1\u00a4\2\uffff\12\u011d\1\110\6\uffff\6\u00a6\1\uffff" +
                    "\1\u00a7\30\uffff\6\u00a6\1\uffff\1\u00a7",
            "\12\u00a6\1\110\6\uffff\6\u00a6\1\uffff\1\u00a7\30\uffff\6\u00a6\1\uffff" +
                    "\1\u00a7",
            "",
            "\1\u011f\4\uffff\1\u0120",
            "\12\105\1\110\6\uffff\6\104\1\62\1\107\22\62\4\uffff\1\62\1\uffff\6" +
                    "\103\1\62\1\106\22\62\5\uffff\uff7f\62",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u0123",
            "\1\u0124",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u0126",
            "",
            "",
            "\1\u0127",
            "\1\u0128",
            "\1\u0129",
            "\1\u012a",
            "\12\105\1\110\6\uffff\6\104\1\uffff\1\107\30\uffff\2\103\1\u012b\3\103" +
                    "\1\uffff\1\106",
            "\1\u012c",
            "\1\u012d\1\u012e",
            "\12\105\1\110\6\uffff\6\104\1\uffff\1\107\30\uffff\1\u012f\5\103\1\uffff" +
                    "\1\106",
            "\1\u0130",
            "\1\u0131",
            "\1\u0132",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u0134",
            "",
            "",
            "",
            "\1\u0135",
            "\1\u0136",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u0138",
            "\1\u0139",
            "\1\u013a\11\uffff\1\u013b",
            "\1\u013c",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u013e",
            "\1\u013f",
            "\1\u0140",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\26\62\1\u0141\3\62\5\uffff" +
                    "\uff7f\62",
            "\1\u0143",
            "\1\u0144",
            "\1\u0145",
            "",
            "\1\u0146",
            "\1\u0147",
            "\1\u0148",
            "\1\u0149",
            "\1\u014a",
            "\1\u014b",
            "",
            "",
            "\1\u014c",
            "\1\u014d",
            "\1\u014e",
            "\1\u014f",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u0151",
            "\1\u0152",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u0154",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u0156",
            "",
            "",
            "\1\u0157",
            "",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u0159",
            "\1\u015a",
            "\1\u015b",
            "\1\u015c",
            "\1\u015d",
            "\1\u015e",
            "\1\u015f\3\uffff\1\u0160\10\uffff\1\u0161\3\uffff\1\u0162",
            "\1\u0163",
            "\1\u0164",
            "\1\u0165",
            "\1\u0166",
            "\1\u0167",
            "\1\u0168",
            "\1\u0169",
            "\1\u016a",
            "\1\u016b",
            "\1\u016c",
            "\1\u016d\5\uffff\1\u016e",
            "\1\u016f",
            "\1\u0170",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u0174",
            "\1\u0175",
            "\1\u0176",
            "\1\u0177",
            "\1\u0178",
            "\1\u0179",
            "",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u017b",
            "\1\u017c",
            "\1\u017d",
            "\1\u017e",
            "\1\u017f",
            "\1\u0180",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\1\u0181\7\62\1\u0182\21\62" +
                    "\5\uffff\uff7f\62",
            "\1\u0184",
            "\1\u0185",
            "\1\u0186",
            "\1\u0187",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u0189",
            "\1\u018a",
            "\1\u018b",
            "\1\u018c",
            "\1\u018d",
            "\1\u018e",
            "\1\u018f",
            "\1\u0190",
            "\1\u0191",
            "\12\u0192\1\110\6\uffff\6\u00a6\1\uffff\1\u00a7\30\uffff\6\u00a6\1\uffff" +
                    "\1\u00a7",
            "",
            "\1\u0193",
            "\1\u0194",
            "",
            "",
            "\1\u0195",
            "\1\u0196",
            "",
            "\1\u0197",
            "\1\u0198",
            "\1\u0199",
            "\1\u019a",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\12\105\1\110\6\uffff\6\104\1\uffff\1\107\30\uffff\6\103\1\uffff\1\106" +
                    "\3\uffff\1\u019c",
            "\1\u019d",
            "\1\u019e",
            "\1\u019f\7\uffff\1\u01a0",
            "\12\105\1\110\6\uffff\6\104\1\uffff\1\107\30\uffff\6\103\1\uffff\1\106" +
                    "\14\uffff\1\u01a1",
            "\1\u01a2",
            "\1\u01a3",
            "\1\u01a4",
            "",
            "\1\u01a5",
            "\1\u01a6",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "",
            "\1\u01a8",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u01aa",
            "\1\u01ab",
            "\1\u01ac",
            "",
            "\1\u01ad",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u01af",
            "\1\u01b0",
            "",
            "\1\u01b1",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u01b3",
            "\1\u01b4",
            "\1\u01b5",
            "\1\u01b6",
            "\1\u01b7",
            "\1\u01b8",
            "\1\u01b9",
            "\1\u01ba",
            "\1\u01bb",
            "\1\u01bc",
            "\1\u01bd",
            "",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "",
            "\1\u01c0",
            "",
            "\1\u01c1",
            "\1\u01c2",
            "",
            "\1\u01c3\5\uffff\1\u01c4",
            "\1\u01c5\3\uffff\1\u01c6",
            "\1\u01c7",
            "\1\u01c8",
            "\1\u01c9",
            "\1\u01ca",
            "\1\u01cb",
            "\1\u01cc",
            "\1\u01cd",
            "\1\u01ce",
            "\1\u01cf",
            "\1\u01d0",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\16\62\1\u01d1\13\62\5\uffff" +
                    "\uff7f\62",
            "\1\u01d3",
            "\1\u01d4",
            "\1\u01d5",
            "\1\u01d6",
            "\1\u01d7",
            "\1\u01d8",
            "\1\u01d9",
            "\1\u01da",
            "\1\u01db",
            "\1\u01dc",
            "\1\u01dd",
            "",
            "",
            "",
            "\1\u01de",
            "\1\u01df",
            "\1\u01e0",
            "\1\u01e1\12\uffff\1\u01e2",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u01e4",
            "",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u01e8",
            "\1\u01e9",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u01eb",
            "\1\u01ec",
            "",
            "\1\u01ed",
            "\1\u01ee",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u01f0",
            "",
            "\1\u01f1",
            "\1\u01f2",
            "\1\u01f3",
            "\1\u01f4",
            "\1\u01f5",
            "\1\u01f6",
            "\1\u01f7",
            "\1\u01f8",
            "\1\u01f9",
            "\12\u0192\1\110\6\uffff\6\u00a6\1\uffff\1\u00a7\30\uffff\6\u00a6\1\uffff" +
                    "\1\u00a7",
            "\1\u01fa",
            "\1\u01fb",
            "\1\u01fc",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u01fe",
            "\1\u01ff",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\21\62\1\u0204\10\62\5\uffff" +
                    "\uff7f\62",
            "\1\u0206",
            "\1\u0207",
            "\1\u0208",
            "\1\u0209",
            "\1\u020a",
            "\1\u020b\11\uffff\1\u020c",
            "\1\u020d",
            "\1\u020e",
            "",
            "\1\u020f",
            "",
            "\1\u0210",
            "\1\u0211",
            "\1\u0212",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\10\62\1\u0214\2\62\1\u0215" +
                    "\16\62\5\uffff\uff7f\62",
            "\1\u0217",
            "\1\u0218",
            "",
            "\1\u0219",
            "\1\u021a",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u021c",
            "\1\u021d",
            "\1\u021e",
            "\1\u021f",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u0221",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u0223",
            "",
            "",
            "\1\u0224",
            "\1\u0225",
            "\1\u0226",
            "\1\u0227",
            "\1\u0228",
            "\1\u0229",
            "\1\u022a",
            "\1\u022b",
            "\1\u022c",
            "\1\u022d",
            "\1\u022e",
            "\1\u022f",
            "\1\u0230",
            "\1\u0231",
            "\1\u0232",
            "\1\u0233\17\uffff\1\u0234",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u0236",
            "",
            "\1\u0237",
            "\1\u0238",
            "\1\u0239",
            "\1\u023a",
            "\1\u023b",
            "\1\u023c",
            "\1\u023d",
            "\1\u023e",
            "\1\u023f",
            "\1\u0240",
            "\1\u0241",
            "\1\u0242",
            "\1\u0243",
            "\1\u0244",
            "\1\u0245",
            "\1\u0246",
            "",
            "\1\u0247",
            "",
            "",
            "",
            "\1\u0248",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "",
            "\1\u024a",
            "\1\u024b",
            "\1\u024c",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\16\62\1\u024e\13\62\5\uffff" +
                    "\uff7f\62",
            "\1\u0250",
            "\1\u0251",
            "\12\62\7\uffff\32\62\4\uffff\1\u0252\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u0254",
            "\1\u0255",
            "\1\u0256",
            "\1\u0257",
            "\1\u0258",
            "\1\u0259",
            "\1\u025a",
            "\1\u025b",
            "\1\u025c",
            "",
            "\1\u025d",
            "\1\u025e",
            "",
            "",
            "",
            "",
            "\1\u025f",
            "",
            "\1\u0260",
            "\1\u0261",
            "\1\u0262",
            "\1\u0263",
            "\1\u0264",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u0266",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u0268",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u026a",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\22\62\1\u026b\7\62\5\uffff" +
                    "\uff7f\62",
            "\1\u026d",
            "",
            "\1\u026e",
            "\1\u026f",
            "",
            "\1\u0270",
            "\1\u0271",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u0273",
            "",
            "\1\u0274",
            "\1\u0275",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u0277",
            "",
            "\1\u0278",
            "",
            "\1\u0279",
            "\1\u027a",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u027c",
            "\1\u027d",
            "\1\u027e",
            "\1\u027f",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u0282",
            "\1\u0283",
            "\1\u0284",
            "\1\u0285",
            "\1\u0286",
            "\1\u0287",
            "\1\u0288",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u028a",
            "",
            "\1\u028b",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u028d",
            "\1\u028e",
            "\1\u028f",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u0292",
            "\1\u0293",
            "\1\u0294",
            "\1\u0295",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u0298",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u029c",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "",
            "\1\u029e",
            "\1\u029f",
            "\1\u02a0",
            "",
            "\1\u02a1",
            "",
            "\1\u02a2",
            "\1\u02a3",
            "\1\u02a6\10\uffff\1\u02a4\1\u02a5",
            "",
            "\1\u02a7",
            "\1\u02a8",
            "\1\u02a9",
            "\1\u02aa",
            "\1\u02ab",
            "\1\u02ac",
            "\1\u02ad",
            "\1\u02ae",
            "\1\u02af",
            "\1\u02b0\23\uffff\1\u02b1",
            "\1\u02b2",
            "\1\u02b3",
            "\1\u02b4",
            "\1\u02b5",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u02b7",
            "\1\u02b8",
            "",
            "\1\u02b9",
            "",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "",
            "\1\u02bb",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "",
            "\1\u02bd",
            "\1\u02be",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u02c1",
            "",
            "\1\u02c2",
            "\1\u02c3",
            "\1\u02c4",
            "",
            "\1\u02c5",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u02c8",
            "",
            "\1\u02c9",
            "\1\u02ca",
            "\1\u02cb",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "",
            "",
            "\1\u02cd",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u02d0",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u02d2",
            "\1\u02d3",
            "",
            "\1\u02d4",
            "\1\u02d5",
            "",
            "\1\u02d6",
            "\1\u02d7",
            "\1\u02d8",
            "",
            "",
            "\1\u02d9",
            "\1\u02da",
            "\1\u02db",
            "\1\u02dc",
            "",
            "",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "",
            "",
            "",
            "\1\u02de",
            "",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u02e2",
            "\1\u02e3",
            "\1\u02e4",
            "\1\u02e5",
            "\1\u02e6",
            "\1\u02e7",
            "\1\u02e8",
            "\1\u02ea\13\uffff\1\u02e9",
            "\1\u02eb",
            "\1\u02ec",
            "\1\u02ed",
            "\1\u02ee",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u02f1",
            "\1\u02f2",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u02f4",
            "\1\u02f5",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "",
            "\1\u02f8",
            "\1\u02f9",
            "\1\u02fa",
            "",
            "\1\u02fb",
            "",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u02fd",
            "",
            "",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u02ff",
            "\1\u0300",
            "\1\u0301",
            "\1\u0302",
            "",
            "",
            "\1\u0303",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "",
            "",
            "\1\u0308",
            "",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u030a",
            "\1\u030b",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u030d",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u030f",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u0312",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "",
            "\1\u0314",
            "",
            "",
            "",
            "\1\u0315",
            "\1\u0316",
            "\1\u0317",
            "\1\u0318",
            "\1\u0319",
            "\1\u031a",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u031c",
            "\1\u031d",
            "\1\u031e",
            "\1\u031f",
            "\1\u0320",
            "\1\u0321",
            "",
            "",
            "\1\u0322",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u0325",
            "",
            "",
            "\1\u0326",
            "\1\u0327",
            "\1\u0328",
            "\1\u0329",
            "",
            "\1\u032a",
            "",
            "\1\u032b\21\uffff\1\u032c",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u032e",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "",
            "",
            "",
            "",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "",
            "\1\u0335",
            "",
            "",
            "\1\u0336",
            "",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u033b\1\u033c\4\uffff\1\u0339\6\uffff\1\u033a\3\uffff\1\u033d",
            "\1\u033e",
            "\1\u033f",
            "\1\u0340",
            "\1\u0341",
            "",
            "\1\u0342",
            "\1\u0343",
            "\1\u0344",
            "\1\u0345",
            "\1\u0347\6\uffff\1\u0348\3\uffff\1\u0346",
            "\1\u0349",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "",
            "",
            "\1\u034b",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u034e",
            "\1\u034f",
            "\1\u0350",
            "\1\u0351",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "",
            "\1\u0353",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0354",
            "\1\u0355",
            "",
            "",
            "\1\u0356",
            "\1\u0357",
            "\1\u0358",
            "\1\u0359",
            "\1\u035a",
            "\1\u035b",
            "\1\u035c",
            "\1\u035d",
            "\1\u035e",
            "\1\u035f",
            "\1\u0360",
            "\1\u0362\14\uffff\1\u0361",
            "\1\u0363",
            "\1\u0364",
            "\1\u0365",
            "\1\u0366",
            "\1\u0367",
            "",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "",
            "",
            "\1\u0369",
            "\1\u036a",
            "\1\u036b",
            "\1\u036c",
            "",
            "\1\u036d",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u036f",
            "\1\u0370",
            "\1\u0371",
            "\1\u0372",
            "\1\u0373",
            "\1\u0374",
            "\1\u0375",
            "\1\u0376",
            "\1\u0377",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u037a",
            "\1\u037b",
            "\1\u037c",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u037e",
            "\1\u037f",
            "\1\u0380",
            "\1\u0381",
            "",
            "\1\u0382",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u0385",
            "\1\u0386",
            "",
            "\1\u0387",
            "\1\u0388",
            "\1\u0389",
            "\1\u038a",
            "\1\u038b",
            "\1\u038c",
            "\1\u038d",
            "\1\u038e",
            "\1\u038f",
            "",
            "",
            "\1\u0390",
            "\1\u0391",
            "\1\u0392",
            "",
            "\1\u0393",
            "\1\u0394",
            "\1\u0395",
            "\1\u0396",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "",
            "",
            "\1\u0398",
            "\1\u0399",
            "\1\u039a",
            "\1\u039b",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u039f",
            "\1\u03a0",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u03a4",
            "\1\u03a5",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u03a7",
            "\1\u03a8",
            "\1\u03a9",
            "",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u03ad",
            "",
            "",
            "",
            "\1\u03ae",
            "\1\u03af",
            "",
            "",
            "",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "",
            "\1\u03b2",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u03b4",
            "",
            "",
            "",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\1\u03b7",
            "",
            "",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "",
            "\1\u03b9",
            "",
            "",
            "\12\62\7\uffff\32\62\4\uffff\1\u03ba\1\uffff\32\62\5\uffff\uff7f\62",
            "",
            "\1\u03bc",
            "\1\u03bd",
            "",
            "\1\u03be",
            "\1\u03bf",
            "\1\u03c0",
            "\1\u03c1",
            "\1\u03c2",
            "\1\u03c3",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "\12\62\7\uffff\32\62\4\uffff\1\62\1\uffff\32\62\5\uffff\uff7f\62",
            "",
            ""
    };
    // $ANTLR end "T__201"
    static final short[] DFA18_eot = DFA.unpackEncodedString(DFA18_eotS);
    // $ANTLR end "ABSOLUTE"
    static final short[] DFA18_eof = DFA.unpackEncodedString(DFA18_eofS);
    // $ANTLR end "ABSTRACT"
    static final char[] DFA18_min = DFA.unpackEncodedStringToUnsignedChars(DFA18_minS);
    // $ANTLR end "ADD"
    static final char[] DFA18_max = DFA.unpackEncodedStringToUnsignedChars(DFA18_maxS);
    // $ANTLR end "AND"
    static final short[] DFA18_accept = DFA.unpackEncodedString(DFA18_acceptS);
    // $ANTLR end "ANSISTRING"
    static final short[] DFA18_special = DFA.unpackEncodedString(DFA18_specialS);
    // $ANTLR end "ARRAY"
    static final short[][] DFA18_transition;
    // $ANTLR end "AS"

    static {
        int numStates = DFA18_transitionS.length;
        DFA18_transition = new short[numStates][];
        for (int i = 0; i < numStates; i++) {
            DFA18_transition[i] = DFA.unpackEncodedString(DFA18_transitionS[i]);
        }
    }
    // $ANTLR end "ASM"

    protected DFA18 dfa18 = new DFA18(this);
    // $ANTLR end "ASSEMBLER"

    public DelphiLexer() {
    }
    // $ANTLR end "ASSEMBLY"

    public DelphiLexer(CharStream input) {
        this(input, new RecognizerSharedState());
    }
    // $ANTLR end "AT"

    public DelphiLexer(CharStream input, RecognizerSharedState state) {
        super(input, state);
    }
    // $ANTLR end "AUTOMATED"

    // delegates
    // delegators
    public Lexer[] getDelegates() {
        return new Lexer[]{};
    }
    // $ANTLR end "BEGIN"

    @Override
    public String getGrammarFileName() {
        return "org\\sonar\\plugins\\delphi\\antlr\\Delphi.g";
    }
    // $ANTLR end "BREAK"

    // $ANTLR start "T__200"
    public final void mT__200() throws RecognitionException {
        try {
            int _type = T__200;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:30:8: ( '&' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:30:10: '&'
            {
                match('&');
            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "CASE"

    // $ANTLR start "T__201"
    public final void mT__201() throws RecognitionException {
        try {
            int _type = T__201;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:31:8: ( '@@' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:31:10: '@@'
            {
                match("@@");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "CDECL"

    // $ANTLR start "ABSOLUTE"
    public final void mABSOLUTE() throws RecognitionException {
        try {
            int _type = ABSOLUTE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:710:19: ( 'absolute' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:710:21: 'absolute'
            {
                match("absolute");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "CLASS"

    // $ANTLR start "ABSTRACT"
    public final void mABSTRACT() throws RecognitionException {
        try {
            int _type = ABSTRACT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:711:19: ( 'abstract' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:711:21: 'abstract'
            {
                match("abstract");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "CONST"

    // $ANTLR start "ADD"
    public final void mADD() throws RecognitionException {
        try {
            int _type = ADD;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:712:19: ( 'add' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:712:21: 'add'
            {
                match("add");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "CONSTRUCTOR"

    // $ANTLR start "AND"
    public final void mAND() throws RecognitionException {
        try {
            int _type = AND;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:713:19: ( 'and' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:713:21: 'and'
            {
                match("and");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "CONTAINS"

    // $ANTLR start "ANSISTRING"
    public final void mANSISTRING() throws RecognitionException {
        try {
            int _type = ANSISTRING;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:714:19: ( 'ansistring' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:714:21: 'ansistring'
            {
                match("ansistring");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "CONTINUE"

    // $ANTLR start "ARRAY"
    public final void mARRAY() throws RecognitionException {
        try {
            int _type = ARRAY;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:715:19: ( 'array' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:715:21: 'array'
            {
                match("array");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "DEFAULT"

    // $ANTLR start "AS"
    public final void mAS() throws RecognitionException {
        try {
            int _type = AS;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:716:19: ( 'as' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:716:21: 'as'
            {
                match("as");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "DEPRECATED"

    // $ANTLR start "ASM"
    public final void mASM() throws RecognitionException {
        try {
            int _type = ASM;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:717:19: ( 'asm' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:717:21: 'asm'
            {
                match("asm");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "DESTRUCTOR"

    // $ANTLR start "ASSEMBLER"
    public final void mASSEMBLER() throws RecognitionException {
        try {
            int _type = ASSEMBLER;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:718:19: ( 'assembler' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:718:21: 'assembler'
            {
                match("assembler");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "DISPID"

    // $ANTLR start "ASSEMBLY"
    public final void mASSEMBLY() throws RecognitionException {
        try {
            int _type = ASSEMBLY;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:719:19: ( 'assembly' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:719:21: 'assembly'
            {
                match("assembly");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "DISPINTERFACE"

    // $ANTLR start "AT"
    public final void mAT() throws RecognitionException {
        try {
            int _type = AT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:720:19: ( 'at' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:720:21: 'at'
            {
                match("at");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "DIV"

    // $ANTLR start "AUTOMATED"
    public final void mAUTOMATED() throws RecognitionException {
        try {
            int _type = AUTOMATED;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:721:19: ( 'automated' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:721:21: 'automated'
            {
                match("automated");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "DO"

    // $ANTLR start "BEGIN"
    public final void mBEGIN() throws RecognitionException {
        try {
            int _type = BEGIN;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:722:19: ( 'begin' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:722:21: 'begin'
            {
                match("begin");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "DOWNTO"

    // $ANTLR start "BREAK"
    public final void mBREAK() throws RecognitionException {
        try {
            int _type = BREAK;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:723:19: ( 'break' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:723:21: 'break'
            {
                match("break");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "DQ"

    // $ANTLR start "CASE"
    public final void mCASE() throws RecognitionException {
        try {
            int _type = CASE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:724:19: ( 'case' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:724:21: 'case'
            {
                match("case");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "DW"

    // $ANTLR start "CDECL"
    public final void mCDECL() throws RecognitionException {
        try {
            int _type = CDECL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:725:19: ( 'cdecl' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:725:21: 'cdecl'
            {
                match("cdecl");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "DYNAMIC"

    // $ANTLR start "CLASS"
    public final void mCLASS() throws RecognitionException {
        try {
            int _type = CLASS;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:726:19: ( 'class' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:726:21: 'class'
            {
                match("class");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "ELSE"

    // $ANTLR start "CONST"
    public final void mCONST() throws RecognitionException {
        try {
            int _type = CONST;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:727:19: ( 'const' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:727:21: 'const'
            {
                match("const");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "END"

    // $ANTLR start "CONSTRUCTOR"
    public final void mCONSTRUCTOR() throws RecognitionException {
        try {
            int _type = CONSTRUCTOR;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:728:19: ( 'constructor' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:728:21: 'constructor'
            {
                match("constructor");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "EXCEPT"

    // $ANTLR start "CONTAINS"
    public final void mCONTAINS() throws RecognitionException {
        try {
            int _type = CONTAINS;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:729:19: ( 'contains' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:729:21: 'contains'
            {
                match("contains");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "EXIT"

    // $ANTLR start "CONTINUE"
    public final void mCONTINUE() throws RecognitionException {
        try {
            int _type = CONTINUE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:730:19: ( 'continue' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:730:21: 'continue'
            {
                match("continue");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "EXPERIMENTAL"

    // $ANTLR start "DEFAULT"
    public final void mDEFAULT() throws RecognitionException {
        try {
            int _type = DEFAULT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:731:19: ( 'default' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:731:21: 'default'
            {
                match("default");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "EXPORT"

    // $ANTLR start "DEPRECATED"
    public final void mDEPRECATED() throws RecognitionException {
        try {
            int _type = DEPRECATED;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:732:19: ( 'deprecated' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:732:21: 'deprecated'
            {
                match("deprecated");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "EXPORTS"

    // $ANTLR start "DESTRUCTOR"
    public final void mDESTRUCTOR() throws RecognitionException {
        try {
            int _type = DESTRUCTOR;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:733:19: ( 'destructor' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:733:21: 'destructor'
            {
                match("destructor");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "EXTERNAL"

    // $ANTLR start "DISPID"
    public final void mDISPID() throws RecognitionException {
        try {
            int _type = DISPID;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:734:19: ( 'dispid' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:734:21: 'dispid'
            {
                match("dispid");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "FAR"

    // $ANTLR start "DISPINTERFACE"
    public final void mDISPINTERFACE() throws RecognitionException {
        try {
            int _type = DISPINTERFACE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:735:19: ( 'dispinterface' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:735:21: 'dispinterface'
            {
                match("dispinterface");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "FILE"

    // $ANTLR start "DIV"
    public final void mDIV() throws RecognitionException {
        try {
            int _type = DIV;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:736:19: ( 'div' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:736:21: 'div'
            {
                match("div");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "FINAL"

    // $ANTLR start "DO"
    public final void mDO() throws RecognitionException {
        try {
            int _type = DO;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:737:19: ( 'do' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:737:21: 'do'
            {
                match("do");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "FINALIZATION"

    // $ANTLR start "DOWNTO"
    public final void mDOWNTO() throws RecognitionException {
        try {
            int _type = DOWNTO;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:738:19: ( 'downto' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:738:21: 'downto'
            {
                match("downto");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "FINALLY"

    // $ANTLR start "DQ"
    public final void mDQ() throws RecognitionException {
        try {
            int _type = DQ;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:739:19: ( 'dq' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:739:21: 'dq'
            {
                match("dq");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "FOR"

    // $ANTLR start "DW"
    public final void mDW() throws RecognitionException {
        try {
            int _type = DW;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:740:19: ( 'dw' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:740:21: 'dw'
            {
                match("dw");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "FORWARD"

    // $ANTLR start "DYNAMIC"
    public final void mDYNAMIC() throws RecognitionException {
        try {
            int _type = DYNAMIC;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:741:19: ( 'dynamic' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:741:21: 'dynamic'
            {
                match("dynamic");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "FUNCTION"

    // $ANTLR start "ELSE"
    public final void mELSE() throws RecognitionException {
        try {
            int _type = ELSE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:742:19: ( 'else' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:742:21: 'else'
            {
                match("else");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "GOTO"

    // $ANTLR start "END"
    public final void mEND() throws RecognitionException {
        try {
            int _type = END;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:743:19: ( 'end' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:743:21: 'end'
            {
                match("end");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "HELPER"

    // $ANTLR start "EXCEPT"
    public final void mEXCEPT() throws RecognitionException {
        try {
            int _type = EXCEPT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:744:19: ( 'except' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:744:21: 'except'
            {
                match("except");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "IF"

    // $ANTLR start "EXIT"
    public final void mEXIT() throws RecognitionException {
        try {
            int _type = EXIT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:745:19: ( 'exit' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:745:21: 'exit'
            {
                match("exit");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "IMPLEMENTATION"

    // $ANTLR start "EXPERIMENTAL"
    public final void mEXPERIMENTAL() throws RecognitionException {
        try {
            int _type = EXPERIMENTAL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:746:19: ( 'experimental' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:746:21: 'experimental'
            {
                match("experimental");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "IMPLEMENTS"

    // $ANTLR start "EXPORT"
    public final void mEXPORT() throws RecognitionException {
        try {
            int _type = EXPORT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:747:19: ( 'export' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:747:21: 'export'
            {
                match("export");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "IN"

    // $ANTLR start "EXPORTS"
    public final void mEXPORTS() throws RecognitionException {
        try {
            int _type = EXPORTS;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:748:19: ( 'exports' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:748:21: 'exports'
            {
                match("exports");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "INDEX"

    // $ANTLR start "EXTERNAL"
    public final void mEXTERNAL() throws RecognitionException {
        try {
            int _type = EXTERNAL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:749:19: ( 'external' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:749:21: 'external'
            {
                match("external");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "INHERITED"

    // $ANTLR start "FAR"
    public final void mFAR() throws RecognitionException {
        try {
            int _type = FAR;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:750:19: ( 'far' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:750:21: 'far'
            {
                match("far");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "INITIALIZATION"

    // $ANTLR start "FILE"
    public final void mFILE() throws RecognitionException {
        try {
            int _type = FILE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:751:19: ( 'file' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:751:21: 'file'
            {
                match("file");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "INLINE"

    // $ANTLR start "FINAL"
    public final void mFINAL() throws RecognitionException {
        try {
            int _type = FINAL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:752:19: ( 'final' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:752:21: 'final'
            {
                match("final");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "INTERFACE"

    // $ANTLR start "FINALIZATION"
    public final void mFINALIZATION() throws RecognitionException {
        try {
            int _type = FINALIZATION;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:753:19: ( 'finalization' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:753:21: 'finalization'
            {
                match("finalization");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "IS"

    // $ANTLR start "FINALLY"
    public final void mFINALLY() throws RecognitionException {
        try {
            int _type = FINALLY;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:754:19: ( 'finally' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:754:21: 'finally'
            {
                match("finally");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "LABEL"

    // $ANTLR start "FOR"
    public final void mFOR() throws RecognitionException {
        try {
            int _type = FOR;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:755:19: ( 'for' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:755:21: 'for'
            {
                match("for");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "LIBRARY"

    // $ANTLR start "FORWARD"
    public final void mFORWARD() throws RecognitionException {
        try {
            int _type = FORWARD;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:756:19: ( 'forward' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:756:21: 'forward'
            {
                match("forward");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "LOCAL"

    // $ANTLR start "FUNCTION"
    public final void mFUNCTION() throws RecognitionException {
        try {
            int _type = FUNCTION;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:757:19: ( 'function' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:757:21: 'function'
            {
                match("function");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "MESSAGE"

    // $ANTLR start "GOTO"
    public final void mGOTO() throws RecognitionException {
        try {
            int _type = GOTO;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:758:19: ( 'goto' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:758:21: 'goto'
            {
                match("goto");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "MOD"

    // $ANTLR start "HELPER"
    public final void mHELPER() throws RecognitionException {
        try {
            int _type = HELPER;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:759:19: ( 'helper' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:759:21: 'helper'
            {
                match("helper");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "NAME"

    // $ANTLR start "IF"
    public final void mIF() throws RecognitionException {
        try {
            int _type = IF;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:760:19: ( 'if' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:760:21: 'if'
            {
                match("if");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "NEAR"

    // $ANTLR start "IMPLEMENTATION"
    public final void mIMPLEMENTATION() throws RecognitionException {
        try {
            int _type = IMPLEMENTATION;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:761:19: ( 'implementation' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:761:21: 'implementation'
            {
                match("implementation");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "NIL"

    // $ANTLR start "IMPLEMENTS"
    public final void mIMPLEMENTS() throws RecognitionException {
        try {
            int _type = IMPLEMENTS;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:762:19: ( 'implements' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:762:21: 'implements'
            {
                match("implements");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "NODEFAULT"

    // $ANTLR start "IN"
    public final void mIN() throws RecognitionException {
        try {
            int _type = IN;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:763:19: ( 'in' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:763:21: 'in'
            {
                match("in");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "NOT"

    // $ANTLR start "INDEX"
    public final void mINDEX() throws RecognitionException {
        try {
            int _type = INDEX;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:764:19: ( 'index' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:764:21: 'index'
            {
                match("index");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "OBJECT"

    // $ANTLR start "INHERITED"
    public final void mINHERITED() throws RecognitionException {
        try {
            int _type = INHERITED;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:765:19: ( 'inherited' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:765:21: 'inherited'
            {
                match("inherited");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "OF"

    // $ANTLR start "INITIALIZATION"
    public final void mINITIALIZATION() throws RecognitionException {
        try {
            int _type = INITIALIZATION;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:766:19: ( 'initialization' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:766:21: 'initialization'
            {
                match("initialization");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "ON"

    // $ANTLR start "INLINE"
    public final void mINLINE() throws RecognitionException {
        try {
            int _type = INLINE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:767:19: ( 'inline' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:767:21: 'inline'
            {
                match("inline");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "OPERATOR"

    // $ANTLR start "INTERFACE"
    public final void mINTERFACE() throws RecognitionException {
        try {
            int _type = INTERFACE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:768:19: ( 'interface' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:768:21: 'interface'
            {
                match("interface");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "OR"

    // $ANTLR start "IS"
    public final void mIS() throws RecognitionException {
        try {
            int _type = IS;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:769:19: ( 'is' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:769:21: 'is'
            {
                match("is");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "OUT"

    // $ANTLR start "LABEL"
    public final void mLABEL() throws RecognitionException {
        try {
            int _type = LABEL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:770:19: ( 'label' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:770:21: 'label'
            {
                match("label");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "OVERLOAD"

    // $ANTLR start "LIBRARY"
    public final void mLIBRARY() throws RecognitionException {
        try {
            int _type = LIBRARY;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:771:19: ( 'library' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:771:21: 'library'
            {
                match("library");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "OVERRIDE"

    // $ANTLR start "LOCAL"
    public final void mLOCAL() throws RecognitionException {
        try {
            int _type = LOCAL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:772:19: ( 'local' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:772:21: 'local'
            {
                match("local");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "PACKAGE"

    // $ANTLR start "MESSAGE"
    public final void mMESSAGE() throws RecognitionException {
        try {
            int _type = MESSAGE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:773:19: ( 'message' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:773:21: 'message'
            {
                match("message");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "PACKED"

    // $ANTLR start "MOD"
    public final void mMOD() throws RecognitionException {
        try {
            int _type = MOD;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:774:19: ( 'mod' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:774:21: 'mod'
            {
                match("mod");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "PASCAL"

    // $ANTLR start "NAME"
    public final void mNAME() throws RecognitionException {
        try {
            int _type = NAME;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:775:19: ( 'name' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:775:21: 'name'
            {
                match("name");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "PLATFORM"

    // $ANTLR start "NEAR"
    public final void mNEAR() throws RecognitionException {
        try {
            int _type = NEAR;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:776:19: ( 'near' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:776:21: 'near'
            {
                match("near");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "POINTER"

    // $ANTLR start "NIL"
    public final void mNIL() throws RecognitionException {
        try {
            int _type = NIL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:777:19: ( 'nil' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:777:21: 'nil'
            {
                match("nil");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "PRIVATE"

    // $ANTLR start "NODEFAULT"
    public final void mNODEFAULT() throws RecognitionException {
        try {
            int _type = NODEFAULT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:778:19: ( 'nodefault' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:778:21: 'nodefault'
            {
                match("nodefault");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "PROCEDURE"

    // $ANTLR start "NOT"
    public final void mNOT() throws RecognitionException {
        try {
            int _type = NOT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:779:19: ( 'not' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:779:21: 'not'
            {
                match("not");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "PROGRAM"

    // $ANTLR start "OBJECT"
    public final void mOBJECT() throws RecognitionException {
        try {
            int _type = OBJECT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:780:19: ( 'object' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:780:21: 'object'
            {
                match("object");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "PROPERTY"

    // $ANTLR start "OF"
    public final void mOF() throws RecognitionException {
        try {
            int _type = OF;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:781:19: ( 'of' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:781:21: 'of'
            {
                match("of");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "PROTECTED"

    // $ANTLR start "ON"
    public final void mON() throws RecognitionException {
        try {
            int _type = ON;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:782:19: ( 'on' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:782:21: 'on'
            {
                match("on");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "PUBLIC"

    // $ANTLR start "OPERATOR"
    public final void mOPERATOR() throws RecognitionException {
        try {
            int _type = OPERATOR;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:783:19: ( 'operator' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:783:21: 'operator'
            {
                match("operator");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "PUBLISHED"

    // $ANTLR start "OR"
    public final void mOR() throws RecognitionException {
        try {
            int _type = OR;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:784:19: ( 'or' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:784:21: 'or'
            {
                match("or");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "RAISE"

    // $ANTLR start "OUT"
    public final void mOUT() throws RecognitionException {
        try {
            int _type = OUT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:785:19: ( 'out' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:785:21: 'out'
            {
                match("out");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "READ"

    // $ANTLR start "OVERLOAD"
    public final void mOVERLOAD() throws RecognitionException {
        try {
            int _type = OVERLOAD;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:786:19: ( 'overload' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:786:21: 'overload'
            {
                match("overload");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "READONLY"

    // $ANTLR start "OVERRIDE"
    public final void mOVERRIDE() throws RecognitionException {
        try {
            int _type = OVERRIDE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:787:19: ( 'override' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:787:21: 'override'
            {
                match("override");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "RECORD"

    // $ANTLR start "PACKAGE"
    public final void mPACKAGE() throws RecognitionException {
        try {
            int _type = PACKAGE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:788:19: ( 'package' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:788:21: 'package'
            {
                match("package");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "REFERENCE"

    // $ANTLR start "PACKED"
    public final void mPACKED() throws RecognitionException {
        try {
            int _type = PACKED;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:789:19: ( 'packed' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:789:21: 'packed'
            {
                match("packed");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "REGISTER"

    // $ANTLR start "PASCAL"
    public final void mPASCAL() throws RecognitionException {
        try {
            int _type = PASCAL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:790:19: ( 'pascal' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:790:21: 'pascal'
            {
                match("pascal");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "REINTRODUCE"

    // $ANTLR start "PLATFORM"
    public final void mPLATFORM() throws RecognitionException {
        try {
            int _type = PLATFORM;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:791:19: ( 'platform' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:791:21: 'platform'
            {
                match("platform");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "REMOVE"

    // $ANTLR start "POINTER"
    public final void mPOINTER() throws RecognitionException {
        try {
            int _type = POINTER;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:792:19: ( 'pointer' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:792:21: 'pointer'
            {
                match("pointer");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "REPEAT"

    // $ANTLR start "PRIVATE"
    public final void mPRIVATE() throws RecognitionException {
        try {
            int _type = PRIVATE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:793:19: ( 'private' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:793:21: 'private'
            {
                match("private");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "REQUIRES"

    // $ANTLR start "PROCEDURE"
    public final void mPROCEDURE() throws RecognitionException {
        try {
            int _type = PROCEDURE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:794:19: ( 'procedure' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:794:21: 'procedure'
            {
                match("procedure");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "RESIDENT"

    // $ANTLR start "PROGRAM"
    public final void mPROGRAM() throws RecognitionException {
        try {
            int _type = PROGRAM;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:795:19: ( 'program' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:795:21: 'program'
            {
                match("program");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "RESOURCESTRING"

    // $ANTLR start "PROPERTY"
    public final void mPROPERTY() throws RecognitionException {
        try {
            int _type = PROPERTY;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:796:19: ( 'property' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:796:21: 'property'
            {
                match("property");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "SAFECALL"

    // $ANTLR start "PROTECTED"
    public final void mPROTECTED() throws RecognitionException {
        try {
            int _type = PROTECTED;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:797:19: ( 'protected' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:797:21: 'protected'
            {
                match("protected");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "SEALED"

    // $ANTLR start "PUBLIC"
    public final void mPUBLIC() throws RecognitionException {
        try {
            int _type = PUBLIC;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:798:19: ( 'public' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:798:21: 'public'
            {
                match("public");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "SET"

    // $ANTLR start "PUBLISHED"
    public final void mPUBLISHED() throws RecognitionException {
        try {
            int _type = PUBLISHED;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:799:19: ( 'published' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:799:21: 'published'
            {
                match("published");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "SHL"

    // $ANTLR start "RAISE"
    public final void mRAISE() throws RecognitionException {
        try {
            int _type = RAISE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:800:19: ( 'raise' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:800:21: 'raise'
            {
                match("raise");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "SHR"

    // $ANTLR start "READ"
    public final void mREAD() throws RecognitionException {
        try {
            int _type = READ;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:801:19: ( 'read' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:801:21: 'read'
            {
                match("read");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "STATIC"

    // $ANTLR start "READONLY"
    public final void mREADONLY() throws RecognitionException {
        try {
            int _type = READONLY;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:802:19: ( 'readonly' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:802:21: 'readonly'
            {
                match("readonly");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "STDCALL"

    // $ANTLR start "RECORD"
    public final void mRECORD() throws RecognitionException {
        try {
            int _type = RECORD;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:803:19: ( 'record' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:803:21: 'record'
            {
                match("record");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "STORED"

    // $ANTLR start "REFERENCE"
    public final void mREFERENCE() throws RecognitionException {
        try {
            int _type = REFERENCE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:804:19: ( 'reference' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:804:21: 'reference'
            {
                match("reference");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "STRICT"

    // $ANTLR start "REGISTER"
    public final void mREGISTER() throws RecognitionException {
        try {
            int _type = REGISTER;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:805:19: ( 'register' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:805:21: 'register'
            {
                match("register");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "STRING"

    // $ANTLR start "REINTRODUCE"
    public final void mREINTRODUCE() throws RecognitionException {
        try {
            int _type = REINTRODUCE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:806:19: ( 'reintroduce' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:806:21: 'reintroduce'
            {
                match("reintroduce");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "THEN"

    // $ANTLR start "REMOVE"
    public final void mREMOVE() throws RecognitionException {
        try {
            int _type = REMOVE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:807:19: ( 'remove' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:807:21: 'remove'
            {
                match("remove");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "THREADVAR"

    // $ANTLR start "REPEAT"
    public final void mREPEAT() throws RecognitionException {
        try {
            int _type = REPEAT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:808:19: ( 'repeat' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:808:21: 'repeat'
            {
                match("repeat");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "TO"

    // $ANTLR start "REQUIRES"
    public final void mREQUIRES() throws RecognitionException {
        try {
            int _type = REQUIRES;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:809:19: ( 'requires' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:809:21: 'requires'
            {
                match("requires");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "TRY"

    // $ANTLR start "RESIDENT"
    public final void mRESIDENT() throws RecognitionException {
        try {
            int _type = RESIDENT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:810:19: ( 'resident' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:810:21: 'resident'
            {
                match("resident");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "TYPE"

    // $ANTLR start "RESOURCESTRING"
    public final void mRESOURCESTRING() throws RecognitionException {
        try {
            int _type = RESOURCESTRING;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:811:19: ( 'resourcestring' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:811:21: 'resourcestring'
            {
                match("resourcestring");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "UNIT"

    // $ANTLR start "SAFECALL"
    public final void mSAFECALL() throws RecognitionException {
        try {
            int _type = SAFECALL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:812:19: ( 'safecall' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:812:21: 'safecall'
            {
                match("safecall");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "UNSAFE"

    // $ANTLR start "SEALED"
    public final void mSEALED() throws RecognitionException {
        try {
            int _type = SEALED;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:813:19: ( 'sealed' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:813:21: 'sealed'
            {
                match("sealed");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "UNTIL"

    // $ANTLR start "SET"
    public final void mSET() throws RecognitionException {
        try {
            int _type = SET;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:814:19: ( 'set' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:814:21: 'set'
            {
                match("set");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "USES"

    // $ANTLR start "SHL"
    public final void mSHL() throws RecognitionException {
        try {
            int _type = SHL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:815:19: ( 'shl' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:815:21: 'shl'
            {
                match("shl");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "VAR"

    // $ANTLR start "SHR"
    public final void mSHR() throws RecognitionException {
        try {
            int _type = SHR;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:816:19: ( 'shr' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:816:21: 'shr'
            {
                match("shr");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "VARARGS"

    // $ANTLR start "STATIC"
    public final void mSTATIC() throws RecognitionException {
        try {
            int _type = STATIC;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:817:19: ( 'static' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:817:21: 'static'
            {
                match("static");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "VARIANT"

    // $ANTLR start "STDCALL"
    public final void mSTDCALL() throws RecognitionException {
        try {
            int _type = STDCALL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:818:19: ( 'stdcall' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:818:21: 'stdcall'
            {
                match("stdcall");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "VIRTUAL"

    // $ANTLR start "STORED"
    public final void mSTORED() throws RecognitionException {
        try {
            int _type = STORED;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:819:19: ( 'stored' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:819:21: 'stored'
            {
                match("stored");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "WHILE"

    // $ANTLR start "STRICT"
    public final void mSTRICT() throws RecognitionException {
        try {
            int _type = STRICT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:820:19: ( 'strict' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:820:21: 'strict'
            {
                match("strict");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "WITH"

    // $ANTLR start "STRING"
    public final void mSTRING() throws RecognitionException {
        try {
            int _type = STRING;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:821:19: ( 'string' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:821:21: 'string'
            {
                match("string");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "WRITE"

    // $ANTLR start "THEN"
    public final void mTHEN() throws RecognitionException {
        try {
            int _type = THEN;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:822:19: ( 'then' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:822:21: 'then'
            {
                match("then");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "WRITEONLY"

    // $ANTLR start "THREADVAR"
    public final void mTHREADVAR() throws RecognitionException {
        try {
            int _type = THREADVAR;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:823:19: ( 'threadvar' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:823:21: 'threadvar'
            {
                match("threadvar");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "XOR"

    // $ANTLR start "TO"
    public final void mTO() throws RecognitionException {
        try {
            int _type = TO;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:824:19: ( 'to' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:824:21: 'to'
            {
                match("to");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "FALSE"

    // $ANTLR start "TRY"
    public final void mTRY() throws RecognitionException {
        try {
            int _type = TRY;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:825:19: ( 'try' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:825:21: 'try'
            {
                match("try");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "TRUE"

    // $ANTLR start "TYPE"
    public final void mTYPE() throws RecognitionException {
        try {
            int _type = TYPE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:826:19: ( 'type' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:826:21: 'type'
            {
                match("type");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "PLUS"

    // $ANTLR start "UNIT"
    public final void mUNIT() throws RecognitionException {
        try {
            int _type = UNIT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:827:19: ( 'unit' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:827:21: 'unit'
            {
                match("unit");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "MINUS"

    // $ANTLR start "UNSAFE"
    public final void mUNSAFE() throws RecognitionException {
        try {
            int _type = UNSAFE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:828:19: ( 'unsafe' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:828:21: 'unsafe'
            {
                match("unsafe");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "STAR"

    // $ANTLR start "UNTIL"
    public final void mUNTIL() throws RecognitionException {
        try {
            int _type = UNTIL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:829:19: ( 'until' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:829:21: 'until'
            {
                match("until");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "SLASH"

    // $ANTLR start "USES"
    public final void mUSES() throws RecognitionException {
        try {
            int _type = USES;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:830:19: ( 'uses' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:830:21: 'uses'
            {
                match("uses");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "ASSIGN"

    // $ANTLR start "VAR"
    public final void mVAR() throws RecognitionException {
        try {
            int _type = VAR;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:831:19: ( 'var' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:831:21: 'var'
            {
                match("var");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "COMMA"

    // $ANTLR start "VARARGS"
    public final void mVARARGS() throws RecognitionException {
        try {
            int _type = VARARGS;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:832:19: ( 'varargs' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:832:21: 'varargs'
            {
                match("varargs");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "SEMI"

    // $ANTLR start "VARIANT"
    public final void mVARIANT() throws RecognitionException {
        try {
            int _type = VARIANT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:833:19: ( 'variant' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:833:21: 'variant'
            {
                match("variant");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "COLON"

    // $ANTLR start "VIRTUAL"
    public final void mVIRTUAL() throws RecognitionException {
        try {
            int _type = VIRTUAL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:834:19: ( 'virtual' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:834:21: 'virtual'
            {
                match("virtual");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "EQUAL"

    // $ANTLR start "WHILE"
    public final void mWHILE() throws RecognitionException {
        try {
            int _type = WHILE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:835:19: ( 'while' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:835:21: 'while'
            {
                match("while");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "NOT_EQUAL"

    // $ANTLR start "WITH"
    public final void mWITH() throws RecognitionException {
        try {
            int _type = WITH;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:836:19: ( 'with' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:836:21: 'with'
            {
                match("with");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "LT"

    // $ANTLR start "WRITE"
    public final void mWRITE() throws RecognitionException {
        try {
            int _type = WRITE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:837:19: ( 'write' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:837:21: 'write'
            {
                match("write");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "LE"

    // $ANTLR start "WRITEONLY"
    public final void mWRITEONLY() throws RecognitionException {
        try {
            int _type = WRITEONLY;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:838:19: ( 'writeonly' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:838:21: 'writeonly'
            {
                match("writeonly");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "GE"

    // $ANTLR start "XOR"
    public final void mXOR() throws RecognitionException {
        try {
            int _type = XOR;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:839:19: ( 'xor' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:839:21: 'xor'
            {
                match("xor");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "GT"

    // $ANTLR start "FALSE"
    public final void mFALSE() throws RecognitionException {
        try {
            int _type = FALSE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:840:19: ( 'false' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:840:21: 'false'
            {
                match("false");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "LPAREN"

    // $ANTLR start "TRUE"
    public final void mTRUE() throws RecognitionException {
        try {
            int _type = TRUE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:841:19: ( 'true' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:841:21: 'true'
            {
                match("true");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "RPAREN"

    // $ANTLR start "PLUS"
    public final void mPLUS() throws RecognitionException {
        try {
            int _type = PLUS;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:846:19: ( '+' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:846:21: '+'
            {
                match('+');
            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "LBRACK"

    // $ANTLR start "MINUS"
    public final void mMINUS() throws RecognitionException {
        try {
            int _type = MINUS;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:847:19: ( '-' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:847:21: '-'
            {
                match('-');
            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "LBRACK2"

    // $ANTLR start "STAR"
    public final void mSTAR() throws RecognitionException {
        try {
            int _type = STAR;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:848:19: ( '*' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:848:21: '*'
            {
                match('*');
            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "RBRACK"

    // $ANTLR start "SLASH"
    public final void mSLASH() throws RecognitionException {
        try {
            int _type = SLASH;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:849:19: ( '/' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:849:21: '/'
            {
                match('/');
            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "RBRACK2"

    // $ANTLR start "ASSIGN"
    public final void mASSIGN() throws RecognitionException {
        try {
            int _type = ASSIGN;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:850:19: ( ':=' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:850:21: ':='
            {
                match(":=");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "POINTER2"

    // $ANTLR start "COMMA"
    public final void mCOMMA() throws RecognitionException {
        try {
            int _type = COMMA;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:851:19: ( ',' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:851:21: ','
            {
                match(',');
            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "AT2"

    // $ANTLR start "SEMI"
    public final void mSEMI() throws RecognitionException {
        try {
            int _type = SEMI;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:852:19: ( ';' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:852:21: ';'
            {
                match(';');
            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "DOT"

    // $ANTLR start "COLON"
    public final void mCOLON() throws RecognitionException {
        try {
            int _type = COLON;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:853:19: ( ':' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:853:21: ':'
            {
                match(':');
            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "DOTDOT"

    // $ANTLR start "EQUAL"
    public final void mEQUAL() throws RecognitionException {
        try {
            int _type = EQUAL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:854:19: ( '=' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:854:21: '='
            {
                match('=');
            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "LCURLY"

    // $ANTLR start "NOT_EQUAL"
    public final void mNOT_EQUAL() throws RecognitionException {
        try {
            int _type = NOT_EQUAL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:855:19: ( '<>' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:855:21: '<>'
            {
                match("<>");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "RCURLY"

    // $ANTLR start "LT"
    public final void mLT() throws RecognitionException {
        try {
            int _type = LT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:856:19: ( '<' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:856:21: '<'
            {
                match('<');
            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "TkGlobalFunction"

    // $ANTLR start "LE"
    public final void mLE() throws RecognitionException {
        try {
            int _type = LE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:857:19: ( '<=' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:857:21: '<='
            {
                match("<=");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "TkFunctionName"

    // $ANTLR start "GE"
    public final void mGE() throws RecognitionException {
        try {
            int _type = GE;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:858:19: ( '>=' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:858:21: '>='
            {
                match(">=");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "TkFunctionArgs"

    // $ANTLR start "GT"
    public final void mGT() throws RecognitionException {
        try {
            int _type = GT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:859:19: ( '>' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:859:21: '>'
            {
                match('>');
            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "TkFunctionBody"

    // $ANTLR start "LPAREN"
    public final void mLPAREN() throws RecognitionException {
        try {
            int _type = LPAREN;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:860:19: ( '(' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:860:21: '('
            {
                match('(');
            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "TkFunctionReturn"

    // $ANTLR start "RPAREN"
    public final void mRPAREN() throws RecognitionException {
        try {
            int _type = RPAREN;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:861:19: ( ')' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:861:21: ')'
            {
                match(')');
            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "TkCustomAttribute"

    // $ANTLR start "LBRACK"
    public final void mLBRACK() throws RecognitionException {
        try {
            int _type = LBRACK;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:862:19: ( '[' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:862:21: '['
            {
                match('[');
            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "TkCustomAttributeArgs"

    // $ANTLR start "LBRACK2"
    public final void mLBRACK2() throws RecognitionException {
        try {
            int _type = LBRACK2;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:863:19: ( '(.' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:863:21: '(.'
            {
                match("(.");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "TkNewType"

    // $ANTLR start "RBRACK"
    public final void mRBRACK() throws RecognitionException {
        try {
            int _type = RBRACK;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:864:19: ( ']' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:864:21: ']'
            {
                match(']');
            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "TkClass"

    // $ANTLR start "RBRACK2"
    public final void mRBRACK2() throws RecognitionException {
        try {
            int _type = RBRACK2;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:865:19: ( '.)' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:865:21: '.)'
            {
                match(".)");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "TkRecord"

    // $ANTLR start "POINTER2"
    public final void mPOINTER2() throws RecognitionException {
        try {
            int _type = POINTER2;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:866:19: ( '^' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:866:21: '^'
            {
                match('^');
            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "TkRecordHelper"

    // $ANTLR start "AT2"
    public final void mAT2() throws RecognitionException {
        try {
            int _type = AT2;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:867:19: ( '@' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:867:21: '@'
            {
                match('@');
            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "TkInterface"

    // $ANTLR start "DOT"
    public final void mDOT() throws RecognitionException {
        try {
            int _type = DOT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:868:19: ( '.' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:868:21: '.'
            {
                match('.');
            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "TkObject"

    // $ANTLR start "DOTDOT"
    public final void mDOTDOT() throws RecognitionException {
        try {
            int _type = DOTDOT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:869:19: ( '..' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:869:21: '..'
            {
                match("..");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "TkClassOfType"

    // $ANTLR start "LCURLY"
    public final void mLCURLY() throws RecognitionException {
        try {
            int _type = LCURLY;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:870:19: ( '{' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:870:21: '{'
            {
                match('{');
            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "TkVariableType"

    // $ANTLR start "RCURLY"
    public final void mRCURLY() throws RecognitionException {
        try {
            int _type = RCURLY;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:871:19: ( '}' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:871:21: '}'
            {
                match('}');
            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "TkVariableIdents"

    // $ANTLR start "TkGlobalFunction"
    public final void mTkGlobalFunction() throws RecognitionException {
        try {
            int _type = TkGlobalFunction;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:876:25: ( 'FUNCTION_GLOBAL' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:876:27: 'FUNCTION_GLOBAL'
            {
                match("FUNCTION_GLOBAL");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "TkVariableParam"

    // $ANTLR start "TkFunctionName"
    public final void mTkFunctionName() throws RecognitionException {
        try {
            int _type = TkFunctionName;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:878:25: ( 'FUNCTION_NAME' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:878:27: 'FUNCTION_NAME'
            {
                match("FUNCTION_NAME");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "TkGuid"

    // $ANTLR start "TkFunctionArgs"
    public final void mTkFunctionArgs() throws RecognitionException {
        try {
            int _type = TkFunctionArgs;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:880:25: ( 'FUNCTION_ARGS' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:880:27: 'FUNCTION_ARGS'
            {
                match("FUNCTION_ARGS");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "TkClassParents"

    // $ANTLR start "TkFunctionBody"
    public final void mTkFunctionBody() throws RecognitionException {
        try {
            int _type = TkFunctionBody;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:882:25: ( 'FUNCTION_BODY' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:882:27: 'FUNCTION_BODY'
            {
                match("FUNCTION_BODY");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "TkClassField"

    // $ANTLR start "TkFunctionReturn"
    public final void mTkFunctionReturn() throws RecognitionException {
        try {
            int _type = TkFunctionReturn;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:884:25: ( 'FUNCTION_RETURN' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:884:27: 'FUNCTION_RETURN'
            {
                match("FUNCTION_RETURN");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "TkAnonymousExpression"

    // $ANTLR start "TkCustomAttribute"
    public final void mTkCustomAttribute() throws RecognitionException {
        try {
            int _type = TkCustomAttribute;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:886:25: ( 'CUSTOM_ATTRIBUTE' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:886:27: 'CUSTOM_ATTRIBUTE'
            {
                match("CUSTOM_ATTRIBUTE");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "TkIdentifier"

    // $ANTLR start "TkCustomAttributeArgs"
    public final void mTkCustomAttributeArgs() throws RecognitionException {
        try {
            int _type = TkCustomAttributeArgs;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:888:25: ( 'CUSTOM_ATTRIBUTE_ARGS' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:888:27: 'CUSTOM_ATTRIBUTE_ARGS'
            {
                match("CUSTOM_ATTRIBUTE_ARGS");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "TkIntNum"

    // $ANTLR start "TkNewType"
    public final void mTkNewType() throws RecognitionException {
        try {
            int _type = TkNewType;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:890:25: ( 'NEW_TYPE' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:890:27: 'NEW_TYPE'
            {
                match("NEW_TYPE");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "TkRealNum"

    // $ANTLR start "TkClass"
    public final void mTkClass() throws RecognitionException {
        try {
            int _type = TkClass;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:892:25: ( 'CLASS' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:892:27: 'CLASS'
            {
                match("CLASS");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "TkHexNum"

    // $ANTLR start "TkRecord"
    public final void mTkRecord() throws RecognitionException {
        try {
            int _type = TkRecord;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:894:25: ( 'RECORD_TYPE' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:894:27: 'RECORD_TYPE'
            {
                match("RECORD_TYPE");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "TkAsmHexNum"

    // $ANTLR start "TkRecordHelper"
    public final void mTkRecordHelper() throws RecognitionException {
        try {
            int _type = TkRecordHelper;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:896:25: ( 'RECORD_HELPER' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:896:27: 'RECORD_HELPER'
            {
                match("RECORD_HELPER");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "TkAsmHexLabel"

    // $ANTLR start "TkInterface"
    public final void mTkInterface() throws RecognitionException {
        try {
            int _type = TkInterface;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:898:25: ( 'INTERFACE_TYPE' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:898:27: 'INTERFACE_TYPE'
            {
                match("INTERFACE_TYPE");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "QuotedString"

    // $ANTLR start "TkObject"
    public final void mTkObject() throws RecognitionException {
        try {
            int _type = TkObject;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:900:25: ( 'OBJECT_TYPE' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:900:27: 'OBJECT_TYPE'
            {
                match("OBJECT_TYPE");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "ControlString"

    // $ANTLR start "TkClassOfType"
    public final void mTkClassOfType() throws RecognitionException {
        try {
            int _type = TkClassOfType;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:902:25: ( 'CLASS_OF_TYPE' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:902:27: 'CLASS_OF_TYPE'
            {
                match("CLASS_OF_TYPE");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "Controlchar"

    // $ANTLR start "TkVariableType"
    public final void mTkVariableType() throws RecognitionException {
        try {
            int _type = TkVariableType;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:904:25: ( 'VARIABLE_TYPE' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:904:27: 'VARIABLE_TYPE'
            {
                match("VARIABLE_TYPE");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "Alpha"

    // $ANTLR start "TkVariableIdents"
    public final void mTkVariableIdents() throws RecognitionException {
        try {
            int _type = TkVariableIdents;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:906:25: ( 'VARIABLE_IDENTS' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:906:27: 'VARIABLE_IDENTS'
            {
                match("VARIABLE_IDENTS");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "Digit"

    // $ANTLR start "TkVariableParam"
    public final void mTkVariableParam() throws RecognitionException {
        try {
            int _type = TkVariableParam;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:908:25: ( 'VARIABLE_PARAM' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:908:27: 'VARIABLE_PARAM'
            {
                match("VARIABLE_PARAM");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "Digitseq"

    // $ANTLR start "TkGuid"
    public final void mTkGuid() throws RecognitionException {
        try {
            int _type = TkGuid;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:910:25: ( 'INTERFACE_GUID' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:910:27: 'INTERFACE_GUID'
            {
                match("INTERFACE_GUID");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "Hexdigit"

    // $ANTLR start "TkClassParents"
    public final void mTkClassParents() throws RecognitionException {
        try {
            int _type = TkClassParents;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:912:25: ( 'CLASS_PARENTS' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:912:27: 'CLASS_PARENTS'
            {
                match("CLASS_PARENTS");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "Hexdigitseq"

    // $ANTLR start "TkClassField"
    public final void mTkClassField() throws RecognitionException {
        try {
            int _type = TkClassField;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:914:25: ( 'CLASS_FIELD' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:914:27: 'CLASS_FIELD'
            {
                match("CLASS_FIELD");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "COMMENT"

    // $ANTLR start "TkAnonymousExpression"
    public final void mTkAnonymousExpression() throws RecognitionException {
        try {
            int _type = TkAnonymousExpression;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:916:25: ( 'ANONYMOUS_EXPRESSION' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:916:27: 'ANONYMOUS_EXPRESSION'
            {
                match("ANONYMOUS_EXPRESSION");

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "WS"

    // $ANTLR start "TkIdentifier"
    public final void mTkIdentifier() throws RecognitionException {
        try {
            int _type = TkIdentifier;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:918:25: ( ( Alpha | '_' ) ( Alpha | Digit | '_' )* )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:918:27: ( Alpha | '_' ) ( Alpha | Digit | '_' )*
            {
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:918:27: ( Alpha | '_' )
                int alt1 = 2;
                int LA1_0 = input.LA(1);
                if (((LA1_0 >= 'A' && LA1_0 <= 'Z') || (LA1_0 >= 'a' && LA1_0 <= 'z') || (LA1_0 >= '\u0080' && LA1_0 <= '\uFFFE'))) {
                    alt1 = 1;
                } else if ((LA1_0 == '_')) {
                    alt1 = 2;
                } else {
                    NoViableAltException nvae =
                            new NoViableAltException("", 1, 0, input);
                    throw nvae;
                }

                switch (alt1) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:918:28: Alpha
                    {
                        mAlpha();

                    }
                    break;
                    case 2:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:918:36: '_'
                    {
                        match('_');
                    }
                    break;

                }

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:918:41: ( Alpha | Digit | '_' )*
                loop2:
                while (true) {
                    int alt2 = 4;
                    int LA2_0 = input.LA(1);
                    if (((LA2_0 >= 'A' && LA2_0 <= 'Z') || (LA2_0 >= 'a' && LA2_0 <= 'z') || (LA2_0 >= '\u0080' && LA2_0 <= '\uFFFE'))) {
                        alt2 = 1;
                    } else if (((LA2_0 >= '0' && LA2_0 <= '9'))) {
                        alt2 = 2;
                    } else if ((LA2_0 == '_')) {
                        alt2 = 3;
                    }

                    switch (alt2) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:918:42: Alpha
                        {
                            mAlpha();

                        }
                        break;
                        case 2:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:918:50: Digit
                        {
                            mDigit();

                        }
                        break;
                        case 3:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:918:58: '_'
                        {
                            match('_');
                        }
                        break;

                        default:
                            break loop2;
                    }
                }

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }
    // $ANTLR end "UnicodeBOM"

    // $ANTLR start "TkIntNum"
    public final void mTkIntNum() throws RecognitionException {
        try {
            int _type = TkIntNum;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:920:25: ( Digitseq )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:920:27: Digitseq
            {
                mDigitseq();

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }

    // $ANTLR start "TkRealNum"
    public final void mTkRealNum() throws RecognitionException {
        try {
            int _type = TkRealNum;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:922:25: ( Digitseq ( '.' Digitseq )? ( ( 'e' | 'E' ) ( '+' | '-' )? Digitseq )? )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:922:27: Digitseq ( '.' Digitseq )? ( ( 'e' | 'E' ) ( '+' | '-' )? Digitseq )?
            {
                mDigitseq();

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:922:36: ( '.' Digitseq )?
                int alt3 = 2;
                int LA3_0 = input.LA(1);
                if ((LA3_0 == '.')) {
                    alt3 = 1;
                }
                switch (alt3) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:922:37: '.' Digitseq
                    {
                        match('.');
                        mDigitseq();

                    }
                    break;

                }

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:922:52: ( ( 'e' | 'E' ) ( '+' | '-' )? Digitseq )?
                int alt5 = 2;
                int LA5_0 = input.LA(1);
                if ((LA5_0 == 'E' || LA5_0 == 'e')) {
                    alt5 = 1;
                }
                switch (alt5) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:922:53: ( 'e' | 'E' ) ( '+' | '-' )? Digitseq
                    {
                        if (input.LA(1) == 'E' || input.LA(1) == 'e') {
                            input.consume();
                        } else {
                            MismatchedSetException mse = new MismatchedSetException(null, input);
                            recover(mse);
                            throw mse;
                        }
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:922:63: ( '+' | '-' )?
                        int alt4 = 2;
                        int LA4_0 = input.LA(1);
                        if ((LA4_0 == '+' || LA4_0 == '-')) {
                            alt4 = 1;
                        }
                        switch (alt4) {
                            case 1:
                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
                            {
                                if (input.LA(1) == '+' || input.LA(1) == '-') {
                                    input.consume();
                                } else {
                                    MismatchedSetException mse = new MismatchedSetException(null, input);
                                    recover(mse);
                                    throw mse;
                                }
                            }
                            break;

                        }

                        mDigitseq();

                    }
                    break;

                }

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }

    // $ANTLR start "TkHexNum"
    public final void mTkHexNum() throws RecognitionException {
        try {
            int _type = TkHexNum;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:924:25: ( '$' Hexdigitseq )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:924:27: '$' Hexdigitseq
            {
                match('$');
                mHexdigitseq();

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }

    // $ANTLR start "TkAsmHexNum"
    public final void mTkAsmHexNum() throws RecognitionException {
        try {
            int _type = TkAsmHexNum;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:926:25: ( Hexdigitseq ( 'h' | 'H' ) )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:926:27: Hexdigitseq ( 'h' | 'H' )
            {
                mHexdigitseq();

                if (input.LA(1) == 'H' || input.LA(1) == 'h') {
                    input.consume();
                } else {
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    recover(mse);
                    throw mse;
                }
            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }

    // $ANTLR start "TkAsmHexLabel"
    public final void mTkAsmHexLabel() throws RecognitionException {
        try {
            int _type = TkAsmHexLabel;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:928:25: ( Hexdigitseq ':' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:928:27: Hexdigitseq ':'
            {
                mHexdigitseq();

                match(':');
            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }

    // $ANTLR start "QuotedString"
    public final void mQuotedString() throws RecognitionException {
        try {
            int _type = QuotedString;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:930:25: ( '\\'' ( '\\'\\'' |~ ( '\\'' ) )* '\\'' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:930:27: '\\'' ( '\\'\\'' |~ ( '\\'' ) )* '\\''
            {
                match('\'');
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:930:32: ( '\\'\\'' |~ ( '\\'' ) )*
                loop6:
                while (true) {
                    int alt6 = 3;
                    int LA6_0 = input.LA(1);
                    if ((LA6_0 == '\'')) {
                        int LA6_1 = input.LA(2);
                        if ((LA6_1 == '\'')) {
                            alt6 = 1;
                        }

                    } else if (((LA6_0 >= '\u0000' && LA6_0 <= '&') || (LA6_0 >= '(' && LA6_0 <= '\uFFFF'))) {
                        alt6 = 2;
                    }

                    switch (alt6) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:930:33: '\\'\\''
                        {
                            match("''");

                        }
                        break;
                        case 2:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:930:42: ~ ( '\\'' )
                        {
                            if ((input.LA(1) >= '\u0000' && input.LA(1) <= '&') || (input.LA(1) >= '(' && input.LA(1) <= '\uFFFF')) {
                                input.consume();
                            } else {
                                MismatchedSetException mse = new MismatchedSetException(null, input);
                                recover(mse);
                                throw mse;
                            }
                        }
                        break;

                        default:
                            break loop6;
                    }
                }

                match('\'');
            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }

    // $ANTLR start "ControlString"
    public final void mControlString() throws RecognitionException {
        try {
            int _type = ControlString;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:932:25: ( Controlchar ( Controlchar )* )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:932:27: Controlchar ( Controlchar )*
            {
                mControlchar();

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:932:39: ( Controlchar )*
                loop7:
                while (true) {
                    int alt7 = 2;
                    int LA7_0 = input.LA(1);
                    if ((LA7_0 == '#')) {
                        alt7 = 1;
                    }

                    switch (alt7) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:932:40: Controlchar
                        {
                            mControlchar();

                        }
                        break;

                        default:
                            break loop7;
                    }
                }

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }

    // $ANTLR start "Controlchar"
    public final void mControlchar() throws RecognitionException {
        try {
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:937:25: ( '#' Digitseq | '#' '$' Hexdigitseq )
            int alt8 = 2;
            int LA8_0 = input.LA(1);
            if ((LA8_0 == '#')) {
                int LA8_1 = input.LA(2);
                if ((LA8_1 == '$')) {
                    alt8 = 2;
                } else if (((LA8_1 >= '0' && LA8_1 <= '9'))) {
                    alt8 = 1;
                } else {
                    int nvaeMark = input.mark();
                    try {
                        input.consume();
                        NoViableAltException nvae =
                                new NoViableAltException("", 8, 1, input);
                        throw nvae;
                    } finally {
                        input.rewind(nvaeMark);
                    }
                }

            } else {
                NoViableAltException nvae =
                        new NoViableAltException("", 8, 0, input);
                throw nvae;
            }

            switch (alt8) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:937:27: '#' Digitseq
                {
                    match('#');
                    mDigitseq();

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:938:27: '#' '$' Hexdigitseq
                {
                    match('#');
                    match('$');
                    mHexdigitseq();

                }
                break;

            }
        } finally {
            // do for sure before leaving
        }
    }

    // $ANTLR start "Alpha"
    public final void mAlpha() throws RecognitionException {
        try {
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:941:25: ( 'a' .. 'z' | 'A' .. 'Z' | '\\u0080' .. '\\uFFFE' ~ ( '\\uFEFF' ) )
            int alt9 = 3;
            int LA9_0 = input.LA(1);
            if (((LA9_0 >= 'a' && LA9_0 <= 'z'))) {
                alt9 = 1;
            } else if (((LA9_0 >= 'A' && LA9_0 <= 'Z'))) {
                alt9 = 2;
            } else if (((LA9_0 >= '\u0080' && LA9_0 <= '\uFFFE'))) {
                alt9 = 3;
            } else {
                NoViableAltException nvae =
                        new NoViableAltException("", 9, 0, input);
                throw nvae;
            }

            switch (alt9) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:941:27: 'a' .. 'z'
                {
                    matchRange('a', 'z');
                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:942:27: 'A' .. 'Z'
                {
                    matchRange('A', 'Z');
                }
                break;
                case 3:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:943:27: '\\u0080' .. '\\uFFFE' ~ ( '\\uFEFF' )
                {
                    matchRange('\u0080', '\uFFFE');
                    if ((input.LA(1) >= '\u0000' && input.LA(1) <= '\uFEFE') || (input.LA(1) >= '\uFF00' && input.LA(1) <= '\uFFFF')) {
                        input.consume();
                    } else {
                        MismatchedSetException mse = new MismatchedSetException(null, input);
                        recover(mse);
                        throw mse;
                    }
                }
                break;

            }
        } finally {
            // do for sure before leaving
        }
    }

    // $ANTLR start "Digit"
    public final void mDigit() throws RecognitionException {
        try {
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:946:25: ( '0' .. '9' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
            {
                if ((input.LA(1) >= '0' && input.LA(1) <= '9')) {
                    input.consume();
                } else {
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    recover(mse);
                    throw mse;
                }
            }

        } finally {
            // do for sure before leaving
        }
    }

    // $ANTLR start "Digitseq"
    public final void mDigitseq() throws RecognitionException {
        try {
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:949:25: ( Digit ( Digit )* )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:949:27: Digit ( Digit )*
            {
                mDigit();

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:949:33: ( Digit )*
                loop10:
                while (true) {
                    int alt10 = 2;
                    int LA10_0 = input.LA(1);
                    if (((LA10_0 >= '0' && LA10_0 <= '9'))) {
                        alt10 = 1;
                    }

                    switch (alt10) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
                        {
                            if ((input.LA(1) >= '0' && input.LA(1) <= '9')) {
                                input.consume();
                            } else {
                                MismatchedSetException mse = new MismatchedSetException(null, input);
                                recover(mse);
                                throw mse;
                            }
                        }
                        break;

                        default:
                            break loop10;
                    }
                }

            }

        } finally {
            // do for sure before leaving
        }
    }

    // $ANTLR start "Hexdigit"
    public final void mHexdigit() throws RecognitionException {
        try {
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:952:25: ( Digit | 'a' .. 'f' | 'A' .. 'F' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
            {
                if ((input.LA(1) >= '0' && input.LA(1) <= '9') || (input.LA(1) >= 'A' && input.LA(1) <= 'F') || (input.LA(1) >= 'a' && input.LA(1) <= 'f')) {
                    input.consume();
                } else {
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    recover(mse);
                    throw mse;
                }
            }

        } finally {
            // do for sure before leaving
        }
    }

    // $ANTLR start "Hexdigitseq"
    public final void mHexdigitseq() throws RecognitionException {
        try {
            int _type = Hexdigitseq;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:953:25: ( Hexdigit ( Hexdigit )* )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:953:27: Hexdigit ( Hexdigit )*
            {
                mHexdigit();

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:953:36: ( Hexdigit )*
                loop11:
                while (true) {
                    int alt11 = 2;
                    int LA11_0 = input.LA(1);
                    if (((LA11_0 >= '0' && LA11_0 <= '9') || (LA11_0 >= 'A' && LA11_0 <= 'F') || (LA11_0 >= 'a' && LA11_0 <= 'f'))) {
                        alt11 = 1;
                    }

                    switch (alt11) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
                        {
                            if ((input.LA(1) >= '0' && input.LA(1) <= '9') || (input.LA(1) >= 'A' && input.LA(1) <= 'F') || (input.LA(1) >= 'a' && input.LA(1) <= 'f')) {
                                input.consume();
                            } else {
                                MismatchedSetException mse = new MismatchedSetException(null, input);
                                recover(mse);
                                throw mse;
                            }
                        }
                        break;

                        default:
                            break loop11;
                    }
                }

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }

    // $ANTLR start "COMMENT"
    public final void mCOMMENT() throws RecognitionException {
        try {
            int _type = COMMENT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:955:25: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' | '(*' ( options {greedy=false; } : . )* '*)' | '{' ( options {greedy=false; } : . )* '}' )
            int alt16 = 3;
            switch (input.LA(1)) {
                case '/': {
                    alt16 = 1;
                }
                break;
                case '(': {
                    alt16 = 2;
                }
                break;
                case '{': {
                    alt16 = 3;
                }
                break;
                default:
                    NoViableAltException nvae =
                            new NoViableAltException("", 16, 0, input);
                    throw nvae;
            }
            switch (alt16) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:955:28: '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n'
                {
                    match("//");

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:955:33: (~ ( '\\n' | '\\r' ) )*
                    loop12:
                    while (true) {
                        int alt12 = 2;
                        int LA12_0 = input.LA(1);
                        if (((LA12_0 >= '\u0000' && LA12_0 <= '\t') || (LA12_0 >= '\u000B' && LA12_0 <= '\f') || (LA12_0 >= '\u000E' && LA12_0 <= '\uFFFF'))) {
                            alt12 = 1;
                        }

                        switch (alt12) {
                            case 1:
                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
                            {
                                if ((input.LA(1) >= '\u0000' && input.LA(1) <= '\t') || (input.LA(1) >= '\u000B' && input.LA(1) <= '\f') || (input.LA(1) >= '\u000E' && input.LA(1) <= '\uFFFF')) {
                                    input.consume();
                                } else {
                                    MismatchedSetException mse = new MismatchedSetException(null, input);
                                    recover(mse);
                                    throw mse;
                                }
                            }
                            break;

                            default:
                                break loop12;
                        }
                    }

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:955:47: ( '\\r' )?
                    int alt13 = 2;
                    int LA13_0 = input.LA(1);
                    if ((LA13_0 == '\r')) {
                        alt13 = 1;
                    }
                    switch (alt13) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:955:47: '\\r'
                        {
                            match('\r');
                        }
                        break;

                    }

                    match('\n');
                    _channel = HIDDEN;
                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:956:28: '(*' ( options {greedy=false; } : . )* '*)'
                {
                    match("(*");

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:956:33: ( options {greedy=false; } : . )*
                    loop14:
                    while (true) {
                        int alt14 = 2;
                        int LA14_0 = input.LA(1);
                        if ((LA14_0 == '*')) {
                            int LA14_1 = input.LA(2);
                            if ((LA14_1 == ')')) {
                                alt14 = 2;
                            } else if (((LA14_1 >= '\u0000' && LA14_1 <= '(') || (LA14_1 >= '*' && LA14_1 <= '\uFFFF'))) {
                                alt14 = 1;
                            }

                        } else if (((LA14_0 >= '\u0000' && LA14_0 <= ')') || (LA14_0 >= '+' && LA14_0 <= '\uFFFF'))) {
                            alt14 = 1;
                        }

                        switch (alt14) {
                            case 1:
                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:956:61: .
                            {
                                matchAny();
                            }
                            break;

                            default:
                                break loop14;
                        }
                    }

                    match("*)");

                    _channel = HIDDEN;
                }
                break;
                case 3:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:957:28: '{' ( options {greedy=false; } : . )* '}'
                {
                    match('{');
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:957:32: ( options {greedy=false; } : . )*
                    loop15:
                    while (true) {
                        int alt15 = 2;
                        int LA15_0 = input.LA(1);
                        if ((LA15_0 == '}')) {
                            alt15 = 2;
                        } else if (((LA15_0 >= '\u0000' && LA15_0 <= '|') || (LA15_0 >= '~' && LA15_0 <= '\uFFFF'))) {
                            alt15 = 1;
                        }

                        switch (alt15) {
                            case 1:
                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:957:60: .
                            {
                                matchAny();
                            }
                            break;

                            default:
                                break loop15;
                        }
                    }

                    match('}');
                    _channel = HIDDEN;
                }
                break;

            }
            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }

    // $ANTLR start "WS"
    public final void mWS() throws RecognitionException {
        try {
            int _type = WS;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:959:25: ( ( ' ' | '\\t' | '\\r' | '\\n' | '\\f' )+ )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:959:27: ( ' ' | '\\t' | '\\r' | '\\n' | '\\f' )+
            {
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:959:27: ( ' ' | '\\t' | '\\r' | '\\n' | '\\f' )+
                int cnt17 = 0;
                loop17:
                while (true) {
                    int alt17 = 2;
                    int LA17_0 = input.LA(1);
                    if (((LA17_0 >= '\t' && LA17_0 <= '\n') || (LA17_0 >= '\f' && LA17_0 <= '\r') || LA17_0 == ' ')) {
                        alt17 = 1;
                    }

                    switch (alt17) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
                        {
                            if ((input.LA(1) >= '\t' && input.LA(1) <= '\n') || (input.LA(1) >= '\f' && input.LA(1) <= '\r') || input.LA(1) == ' ') {
                                input.consume();
                            } else {
                                MismatchedSetException mse = new MismatchedSetException(null, input);
                                recover(mse);
                                throw mse;
                            }
                        }
                        break;

                        default:
                            if (cnt17 >= 1) break loop17;
                            EarlyExitException eee = new EarlyExitException(17, input);
                            throw eee;
                    }
                    cnt17++;
                }

                _channel = HIDDEN;
            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }

    // $ANTLR start "UnicodeBOM"
    public final void mUnicodeBOM() throws RecognitionException {
        try {
            int _type = UnicodeBOM;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:961:25: ( '\\uFEFF' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:961:27: '\\uFEFF'
            {
                match('\uFEFF');
                _channel = HIDDEN;
            }

            state.type = _type;
            state.channel = _channel;
        } finally {
            // do for sure before leaving
        }
    }

    @Override
    public void mTokens() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:8: ( T__200 | T__201 | ABSOLUTE | ABSTRACT | ADD | AND | ANSISTRING | ARRAY | AS | ASM | ASSEMBLER | ASSEMBLY | AT | AUTOMATED | BEGIN | BREAK | CASE | CDECL | CLASS | CONST | CONSTRUCTOR | CONTAINS | CONTINUE | DEFAULT | DEPRECATED | DESTRUCTOR | DISPID | DISPINTERFACE | DIV | DO | DOWNTO | DQ | DW | DYNAMIC | ELSE | END | EXCEPT | EXIT | EXPERIMENTAL | EXPORT | EXPORTS | EXTERNAL | FAR | FILE | FINAL | FINALIZATION | FINALLY | FOR | FORWARD | FUNCTION | GOTO | HELPER | IF | IMPLEMENTATION | IMPLEMENTS | IN | INDEX | INHERITED | INITIALIZATION | INLINE | INTERFACE | IS | LABEL | LIBRARY | LOCAL | MESSAGE | MOD | NAME | NEAR | NIL | NODEFAULT | NOT | OBJECT | OF | ON | OPERATOR | OR | OUT | OVERLOAD | OVERRIDE | PACKAGE | PACKED | PASCAL | PLATFORM | POINTER | PRIVATE | PROCEDURE | PROGRAM | PROPERTY | PROTECTED | PUBLIC | PUBLISHED | RAISE | READ | READONLY | RECORD | REFERENCE | REGISTER | REINTRODUCE | REMOVE | REPEAT | REQUIRES | RESIDENT | RESOURCESTRING | SAFECALL | SEALED | SET | SHL | SHR | STATIC | STDCALL | STORED | STRICT | STRING | THEN | THREADVAR | TO | TRY | TYPE | UNIT | UNSAFE | UNTIL | USES | VAR | VARARGS | VARIANT | VIRTUAL | WHILE | WITH | WRITE | WRITEONLY | XOR | FALSE | TRUE | PLUS | MINUS | STAR | SLASH | ASSIGN | COMMA | SEMI | COLON | EQUAL | NOT_EQUAL | LT | LE | GE | GT | LPAREN | RPAREN | LBRACK | LBRACK2 | RBRACK | RBRACK2 | POINTER2 | AT2 | DOT | DOTDOT | LCURLY | RCURLY | TkGlobalFunction | TkFunctionName | TkFunctionArgs | TkFunctionBody | TkFunctionReturn | TkCustomAttribute | TkCustomAttributeArgs | TkNewType | TkClass | TkRecord | TkRecordHelper | TkInterface | TkObject | TkClassOfType | TkVariableType | TkVariableIdents | TkVariableParam | TkGuid | TkClassParents | TkClassField | TkAnonymousExpression | TkIdentifier | TkIntNum | TkRealNum | TkHexNum | TkAsmHexNum | TkAsmHexLabel | QuotedString | ControlString | Hexdigitseq | COMMENT | WS | UnicodeBOM )
        int alt18 = 193;
        alt18 = dfa18.predict(input);
        switch (alt18) {
            case 1:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:10: T__200
            {
                mT__200();

            }
            break;
            case 2:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:17: T__201
            {
                mT__201();

            }
            break;
            case 3:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:24: ABSOLUTE
            {
                mABSOLUTE();

            }
            break;
            case 4:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:33: ABSTRACT
            {
                mABSTRACT();

            }
            break;
            case 5:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:42: ADD
            {
                mADD();

            }
            break;
            case 6:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:46: AND
            {
                mAND();

            }
            break;
            case 7:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:50: ANSISTRING
            {
                mANSISTRING();

            }
            break;
            case 8:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:61: ARRAY
            {
                mARRAY();

            }
            break;
            case 9:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:67: AS
            {
                mAS();

            }
            break;
            case 10:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:70: ASM
            {
                mASM();

            }
            break;
            case 11:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:74: ASSEMBLER
            {
                mASSEMBLER();

            }
            break;
            case 12:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:84: ASSEMBLY
            {
                mASSEMBLY();

            }
            break;
            case 13:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:93: AT
            {
                mAT();

            }
            break;
            case 14:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:96: AUTOMATED
            {
                mAUTOMATED();

            }
            break;
            case 15:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:106: BEGIN
            {
                mBEGIN();

            }
            break;
            case 16:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:112: BREAK
            {
                mBREAK();

            }
            break;
            case 17:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:118: CASE
            {
                mCASE();

            }
            break;
            case 18:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:123: CDECL
            {
                mCDECL();

            }
            break;
            case 19:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:129: CLASS
            {
                mCLASS();

            }
            break;
            case 20:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:135: CONST
            {
                mCONST();

            }
            break;
            case 21:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:141: CONSTRUCTOR
            {
                mCONSTRUCTOR();

            }
            break;
            case 22:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:153: CONTAINS
            {
                mCONTAINS();

            }
            break;
            case 23:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:162: CONTINUE
            {
                mCONTINUE();

            }
            break;
            case 24:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:171: DEFAULT
            {
                mDEFAULT();

            }
            break;
            case 25:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:179: DEPRECATED
            {
                mDEPRECATED();

            }
            break;
            case 26:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:190: DESTRUCTOR
            {
                mDESTRUCTOR();

            }
            break;
            case 27:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:201: DISPID
            {
                mDISPID();

            }
            break;
            case 28:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:208: DISPINTERFACE
            {
                mDISPINTERFACE();

            }
            break;
            case 29:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:222: DIV
            {
                mDIV();

            }
            break;
            case 30:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:226: DO
            {
                mDO();

            }
            break;
            case 31:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:229: DOWNTO
            {
                mDOWNTO();

            }
            break;
            case 32:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:236: DQ
            {
                mDQ();

            }
            break;
            case 33:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:239: DW
            {
                mDW();

            }
            break;
            case 34:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:242: DYNAMIC
            {
                mDYNAMIC();

            }
            break;
            case 35:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:250: ELSE
            {
                mELSE();

            }
            break;
            case 36:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:255: END
            {
                mEND();

            }
            break;
            case 37:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:259: EXCEPT
            {
                mEXCEPT();

            }
            break;
            case 38:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:266: EXIT
            {
                mEXIT();

            }
            break;
            case 39:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:271: EXPERIMENTAL
            {
                mEXPERIMENTAL();

            }
            break;
            case 40:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:284: EXPORT
            {
                mEXPORT();

            }
            break;
            case 41:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:291: EXPORTS
            {
                mEXPORTS();

            }
            break;
            case 42:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:299: EXTERNAL
            {
                mEXTERNAL();

            }
            break;
            case 43:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:308: FAR
            {
                mFAR();

            }
            break;
            case 44:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:312: FILE
            {
                mFILE();

            }
            break;
            case 45:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:317: FINAL
            {
                mFINAL();

            }
            break;
            case 46:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:323: FINALIZATION
            {
                mFINALIZATION();

            }
            break;
            case 47:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:336: FINALLY
            {
                mFINALLY();

            }
            break;
            case 48:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:344: FOR
            {
                mFOR();

            }
            break;
            case 49:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:348: FORWARD
            {
                mFORWARD();

            }
            break;
            case 50:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:356: FUNCTION
            {
                mFUNCTION();

            }
            break;
            case 51:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:365: GOTO
            {
                mGOTO();

            }
            break;
            case 52:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:370: HELPER
            {
                mHELPER();

            }
            break;
            case 53:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:377: IF
            {
                mIF();

            }
            break;
            case 54:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:380: IMPLEMENTATION
            {
                mIMPLEMENTATION();

            }
            break;
            case 55:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:395: IMPLEMENTS
            {
                mIMPLEMENTS();

            }
            break;
            case 56:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:406: IN
            {
                mIN();

            }
            break;
            case 57:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:409: INDEX
            {
                mINDEX();

            }
            break;
            case 58:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:415: INHERITED
            {
                mINHERITED();

            }
            break;
            case 59:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:425: INITIALIZATION
            {
                mINITIALIZATION();

            }
            break;
            case 60:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:440: INLINE
            {
                mINLINE();

            }
            break;
            case 61:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:447: INTERFACE
            {
                mINTERFACE();

            }
            break;
            case 62:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:457: IS
            {
                mIS();

            }
            break;
            case 63:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:460: LABEL
            {
                mLABEL();

            }
            break;
            case 64:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:466: LIBRARY
            {
                mLIBRARY();

            }
            break;
            case 65:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:474: LOCAL
            {
                mLOCAL();

            }
            break;
            case 66:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:480: MESSAGE
            {
                mMESSAGE();

            }
            break;
            case 67:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:488: MOD
            {
                mMOD();

            }
            break;
            case 68:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:492: NAME
            {
                mNAME();

            }
            break;
            case 69:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:497: NEAR
            {
                mNEAR();

            }
            break;
            case 70:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:502: NIL
            {
                mNIL();

            }
            break;
            case 71:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:506: NODEFAULT
            {
                mNODEFAULT();

            }
            break;
            case 72:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:516: NOT
            {
                mNOT();

            }
            break;
            case 73:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:520: OBJECT
            {
                mOBJECT();

            }
            break;
            case 74:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:527: OF
            {
                mOF();

            }
            break;
            case 75:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:530: ON
            {
                mON();

            }
            break;
            case 76:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:533: OPERATOR
            {
                mOPERATOR();

            }
            break;
            case 77:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:542: OR
            {
                mOR();

            }
            break;
            case 78:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:545: OUT
            {
                mOUT();

            }
            break;
            case 79:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:549: OVERLOAD
            {
                mOVERLOAD();

            }
            break;
            case 80:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:558: OVERRIDE
            {
                mOVERRIDE();

            }
            break;
            case 81:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:567: PACKAGE
            {
                mPACKAGE();

            }
            break;
            case 82:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:575: PACKED
            {
                mPACKED();

            }
            break;
            case 83:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:582: PASCAL
            {
                mPASCAL();

            }
            break;
            case 84:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:589: PLATFORM
            {
                mPLATFORM();

            }
            break;
            case 85:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:598: POINTER
            {
                mPOINTER();

            }
            break;
            case 86:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:606: PRIVATE
            {
                mPRIVATE();

            }
            break;
            case 87:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:614: PROCEDURE
            {
                mPROCEDURE();

            }
            break;
            case 88:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:624: PROGRAM
            {
                mPROGRAM();

            }
            break;
            case 89:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:632: PROPERTY
            {
                mPROPERTY();

            }
            break;
            case 90:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:641: PROTECTED
            {
                mPROTECTED();

            }
            break;
            case 91:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:651: PUBLIC
            {
                mPUBLIC();

            }
            break;
            case 92:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:658: PUBLISHED
            {
                mPUBLISHED();

            }
            break;
            case 93:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:668: RAISE
            {
                mRAISE();

            }
            break;
            case 94:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:674: READ
            {
                mREAD();

            }
            break;
            case 95:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:679: READONLY
            {
                mREADONLY();

            }
            break;
            case 96:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:688: RECORD
            {
                mRECORD();

            }
            break;
            case 97:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:695: REFERENCE
            {
                mREFERENCE();

            }
            break;
            case 98:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:705: REGISTER
            {
                mREGISTER();

            }
            break;
            case 99:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:714: REINTRODUCE
            {
                mREINTRODUCE();

            }
            break;
            case 100:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:726: REMOVE
            {
                mREMOVE();

            }
            break;
            case 101:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:733: REPEAT
            {
                mREPEAT();

            }
            break;
            case 102:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:740: REQUIRES
            {
                mREQUIRES();

            }
            break;
            case 103:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:749: RESIDENT
            {
                mRESIDENT();

            }
            break;
            case 104:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:758: RESOURCESTRING
            {
                mRESOURCESTRING();

            }
            break;
            case 105:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:773: SAFECALL
            {
                mSAFECALL();

            }
            break;
            case 106:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:782: SEALED
            {
                mSEALED();

            }
            break;
            case 107:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:789: SET
            {
                mSET();

            }
            break;
            case 108:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:793: SHL
            {
                mSHL();

            }
            break;
            case 109:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:797: SHR
            {
                mSHR();

            }
            break;
            case 110:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:801: STATIC
            {
                mSTATIC();

            }
            break;
            case 111:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:808: STDCALL
            {
                mSTDCALL();

            }
            break;
            case 112:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:816: STORED
            {
                mSTORED();

            }
            break;
            case 113:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:823: STRICT
            {
                mSTRICT();

            }
            break;
            case 114:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:830: STRING
            {
                mSTRING();

            }
            break;
            case 115:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:837: THEN
            {
                mTHEN();

            }
            break;
            case 116:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:842: THREADVAR
            {
                mTHREADVAR();

            }
            break;
            case 117:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:852: TO
            {
                mTO();

            }
            break;
            case 118:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:855: TRY
            {
                mTRY();

            }
            break;
            case 119:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:859: TYPE
            {
                mTYPE();

            }
            break;
            case 120:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:864: UNIT
            {
                mUNIT();

            }
            break;
            case 121:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:869: UNSAFE
            {
                mUNSAFE();

            }
            break;
            case 122:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:876: UNTIL
            {
                mUNTIL();

            }
            break;
            case 123:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:882: USES
            {
                mUSES();

            }
            break;
            case 124:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:887: VAR
            {
                mVAR();

            }
            break;
            case 125:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:891: VARARGS
            {
                mVARARGS();

            }
            break;
            case 126:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:899: VARIANT
            {
                mVARIANT();

            }
            break;
            case 127:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:907: VIRTUAL
            {
                mVIRTUAL();

            }
            break;
            case 128:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:915: WHILE
            {
                mWHILE();

            }
            break;
            case 129:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:921: WITH
            {
                mWITH();

            }
            break;
            case 130:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:926: WRITE
            {
                mWRITE();

            }
            break;
            case 131:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:932: WRITEONLY
            {
                mWRITEONLY();

            }
            break;
            case 132:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:942: XOR
            {
                mXOR();

            }
            break;
            case 133:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:946: FALSE
            {
                mFALSE();

            }
            break;
            case 134:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:952: TRUE
            {
                mTRUE();

            }
            break;
            case 135:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:957: PLUS
            {
                mPLUS();

            }
            break;
            case 136:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:962: MINUS
            {
                mMINUS();

            }
            break;
            case 137:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:968: STAR
            {
                mSTAR();

            }
            break;
            case 138:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:973: SLASH
            {
                mSLASH();

            }
            break;
            case 139:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:979: ASSIGN
            {
                mASSIGN();

            }
            break;
            case 140:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:986: COMMA
            {
                mCOMMA();

            }
            break;
            case 141:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:992: SEMI
            {
                mSEMI();

            }
            break;
            case 142:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:997: COLON
            {
                mCOLON();

            }
            break;
            case 143:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1003: EQUAL
            {
                mEQUAL();

            }
            break;
            case 144:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1009: NOT_EQUAL
            {
                mNOT_EQUAL();

            }
            break;
            case 145:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1019: LT
            {
                mLT();

            }
            break;
            case 146:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1022: LE
            {
                mLE();

            }
            break;
            case 147:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1025: GE
            {
                mGE();

            }
            break;
            case 148:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1028: GT
            {
                mGT();

            }
            break;
            case 149:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1031: LPAREN
            {
                mLPAREN();

            }
            break;
            case 150:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1038: RPAREN
            {
                mRPAREN();

            }
            break;
            case 151:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1045: LBRACK
            {
                mLBRACK();

            }
            break;
            case 152:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1052: LBRACK2
            {
                mLBRACK2();

            }
            break;
            case 153:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1060: RBRACK
            {
                mRBRACK();

            }
            break;
            case 154:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1067: RBRACK2
            {
                mRBRACK2();

            }
            break;
            case 155:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1075: POINTER2
            {
                mPOINTER2();

            }
            break;
            case 156:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1084: AT2
            {
                mAT2();

            }
            break;
            case 157:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1088: DOT
            {
                mDOT();

            }
            break;
            case 158:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1092: DOTDOT
            {
                mDOTDOT();

            }
            break;
            case 159:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1099: LCURLY
            {
                mLCURLY();

            }
            break;
            case 160:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1106: RCURLY
            {
                mRCURLY();

            }
            break;
            case 161:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1113: TkGlobalFunction
            {
                mTkGlobalFunction();

            }
            break;
            case 162:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1130: TkFunctionName
            {
                mTkFunctionName();

            }
            break;
            case 163:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1145: TkFunctionArgs
            {
                mTkFunctionArgs();

            }
            break;
            case 164:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1160: TkFunctionBody
            {
                mTkFunctionBody();

            }
            break;
            case 165:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1175: TkFunctionReturn
            {
                mTkFunctionReturn();

            }
            break;
            case 166:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1192: TkCustomAttribute
            {
                mTkCustomAttribute();

            }
            break;
            case 167:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1210: TkCustomAttributeArgs
            {
                mTkCustomAttributeArgs();

            }
            break;
            case 168:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1232: TkNewType
            {
                mTkNewType();

            }
            break;
            case 169:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1242: TkClass
            {
                mTkClass();

            }
            break;
            case 170:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1250: TkRecord
            {
                mTkRecord();

            }
            break;
            case 171:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1259: TkRecordHelper
            {
                mTkRecordHelper();

            }
            break;
            case 172:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1274: TkInterface
            {
                mTkInterface();

            }
            break;
            case 173:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1286: TkObject
            {
                mTkObject();

            }
            break;
            case 174:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1295: TkClassOfType
            {
                mTkClassOfType();

            }
            break;
            case 175:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1309: TkVariableType
            {
                mTkVariableType();

            }
            break;
            case 176:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1324: TkVariableIdents
            {
                mTkVariableIdents();

            }
            break;
            case 177:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1341: TkVariableParam
            {
                mTkVariableParam();

            }
            break;
            case 178:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1357: TkGuid
            {
                mTkGuid();

            }
            break;
            case 179:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1364: TkClassParents
            {
                mTkClassParents();

            }
            break;
            case 180:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1379: TkClassField
            {
                mTkClassField();

            }
            break;
            case 181:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1392: TkAnonymousExpression
            {
                mTkAnonymousExpression();

            }
            break;
            case 182:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1414: TkIdentifier
            {
                mTkIdentifier();

            }
            break;
            case 183:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1427: TkIntNum
            {
                mTkIntNum();

            }
            break;
            case 184:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1436: TkRealNum
            {
                mTkRealNum();

            }
            break;
            case 185:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1446: TkHexNum
            {
                mTkHexNum();

            }
            break;
            case 186:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1455: TkAsmHexNum
            {
                mTkAsmHexNum();

            }
            break;
            case 187:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1467: TkAsmHexLabel
            {
                mTkAsmHexLabel();

            }
            break;
            case 188:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1481: QuotedString
            {
                mQuotedString();

            }
            break;
            case 189:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1494: ControlString
            {
                mControlString();

            }
            break;
            case 190:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1508: Hexdigitseq
            {
                mHexdigitseq();

            }
            break;
            case 191:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1520: COMMENT
            {
                mCOMMENT();

            }
            break;
            case 192:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1528: WS
            {
                mWS();

            }
            break;
            case 193:
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:1:1531: UnicodeBOM
            {
                mUnicodeBOM();

            }
            break;

        }
    }

    protected class DFA18 extends DFA {

        public DFA18(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 18;
            this.eot = DFA18_eot;
            this.eof = DFA18_eof;
            this.min = DFA18_min;
            this.max = DFA18_max;
            this.accept = DFA18_accept;
            this.special = DFA18_special;
            this.transition = DFA18_transition;
        }

        @Override
        public String getDescription() {
            return "1:1: Tokens : ( T__200 | T__201 | ABSOLUTE | ABSTRACT | ADD | AND | ANSISTRING | ARRAY | AS | ASM | ASSEMBLER | ASSEMBLY | AT | AUTOMATED | BEGIN | BREAK | CASE | CDECL | CLASS | CONST | CONSTRUCTOR | CONTAINS | CONTINUE | DEFAULT | DEPRECATED | DESTRUCTOR | DISPID | DISPINTERFACE | DIV | DO | DOWNTO | DQ | DW | DYNAMIC | ELSE | END | EXCEPT | EXIT | EXPERIMENTAL | EXPORT | EXPORTS | EXTERNAL | FAR | FILE | FINAL | FINALIZATION | FINALLY | FOR | FORWARD | FUNCTION | GOTO | HELPER | IF | IMPLEMENTATION | IMPLEMENTS | IN | INDEX | INHERITED | INITIALIZATION | INLINE | INTERFACE | IS | LABEL | LIBRARY | LOCAL | MESSAGE | MOD | NAME | NEAR | NIL | NODEFAULT | NOT | OBJECT | OF | ON | OPERATOR | OR | OUT | OVERLOAD | OVERRIDE | PACKAGE | PACKED | PASCAL | PLATFORM | POINTER | PRIVATE | PROCEDURE | PROGRAM | PROPERTY | PROTECTED | PUBLIC | PUBLISHED | RAISE | READ | READONLY | RECORD | REFERENCE | REGISTER | REINTRODUCE | REMOVE | REPEAT | REQUIRES | RESIDENT | RESOURCESTRING | SAFECALL | SEALED | SET | SHL | SHR | STATIC | STDCALL | STORED | STRICT | STRING | THEN | THREADVAR | TO | TRY | TYPE | UNIT | UNSAFE | UNTIL | USES | VAR | VARARGS | VARIANT | VIRTUAL | WHILE | WITH | WRITE | WRITEONLY | XOR | FALSE | TRUE | PLUS | MINUS | STAR | SLASH | ASSIGN | COMMA | SEMI | COLON | EQUAL | NOT_EQUAL | LT | LE | GE | GT | LPAREN | RPAREN | LBRACK | LBRACK2 | RBRACK | RBRACK2 | POINTER2 | AT2 | DOT | DOTDOT | LCURLY | RCURLY | TkGlobalFunction | TkFunctionName | TkFunctionArgs | TkFunctionBody | TkFunctionReturn | TkCustomAttribute | TkCustomAttributeArgs | TkNewType | TkClass | TkRecord | TkRecordHelper | TkInterface | TkObject | TkClassOfType | TkVariableType | TkVariableIdents | TkVariableParam | TkGuid | TkClassParents | TkClassField | TkAnonymousExpression | TkIdentifier | TkIntNum | TkRealNum | TkHexNum | TkAsmHexNum | TkAsmHexLabel | QuotedString | ControlString | Hexdigitseq | COMMENT | WS | UnicodeBOM );";
        }

        @Override
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            IntStream input = _input;
            int _s = s;
            switch (s) {
                case 0:
                    int LA18_52 = input.LA(1);
                    s = -1;
                    if (((LA18_52 >= '\u0000' && LA18_52 <= '\uFEFE') || (LA18_52 >= '\uFF00' && LA18_52 <= '\uFFFF'))) {
                        s = 50;
                    } else s = 161;
                    if (s >= 0) return s;
                    break;

                case 1:
                    int LA18_40 = input.LA(1);
                    s = -1;
                    if (((LA18_40 >= '\u0000' && LA18_40 <= '\uFFFF'))) {
                        s = 137;
                    } else s = 151;
                    if (s >= 0) return s;
                    break;
            }
            NoViableAltException nvae =
                    new NoViableAltException(getDescription(), 18, _s, input);
            error(nvae);
            throw nvae;
        }
    }

}
