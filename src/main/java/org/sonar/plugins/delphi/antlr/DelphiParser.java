/*
 * Sonar Delphi Plugin
 * Copyright (C) 2011 Sabre Airline Solutions and Fabricio Colombo
 * Author(s):
 * Przemyslaw Kociolek (przemyslaw.kociolek@sabre.com)
 * Michal Wojcik (michal.wojcik@sabre.com)
 * Fabricio Colombo (fabricio.colombo.mva@gmail.com)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
 */

package org.sonar.plugins.delphi.antlr;

/**
 * Delphi Parser class generated by Antlr. Provides tokens and tree parsing methods.
 **/


import org.antlr.runtime.*;
import org.antlr.runtime.tree.CommonTreeAdaptor;
import org.antlr.runtime.tree.RewriteRuleSubtreeStream;
import org.antlr.runtime.tree.RewriteRuleTokenStream;
import org.antlr.runtime.tree.TreeAdaptor;

import java.util.HashMap;


@SuppressWarnings("all")
public class DelphiParser extends Parser {
    public static final String[] tokenNames = new String[]{
            "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ABSOLUTE", "ABSTRACT", "ADD",
            "AND", "ANSISTRING", "ARRAY", "AS", "ASM", "ASSEMBLER", "ASSEMBLY", "ASSIGN",
            "AT", "AT2", "AUTOMATED", "Alpha", "BEGIN", "BREAK", "CASE", "CDECL",
            "CLASS", "COLON", "COMMA", "COMMENT", "CONST", "CONSTRUCTOR", "CONTAINS",
            "CONTINUE", "ControlString", "Controlchar", "DEFAULT", "DEPRECATED", "DESTRUCTOR",
            "DISPID", "DISPINTERFACE", "DIV", "DO", "DOT", "DOTDOT", "DOWNTO", "DQ",
            "DW", "DYNAMIC", "Digit", "Digitseq", "ELSE", "END", "EQUAL", "EXCEPT",
            "EXIT", "EXPERIMENTAL", "EXPORT", "EXPORTS", "EXTERNAL", "FALSE", "FAR",
            "FILE", "FINAL", "FINALIZATION", "FINALLY", "FOR", "FORWARD", "FUNCTION",
            "GE", "GOTO", "GT", "HELPER", "Hexdigit", "Hexdigitseq", "IF", "IMPLEMENTATION",
            "IMPLEMENTS", "IN", "INDEX", "INHERITED", "INITIALIZATION", "INLINE",
            "INTERFACE", "IS", "LABEL", "LBRACK", "LBRACK2", "LCURLY", "LE", "LIBRARY",
            "LOCAL", "LPAREN", "LT", "MESSAGE", "MINUS", "MOD", "NAME", "NEAR", "NIL",
            "NODEFAULT", "NOT", "NOT_EQUAL", "OBJECT", "OF", "ON", "OPERATOR", "OR",
            "OUT", "OVERLOAD", "OVERRIDE", "PACKAGE", "PACKED", "PASCAL", "PLATFORM",
            "PLUS", "POINTER", "POINTER2", "PRIVATE", "PROCEDURE", "PROGRAM", "PROPERTY",
            "PROTECTED", "PUBLIC", "PUBLISHED", "QuotedString", "RAISE", "RBRACK",
            "RBRACK2", "RCURLY", "READ", "READONLY", "RECORD", "REFERENCE", "REGISTER",
            "REINTRODUCE", "REMOVE", "REPEAT", "REQUIRES", "RESIDENT", "RESOURCESTRING",
            "RPAREN", "SAFECALL", "SEALED", "SEMI", "SET", "SHL", "SHR", "SLASH",
            "STAR", "STATIC", "STDCALL", "STORED", "STRICT", "STRING", "THEN", "THREADVAR",
            "TO", "TRUE", "TRY", "TYPE", "TkAnonymousExpression", "TkAsmHexLabel",
            "TkAsmHexNum", "TkClass", "TkClassField", "TkClassOfType", "TkClassParents",
            "TkCustomAttribute", "TkCustomAttributeArgs", "TkFunctionArgs", "TkFunctionBody",
            "TkFunctionName", "TkFunctionReturn", "TkGlobalFunction", "TkGuid", "TkHexNum",
            "TkIdentifier", "TkIntNum", "TkInterface", "TkNewType", "TkObject", "TkRealNum",
            "TkRecord", "TkRecordHelper", "TkVariableIdents", "TkVariableParam", "TkVariableType",
            "UNIT", "UNSAFE", "UNTIL", "USES", "UnicodeBOM", "VAR", "VARARGS", "VARIANT",
            "VIRTUAL", "WHILE", "WITH", "WRITE", "WRITEONLY", "WS", "XOR", "'&'",
            "'@@'"
    };
    public static final int EOF = -1;
    public static final int T__200 = 200;
    public static final int T__201 = 201;
    public static final int ABSOLUTE = 4;
    public static final int ABSTRACT = 5;
    public static final int ADD = 6;
    public static final int AND = 7;
    public static final int ANSISTRING = 8;
    public static final int ARRAY = 9;
    public static final int AS = 10;
    public static final int ASM = 11;
    public static final int ASSEMBLER = 12;
    public static final int ASSEMBLY = 13;
    public static final int ASSIGN = 14;
    public static final int AT = 15;
    public static final int AT2 = 16;
    public static final int AUTOMATED = 17;
    public static final int Alpha = 18;
    public static final int BEGIN = 19;
    public static final int BREAK = 20;
    public static final int CASE = 21;
    public static final int CDECL = 22;
    public static final int CLASS = 23;
    public static final int COLON = 24;
    public static final int COMMA = 25;
    public static final int COMMENT = 26;
    public static final int CONST = 27;
    public static final int CONSTRUCTOR = 28;
    public static final int CONTAINS = 29;
    public static final int CONTINUE = 30;
    public static final int ControlString = 31;
    public static final int Controlchar = 32;
    public static final int DEFAULT = 33;
    public static final int DEPRECATED = 34;
    public static final int DESTRUCTOR = 35;
    public static final int DISPID = 36;
    public static final int DISPINTERFACE = 37;
    public static final int DIV = 38;
    public static final int DO = 39;
    public static final int DOT = 40;
    public static final int DOTDOT = 41;
    public static final int DOWNTO = 42;
    public static final int DQ = 43;
    public static final int DW = 44;
    public static final int DYNAMIC = 45;
    public static final int Digit = 46;
    public static final int Digitseq = 47;
    public static final int ELSE = 48;
    public static final int END = 49;
    public static final int EQUAL = 50;
    public static final int EXCEPT = 51;
    public static final int EXIT = 52;
    public static final int EXPERIMENTAL = 53;
    public static final int EXPORT = 54;
    public static final int EXPORTS = 55;
    public static final int EXTERNAL = 56;
    public static final int FALSE = 57;
    public static final int FAR = 58;
    public static final int FILE = 59;
    public static final int FINAL = 60;
    public static final int FINALIZATION = 61;
    public static final int FINALLY = 62;
    public static final int FOR = 63;
    public static final int FORWARD = 64;
    public static final int FUNCTION = 65;
    public static final int GE = 66;
    public static final int GOTO = 67;
    public static final int GT = 68;
    public static final int HELPER = 69;
    public static final int Hexdigit = 70;
    public static final int Hexdigitseq = 71;
    public static final int IF = 72;
    public static final int IMPLEMENTATION = 73;
    public static final int IMPLEMENTS = 74;
    public static final int IN = 75;
    public static final int INDEX = 76;
    public static final int INHERITED = 77;
    public static final int INITIALIZATION = 78;
    public static final int INLINE = 79;
    public static final int INTERFACE = 80;
    public static final int IS = 81;
    public static final int LABEL = 82;
    public static final int LBRACK = 83;
    public static final int LBRACK2 = 84;
    public static final int LCURLY = 85;
    public static final int LE = 86;
    public static final int LIBRARY = 87;
    public static final int LOCAL = 88;
    public static final int LPAREN = 89;
    public static final int LT = 90;
    public static final int MESSAGE = 91;
    public static final int MINUS = 92;
    public static final int MOD = 93;
    public static final int NAME = 94;
    public static final int NEAR = 95;
    public static final int NIL = 96;
    public static final int NODEFAULT = 97;
    public static final int NOT = 98;
    public static final int NOT_EQUAL = 99;
    public static final int OBJECT = 100;
    public static final int OF = 101;
    public static final int ON = 102;
    public static final int OPERATOR = 103;
    public static final int OR = 104;
    public static final int OUT = 105;
    public static final int OVERLOAD = 106;
    public static final int OVERRIDE = 107;
    public static final int PACKAGE = 108;
    public static final int PACKED = 109;
    public static final int PASCAL = 110;
    public static final int PLATFORM = 111;
    public static final int PLUS = 112;
    public static final int POINTER = 113;
    public static final int POINTER2 = 114;
    public static final int PRIVATE = 115;
    public static final int PROCEDURE = 116;
    public static final int PROGRAM = 117;
    public static final int PROPERTY = 118;
    public static final int PROTECTED = 119;
    public static final int PUBLIC = 120;
    public static final int PUBLISHED = 121;
    public static final int QuotedString = 122;
    public static final int RAISE = 123;
    public static final int RBRACK = 124;
    public static final int RBRACK2 = 125;
    public static final int RCURLY = 126;
    public static final int READ = 127;
    public static final int READONLY = 128;
    public static final int RECORD = 129;
    public static final int REFERENCE = 130;
    public static final int REGISTER = 131;
    public static final int REINTRODUCE = 132;
    public static final int REMOVE = 133;
    public static final int REPEAT = 134;
    public static final int REQUIRES = 135;
    public static final int RESIDENT = 136;
    public static final int RESOURCESTRING = 137;
    public static final int RPAREN = 138;
    public static final int SAFECALL = 139;
    public static final int SEALED = 140;
    public static final int SEMI = 141;
    public static final int SET = 142;
    public static final int SHL = 143;
    public static final int SHR = 144;
    public static final int SLASH = 145;
    public static final int STAR = 146;
    public static final int STATIC = 147;
    public static final int STDCALL = 148;
    public static final int STORED = 149;
    public static final int STRICT = 150;
    public static final int STRING = 151;
    public static final int THEN = 152;
    public static final int THREADVAR = 153;
    public static final int TO = 154;
    public static final int TRUE = 155;
    public static final int TRY = 156;
    public static final int TYPE = 157;
    public static final int TkAnonymousExpression = 158;
    public static final int TkAsmHexLabel = 159;
    public static final int TkAsmHexNum = 160;
    public static final int TkClass = 161;
    public static final int TkClassField = 162;
    public static final int TkClassOfType = 163;
    public static final int TkClassParents = 164;
    public static final int TkCustomAttribute = 165;
    public static final int TkCustomAttributeArgs = 166;
    public static final int TkFunctionArgs = 167;
    public static final int TkFunctionBody = 168;
    public static final int TkFunctionName = 169;
    public static final int TkFunctionReturn = 170;
    public static final int TkGlobalFunction = 171;
    public static final int TkGuid = 172;
    public static final int TkHexNum = 173;
    public static final int TkIdentifier = 174;
    public static final int TkIntNum = 175;
    public static final int TkInterface = 176;
    public static final int TkNewType = 177;
    public static final int TkObject = 178;
    public static final int TkRealNum = 179;
    public static final int TkRecord = 180;
    public static final int TkRecordHelper = 181;
    public static final int TkVariableIdents = 182;
    public static final int TkVariableParam = 183;
    public static final int TkVariableType = 184;
    public static final int UNIT = 185;
    public static final int UNSAFE = 186;
    public static final int UNTIL = 187;
    public static final int USES = 188;
    public static final int UnicodeBOM = 189;
    public static final int VAR = 190;
    public static final int VARARGS = 191;
    public static final int VARIANT = 192;
    public static final int VIRTUAL = 193;
    public static final int WHILE = 194;
    public static final int WITH = 195;
    public static final int WRITE = 196;
    public static final int WRITEONLY = 197;
    public static final int WS = 198;
    public static final int XOR = 199;
    public static final BitSet FOLLOW_program_in_file84 = new BitSet(new long[]{0x0000000000000002L});

    // delegators
    public static final BitSet FOLLOW_library_in_file88 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unit_in_file92 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_packageE_in_file96 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_programHead_in_program159 = new BitSet(new long[]{0x0080010818880800L, 0x00100000000C0002L, 0x5000000022000200L});
    public static final BitSet FOLLOW_usesFileClause_in_program164 = new BitSet(new long[]{0x0080010818880800L, 0x00100000000C0002L, 0x4000000022000200L});
    public static final BitSet FOLLOW_block_in_program168 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_DOT_in_program170 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROGRAM_in_programHead224 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});

    ;
    public static final BitSet FOLLOW_namespaceName_in_programHead226 = new BitSet(new long[]{0x0000000000000000L, 0x0000000002000000L, 0x0000000000002000L});
    // $ANTLR end "file"
    public static final BitSet FOLLOW_programParmSeq_in_programHead229 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002000L});

    ;
    public static final BitSet FOLLOW_SEMI_in_programHead233 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "program"
    public static final BitSet FOLLOW_LPAREN_in_programParmSeq284 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0042DL, 0x0000000000000111L});

    ;
    public static final BitSet FOLLOW_ident_in_programParmSeq287 = new BitSet(new long[]{0x0000000002000000L, 0x0000000000000000L, 0x0000000000000400L});
    // $ANTLR end "programHead"
    public static final BitSet FOLLOW_COMMA_in_programParmSeq290 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});

    ;
    public static final BitSet FOLLOW_ident_in_programParmSeq292 = new BitSet(new long[]{0x0000000002000000L, 0x0000000000000000L, 0x0000000000000400L});
    // $ANTLR end "programParmSeq"
    public static final BitSet FOLLOW_RPAREN_in_programParmSeq299 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_libraryHead_in_library357 = new BitSet(new long[]{0x0080010818880800L, 0x00100000000C0002L, 0x5000000022000200L});
    // $ANTLR end "library"
    public static final BitSet FOLLOW_usesFileClause_in_library360 = new BitSet(new long[]{0x0080010818880800L, 0x00100000000C0002L, 0x4000000022000200L});

    ;
    public static final BitSet FOLLOW_block_in_library364 = new BitSet(new long[]{0x0000010000000000L});
    // $ANTLR end "libraryHead"
    public static final BitSet FOLLOW_DOT_in_library366 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_LIBRARY_in_libraryHead420 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    // $ANTLR end "packageE"
    public static final BitSet FOLLOW_namespaceName_in_libraryHead422 = new BitSet(new long[]{0x0020000400000000L, 0x0000800000800000L, 0x0000000000002000L});

    ;
    public static final BitSet FOLLOW_hintingDirective_in_libraryHead425 = new BitSet(new long[]{0x0020000400000000L, 0x0000800000800000L, 0x0000000000002000L});
    // $ANTLR end "packageHead"
    public static final BitSet FOLLOW_SEMI_in_libraryHead429 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_packageHead_in_packageE494 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000000080L});
    // $ANTLR end "unit"
    public static final BitSet FOLLOW_requiresClause_in_packageE496 = new BitSet(new long[]{0x0002000020000000L});

    ;
    public static final BitSet FOLLOW_containsClause_in_packageE499 = new BitSet(new long[]{0x0002000000000000L});
    // $ANTLR end "unitHead"
    public static final BitSet FOLLOW_END_in_packageE503 = new BitSet(new long[]{0x0000010000000000L});

    ;
    public static final BitSet FOLLOW_DOT_in_packageE505 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "unitInterface"
    public static final BitSet FOLLOW_PACKAGE_in_packageHead559 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});

    ;
    public static final BitSet FOLLOW_namespaceName_in_packageHead561 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002000L});
    // $ANTLR end "unitImplementation"
    public static final BitSet FOLLOW_SEMI_in_packageHead563 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_unitHead_in_unit624 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000010000L});
    // $ANTLR end "unitBlock"
    public static final BitSet FOLLOW_unitInterface_in_unit626 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000200L});

    ;
    public static final BitSet FOLLOW_unitImplementation_in_unit628 = new BitSet(new long[]{0x0002000000080000L, 0x0000000000004000L});
    // $ANTLR end "unitInitialization"
    public static final BitSet FOLLOW_unitBlock_in_unit630 = new BitSet(new long[]{0x0000010000000000L});

    ;
    public static final BitSet FOLLOW_DOT_in_unit632 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "unitFinalization"
    public static final BitSet FOLLOW_UNIT_in_unitHead689 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});

    ;
    public static final BitSet FOLLOW_namespaceName_in_unitHead691 = new BitSet(new long[]{0x0020000400000000L, 0x0000800000800000L, 0x0000000000002000L});
    // $ANTLR end "containsClause"
    public static final BitSet FOLLOW_hintingDirective_in_unitHead694 = new BitSet(new long[]{0x0020000400000000L, 0x0000800000800000L, 0x0000000000002000L});

    ;
    public static final BitSet FOLLOW_SEMI_in_unitHead698 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "requiresClause"
    public static final BitSet FOLLOW_INTERFACE_in_unitInterface763 = new BitSet(new long[]{0x0080000818800002L, 0x0010000000080002L, 0x5000000022000200L});

    ;
    public static final BitSet FOLLOW_usesClause_in_unitInterface766 = new BitSet(new long[]{0x0080000818800002L, 0x0010000000080002L, 0x4000000022000200L});
    // $ANTLR end "usesClause"
    public static final BitSet FOLLOW_interfaceDecl_in_unitInterface771 = new BitSet(new long[]{0x0080000818800002L, 0x0010000000080002L, 0x4000000022000200L});

    ;
    public static final BitSet FOLLOW_IMPLEMENTATION_in_unitImplementation836 = new BitSet(new long[]{0x0080000818800002L, 0x00100000000C0002L, 0x5000000022000200L});
    // $ANTLR end "usesFileClause"
    public static final BitSet FOLLOW_usesClause_in_unitImplementation839 = new BitSet(new long[]{0x0080000818800002L, 0x00100000000C0002L, 0x4000000022000200L});

    ;
    public static final BitSet FOLLOW_declSection_in_unitImplementation844 = new BitSet(new long[]{0x0080000818800002L, 0x00100000000C0002L, 0x4000000022000200L});
    // $ANTLR end "namespaceFileNameList"
    public static final BitSet FOLLOW_unitInitialization_in_unitBlock918 = new BitSet(new long[]{0x0002000000000000L});

    ;
    public static final BitSet FOLLOW_END_in_unitBlock920 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "namespaceFileName"
    public static final BitSet FOLLOW_compoundStatement_in_unitBlock953 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_END_in_unitBlock986 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "namespaceNameList"
    public static final BitSet FOLLOW_INITIALIZATION_in_unitInitialization1033 = new BitSet(new long[]{0xB05001026039C940L, 0x880602904F083508L, 0x0000E00010E0206DL, 0x000000000000011DL});

    ;
    public static final BitSet FOLLOW_statementList_in_unitInitialization1035 = new BitSet(new long[]{0x2000000000000002L});
    // $ANTLR end "block"
    public static final BitSet FOLLOW_unitFinalization_in_unitInitialization1038 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_FINALIZATION_in_unitFinalization1089 = new BitSet(new long[]{0x905001026039C940L, 0x880602904F083508L, 0x0000E00010E0206DL, 0x000000000000011DL});
    // $ANTLR end "blockBody"
    public static final BitSet FOLLOW_statementList_in_unitFinalization1091 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_CONTAINS_in_containsClause1145 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    // $ANTLR end "declSection"
    public static final BitSet FOLLOW_namespaceFileNameList_in_containsClause1147 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_REQUIRES_in_requiresClause1198 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    // $ANTLR end "interfaceDecl"
    public static final BitSet FOLLOW_namespaceNameList_in_requiresClause1200 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_USES_in_usesClause1255 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    // $ANTLR end "labelDeclSection"
    public static final BitSet FOLLOW_namespaceNameList_in_usesClause1257 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_USES_in_usesFileClause1316 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    // $ANTLR end "constSection"
    public static final BitSet FOLLOW_namespaceFileNameList_in_usesFileClause1318 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_namespaceFileName_in_namespaceFileNameList1370 = new BitSet(new long[]{0x0000000002000000L, 0x0000000000000000L, 0x0000000000002000L});
    // $ANTLR end "constKey"
    public static final BitSet FOLLOW_COMMA_in_namespaceFileNameList1373 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});

    ;
    public static final BitSet FOLLOW_namespaceFileName_in_namespaceFileNameList1375 = new BitSet(new long[]{0x0000000002000000L, 0x0000000000000000L, 0x0000000000002000L});
    // $ANTLR end "constDeclaration"
    public static final BitSet FOLLOW_SEMI_in_namespaceFileNameList1379 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_namespaceName_in_namespaceFileName1436 = new BitSet(new long[]{0x0000000000000002L, 0x0000000000000800L});
    // $ANTLR end "typeSection"
    public static final BitSet FOLLOW_IN_in_namespaceFileName1439 = new BitSet(new long[]{0x0000000000000000L, 0x0400000000000000L});

    ;
    public static final BitSet FOLLOW_QuotedString_in_namespaceFileName1441 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "typeDeclaration"
    public static final BitSet FOLLOW_namespaceName_in_namespaceNameList1502 = new BitSet(new long[]{0x0000000002000000L, 0x0000000000000000L, 0x0000000000002000L});

    ;
    public static final BitSet FOLLOW_COMMA_in_namespaceNameList1505 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    // $ANTLR end "varSection"
    public static final BitSet FOLLOW_namespaceName_in_namespaceNameList1507 = new BitSet(new long[]{0x0000000002000000L, 0x0000000000000000L, 0x0000000000002000L});

    ;
    public static final BitSet FOLLOW_SEMI_in_namespaceNameList1511 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "varKey"
    public static final BitSet FOLLOW_declSection_in_block1584 = new BitSet(new long[]{0x0080000818880802L, 0x00100000000C0002L, 0x4000000022000200L});

    ;
    public static final BitSet FOLLOW_blockBody_in_block1589 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "varDeclaration"
    public static final BitSet FOLLOW_compoundStatement_in_blockBody1647 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_assemblerStatement_in_blockBody1680 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "varValueSpec"
    public static final BitSet FOLLOW_labelDeclSection_in_declSection1734 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_constSection_in_declSection1767 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "exportsSection"
    public static final BitSet FOLLOW_typeSection_in_declSection1800 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_varSection_in_declSection1833 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "exportItem"
    public static final BitSet FOLLOW_exportedProcHeading_in_declSection1866 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_methodDecl_in_declSection1899 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "typeDecl"
    public static final BitSet FOLLOW_procDecl_in_declSection1932 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_exportsSection_in_declSection1965 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "strucType"
    public static final BitSet FOLLOW_constSection_in_interfaceDecl2017 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_typeSection_in_interfaceDecl2050 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "strucTypePart"
    public static final BitSet FOLLOW_varSection_in_interfaceDecl2083 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_exportedProcHeading_in_interfaceDecl2116 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "arrayType"
    public static final BitSet FOLLOW_exportsSection_in_interfaceDecl2149 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_procDecl_in_interfaceDecl2182 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "arrayIndex"
    public static final BitSet FOLLOW_methodDecl_in_interfaceDecl2215 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_LABEL_in_labelDeclSection2264 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000E00000E0002DL, 0x0000000000000011L});
    // $ANTLR end "arraySubType"
    public static final BitSet FOLLOW_label_in_labelDeclSection2266 = new BitSet(new long[]{0x0000000002000000L, 0x0000000000000000L, 0x0000000000002000L});

    ;
    public static final BitSet FOLLOW_COMMA_in_labelDeclSection2269 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000E00000E0002DL, 0x0000000000000011L});
    // $ANTLR end "setType"
    public static final BitSet FOLLOW_label_in_labelDeclSection2271 = new BitSet(new long[]{0x0000000002000000L, 0x0000000000000000L, 0x0000000000002000L});

    ;
    public static final BitSet FOLLOW_SEMI_in_labelDeclSection2275 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "fileType"
    public static final BitSet FOLLOW_constKey_in_constSection2328 = new BitSet(new long[]{0x1050000260108142L, 0x8002029049081400L, 0x0000400000E0002DL, 0x0000000000000111L});

    ;
    public static final BitSet FOLLOW_constDeclaration_in_constSection2331 = new BitSet(new long[]{0x1050000260108142L, 0x8002029049081400L, 0x0000400000E0002DL, 0x0000000000000111L});
    // $ANTLR end "pointerType"
    public static final BitSet FOLLOW_customAttribute_in_constDeclaration2486 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});

    ;
    public static final BitSet FOLLOW_ident_in_constDeclaration2490 = new BitSet(new long[]{0x0004000001000000L});
    // $ANTLR end "stringType"
    public static final BitSet FOLLOW_COLON_in_constDeclaration2493 = new BitSet(new long[]{0x1A500122E0918340L, 0x841722955F093402L, 0x0008E00128E0402FL, 0x0000000000000311L});

    ;
    public static final BitSet FOLLOW_typeDecl_in_constDeclaration2495 = new BitSet(new long[]{0x0004000000000000L});
    // $ANTLR end "codePageNumber"
    public static final BitSet FOLLOW_EQUAL_in_constDeclaration2499 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});

    ;
    public static final BitSet FOLLOW_constExpression_in_constDeclaration2501 = new BitSet(new long[]{0x0020000400000000L, 0x0000800000800000L, 0x0000000000002000L});
    // $ANTLR end "procedureType"
    public static final BitSet FOLLOW_hintingDirective_in_constDeclaration2504 = new BitSet(new long[]{0x0020000400000000L, 0x0000800000800000L, 0x0000000000002000L});

    ;
    public static final BitSet FOLLOW_SEMI_in_constDeclaration2508 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "methodType"
    public static final BitSet FOLLOW_TYPE_in_typeSection2575 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049081400L, 0x0000400000E0002DL, 0x0000000000000111L});

    ;
    public static final BitSet FOLLOW_typeDeclaration_in_typeSection2577 = new BitSet(new long[]{0x1050000260108142L, 0x8002029049081400L, 0x0000400000E0002DL, 0x0000000000000111L});
    // $ANTLR end "simpleProcedureType"
    public static final BitSet FOLLOW_typeDeclaration_in_typeSection2580 = new BitSet(new long[]{0x1050000260108142L, 0x8002029049081400L, 0x0000400000E0002DL, 0x0000000000000111L});

    ;
    public static final BitSet FOLLOW_customAttribute_in_typeDeclaration2646 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    // $ANTLR end "procedureReference"
    public static final BitSet FOLLOW_genericTypeIdent_in_typeDeclaration2650 = new BitSet(new long[]{0x0004000000000000L});

    ;
    public static final BitSet FOLLOW_EQUAL_in_typeDeclaration2652 = new BitSet(new long[]{0x1A500122E0918340L, 0x841722955F093402L, 0x0008E00128E0402FL, 0x0000000000000311L});
    // $ANTLR end "procedureTypeHeading"
    public static final BitSet FOLLOW_typeDecl_in_typeDeclaration2654 = new BitSet(new long[]{0x0020000400000000L, 0x0000800000800000L, 0x0000000000002000L});

    ;
    public static final BitSet FOLLOW_hintingDirective_in_typeDeclaration2657 = new BitSet(new long[]{0x0020000400000000L, 0x0000800000800000L, 0x0000000000002000L});
    // $ANTLR end "variantType"
    public static final BitSet FOLLOW_SEMI_in_typeDeclaration2661 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_varKey_in_varSection2738 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049081400L, 0x0000400000E0002DL, 0x0000000000000111L});
    // $ANTLR end "simpleType"
    public static final BitSet FOLLOW_varDeclaration_in_varSection2740 = new BitSet(new long[]{0x1050000260108142L, 0x8002029049081400L, 0x0000400000E0002DL, 0x0000000000000111L});

    ;
    public static final BitSet FOLLOW_varDeclaration_in_varSection2743 = new BitSet(new long[]{0x1050000260108142L, 0x8002029049081400L, 0x0000400000E0002DL, 0x0000000000000111L});
    // $ANTLR end "subRangeType"
    public static final BitSet FOLLOW_customAttribute_in_varDeclaration2903 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});

    ;
    public static final BitSet FOLLOW_identListFlat_in_varDeclaration2907 = new BitSet(new long[]{0x0000000001000000L});
    // $ANTLR end "enumType"
    public static final BitSet FOLLOW_COLON_in_varDeclaration2909 = new BitSet(new long[]{0x1A500122E0918340L, 0x841722955F093402L, 0x0008E00128E0402FL, 0x0000000000000311L});

    ;
    public static final BitSet FOLLOW_typeDecl_in_varDeclaration2911 = new BitSet(new long[]{0x0024000400000010L, 0x0000800000800000L, 0x0000000000002000L});
    // $ANTLR end "typeId"
    public static final BitSet FOLLOW_varValueSpec_in_varDeclaration2914 = new BitSet(new long[]{0x0020000400000000L, 0x0000800000800000L, 0x0000000000002000L});

    ;
    public static final BitSet FOLLOW_hintingDirective_in_varDeclaration2919 = new BitSet(new long[]{0x0020000400000000L, 0x0000800000800000L, 0x0000000000002000L});
    // $ANTLR end "genericTypeIdent"
    public static final BitSet FOLLOW_SEMI_in_varDeclaration2923 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_ABSOLUTE_in_varValueSpec2995 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    // $ANTLR end "genericDefinition"
    public static final BitSet FOLLOW_ident_in_varValueSpec2997 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_ABSOLUTE_in_varValueSpec3030 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    // $ANTLR end "simpleGenericDefinition"
    public static final BitSet FOLLOW_constExpression_in_varValueSpec3032 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_EQUAL_in_varValueSpec3065 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    // $ANTLR end "constrainedGenericDefinition"
    public static final BitSet FOLLOW_constExpression_in_varValueSpec3067 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_EXPORTS_in_exportsSection3118 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    // $ANTLR end "constrainedGeneric"
    public static final BitSet FOLLOW_ident_in_exportsSection3120 = new BitSet(new long[]{0x0000000002000000L, 0x0000000042001000L, 0x0000000000002100L});

    ;
    public static final BitSet FOLLOW_exportItem_in_exportsSection3122 = new BitSet(new long[]{0x0000000002000000L, 0x0000000000000000L, 0x0000000000002000L});
    // $ANTLR end "genericConstraint"
    public static final BitSet FOLLOW_COMMA_in_exportsSection3125 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});

    ;
    public static final BitSet FOLLOW_ident_in_exportsSection3127 = new BitSet(new long[]{0x0000000002000000L, 0x0000000042001000L, 0x0000000000002100L});
    // $ANTLR end "genericPostfix"
    public static final BitSet FOLLOW_exportItem_in_exportsSection3129 = new BitSet(new long[]{0x0000000002000000L, 0x0000000000000000L, 0x0000000000002000L});

    ;
    public static final BitSet FOLLOW_SEMI_in_exportsSection3133 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "classDecl"
    public static final BitSet FOLLOW_LPAREN_in_exportItem3189 = new BitSet(new long[]{0x1050000268108140L, 0x8002029049081400L, 0x4000400000E0042DL, 0x0000000000000111L});

    ;
    public static final BitSet FOLLOW_formalParameterList_in_exportItem3192 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000000400L});
    // $ANTLR end "classTypeTypeDecl"
    public static final BitSet FOLLOW_RPAREN_in_exportItem3196 = new BitSet(new long[]{0x0000000000000002L, 0x0000000040001000L, 0x0000000000000100L});

    ;
    public static final BitSet FOLLOW_INDEX_in_exportItem3201 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    // $ANTLR end "classTypeDecl"
    public static final BitSet FOLLOW_expression_in_exportItem3203 = new BitSet(new long[]{0x0000000000000002L, 0x0000000040000000L, 0x0000000000000100L});

    ;
    public static final BitSet FOLLOW_NAME_in_exportItem3208 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    // $ANTLR end "classState"
    public static final BitSet FOLLOW_expression_in_exportItem3210 = new BitSet(new long[]{0x0000000000000002L, 0x0000000000000000L, 0x0000000000000100L});

    ;
    public static final BitSet FOLLOW_RESIDENT_in_exportItem3215 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "classParent"
    public static final BitSet FOLLOW_strucType_in_typeDecl3277 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_pointerType_in_typeDecl3310 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "classItem"
    public static final BitSet FOLLOW_stringType_in_typeDecl3343 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_procedureType_in_typeDecl3376 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "classHelperDecl"
    public static final BitSet FOLLOW_variantType_in_typeDecl3410 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_TYPE_in_typeDecl3444 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    // $ANTLR end "classHelperItem"
    public static final BitSet FOLLOW_typeId_in_typeDecl3448 = new BitSet(new long[]{0x0000000000000002L, 0x0000000004000000L});

    ;
    public static final BitSet FOLLOW_genericPostfix_in_typeDecl3451 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "interfaceTypeDecl"
    public static final BitSet FOLLOW_simpleType_in_typeDecl3486 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_PACKED_in_strucType3543 = new BitSet(new long[]{0x0800002000800200L, 0x0000001000010000L, 0x0000000000004002L});
    // $ANTLR end "interfaceKey"
    public static final BitSet FOLLOW_strucTypePart_in_strucType3547 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_arrayType_in_strucTypePart3603 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "interfaceGuid"
    public static final BitSet FOLLOW_setType_in_strucTypePart3636 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_fileType_in_strucTypePart3669 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "interfaceItem"
    public static final BitSet FOLLOW_classDecl_in_strucTypePart3702 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_ARRAY_in_arrayType3760 = new BitSet(new long[]{0x0000000000000000L, 0x0000002000080000L});
    // $ANTLR end "objectDecl"
    public static final BitSet FOLLOW_LBRACK_in_arrayType3763 = new BitSet(new long[]{0x12500102E2118140L, 0x941702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});

    ;
    public static final BitSet FOLLOW_arrayIndex_in_arrayType3766 = new BitSet(new long[]{0x0000000002000000L, 0x1000000000000000L});
    // $ANTLR end "objectItem"
    public static final BitSet FOLLOW_COMMA_in_arrayType3771 = new BitSet(new long[]{0x12500102E2118140L, 0x941702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});

    ;
    public static final BitSet FOLLOW_arrayIndex_in_arrayType3774 = new BitSet(new long[]{0x0000000002000000L, 0x1000000000000000L});
    // $ANTLR end "recordDecl"
    public static final BitSet FOLLOW_RBRACK_in_arrayType3780 = new BitSet(new long[]{0x0000000000000000L, 0x0000002000000000L});

    ;
    public static final BitSet FOLLOW_OF_in_arrayType3784 = new BitSet(new long[]{0x1A500122E8918340L, 0x841722955F093402L, 0x0008E00128E0402FL, 0x0000000000000311L});
    // $ANTLR end "simpleRecord"
    public static final BitSet FOLLOW_arraySubType_in_arrayType3786 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_typeId_in_arrayIndex3913 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "variantRecord"
    public static final BitSet FOLLOW_expression_in_arrayIndex3946 = new BitSet(new long[]{0x0000020000000000L});

    ;
    public static final BitSet FOLLOW_DOTDOT_in_arrayIndex3948 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    // $ANTLR end "recordItem"
    public static final BitSet FOLLOW_expression_in_arrayIndex3950 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_CONST_in_arraySubType4004 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "recordField"
    public static final BitSet FOLLOW_typeDecl_in_arraySubType4037 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_SET_in_setType4095 = new BitSet(new long[]{0x0000000000000000L, 0x0000002000000000L});
    // $ANTLR end "recordVariantField"
    public static final BitSet FOLLOW_OF_in_setType4097 = new BitSet(new long[]{0x1A500122E0918340L, 0x841722955F093402L, 0x0008E00128E0402FL, 0x0000000000000311L});

    ;
    public static final BitSet FOLLOW_typeDecl_in_setType4099 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "recordVariantSection"
    public static final BitSet FOLLOW_FILE_in_fileType4173 = new BitSet(new long[]{0x0000000000000002L, 0x0000002000000000L});

    ;
    public static final BitSet FOLLOW_OF_in_fileType4176 = new BitSet(new long[]{0x1A500122E0918340L, 0x841722955F093402L, 0x0008E00128E0402FL, 0x0000000000000311L});
    // $ANTLR end "recordVariant"
    public static final BitSet FOLLOW_typeDecl_in_fileType4178 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_POINTER2_in_pointerType4234 = new BitSet(new long[]{0x1A500122E0918340L, 0x841722955F093402L, 0x0008E00128E0402FL, 0x0000000000000311L});
    // $ANTLR end "recordHelperDecl"
    public static final BitSet FOLLOW_typeDecl_in_pointerType4236 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_POINTER_in_pointerType4269 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "recordHelperItem"
    public static final BitSet FOLLOW_STRING_in_stringType4324 = new BitSet(new long[]{0x0000000000000002L, 0x0000000000080000L});

    ;
    public static final BitSet FOLLOW_LBRACK_in_stringType4327 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    // $ANTLR end "classMethod"
    public static final BitSet FOLLOW_expression_in_stringType4329 = new BitSet(new long[]{0x0000000000000000L, 0x1000000000000000L});

    ;
    public static final BitSet FOLLOW_RBRACK_in_stringType4331 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "classField"
    public static final BitSet FOLLOW_TYPE_in_stringType4371 = new BitSet(new long[]{0x0000000000000100L});

    ;
    public static final BitSet FOLLOW_ANSISTRING_in_stringType4375 = new BitSet(new long[]{0x0000000000000002L, 0x0000000002000000L});
    // $ANTLR end "classProperty"
    public static final BitSet FOLLOW_codePageNumber_in_stringType4378 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_LPAREN_in_codePageNumber4431 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000A00000000000L});
    // $ANTLR end "classPropertyArray"
    public static final BitSet FOLLOW_intNum_in_codePageNumber4433 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000000400L});

    ;
    public static final BitSet FOLLOW_RPAREN_in_codePageNumber4435 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "classPropertyIndex"
    public static final BitSet FOLLOW_methodType_in_procedureType4487 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_simpleProcedureType_in_procedureType4520 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "classPropertySpecifier"
    public static final BitSet FOLLOW_procedureReference_in_procedureType4553 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_procedureTypeHeading_in_methodType4608 = new BitSet(new long[]{0x0000000000000000L, 0x0000002000000000L});
    // $ANTLR end "classPropertyEndSpecifier"
    public static final BitSet FOLLOW_OF_in_methodType4610 = new BitSet(new long[]{0x0000000000000000L, 0x0000001000000000L});

    ;
    public static final BitSet FOLLOW_OBJECT_in_methodType4612 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "classPropertyReadWrite"
    public static final BitSet FOLLOW_procedureTypeHeading_in_simpleProcedureType4658 = new BitSet(new long[]{0x0040000000400002L, 0x0000400000000000L, 0x0000000000102808L});

    ;
    public static final BitSet FOLLOW_SEMI_in_simpleProcedureType4663 = new BitSet(new long[]{0x0040000000400000L, 0x0000400000000000L, 0x0000000000100808L});
    // $ANTLR end "classPropertyDispInterface"
    public static final BitSet FOLLOW_callConventionNoSemi_in_simpleProcedureType4667 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_REFERENCE_in_procedureReference4716 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000004000000L});
    // $ANTLR end "visibility"
    public static final BitSet FOLLOW_TO_in_procedureReference4718 = new BitSet(new long[]{0x0000000000000000L, 0x0010000000000002L});

    ;
    public static final BitSet FOLLOW_procedureTypeHeading_in_procedureReference4720 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "exportedProcHeading"
    public static final BitSet FOLLOW_FUNCTION_in_procedureTypeHeading4765 = new BitSet(new long[]{0x0000000001000000L, 0x0000000002000000L});

    ;
    public static final BitSet FOLLOW_formalParameterSection_in_procedureTypeHeading4768 = new BitSet(new long[]{0x0000000001000000L});
    // $ANTLR end "methodDecl"
    public static final BitSet FOLLOW_COLON_in_procedureTypeHeading4772 = new BitSet(new long[]{0x1A500122E0918340L, 0x841722955F093402L, 0x0008E00128E0402FL, 0x0000000000000311L});

    ;
    public static final BitSet FOLLOW_customAttribute_in_procedureTypeHeading4775 = new BitSet(new long[]{0x1A500122E0918340L, 0x841722955F093402L, 0x0008E00128E0402FL, 0x0000000000000311L});
    // $ANTLR end "methodDeclHeading"
    public static final BitSet FOLLOW_typeDecl_in_procedureTypeHeading4779 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_PROCEDURE_in_procedureTypeHeading4827 = new BitSet(new long[]{0x0000000000000002L, 0x0000000002000000L});
    // $ANTLR end "methodKey"
    public static final BitSet FOLLOW_formalParameterSection_in_procedureTypeHeading4830 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_VARIANT_in_variantType4886 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "methodName"
    public static final BitSet FOLLOW_ident_in_simpleType4942 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_subRangeType_in_simpleType4975 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "procDecl"
    public static final BitSet FOLLOW_enumType_in_simpleType5008 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_constExpression_in_subRangeType5061 = new BitSet(new long[]{0x0000020000000002L});
    // $ANTLR end "procDeclHeading"
    public static final BitSet FOLLOW_DOTDOT_in_subRangeType5064 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});

    ;
    public static final BitSet FOLLOW_constExpression_in_subRangeType5066 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "formalParameterSection"
    public static final BitSet FOLLOW_LPAREN_in_enumType5125 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});

    ;
    public static final BitSet FOLLOW_ident_in_enumType5127 = new BitSet(new long[]{0x0004000002000000L, 0x0000000000000000L, 0x0000000000000400L});
    // $ANTLR end "formalParameterList"
    public static final BitSet FOLLOW_EQUAL_in_enumType5130 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});

    ;
    public static final BitSet FOLLOW_expression_in_enumType5132 = new BitSet(new long[]{0x0000000002000000L, 0x0000000000000000L, 0x0000000000000400L});
    // $ANTLR end "formalParameter"
    public static final BitSet FOLLOW_COMMA_in_enumType5137 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});

    ;
    public static final BitSet FOLLOW_ident_in_enumType5139 = new BitSet(new long[]{0x0004000002000000L, 0x0000000000000000L, 0x0000000000000400L});
    // $ANTLR end "parmType"
    public static final BitSet FOLLOW_EQUAL_in_enumType5142 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});

    ;
    public static final BitSet FOLLOW_expression_in_enumType5144 = new BitSet(new long[]{0x0000000002000000L, 0x0000000000000000L, 0x0000000000000400L});
    // $ANTLR end "methodBody"
    public static final BitSet FOLLOW_RPAREN_in_enumType5151 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_namespacedQualifiedIdent_in_typeId5210 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "procBody"
    public static final BitSet FOLLOW_qualifiedIdent_in_genericTypeIdent5262 = new BitSet(new long[]{0x0000000000000002L, 0x0000000004000000L});

    ;
    public static final BitSet FOLLOW_genericDefinition_in_genericTypeIdent5265 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "customAttribute"
    public static final BitSet FOLLOW_simpleGenericDefinition_in_genericDefinition5323 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_constrainedGenericDefinition_in_genericDefinition5356 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "customAttributeList"
    public static final BitSet FOLLOW_LT_in_simpleGenericDefinition5398 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});

    ;
    public static final BitSet FOLLOW_ident_in_simpleGenericDefinition5400 = new BitSet(new long[]{0x0000000002000000L, 0x0000000000000010L});
    // $ANTLR end "customAttributeDecl"
    public static final BitSet FOLLOW_COMMA_in_simpleGenericDefinition5403 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});

    ;
    public static final BitSet FOLLOW_ident_in_simpleGenericDefinition5405 = new BitSet(new long[]{0x0000000002000000L, 0x0000000000000010L});
    // $ANTLR end "expression"
    public static final BitSet FOLLOW_GT_in_simpleGenericDefinition5409 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_LT_in_constrainedGenericDefinition5446 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    // $ANTLR end "anonymousExpression"
    public static final BitSet FOLLOW_constrainedGeneric_in_constrainedGenericDefinition5448 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000010L, 0x0000000000002000L});

    ;
    public static final BitSet FOLLOW_SEMI_in_constrainedGenericDefinition5451 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    // $ANTLR end "simpleExpression"
    public static final BitSet FOLLOW_constrainedGeneric_in_constrainedGenericDefinition5453 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000010L, 0x0000000000002000L});

    ;
    public static final BitSet FOLLOW_GT_in_constrainedGenericDefinition5457 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "factor"
    public static final BitSet FOLLOW_ident_in_constrainedGeneric5504 = new BitSet(new long[]{0x0000000001000002L});

    ;
    public static final BitSet FOLLOW_COLON_in_constrainedGeneric5507 = new BitSet(new long[]{0x1050000270908140L, 0x8002029049001400L, 0x0000400000E0002FL, 0x0000000000000111L});
    // $ANTLR end "stringFactor"
    public static final BitSet FOLLOW_genericConstraint_in_constrainedGeneric5509 = new BitSet(new long[]{0x0000000002000002L});

    ;
    public static final BitSet FOLLOW_COMMA_in_constrainedGeneric5512 = new BitSet(new long[]{0x1050000270908140L, 0x8002029049001400L, 0x0000400000E0002FL, 0x0000000000000111L});
    // $ANTLR end "setSection"
    public static final BitSet FOLLOW_genericConstraint_in_constrainedGeneric5514 = new BitSet(new long[]{0x0000000002000002L});

    ;
    public static final BitSet FOLLOW_ident_in_genericConstraint5566 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "designator"
    public static final BitSet FOLLOW_RECORD_in_genericConstraint5599 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_CLASS_in_genericConstraint5632 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "designatorItem"
    public static final BitSet FOLLOW_CONSTRUCTOR_in_genericConstraint5665 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_LT_in_genericPostfix5716 = new BitSet(new long[]{0x1A500122E0918340L, 0x841722955F093402L, 0x0008E00128E0402FL, 0x0000000000000311L});
    // $ANTLR end "expressionList"
    public static final BitSet FOLLOW_typeDecl_in_genericPostfix5718 = new BitSet(new long[]{0x0000000002000000L, 0x0000000000000010L});

    ;
    public static final BitSet FOLLOW_COMMA_in_genericPostfix5721 = new BitSet(new long[]{0x1A500122E0918340L, 0x841722955F093402L, 0x0008E00128E0402FL, 0x0000000000000311L});
    // $ANTLR end "colonConstruct"
    public static final BitSet FOLLOW_typeDecl_in_genericPostfix5723 = new BitSet(new long[]{0x0000000002000000L, 0x0000000000000010L});

    ;
    public static final BitSet FOLLOW_GT_in_genericPostfix5727 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "operator"
    public static final BitSet FOLLOW_classTypeTypeDecl_in_classDecl5786 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_classTypeDecl_in_classDecl5819 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "relOp"
    public static final BitSet FOLLOW_classHelperDecl_in_classDecl5860 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_interfaceTypeDecl_in_classDecl5901 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "statement"
    public static final BitSet FOLLOW_objectDecl_in_classDecl5942 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_recordDecl_in_classDecl5983 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "ifStatement"
    public static final BitSet FOLLOW_recordHelperDecl_in_classDecl6024 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_CLASS_in_classTypeTypeDecl6080 = new BitSet(new long[]{0x0000000000000000L, 0x0000002000000000L});
    // $ANTLR end "caseStatement"
    public static final BitSet FOLLOW_OF_in_classTypeTypeDecl6082 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});

    ;
    public static final BitSet FOLLOW_typeId_in_classTypeTypeDecl6084 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "caseItem"
    public static final BitSet FOLLOW_CLASS_in_classTypeDecl6144 = new BitSet(new long[]{0x1052000A78928160L, 0x83DA02904B081402L, 0x4000400022E0122DL, 0x0000000000000111L});

    ;
    public static final BitSet FOLLOW_classState_in_classTypeDecl6147 = new BitSet(new long[]{0x1052000A78928140L, 0x83DA02904B081402L, 0x4000400022E0022DL, 0x0000000000000111L});
    // $ANTLR end "caseLabel"
    public static final BitSet FOLLOW_classParent_in_classTypeDecl6152 = new BitSet(new long[]{0x1052000A78928140L, 0x83DA029049081402L, 0x4000400022E0022DL, 0x0000000000000111L});

    ;
    public static final BitSet FOLLOW_classItem_in_classTypeDecl6157 = new BitSet(new long[]{0x1052000A78928140L, 0x83DA029049081402L, 0x4000400022E0022DL, 0x0000000000000111L});
    // $ANTLR end "repeatStatement"
    public static final BitSet FOLLOW_END_in_classTypeDecl6161 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_CLASS_in_classTypeDecl6212 = new BitSet(new long[]{0x0000000000000002L, 0x0000000002000000L});
    // $ANTLR end "whileStatement"
    public static final BitSet FOLLOW_classParent_in_classTypeDecl6215 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_LPAREN_in_classParent6372 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    // $ANTLR end "forStatement"
    public static final BitSet FOLLOW_genericTypeIdent_in_classParent6374 = new BitSet(new long[]{0x0000000002000000L, 0x0000000000000000L, 0x0000000000000400L});

    ;
    public static final BitSet FOLLOW_COMMA_in_classParent6377 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    // $ANTLR end "withStatement"
    public static final BitSet FOLLOW_genericTypeIdent_in_classParent6379 = new BitSet(new long[]{0x0000000002000000L, 0x0000000000000000L, 0x0000000000000400L});

    ;
    public static final BitSet FOLLOW_RPAREN_in_classParent6383 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "withItem"
    public static final BitSet FOLLOW_visibility_in_classItem6451 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_classMethod_in_classItem6484 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "compoundStatement"
    public static final BitSet FOLLOW_classField_in_classItem6517 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_classProperty_in_classItem6550 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "statementList"
    public static final BitSet FOLLOW_constSection_in_classItem6583 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_typeSection_in_classItem6616 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "simpleStatement"
    public static final BitSet FOLLOW_CLASS_in_classItem6650 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x4000000002000000L});

    ;
    public static final BitSet FOLLOW_varSection_in_classItem6654 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "gotoStatement"
    public static final BitSet FOLLOW_CLASS_in_classHelperDecl6704 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000020L});

    ;
    public static final BitSet FOLLOW_HELPER_in_classHelperDecl6706 = new BitSet(new long[]{0x8000000000000000L, 0x0000000002000000L});
    // $ANTLR end "constExpression"
    public static final BitSet FOLLOW_classParent_in_classHelperDecl6709 = new BitSet(new long[]{0x8000000000000000L});

    ;
    public static final BitSet FOLLOW_FOR_in_classHelperDecl6713 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    // $ANTLR end "recordConstExpression"
    public static final BitSet FOLLOW_typeId_in_classHelperDecl6715 = new BitSet(new long[]{0x0002000810820000L, 0x03D8008000080002L, 0x4000000002400000L});

    ;
    public static final BitSet FOLLOW_classHelperItem_in_classHelperDecl6718 = new BitSet(new long[]{0x0002000810820000L, 0x03D8008000080002L, 0x4000000002400000L});
    // $ANTLR end "tryStatement"
    public static final BitSet FOLLOW_END_in_classHelperDecl6722 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_visibility_in_classHelperItem6787 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "handlerList"
    public static final BitSet FOLLOW_classMethod_in_classHelperItem6820 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_classProperty_in_classHelperItem6853 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "handler"
    public static final BitSet FOLLOW_CLASS_in_classHelperItem6887 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x4000000002000000L});

    ;
    public static final BitSet FOLLOW_varSection_in_classHelperItem6891 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "handlerIdent"
    public static final BitSet FOLLOW_interfaceKey_in_interfaceTypeDecl6939 = new BitSet(new long[]{0x0002000810800000L, 0x0050008002080002L});

    ;
    public static final BitSet FOLLOW_classParent_in_interfaceTypeDecl6942 = new BitSet(new long[]{0x0002000810800000L, 0x0050008000080002L});
    // $ANTLR end "handlerStatement"
    public static final BitSet FOLLOW_interfaceGuid_in_interfaceTypeDecl6947 = new BitSet(new long[]{0x0002000810800000L, 0x0050008000080002L});

    ;
    public static final BitSet FOLLOW_interfaceItem_in_interfaceTypeDecl6952 = new BitSet(new long[]{0x0002000810800000L, 0x0050008000080002L});
    // $ANTLR end "raiseStatement"
    public static final BitSet FOLLOW_END_in_interfaceTypeDecl6956 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_interfaceKey_in_interfaceTypeDecl7048 = new BitSet(new long[]{0x0000000000000002L, 0x0000000002000000L});
    // $ANTLR end "assemblerStatement"
    public static final BitSet FOLLOW_classParent_in_interfaceTypeDecl7051 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_LBRACK_in_interfaceGuid7235 = new BitSet(new long[]{0x0000000000000000L, 0x0400000000000000L});
    // $ANTLR end "methodDirective"
    public static final BitSet FOLLOW_QuotedString_in_interfaceGuid7237 = new BitSet(new long[]{0x0000000000000000L, 0x1000000000000000L});

    ;
    public static final BitSet FOLLOW_RBRACK_in_interfaceGuid7239 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "functionDirective"
    public static final BitSet FOLLOW_classMethod_in_interfaceItem7295 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_CLASS_in_interfaceItem7329 = new BitSet(new long[]{0x0000000000800000L, 0x0040000000080000L});
    // $ANTLR end "reintroduceDirective"
    public static final BitSet FOLLOW_classProperty_in_interfaceItem7333 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_OBJECT_in_objectDecl7388 = new BitSet(new long[]{0x1052000A70928140L, 0x839A02904B081402L, 0x0000400000E0002DL, 0x0000000000000111L});
    // $ANTLR end "overloadDirective"
    public static final BitSet FOLLOW_classParent_in_objectDecl7391 = new BitSet(new long[]{0x1052000A70928140L, 0x839A029049081402L, 0x0000400000E0002DL, 0x0000000000000111L});

    ;
    public static final BitSet FOLLOW_objectItem_in_objectDecl7396 = new BitSet(new long[]{0x1052000A70928140L, 0x839A029049081402L, 0x0000400000E0002DL, 0x0000000000000111L});
    // $ANTLR end "bindingDirective"
    public static final BitSet FOLLOW_END_in_objectDecl7400 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_visibility_in_objectItem7469 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "abstractDirective"
    public static final BitSet FOLLOW_classMethod_in_objectItem7502 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_classField_in_objectItem7535 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "inlineDirective"
    public static final BitSet FOLLOW_simpleRecord_in_recordDecl7590 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_variantRecord_in_recordDecl7623 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "callConvention"
    public static final BitSet FOLLOW_RECORD_in_simpleRecord7676 = new BitSet(new long[]{0x1052000A78928140L, 0x83DA029049081402L, 0x4000400022E0022DL, 0x0000000000000111L});

    ;
    public static final BitSet FOLLOW_recordField_in_simpleRecord7679 = new BitSet(new long[]{0x1052000A78928140L, 0x83DA029049081402L, 0x4000400022E0022DL, 0x0000000000000111L});
    // $ANTLR end "callConventionNoSemi"
    public static final BitSet FOLLOW_recordItem_in_simpleRecord7684 = new BitSet(new long[]{0x1052000A78928140L, 0x83DA029049081402L, 0x4000400022E0022DL, 0x0000000000000111L});

    ;
    public static final BitSet FOLLOW_END_in_simpleRecord7688 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "oldCallConventionDirective"
    public static final BitSet FOLLOW_RECORD_in_variantRecord7754 = new BitSet(new long[]{0x1050000260308140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});

    ;
    public static final BitSet FOLLOW_recordField_in_variantRecord7757 = new BitSet(new long[]{0x1050000260308140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    // $ANTLR end "hintingDirective"
    public static final BitSet FOLLOW_recordVariantSection_in_variantRecord7761 = new BitSet(new long[]{0x0002000000000000L});

    ;
    public static final BitSet FOLLOW_END_in_variantRecord7763 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "externalDirective"
    public static final BitSet FOLLOW_visibility_in_recordItem7829 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_classMethod_in_recordItem7867 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "externalSpecifier"
    public static final BitSet FOLLOW_classProperty_in_recordItem7900 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_constSection_in_recordItem7933 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "dispIDDirective"
    public static final BitSet FOLLOW_typeSection_in_recordItem7966 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_recordField_in_recordItem7999 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "ident"
    public static final BitSet FOLLOW_CLASS_in_recordItem8033 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x4000000002000000L});

    ;
    public static final BitSet FOLLOW_varSection_in_recordItem8037 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "usedKeywordsAsNames"
    public static final BitSet FOLLOW_identList_in_recordField8091 = new BitSet(new long[]{0x0000000001000000L});

    ;
    public static final BitSet FOLLOW_COLON_in_recordField8093 = new BitSet(new long[]{0x1A500122E0918340L, 0x841722955F093402L, 0x0008E00128E0402FL, 0x0000000000000311L});
    // $ANTLR end "identList"
    public static final BitSet FOLLOW_typeDecl_in_recordField8095 = new BitSet(new long[]{0x0020000400000002L, 0x0000800000800000L, 0x0000000000002000L});

    ;
    public static final BitSet FOLLOW_hintingDirective_in_recordField8098 = new BitSet(new long[]{0x0020000400000002L, 0x0000800000800000L, 0x0000000000002000L});
    // $ANTLR end "identListFlat"
    public static final BitSet FOLLOW_SEMI_in_recordField8103 = new BitSet(new long[]{0x0000000000000002L});

    ;
    public static final BitSet FOLLOW_identList_in_recordVariantField8203 = new BitSet(new long[]{0x0000000001000000L});
    // $ANTLR end "label"
    public static final BitSet FOLLOW_COLON_in_recordVariantField8205 = new BitSet(new long[]{0x1A500122E0918340L, 0x841722955F093402L, 0x0008E00128E0402FL, 0x0000000000000311L});

    ;
    public static final BitSet FOLLOW_typeDecl_in_recordVariantField8207 = new BitSet(new long[]{0x0020000400000002L, 0x0000800000800000L, 0x0000000000002000L});
    // $ANTLR end "intNum"
    public static final BitSet FOLLOW_hintingDirective_in_recordVariantField8210 = new BitSet(new long[]{0x0020000400000002L, 0x0000800000800000L, 0x0000000000002000L});

    ;
    public static final BitSet FOLLOW_SEMI_in_recordVariantField8215 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end "realNum"
    public static final BitSet FOLLOW_CASE_in_recordVariantSection8312 = new BitSet(new long[]{0x1A500122E0918340L, 0x841722955F093402L, 0x0008E00128E0402FL, 0x0000000000000311L});

    ;
    public static final BitSet FOLLOW_ident_in_recordVariantSection8315 = new BitSet(new long[]{0x0000000001000000L});
    // $ANTLR end "namespacedQualifiedIdent"
    public static final BitSet FOLLOW_COLON_in_recordVariantSection8317 = new BitSet(new long[]{0x1A500122E0918340L, 0x841722955F093402L, 0x0008E00128E0402FL, 0x0000000000000311L});

    ;
    public static final BitSet FOLLOW_typeDecl_in_recordVariantSection8321 = new BitSet(new long[]{0x0000000000000000L, 0x0000002000000000L});
    // $ANTLR end "namespaceName"
    public static final BitSet FOLLOW_OF_in_recordVariantSection8323 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0202DL, 0x0000000000000311L});

    ;
    public static final BitSet FOLLOW_recordVariant_in_recordVariantSection8326 = new BitSet(new long[]{0x12500102E0118142L, 0x841702955F083402L, 0x0008E00108E0202DL, 0x0000000000000311L});
    // $ANTLR end "qualifiedIdent"
    public static final BitSet FOLLOW_SEMI_in_recordVariantSection8330 = new BitSet(new long[]{0x12500102E0118142L, 0x841702955F083402L, 0x0008E00108E0202DL, 0x0000000000000311L});
    // $ANTLR end synpred23_Delphi
    public static final BitSet FOLLOW_recordVariant_in_recordVariantSection8334 = new BitSet(new long[]{0x12500102E0118142L, 0x841702955F083402L, 0x0008E00108E0202DL, 0x0000000000000311L});
    // $ANTLR end synpred24_Delphi
    public static final BitSet FOLLOW_SEMI_in_recordVariantSection8338 = new BitSet(new long[]{0x12500102E0118142L, 0x841702955F083402L, 0x0008E00108E0202DL, 0x0000000000000311L});
    // $ANTLR end synpred30_Delphi
    public static final BitSet FOLLOW_constExpression_in_recordVariant8392 = new BitSet(new long[]{0x0000000003000000L});
    // $ANTLR end synpred31_Delphi
    public static final BitSet FOLLOW_COMMA_in_recordVariant8395 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    // $ANTLR end synpred32_Delphi
    public static final BitSet FOLLOW_constExpression_in_recordVariant8397 = new BitSet(new long[]{0x0000000003000000L});
    // $ANTLR end synpred36_Delphi
    public static final BitSet FOLLOW_COLON_in_recordVariant8401 = new BitSet(new long[]{0x0000000000000000L, 0x0000000002000000L});
    // $ANTLR end synpred38_Delphi
    public static final BitSet FOLLOW_LPAREN_in_recordVariant8403 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0042DL, 0x0000000000000111L});
    // $ANTLR end synpred40_Delphi
    public static final BitSet FOLLOW_recordVariantField_in_recordVariant8406 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0042DL, 0x0000000000000111L});
    // $ANTLR end synpred42_Delphi
    public static final BitSet FOLLOW_RPAREN_in_recordVariant8410 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end synpred45_Delphi
    public static final BitSet FOLLOW_RECORD_in_recordHelperDecl8462 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000020L});
    // $ANTLR end synpred46_Delphi
    public static final BitSet FOLLOW_HELPER_in_recordHelperDecl8464 = new BitSet(new long[]{0x8000000000000000L});
    // $ANTLR end synpred48_Delphi
    public static final BitSet FOLLOW_FOR_in_recordHelperDecl8466 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    // $ANTLR end synpred50_Delphi
    public static final BitSet FOLLOW_typeId_in_recordHelperDecl8468 = new BitSet(new long[]{0x0002000810820000L, 0x03D8008000080002L, 0x0000000000400000L});
    // $ANTLR end synpred53_Delphi
    public static final BitSet FOLLOW_recordHelperItem_in_recordHelperDecl8471 = new BitSet(new long[]{0x0002000810820000L, 0x03D8008000080002L, 0x0000000000400000L});
    // $ANTLR end synpred54_Delphi
    public static final BitSet FOLLOW_END_in_recordHelperDecl8475 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end synpred61_Delphi
    public static final BitSet FOLLOW_visibility_in_recordHelperItem8524 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end synpred62_Delphi
    public static final BitSet FOLLOW_classMethod_in_recordHelperItem8557 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end synpred63_Delphi
    public static final BitSet FOLLOW_classProperty_in_recordHelperItem8590 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end synpred64_Delphi
    public static final BitSet FOLLOW_customAttribute_in_classMethod8645 = new BitSet(new long[]{0x0000000810800000L, 0x0010000000000000L});
    // $ANTLR end synpred65_Delphi
    public static final BitSet FOLLOW_CLASS_in_classMethod8650 = new BitSet(new long[]{0x0000000810000000L, 0x0010000000000000L});
    // $ANTLR end synpred67_Delphi
    public static final BitSet FOLLOW_methodKey_in_classMethod8654 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    // $ANTLR end synpred68_Delphi
    public static final BitSet FOLLOW_ident_in_classMethod8656 = new BitSet(new long[]{0x0000000000000000L, 0x0000000006000000L, 0x0000000000002000L});
    // $ANTLR end synpred78_Delphi
    public static final BitSet FOLLOW_genericDefinition_in_classMethod8659 = new BitSet(new long[]{0x0000000000000000L, 0x0000000002000000L, 0x0000000000002000L});
    // $ANTLR end synpred79_Delphi
    public static final BitSet FOLLOW_formalParameterSection_in_classMethod8664 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002000L});
    // $ANTLR end synpred81_Delphi
    public static final BitSet FOLLOW_SEMI_in_classMethod8668 = new BitSet(new long[]{0x1460201400401022L, 0x0000CC0089808000L, 0x0000000000180818L, 0x0000000000000002L});
    // $ANTLR end synpred84_Delphi
    public static final BitSet FOLLOW_methodDirective_in_classMethod8671 = new BitSet(new long[]{0x1460201400401022L, 0x0000CC0089808000L, 0x0000000000180818L, 0x0000000000000002L});
    // $ANTLR end synpred85_Delphi
    public static final BitSet FOLLOW_customAttribute_in_classMethod8779 = new BitSet(new long[]{0x0000000000800000L, 0x0000000000000002L});
    // $ANTLR end synpred86_Delphi
    public static final BitSet FOLLOW_CLASS_in_classMethod8784 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000002L});
    // $ANTLR end synpred88_Delphi
    public static final BitSet FOLLOW_FUNCTION_in_classMethod8788 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    // $ANTLR end synpred90_Delphi
    public static final BitSet FOLLOW_ident_in_classMethod8790 = new BitSet(new long[]{0x0000000001000000L, 0x0000000006000000L});
    // $ANTLR end synpred92_Delphi
    public static final BitSet FOLLOW_genericDefinition_in_classMethod8793 = new BitSet(new long[]{0x0000000001000000L, 0x0000000002000000L});
    // $ANTLR end synpred93_Delphi
    public static final BitSet FOLLOW_formalParameterSection_in_classMethod8798 = new BitSet(new long[]{0x0000000001000000L});
    // $ANTLR end synpred94_Delphi
    public static final BitSet FOLLOW_COLON_in_classMethod8802 = new BitSet(new long[]{0x1A500122E0918340L, 0x841722955F093402L, 0x0008E00128E0402FL, 0x0000000000000311L});
    // $ANTLR end synpred95_Delphi
    public static final BitSet FOLLOW_customAttribute_in_classMethod8805 = new BitSet(new long[]{0x1A500122E0918340L, 0x841722955F093402L, 0x0008E00128E0402FL, 0x0000000000000311L});
    // $ANTLR end synpred100_Delphi
    public static final BitSet FOLLOW_typeDecl_in_classMethod8809 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002000L});
    // $ANTLR end synpred109_Delphi
    public static final BitSet FOLLOW_SEMI_in_classMethod8811 = new BitSet(new long[]{0x1460201400401022L, 0x0000CC0089808000L, 0x0000000000180818L, 0x0000000000000002L});
    // $ANTLR end synpred110_Delphi
    public static final BitSet FOLLOW_methodDirective_in_classMethod8814 = new BitSet(new long[]{0x1460201400401022L, 0x0000CC0089808000L, 0x0000000000180818L, 0x0000000000000002L});
    // $ANTLR end synpred118_Delphi
    public static final BitSet FOLLOW_customAttribute_in_classMethod8931 = new BitSet(new long[]{0x0000000000800000L, 0x0000008000000000L});
    // $ANTLR end synpred119_Delphi
    public static final BitSet FOLLOW_CLASS_in_classMethod8936 = new BitSet(new long[]{0x0000000000000000L, 0x0000008000000000L});
    // $ANTLR end synpred122_Delphi
    public static final BitSet FOLLOW_OPERATOR_in_classMethod8940 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    // $ANTLR end synpred123_Delphi
    public static final BitSet FOLLOW_ident_in_classMethod8942 = new BitSet(new long[]{0x0000000001000000L, 0x0000000006000000L});
    // $ANTLR end synpred124_Delphi
    public static final BitSet FOLLOW_genericDefinition_in_classMethod8945 = new BitSet(new long[]{0x0000000001000000L, 0x0000000002000000L});
    // $ANTLR end synpred125_Delphi
    public static final BitSet FOLLOW_formalParameterSection_in_classMethod8950 = new BitSet(new long[]{0x0000000001000000L});
    // $ANTLR end synpred132_Delphi
    public static final BitSet FOLLOW_COLON_in_classMethod8954 = new BitSet(new long[]{0x1A500122E0918340L, 0x841722955F093402L, 0x0008E00128E0402FL, 0x0000000000000311L});
    // $ANTLR end synpred133_Delphi
    public static final BitSet FOLLOW_customAttribute_in_classMethod8957 = new BitSet(new long[]{0x1A500122E0918340L, 0x841722955F093402L, 0x0008E00128E0402FL, 0x0000000000000311L});
    // $ANTLR end synpred138_Delphi
    public static final BitSet FOLLOW_typeDecl_in_classMethod8961 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002000L});
    // $ANTLR end synpred139_Delphi
    public static final BitSet FOLLOW_SEMI_in_classMethod8963 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end synpred141_Delphi
    public static final BitSet FOLLOW_customAttribute_in_classField9121 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    // $ANTLR end synpred142_Delphi
    public static final BitSet FOLLOW_identList_in_classField9125 = new BitSet(new long[]{0x0000000001000000L});
    // $ANTLR end synpred145_Delphi
    public static final BitSet FOLLOW_COLON_in_classField9127 = new BitSet(new long[]{0x1A500122E0918340L, 0x841722955F093402L, 0x0008E00128E0402FL, 0x0000000000000311L});
    // $ANTLR end synpred146_Delphi
    public static final BitSet FOLLOW_typeDecl_in_classField9129 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002000L});
    // $ANTLR end synpred147_Delphi
    public static final BitSet FOLLOW_SEMI_in_classField9131 = new BitSet(new long[]{0x0020000400000002L, 0x0000800000800000L});
    // $ANTLR end synpred148_Delphi
    public static final BitSet FOLLOW_hintingDirective_in_classField9134 = new BitSet(new long[]{0x0020000400000002L, 0x0000800000800000L});
    // $ANTLR end synpred151_Delphi
    public static final BitSet FOLLOW_customAttribute_in_classProperty9242 = new BitSet(new long[]{0x0000000000800000L, 0x0040000000000000L});
    // $ANTLR end synpred152_Delphi
    public static final BitSet FOLLOW_CLASS_in_classProperty9247 = new BitSet(new long[]{0x0000000000000000L, 0x0040000000000000L});
    // $ANTLR end synpred153_Delphi
    public static final BitSet FOLLOW_PROPERTY_in_classProperty9251 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    // $ANTLR end synpred156_Delphi
    public static final BitSet FOLLOW_ident_in_classProperty9253 = new BitSet(new long[]{0x0000001201000000L, 0x8000000200081400L, 0x0000000000202001L, 0x0000000000000030L});
    // $ANTLR end synpred170_Delphi
    public static final BitSet FOLLOW_classPropertyArray_in_classProperty9256 = new BitSet(new long[]{0x0000001201000000L, 0x8000000200001400L, 0x0000000000202001L, 0x0000000000000030L});
    // $ANTLR end synpred171_Delphi
    public static final BitSet FOLLOW_COLON_in_classProperty9261 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    // $ANTLR end synpred176_Delphi
    public static final BitSet FOLLOW_genericTypeIdent_in_classProperty9263 = new BitSet(new long[]{0x0000001200000000L, 0x8000000200001400L, 0x0000000000202001L, 0x0000000000000030L});
    // $ANTLR end synpred177_Delphi
    public static final BitSet FOLLOW_classPropertyIndex_in_classProperty9268 = new BitSet(new long[]{0x0000001200000000L, 0x8000000200000400L, 0x0000000000202001L, 0x0000000000000030L});
    // $ANTLR end synpred181_Delphi
    public static final BitSet FOLLOW_classPropertySpecifier_in_classProperty9273 = new BitSet(new long[]{0x0000001200000000L, 0x8000000200000400L, 0x0000000000202001L, 0x0000000000000030L});
    // $ANTLR end synpred183_Delphi
    public static final BitSet FOLLOW_SEMI_in_classProperty9277 = new BitSet(new long[]{0x0000000200000002L, 0x0000000200000000L, 0x0000000000200000L});
    // $ANTLR end synpred184_Delphi
    public static final BitSet FOLLOW_classPropertyEndSpecifier_in_classProperty9280 = new BitSet(new long[]{0x0000000200000002L, 0x0000000200000000L, 0x0000000000200000L});
    // $ANTLR end synpred188_Delphi
    public static final BitSet FOLLOW_LBRACK_in_classPropertyArray9446 = new BitSet(new long[]{0x1050000268108140L, 0x8002029049081400L, 0x4000400000E0002DL, 0x0000000000000111L});
    // $ANTLR end synpred189_Delphi
    public static final BitSet FOLLOW_formalParameterList_in_classPropertyArray9448 = new BitSet(new long[]{0x0000000000000000L, 0x1000000000000000L});
    // $ANTLR end synpred191_Delphi
    public static final BitSet FOLLOW_RBRACK_in_classPropertyArray9450 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end synpred198_Delphi
    public static final BitSet FOLLOW_INDEX_in_classPropertyIndex9497 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    // $ANTLR end synpred202_Delphi
    public static final BitSet FOLLOW_expression_in_classPropertyIndex9499 = new BitSet(new long[]{0x0000000000000002L, 0x0000000000000000L, 0x0000000000002000L});
    // $ANTLR end synpred203_Delphi
    public static final BitSet FOLLOW_SEMI_in_classPropertyIndex9502 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end synpred206_Delphi
    public static final BitSet FOLLOW_classPropertyReadWrite_in_classPropertySpecifier9549 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end synpred207_Delphi
    public static final BitSet FOLLOW_classPropertyDispInterface_in_classPropertySpecifier9585 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end synpred220_Delphi
    public static final BitSet FOLLOW_STORED_in_classPropertySpecifier9618 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    // $ANTLR end synpred221_Delphi
    public static final BitSet FOLLOW_expression_in_classPropertySpecifier9620 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end synpred224_Delphi
    public static final BitSet FOLLOW_DEFAULT_in_classPropertySpecifier9653 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    // $ANTLR end synpred225_Delphi
    public static final BitSet FOLLOW_expression_in_classPropertySpecifier9655 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end synpred226_Delphi
    public static final BitSet FOLLOW_DEFAULT_in_classPropertySpecifier9688 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end synpred227_Delphi
    public static final BitSet FOLLOW_NODEFAULT_in_classPropertySpecifier9737 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end synpred230_Delphi
    public static final BitSet FOLLOW_IMPLEMENTS_in_classPropertySpecifier9770 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    // $ANTLR end synpred231_Delphi
    public static final BitSet FOLLOW_typeId_in_classPropertySpecifier9772 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end synpred234_Delphi
    public static final BitSet FOLLOW_STORED_in_classPropertyEndSpecifier9812 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    // $ANTLR end synpred236_Delphi
    public static final BitSet FOLLOW_expression_in_classPropertyEndSpecifier9814 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002000L});
    // $ANTLR end synpred237_Delphi
    public static final BitSet FOLLOW_SEMI_in_classPropertyEndSpecifier9816 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end synpred239_Delphi
    public static final BitSet FOLLOW_DEFAULT_in_classPropertyEndSpecifier9853 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    // $ANTLR end synpred247_Delphi
    public static final BitSet FOLLOW_expression_in_classPropertyEndSpecifier9855 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002000L});
    // $ANTLR end synpred248_Delphi
    public static final BitSet FOLLOW_SEMI_in_classPropertyEndSpecifier9857 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end synpred249_Delphi
    public static final BitSet FOLLOW_DEFAULT_in_classPropertyEndSpecifier9890 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002000L});
    // $ANTLR end synpred251_Delphi
    public static final BitSet FOLLOW_SEMI_in_classPropertyEndSpecifier9892 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end synpred252_Delphi
    public static final BitSet FOLLOW_NODEFAULT_in_classPropertyEndSpecifier9938 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002000L});
    // $ANTLR end synpred256_Delphi
    public static final BitSet FOLLOW_SEMI_in_classPropertyEndSpecifier9940 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end synpred262_Delphi
    public static final BitSet FOLLOW_READ_in_classPropertyReadWrite9984 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    // $ANTLR end synpred264_Delphi
    public static final BitSet FOLLOW_qualifiedIdent_in_classPropertyReadWrite9986 = new BitSet(new long[]{0x0000000000000002L, 0x0000000000080000L});
    // $ANTLR end synpred265_Delphi
    public static final BitSet FOLLOW_LBRACK_in_classPropertyReadWrite9989 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    // $ANTLR end synpred266_Delphi
    public static final BitSet FOLLOW_expression_in_classPropertyReadWrite9991 = new BitSet(new long[]{0x0000000000000000L, 0x1000000000000000L});
    // $ANTLR end synpred268_Delphi
    public static final BitSet FOLLOW_RBRACK_in_classPropertyReadWrite9993 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end synpred269_Delphi
    public static final BitSet FOLLOW_WRITE_in_classPropertyReadWrite10067 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    // $ANTLR end synpred271_Delphi
    public static final BitSet FOLLOW_qualifiedIdent_in_classPropertyReadWrite10069 = new BitSet(new long[]{0x0000000000000002L, 0x0000000000080000L});
    // $ANTLR end synpred272_Delphi
    public static final BitSet FOLLOW_LBRACK_in_classPropertyReadWrite10072 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    // $ANTLR end synpred273_Delphi
    public static final BitSet FOLLOW_expression_in_classPropertyReadWrite10074 = new BitSet(new long[]{0x0000000000000000L, 0x1000000000000000L});
    // $ANTLR end synpred274_Delphi
    public static final BitSet FOLLOW_RBRACK_in_classPropertyReadWrite10076 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end synpred277_Delphi
    public static final BitSet FOLLOW_READONLY_in_classPropertyDispInterface10155 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002000L});
    // $ANTLR end synpred278_Delphi
    public static final BitSet FOLLOW_SEMI_in_classPropertyDispInterface10157 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end synpred279_Delphi
    public static final BitSet FOLLOW_WRITEONLY_in_classPropertyDispInterface10190 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002000L});
    // $ANTLR end synpred280_Delphi
    public static final BitSet FOLLOW_SEMI_in_classPropertyDispInterface10192 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end synpred281_Delphi
    public static final BitSet FOLLOW_dispIDDirective_in_classPropertyDispInterface10225 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end synpred282_Delphi
    public static final BitSet FOLLOW_STRICT_in_visibility10281 = new BitSet(new long[]{0x0000000000000000L, 0x0080000000000000L});
    // $ANTLR end synpred283_Delphi
    public static final BitSet FOLLOW_PROTECTED_in_visibility10285 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end synpred284_Delphi
    public static final BitSet FOLLOW_STRICT_in_visibility10320 = new BitSet(new long[]{0x0000000000000000L, 0x0008000000000000L});
    // $ANTLR end synpred285_Delphi
    public static final BitSet FOLLOW_PRIVATE_in_visibility10324 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end synpred286_Delphi
    public static final BitSet FOLLOW_PUBLIC_in_visibility10357 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end synpred287_Delphi
    public static final BitSet FOLLOW_PUBLISHED_in_visibility10390 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end synpred288_Delphi
    public static final BitSet FOLLOW_AUTOMATED_in_visibility10424 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end synpred289_Delphi
    public static final BitSet FOLLOW_PROCEDURE_in_exportedProcHeading10478 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    // $ANTLR end synpred290_Delphi
    public static final BitSet FOLLOW_ident_in_exportedProcHeading10480 = new BitSet(new long[]{0x0000000001000000L, 0x0000000002000000L});
    // $ANTLR end synpred291_Delphi
    public static final BitSet FOLLOW_formalParameterSection_in_exportedProcHeading10483 = new BitSet(new long[]{0x0000000001000000L});
    // $ANTLR end synpred292_Delphi
    public static final BitSet FOLLOW_COLON_in_exportedProcHeading10487 = new BitSet(new long[]{0x1A500122E0918340L, 0x841722955F093402L, 0x0008E00128E0402FL, 0x0000000000000311L});
    // $ANTLR end synpred293_Delphi
    public static final BitSet FOLLOW_customAttribute_in_exportedProcHeading10490 = new BitSet(new long[]{0x1A500122E0918340L, 0x841722955F093402L, 0x0008E00128E0402FL, 0x0000000000000311L});
    // $ANTLR end synpred294_Delphi
    public static final BitSet FOLLOW_typeDecl_in_exportedProcHeading10494 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002000L});
    // $ANTLR end synpred295_Delphi
    public static final BitSet FOLLOW_SEMI_in_exportedProcHeading10496 = new BitSet(new long[]{0x0560000400401002L, 0x0000C40081808000L, 0x8400000000100808L});
    // $ANTLR end synpred296_Delphi
    public static final BitSet FOLLOW_functionDirective_in_exportedProcHeading10499 = new BitSet(new long[]{0x0560000400401002L, 0x0000C40081808000L, 0x8400000000100808L});
    // $ANTLR end synpred297_Delphi
    public static final BitSet FOLLOW_FUNCTION_in_exportedProcHeading10534 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    // $ANTLR end synpred299_Delphi
    public static final BitSet FOLLOW_ident_in_exportedProcHeading10536 = new BitSet(new long[]{0x0000000000000000L, 0x0000000002000000L, 0x0000000000002000L});
    // $ANTLR end synpred300_Delphi
    public static final BitSet FOLLOW_formalParameterSection_in_exportedProcHeading10539 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002000L});
    // $ANTLR end synpred303_Delphi
    public static final BitSet FOLLOW_SEMI_in_exportedProcHeading10543 = new BitSet(new long[]{0x0560000400401002L, 0x0000C40081808000L, 0x8400000000100808L});
    // $ANTLR end synpred304_Delphi
    public static final BitSet FOLLOW_functionDirective_in_exportedProcHeading10546 = new BitSet(new long[]{0x0560000400401002L, 0x0000C40081808000L, 0x8400000000100808L});
    // $ANTLR end synpred305_Delphi
    public static final BitSet FOLLOW_methodDeclHeading_in_methodDecl10603 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002000L});
    // $ANTLR end synpred306_Delphi
    public static final BitSet FOLLOW_SEMI_in_methodDecl10605 = new BitSet(new long[]{0x14E0201C18C81822L, 0x0010CC00898C8002L, 0x4000000022182A18L, 0x0000000000000002L});
    // $ANTLR end synpred307_Delphi
    public static final BitSet FOLLOW_methodDirective_in_methodDecl10608 = new BitSet(new long[]{0x14E0201C18C81822L, 0x0010CC00898C8002L, 0x4000000022182A18L, 0x0000000000000002L});
    // $ANTLR end synpred317_Delphi
    public static final BitSet FOLLOW_methodBody_in_methodDecl10613 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end synpred348_Delphi
    public static final BitSet FOLLOW_customAttribute_in_methodDeclHeading10673 = new BitSet(new long[]{0x0000000810800000L, 0x0010000000000000L});
    // $ANTLR end synpred349_Delphi
    public static final BitSet FOLLOW_CLASS_in_methodDeclHeading10678 = new BitSet(new long[]{0x0000000810000000L, 0x0010000000000000L});
    // $ANTLR end synpred356_Delphi
    public static final BitSet FOLLOW_methodKey_in_methodDeclHeading10683 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    // $ANTLR end synpred357_Delphi
    public static final BitSet FOLLOW_methodName_in_methodDeclHeading10685 = new BitSet(new long[]{0x0000000000000002L, 0x0000000002000000L});
    // $ANTLR end synpred358_Delphi
    public static final BitSet FOLLOW_formalParameterSection_in_methodDeclHeading10688 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end synpred359_Delphi
    public static final BitSet FOLLOW_customAttribute_in_methodDeclHeading10786 = new BitSet(new long[]{0x0000000000800000L, 0x0000000000000002L});
    // $ANTLR end synpred361_Delphi
    public static final BitSet FOLLOW_CLASS_in_methodDeclHeading10791 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000002L});
    // $ANTLR end synpred362_Delphi
    public static final BitSet FOLLOW_FUNCTION_in_methodDeclHeading10795 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    // $ANTLR end synpred363_Delphi
    public static final BitSet FOLLOW_methodName_in_methodDeclHeading10797 = new BitSet(new long[]{0x0000000001000002L, 0x0000000002000000L});
    // $ANTLR end synpred364_Delphi
    public static final BitSet FOLLOW_formalParameterSection_in_methodDeclHeading10800 = new BitSet(new long[]{0x0000000001000002L});
    // $ANTLR end synpred365_Delphi
    public static final BitSet FOLLOW_COLON_in_methodDeclHeading10805 = new BitSet(new long[]{0x1A500122E0918340L, 0x841722955F093402L, 0x0008E00128E0402FL, 0x0000000000000311L});
    // $ANTLR end synpred366_Delphi
    public static final BitSet FOLLOW_customAttribute_in_methodDeclHeading10808 = new BitSet(new long[]{0x1A500122E0918340L, 0x841722955F093402L, 0x0008E00128E0402FL, 0x0000000000000311L});
    // $ANTLR end synpred368_Delphi
    public static final BitSet FOLLOW_typeDecl_in_methodDeclHeading10812 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end synpred372_Delphi
    public static final BitSet FOLLOW_customAttribute_in_methodDeclHeading10921 = new BitSet(new long[]{0x0000000000800000L});
    // $ANTLR end synpred374_Delphi
    public static final BitSet FOLLOW_CLASS_in_methodDeclHeading10925 = new BitSet(new long[]{0x0000000000000000L, 0x0000008000000000L});
    // $ANTLR end synpred375_Delphi
    public static final BitSet FOLLOW_OPERATOR_in_methodDeclHeading10927 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    // $ANTLR end synpred376_Delphi
    public static final BitSet FOLLOW_methodName_in_methodDeclHeading10929 = new BitSet(new long[]{0x0000000001000002L, 0x0000000002000000L});
    // $ANTLR end synpred377_Delphi
    public static final BitSet FOLLOW_formalParameterSection_in_methodDeclHeading10932 = new BitSet(new long[]{0x0000000001000002L});
    // $ANTLR end synpred378_Delphi
    public static final BitSet FOLLOW_COLON_in_methodDeclHeading10937 = new BitSet(new long[]{0x1A500122E0918340L, 0x841722955F093402L, 0x0008E00128E0402FL, 0x0000000000000311L});
    // $ANTLR end synpred381_Delphi
    public static final BitSet FOLLOW_customAttribute_in_methodDeclHeading10940 = new BitSet(new long[]{0x1A500122E0918340L, 0x841722955F093402L, 0x0008E00128E0402FL, 0x0000000000000311L});
    // $ANTLR end synpred384_Delphi
    public static final BitSet FOLLOW_typeDecl_in_methodDeclHeading10944 = new BitSet(new long[]{0x0000000000000002L});
    // $ANTLR end synpred385_Delphi
    public static final BitSet FOLLOW_ident_in_methodName11207 = new BitSet(new long[]{0x0000010000000000L, 0x0000000004000000L});
    // $ANTLR end synpred386_Delphi
    public static final BitSet FOLLOW_genericDefinition_in_methodName11210 = new BitSet(new long[]{0x0000010000000000L});
    // $ANTLR end synpred404_Delphi
    public static final BitSet FOLLOW_DOT_in_methodName11215 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    // $ANTLR end synpred428_Delphi
    public static final BitSet FOLLOW_ident_in_methodName11217 = new BitSet(new long[]{0x0000010000000000L, 0x0000000004000000L});
    // $ANTLR end synpred467_Delphi
    public static final BitSet FOLLOW_genericDefinition_in_methodName11220 = new BitSet(new long[]{0x0000010000000000L});
    // $ANTLR end synpred468_Delphi
    public static final BitSet FOLLOW_DOT_in_methodName11226 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    // $ANTLR end synpred469_Delphi

    // Delegated rules
    public static final BitSet FOLLOW_ident_in_methodName11228 = new BitSet(new long[]{0x0000000000000002L, 0x0000000004000000L});
    public static final BitSet FOLLOW_genericDefinition_in_methodName11231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procDeclHeading_in_procDecl11319 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002000L});
    public static final BitSet FOLLOW_SEMI_in_procDecl11321 = new BitSet(new long[]{0x05E0000C18C81802L, 0x0010C400818C8003L, 0xC400000022102A08L});
    public static final BitSet FOLLOW_functionDirective_in_procDecl11324 = new BitSet(new long[]{0x05E0000C18C81802L, 0x0010C400818C8003L, 0xC400000022102A08L});
    public static final BitSet FOLLOW_procBody_in_procDecl11329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_customAttribute_in_procDeclHeading11395 = new BitSet(new long[]{0x0000000000000000L, 0x0010000000000000L});
    public static final BitSet FOLLOW_PROCEDURE_in_procDeclHeading11399 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    public static final BitSet FOLLOW_ident_in_procDeclHeading11401 = new BitSet(new long[]{0x0000000000000002L, 0x0000000002000000L});
    public static final BitSet FOLLOW_formalParameterSection_in_procDeclHeading11404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_customAttribute_in_procDeclHeading11504 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_in_procDeclHeading11508 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    public static final BitSet FOLLOW_ident_in_procDeclHeading11510 = new BitSet(new long[]{0x0000000001000000L, 0x0000000002000000L});
    public static final BitSet FOLLOW_formalParameterSection_in_procDeclHeading11513 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_COLON_in_procDeclHeading11517 = new BitSet(new long[]{0x1A500122E0918340L, 0x841722955F093402L, 0x0008E00128E0402FL, 0x0000000000000311L});
    public static final BitSet FOLLOW_typeDecl_in_procDeclHeading11519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_formalParameterSection11619 = new BitSet(new long[]{0x1050000268108140L, 0x8002029049081400L, 0x4000400000E0042DL, 0x0000000000000111L});
    public static final BitSet FOLLOW_formalParameterList_in_formalParameterSection11622 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000000400L});
    public static final BitSet FOLLOW_RPAREN_in_formalParameterSection11626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameter_in_formalParameterList11679 = new BitSet(new long[]{0x0000000000000002L, 0x0000000000000000L, 0x0000000000002000L});
    public static final BitSet FOLLOW_SEMI_in_formalParameterList11682 = new BitSet(new long[]{0x1050000268108140L, 0x8002029049081400L, 0x4000400000E0002DL, 0x0000000000000111L});
    public static final BitSet FOLLOW_formalParameter_in_formalParameterList11684 = new BitSet(new long[]{0x0000000000000002L, 0x0000000000000000L, 0x0000000000002000L});
    public static final BitSet FOLLOW_customAttribute_in_formalParameter11746 = new BitSet(new long[]{0x1050000268108140L, 0x8002029049001400L, 0x4000400000E0002DL, 0x0000000000000111L});
    public static final BitSet FOLLOW_parmType_in_formalParameter11751 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    public static final BitSet FOLLOW_identListFlat_in_formalParameter11755 = new BitSet(new long[]{0x0004000001000002L});
    public static final BitSet FOLLOW_COLON_in_formalParameter11758 = new BitSet(new long[]{0x1A500122E0918340L, 0x841722955F093402L, 0x0008E00128E0402FL, 0x0000000000000311L});
    public static final BitSet FOLLOW_typeDecl_in_formalParameter11760 = new BitSet(new long[]{0x0004000000000002L});
    public static final BitSet FOLLOW_EQUAL_in_formalParameter11765 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_expression_in_formalParameter11767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_methodBody11990 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002000L});
    public static final BitSet FOLLOW_SEMI_in_methodBody11992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FORWARD_in_procBody12053 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002000L});
    public static final BitSet FOLLOW_SEMI_in_procBody12055 = new BitSet(new long[]{0x0560000400401002L, 0x0000C40081808000L, 0x8400000000100808L});
    public static final BitSet FOLLOW_functionDirective_in_procBody12058 = new BitSet(new long[]{0x0560000400401002L, 0x0000C40081808000L, 0x8400000000100808L});
    public static final BitSet FOLLOW_EXTERNAL_in_procBody12096 = new BitSet(new long[]{0x0560000400401002L, 0x0000C400C1809000L, 0x8400000000100808L});
    public static final BitSet FOLLOW_NAME_in_procBody12099 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_expression_in_procBody12101 = new BitSet(new long[]{0x0560000400401002L, 0x0000C400C1809000L, 0x8400000000100808L});
    public static final BitSet FOLLOW_INDEX_in_procBody12105 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_expression_in_procBody12107 = new BitSet(new long[]{0x0560000400401002L, 0x0000C400C1809000L, 0x8400000000100808L});
    public static final BitSet FOLLOW_functionDirective_in_procBody12112 = new BitSet(new long[]{0x0560000400401002L, 0x0000C40081808000L, 0x8400000000100808L});
    public static final BitSet FOLLOW_block_in_procBody12148 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002000L});
    public static final BitSet FOLLOW_SEMI_in_procBody12150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_customAttributeList_in_customAttribute12203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_customAttributeDecl_in_customAttributeList12250 = new BitSet(new long[]{0x0000000000000002L, 0x0000000000080000L});
    public static final BitSet FOLLOW_LBRACK_in_customAttributeDecl12298 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    public static final BitSet FOLLOW_namespacedQualifiedIdent_in_customAttributeDecl12300 = new BitSet(new long[]{0x0000000000000000L, 0x1000000002000000L});
    public static final BitSet FOLLOW_LPAREN_in_customAttributeDecl12303 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0042DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_expressionList_in_customAttributeDecl12306 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000000400L});
    public static final BitSet FOLLOW_RPAREN_in_customAttributeDecl12310 = new BitSet(new long[]{0x0000000000000000L, 0x1000000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_customAttributeDecl12314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anonymousExpression_in_expression12427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simpleExpression_in_expression12468 = new BitSet(new long[]{0x0004000000000002L, 0x0000000804420814L});
    public static final BitSet FOLLOW_relOp_in_expression12471 = new BitSet(new long[]{0x12500102E0118140L, 0x840702955F083400L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_simpleExpression_in_expression12473 = new BitSet(new long[]{0x0004000000000002L});
    public static final BitSet FOLLOW_EQUAL_in_expression12478 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_expression_in_expression12480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROCEDURE_in_anonymousExpression12558 = new BitSet(new long[]{0x0080000818880800L, 0x00100000020C0002L, 0x4000000022000200L});
    public static final BitSet FOLLOW_formalParameterSection_in_anonymousExpression12561 = new BitSet(new long[]{0x0080000818880800L, 0x00100000000C0002L, 0x4000000022000200L});
    public static final BitSet FOLLOW_block_in_anonymousExpression12565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_in_anonymousExpression12598 = new BitSet(new long[]{0x0000000001000000L, 0x0000000002000000L});
    public static final BitSet FOLLOW_formalParameterSection_in_anonymousExpression12601 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_COLON_in_anonymousExpression12605 = new BitSet(new long[]{0x1A500122E0918340L, 0x841722955F093402L, 0x0008E00128E0402FL, 0x0000000000000311L});
    public static final BitSet FOLLOW_typeDecl_in_anonymousExpression12607 = new BitSet(new long[]{0x0080000818880800L, 0x00100000000C0002L, 0x4000000022000200L});
    public static final BitSet FOLLOW_block_in_anonymousExpression12609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_factor_in_simpleExpression12658 = new BitSet(new long[]{0x0000004000000482L, 0x0001010030000000L, 0x0000000000078000L, 0x0000000000000080L});
    public static final BitSet FOLLOW_operator_in_simpleExpression12661 = new BitSet(new long[]{0x12500102E0118140L, 0x840702955F083400L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_factor_in_simpleExpression12663 = new BitSet(new long[]{0x0000004000000482L, 0x0001010030000000L, 0x0000000000078000L, 0x0000000000000080L});
    public static final BitSet FOLLOW_AT2_in_factor12724 = new BitSet(new long[]{0x12500102E0118140L, 0x840702955F083400L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_factor_in_factor12726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_201_in_factor12759 = new BitSet(new long[]{0x12500102E0118140L, 0x840702955F083400L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_factor_in_factor12761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_factor12801 = new BitSet(new long[]{0x12500102E0118140L, 0x840702955F083400L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_factor_in_factor12803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_factor12836 = new BitSet(new long[]{0x12500102E0118140L, 0x840702955F083400L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_factor_in_factor12838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_factor12871 = new BitSet(new long[]{0x12500102E0118140L, 0x840702955F083400L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_factor_in_factor12873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_POINTER2_in_factor12906 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    public static final BitSet FOLLOW_ident_in_factor12908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_intNum_in_factor12952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_realNum_in_factor12985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TkAsmHexNum_in_factor13018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRUE_in_factor13061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FALSE_in_factor13094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NIL_in_factor13127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_factor13160 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_expression_in_factor13162 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000000400L});
    public static final BitSet FOLLOW_RPAREN_in_factor13164 = new BitSet(new long[]{0x0000010000000002L, 0x0004000000000000L});
    public static final BitSet FOLLOW_POINTER2_in_factor13167 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_DOT_in_factor13172 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_expression_in_factor13174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringFactor_in_factor13217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_setSection_in_factor13250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_designator_in_factor13283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeId_in_factor13316 = new BitSet(new long[]{0x0000000000000000L, 0x0000000002000000L});
    public static final BitSet FOLLOW_LPAREN_in_factor13318 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_expression_in_factor13320 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000000400L});
    public static final BitSet FOLLOW_RPAREN_in_factor13322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ControlString_in_stringFactor13375 = new BitSet(new long[]{0x0000000000000002L, 0x0400000000000000L});
    public static final BitSet FOLLOW_QuotedString_in_stringFactor13378 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_ControlString_in_stringFactor13380 = new BitSet(new long[]{0x0000000000000002L, 0x0400000000000000L});
    public static final BitSet FOLLOW_QuotedString_in_stringFactor13385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QuotedString_in_stringFactor13420 = new BitSet(new long[]{0x0000000080000002L});
    public static final BitSet FOLLOW_ControlString_in_stringFactor13423 = new BitSet(new long[]{0x0000000000000000L, 0x0400000000000000L});
    public static final BitSet FOLLOW_QuotedString_in_stringFactor13425 = new BitSet(new long[]{0x0000000080000002L});
    public static final BitSet FOLLOW_ControlString_in_stringFactor13430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_setSection13487 = new BitSet(new long[]{0x12500102E0118140L, 0x941702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_expression_in_setSection13490 = new BitSet(new long[]{0x0000020002000000L, 0x1000000000000000L});
    public static final BitSet FOLLOW_set_in_setSection13493 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_expression_in_setSection13501 = new BitSet(new long[]{0x0000020002000000L, 0x1000000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_setSection13507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INHERITED_in_designator13564 = new BitSet(new long[]{0x1050010260118142L, 0x800602904F081400L, 0x0000400000E0002DL, 0x0000000000000111L});
    public static final BitSet FOLLOW_namespacedQualifiedIdent_in_designator13571 = new BitSet(new long[]{0x0000010000010002L, 0x0004000006080000L});
    public static final BitSet FOLLOW_typeId_in_designator13575 = new BitSet(new long[]{0x0000010000010002L, 0x0004000006080000L});
    public static final BitSet FOLLOW_designatorItem_in_designator13582 = new BitSet(new long[]{0x0000010000010002L, 0x0004000006080000L});
    public static final BitSet FOLLOW_POINTER2_in_designatorItem13635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_designatorItem13668 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    public static final BitSet FOLLOW_ident_in_designatorItem13676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LT_in_designatorItem13724 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    public static final BitSet FOLLOW_genericTypeIdent_in_designatorItem13726 = new BitSet(new long[]{0x0000000002000000L, 0x0000000000000010L});
    public static final BitSet FOLLOW_COMMA_in_designatorItem13729 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    public static final BitSet FOLLOW_genericTypeIdent_in_designatorItem13731 = new BitSet(new long[]{0x0000000002000000L, 0x0000000000000010L});
    public static final BitSet FOLLOW_GT_in_designatorItem13735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_designatorItem13776 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_expressionList_in_designatorItem13778 = new BitSet(new long[]{0x0000000000000000L, 0x1000000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_designatorItem13780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_designatorItem13813 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0042DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_expression_in_designatorItem13816 = new BitSet(new long[]{0x0000000003000000L, 0x0000000000000000L, 0x0000000000000400L});
    public static final BitSet FOLLOW_colonConstruct_in_designatorItem13819 = new BitSet(new long[]{0x0000000002000000L, 0x0000000000000000L, 0x0000000000000400L});
    public static final BitSet FOLLOW_COMMA_in_designatorItem13824 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_expression_in_designatorItem13826 = new BitSet(new long[]{0x0000000003000000L, 0x0000000000000000L, 0x0000000000000400L});
    public static final BitSet FOLLOW_colonConstruct_in_designatorItem13829 = new BitSet(new long[]{0x0000000002000000L, 0x0000000000000000L, 0x0000000000000400L});
    public static final BitSet FOLLOW_RPAREN_in_designatorItem13837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionList13914 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_COMMA_in_expressionList13917 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_expression_in_expressionList13919 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_COLON_in_colonConstruct13972 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_expression_in_colonConstruct13974 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_COLON_in_colonConstruct13977 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_expression_in_colonConstruct13979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ifStatement_in_statement14753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_caseStatement_in_statement14786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_repeatStatement_in_statement14819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whileStatement_in_statement14852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forStatement_in_statement14885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_withStatement_in_statement14918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tryStatement_in_statement14951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_raiseStatement_in_statement14984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assemblerStatement_in_statement15017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compoundStatement_in_statement15050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_label_in_statement15083 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_COLON_in_statement15085 = new BitSet(new long[]{0x905001026039C940L, 0x880602904F083508L, 0x0000E00010E0006DL, 0x000000000000011DL});
    public static final BitSet FOLLOW_statement_in_statement15087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simpleStatement_in_statement15120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_ifStatement15174 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_expression_in_ifStatement15176 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000001000000L});
    public static final BitSet FOLLOW_THEN_in_ifStatement15178 = new BitSet(new long[]{0x905001026039C940L, 0x880602904F083508L, 0x0000E00010E0006DL, 0x000000000000011DL});
    public static final BitSet FOLLOW_statement_in_ifStatement15180 = new BitSet(new long[]{0x0001000000000002L});
    public static final BitSet FOLLOW_ELSE_in_ifStatement15183 = new BitSet(new long[]{0x905001026039C940L, 0x880602904F083508L, 0x0000E00010E0006DL, 0x000000000000011DL});
    public static final BitSet FOLLOW_statement_in_ifStatement15185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseStatement15240 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_expression_in_caseStatement15242 = new BitSet(new long[]{0x0000000000000000L, 0x0000002000000000L});
    public static final BitSet FOLLOW_OF_in_caseStatement15244 = new BitSet(new long[]{0x12530102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_caseItem_in_caseStatement15247 = new BitSet(new long[]{0x12530102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_ELSE_in_caseStatement15252 = new BitSet(new long[]{0x905201026039C940L, 0x880602904F083508L, 0x0000E00010E0206DL, 0x000000000000011DL});
    public static final BitSet FOLLOW_statementList_in_caseStatement15254 = new BitSet(new long[]{0x0002000000000000L, 0x0000000000000000L, 0x0000000000002000L});
    public static final BitSet FOLLOW_SEMI_in_caseStatement15257 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_END_in_caseStatement15263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_caseLabel_in_caseItem15320 = new BitSet(new long[]{0x0000000003000000L});
    public static final BitSet FOLLOW_COMMA_in_caseItem15323 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_caseLabel_in_caseItem15325 = new BitSet(new long[]{0x0000000003000000L});
    public static final BitSet FOLLOW_COLON_in_caseItem15329 = new BitSet(new long[]{0x905001026039C940L, 0x880602904F083508L, 0x0000E00010E0006DL, 0x000000000000011DL});
    public static final BitSet FOLLOW_statement_in_caseItem15331 = new BitSet(new long[]{0x0000000000000002L, 0x0000000000000000L, 0x0000000000002000L});
    public static final BitSet FOLLOW_SEMI_in_caseItem15334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_caseLabel15393 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_DOTDOT_in_caseLabel15396 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_expression_in_caseLabel15398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REPEAT_in_repeatStatement15450 = new BitSet(new long[]{0x905001026039C940L, 0x880602904F083508L, 0x0800E00010E0206DL, 0x000000000000011DL});
    public static final BitSet FOLLOW_statementList_in_repeatStatement15453 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0800000000000000L});
    public static final BitSet FOLLOW_UNTIL_in_repeatStatement15457 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_expression_in_repeatStatement15459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_whileStatement15510 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_expression_in_whileStatement15512 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_DO_in_whileStatement15514 = new BitSet(new long[]{0x905001026039C940L, 0x880602904F083508L, 0x0000E00010E0006DL, 0x000000000000011DL});
    public static final BitSet FOLLOW_statement_in_whileStatement15516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_forStatement15569 = new BitSet(new long[]{0x105001026011C140L, 0x800602904F083400L, 0x0000400000E0002DL, 0x0000000000000111L});
    public static final BitSet FOLLOW_designator_in_forStatement15571 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_ASSIGN_in_forStatement15573 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_expression_in_forStatement15575 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000004000000L});
    public static final BitSet FOLLOW_TO_in_forStatement15577 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_expression_in_forStatement15579 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_DO_in_forStatement15581 = new BitSet(new long[]{0x905001026039C940L, 0x880602904F083508L, 0x0000E00010E0006DL, 0x000000000000011DL});
    public static final BitSet FOLLOW_statement_in_forStatement15583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_forStatement15616 = new BitSet(new long[]{0x105001026011C140L, 0x800602904F083400L, 0x0000400000E0002DL, 0x0000000000000111L});
    public static final BitSet FOLLOW_designator_in_forStatement15618 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_ASSIGN_in_forStatement15620 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_expression_in_forStatement15622 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_DOWNTO_in_forStatement15624 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_expression_in_forStatement15626 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_DO_in_forStatement15628 = new BitSet(new long[]{0x905001026039C940L, 0x880602904F083508L, 0x0000E00010E0006DL, 0x000000000000011DL});
    public static final BitSet FOLLOW_statement_in_forStatement15630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_forStatement15663 = new BitSet(new long[]{0x1050010260118140L, 0x800602904F083C00L, 0x0000400000E0002DL, 0x0000000000000111L});
    public static final BitSet FOLLOW_designator_in_forStatement15665 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000800L});
    public static final BitSet FOLLOW_IN_in_forStatement15667 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_expression_in_forStatement15669 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_DO_in_forStatement15671 = new BitSet(new long[]{0x905001026039C940L, 0x880602904F083508L, 0x0000E00010E0006DL, 0x000000000000011DL});
    public static final BitSet FOLLOW_statement_in_forStatement15673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITH_in_withStatement15725 = new BitSet(new long[]{0x1050010262118540L, 0x800602904F083400L, 0x0000400000E0002DL, 0x0000000000000111L});
    public static final BitSet FOLLOW_withItem_in_withStatement15727 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_DO_in_withStatement15729 = new BitSet(new long[]{0x905001026039C940L, 0x880602904F083508L, 0x0000E00010E0006DL, 0x000000000000011DL});
    public static final BitSet FOLLOW_statement_in_withStatement15731 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_designator_in_withItem15788 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_AS_in_withItem15790 = new BitSet(new long[]{0x1050010260118140L, 0x800602904F083400L, 0x0000400000E0002DL, 0x0000000000000111L});
    public static final BitSet FOLLOW_designator_in_withItem15792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_designator_in_withItem15832 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_COMMA_in_withItem15835 = new BitSet(new long[]{0x1050010262118140L, 0x800602904F083400L, 0x0000400000E0002DL, 0x0000000000000111L});
    public static final BitSet FOLLOW_designator_in_withItem15837 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_BEGIN_in_compoundStatement15887 = new BitSet(new long[]{0x905201026039C940L, 0x880602904F083508L, 0x0000E00010E0206DL, 0x000000000000011DL});
    public static final BitSet FOLLOW_statementList_in_compoundStatement15890 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_END_in_compoundStatement15894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_statementList15960 = new BitSet(new long[]{0x0000000000000002L, 0x0000000000000000L, 0x0000000000002000L});
    public static final BitSet FOLLOW_SEMI_in_statementList15965 = new BitSet(new long[]{0x905001026039C942L, 0x880602904F083508L, 0x0000E00010E0206DL, 0x000000000000011DL});
    public static final BitSet FOLLOW_statement_in_statementList15968 = new BitSet(new long[]{0x0000000000000002L, 0x0000000000000000L, 0x0000000000002000L});
    public static final BitSet FOLLOW_designator_in_simpleStatement16022 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_ASSIGN_in_simpleStatement16024 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_expression_in_simpleStatement16026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_designator_in_simpleStatement16059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_gotoStatement_in_simpleStatement16093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GOTO_in_gotoStatement16145 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000E00000E0002DL, 0x0000000000000011L});
    public static final BitSet FOLLOW_label_in_gotoStatement16147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXIT_in_gotoStatement16180 = new BitSet(new long[]{0x0000000000000002L, 0x0000000002000000L});
    public static final BitSet FOLLOW_LPAREN_in_gotoStatement16183 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_expression_in_gotoStatement16185 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000000400L});
    public static final BitSet FOLLOW_RPAREN_in_gotoStatement16187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BREAK_in_gotoStatement16225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONTINUE_in_gotoStatement16284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_constExpression16337 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    public static final BitSet FOLLOW_recordConstExpression_in_constExpression16339 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002400L});
    public static final BitSet FOLLOW_SEMI_in_constExpression16342 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    public static final BitSet FOLLOW_recordConstExpression_in_constExpression16344 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002400L});
    public static final BitSet FOLLOW_RPAREN_in_constExpression16348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_constExpression16382 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_constExpression_in_constExpression16384 = new BitSet(new long[]{0x0000000002000000L, 0x0000000000000000L, 0x0000000000000400L});
    public static final BitSet FOLLOW_COMMA_in_constExpression16387 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_constExpression_in_constExpression16389 = new BitSet(new long[]{0x0000000002000000L, 0x0000000000000000L, 0x0000000000000400L});
    public static final BitSet FOLLOW_RPAREN_in_constExpression16393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_constExpression16426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_recordConstExpression16470 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_COLON_in_recordConstExpression16472 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_constExpression_in_recordConstExpression16474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRY_in_tryStatement16530 = new BitSet(new long[]{0x905801026039C940L, 0x880602904F083508L, 0x0000E00010E0206DL, 0x000000000000011DL});
    public static final BitSet FOLLOW_statementList_in_tryStatement16533 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EXCEPT_in_tryStatement16537 = new BitSet(new long[]{0x905301026039C940L, 0x880602D04F083508L, 0x0000E00010E0206DL, 0x000000000000011DL});
    public static final BitSet FOLLOW_handlerList_in_tryStatement16539 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_END_in_tryStatement16541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRY_in_tryStatement16576 = new BitSet(new long[]{0xD05001026039C940L, 0x880602904F083508L, 0x0000E00010E0206DL, 0x000000000000011DL});
    public static final BitSet FOLLOW_statementList_in_tryStatement16579 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_FINALLY_in_tryStatement16583 = new BitSet(new long[]{0x905201026039C940L, 0x880602904F083508L, 0x0000E00010E0206DL, 0x000000000000011DL});
    public static final BitSet FOLLOW_statementList_in_tryStatement16586 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_END_in_tryStatement16590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_handler_in_handlerList16645 = new BitSet(new long[]{0x0001000000000002L, 0x0000004000000000L});
    public static final BitSet FOLLOW_ELSE_in_handlerList16650 = new BitSet(new long[]{0x905001026039C940L, 0x880602904F083508L, 0x0000E00010E0206DL, 0x000000000000011DL});
    public static final BitSet FOLLOW_statementList_in_handlerList16652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statementList_in_handlerList16687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_handler16745 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    public static final BitSet FOLLOW_handlerIdent_in_handler16748 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    public static final BitSet FOLLOW_typeId_in_handler16752 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_DO_in_handler16754 = new BitSet(new long[]{0x905001026039C940L, 0x880602904F083508L, 0x0000E00010E0206DL, 0x000000000000011DL});
    public static final BitSet FOLLOW_handlerStatement_in_handler16756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_handlerIdent16811 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_COLON_in_handlerIdent16813 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_handlerStatement16862 = new BitSet(new long[]{0x0000000000000002L, 0x0000000000000000L, 0x0000000000002000L});
    public static final BitSet FOLLOW_SEMI_in_handlerStatement16865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_handlerStatement16900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RAISE_in_raiseStatement16951 = new BitSet(new long[]{0x1050010260118140L, 0x800602904F083400L, 0x0000400000E0002DL, 0x0000000000000111L});
    public static final BitSet FOLLOW_designator_in_raiseStatement16954 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_AT_in_raiseStatement16959 = new BitSet(new long[]{0x1050010260118140L, 0x800602904F083400L, 0x0000400000E0002DL, 0x0000000000000111L});
    public static final BitSet FOLLOW_designator_in_raiseStatement16961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASM_in_assemblerStatement17025 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L, 0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x00000000000003FFL});
    public static final BitSet FOLLOW_END_in_assemblerStatement17033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_reintroduceDirective_in_methodDirective17106 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_overloadDirective_in_methodDirective17148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bindingDirective_in_methodDirective17193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_abstractDirective_in_methodDirective17239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inlineDirective_in_methodDirective17284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_callConvention_in_methodDirective17331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hintingDirective_in_methodDirective17379 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002000L});
    public static final BitSet FOLLOW_SEMI_in_methodDirective17381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oldCallConventionDirective_in_methodDirective17421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dispIDDirective_in_methodDirective17457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_overloadDirective_in_functionDirective17505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inlineDirective_in_functionDirective17548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_callConvention_in_functionDirective17593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oldCallConventionDirective_in_functionDirective17639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hintingDirective_in_functionDirective17673 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002000L});
    public static final BitSet FOLLOW_SEMI_in_functionDirective17675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_callConventionNoSemi_in_functionDirective17715 = new BitSet(new long[]{0x0100000000000000L, 0x0000000000000000L, 0x8000000000000000L});
    public static final BitSet FOLLOW_externalDirective_in_functionDirective17719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNSAFE_in_functionDirective17762 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002000L});
    public static final BitSet FOLLOW_SEMI_in_functionDirective17764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REINTRODUCE_in_reintroduceDirective17823 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002000L});
    public static final BitSet FOLLOW_SEMI_in_reintroduceDirective17825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OVERLOAD_in_overloadDirective17873 = new BitSet(new long[]{0x0000000000000002L, 0x0000000000000000L, 0x0000000000002000L});
    public static final BitSet FOLLOW_SEMI_in_overloadDirective17876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MESSAGE_in_bindingDirective17931 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_expression_in_bindingDirective17933 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002000L});
    public static final BitSet FOLLOW_SEMI_in_bindingDirective17935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_bindingDirective17968 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002000L});
    public static final BitSet FOLLOW_SEMI_in_bindingDirective17970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DYNAMIC_in_bindingDirective18003 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002000L});
    public static final BitSet FOLLOW_SEMI_in_bindingDirective18005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OVERRIDE_in_bindingDirective18038 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002000L});
    public static final BitSet FOLLOW_SEMI_in_bindingDirective18040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VIRTUAL_in_bindingDirective18073 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002000L});
    public static final BitSet FOLLOW_SEMI_in_bindingDirective18075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ABSTRACT_in_abstractDirective18123 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002000L});
    public static final BitSet FOLLOW_SEMI_in_abstractDirective18125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FINAL_in_abstractDirective18158 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002000L});
    public static final BitSet FOLLOW_SEMI_in_abstractDirective18160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INLINE_in_inlineDirective18210 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002000L});
    public static final BitSet FOLLOW_SEMI_in_inlineDirective18212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSEMBLER_in_inlineDirective18245 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002000L});
    public static final BitSet FOLLOW_SEMI_in_inlineDirective18247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CDECL_in_callConvention18299 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002000L});
    public static final BitSet FOLLOW_SEMI_in_callConvention18301 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PASCAL_in_callConvention18338 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002000L});
    public static final BitSet FOLLOW_SEMI_in_callConvention18340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGISTER_in_callConvention18376 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002000L});
    public static final BitSet FOLLOW_SEMI_in_callConvention18378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SAFECALL_in_callConvention18412 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002000L});
    public static final BitSet FOLLOW_SEMI_in_callConvention18414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDCALL_in_callConvention18448 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002000L});
    public static final BitSet FOLLOW_SEMI_in_callConvention18450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXPORT_in_callConvention18485 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002000L});
    public static final BitSet FOLLOW_SEMI_in_callConvention18487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FAR_in_oldCallConventionDirective18753 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002000L});
    public static final BitSet FOLLOW_SEMI_in_oldCallConventionDirective18755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOCAL_in_oldCallConventionDirective18794 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002000L});
    public static final BitSet FOLLOW_SEMI_in_oldCallConventionDirective18796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEAR_in_oldCallConventionDirective18833 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002000L});
    public static final BitSet FOLLOW_SEMI_in_oldCallConventionDirective18835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEPRECATED_in_hintingDirective18889 = new BitSet(new long[]{0x0000000080000002L, 0x0400000000000000L});
    public static final BitSet FOLLOW_stringFactor_in_hintingDirective18892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXPERIMENTAL_in_hintingDirective18927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLATFORM_in_hintingDirective18962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIBRARY_in_hintingDirective18995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARARGS_in_externalDirective19043 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002000L});
    public static final BitSet FOLLOW_SEMI_in_externalDirective19045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTERNAL_in_externalDirective19081 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002000L});
    public static final BitSet FOLLOW_SEMI_in_externalDirective19083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTERNAL_in_externalDirective19116 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_constExpression_in_externalDirective19118 = new BitSet(new long[]{0x0000000000000000L, 0x0000000040001000L, 0x0000000000002000L});
    public static final BitSet FOLLOW_externalSpecifier_in_externalDirective19121 = new BitSet(new long[]{0x0000000000000000L, 0x0000000040001000L, 0x0000000000002000L});
    public static final BitSet FOLLOW_SEMI_in_externalDirective19125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAME_in_externalSpecifier19174 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_constExpression_in_externalSpecifier19176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INDEX_in_externalSpecifier19209 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_constExpression_in_externalSpecifier19211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DISPID_in_dispIDDirective19264 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_expression_in_dispIDDirective19266 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002000L});
    public static final BitSet FOLLOW_SEMI_in_dispIDDirective19268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TkIdentifier_in_ident19331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_200_in_ident19364 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000400000000000L});
    public static final BitSet FOLLOW_TkIdentifier_in_ident19366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_usedKeywordsAsNames_in_ident19399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_identList19721 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_COMMA_in_identList19724 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    public static final BitSet FOLLOW_ident_in_identList19726 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_ident_in_identListFlat19791 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_COMMA_in_identListFlat19794 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    public static final BitSet FOLLOW_ident_in_identListFlat19796 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_TkIdentifier_in_label19928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TkIntNum_in_label19961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TkHexNum_in_label19994 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_usedKeywordsAsNames_in_label20027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TkRealNum_in_realNum20206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namespaceName_in_namespacedQualifiedIdent20277 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_DOT_in_namespacedQualifiedIdent20279 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    public static final BitSet FOLLOW_qualifiedIdent_in_namespacedQualifiedIdent20283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_namespaceName20335 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_DOT_in_namespaceName20338 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    public static final BitSet FOLLOW_ident_in_namespaceName20340 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_ident_in_qualifiedIdent20395 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_DOT_in_qualifiedIdent20397 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    public static final BitSet FOLLOW_ident_in_qualifiedIdent20402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declSection_in_synpred23_Delphi1584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_blockBody_in_synpred24_Delphi1589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exportedProcHeading_in_synpred30_Delphi1866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_methodDecl_in_synpred31_Delphi1899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procDecl_in_synpred32_Delphi1932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exportedProcHeading_in_synpred36_Delphi2116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procDecl_in_synpred38_Delphi2182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constDeclaration_in_synpred40_Delphi2331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_customAttribute_in_synpred42_Delphi2486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_synpred45_Delphi2580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_customAttribute_in_synpred46_Delphi2646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varDeclaration_in_synpred48_Delphi2743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_customAttribute_in_synpred50_Delphi2903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ABSOLUTE_in_synpred53_Delphi2995 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    public static final BitSet FOLLOW_ident_in_synpred53_Delphi2997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ABSOLUTE_in_synpred54_Delphi3030 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_constExpression_in_synpred54_Delphi3032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_strucType_in_synpred61_Delphi3277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pointerType_in_synpred62_Delphi3310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringType_in_synpred63_Delphi3343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedureType_in_synpred64_Delphi3376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variantType_in_synpred65_Delphi3410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericPostfix_in_synpred67_Delphi3451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPE_in_synpred68_Delphi3444 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    public static final BitSet FOLLOW_typeId_in_synpred68_Delphi3448 = new BitSet(new long[]{0x0000000000000002L, 0x0000000004000000L});
    public static final BitSet FOLLOW_genericPostfix_in_synpred68_Delphi3451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_in_synpred78_Delphi4004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OF_in_synpred79_Delphi4176 = new BitSet(new long[]{0x1A500122E0918340L, 0x841722955F093402L, 0x0008E00128E0402FL, 0x0000000000000311L});
    public static final BitSet FOLLOW_typeDecl_in_synpred79_Delphi4178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_synpred81_Delphi4327 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_expression_in_synpred81_Delphi4329 = new BitSet(new long[]{0x0000000000000000L, 0x1000000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_synpred81_Delphi4331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_codePageNumber_in_synpred84_Delphi4378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_methodType_in_synpred85_Delphi4487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simpleProcedureType_in_synpred86_Delphi4520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_synpred88_Delphi4663 = new BitSet(new long[]{0x0040000000400000L, 0x0000400000000000L, 0x0000000000100808L});
    public static final BitSet FOLLOW_callConventionNoSemi_in_synpred88_Delphi4667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_customAttribute_in_synpred90_Delphi4775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameterSection_in_synpred92_Delphi4830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_synpred93_Delphi4942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subRangeType_in_synpred94_Delphi4975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOTDOT_in_synpred95_Delphi5064 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_constExpression_in_synpred95_Delphi5066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simpleGenericDefinition_in_synpred100_Delphi5323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classTypeTypeDecl_in_synpred109_Delphi5786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classTypeDecl_in_synpred110_Delphi5819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLASS_in_synpred118_Delphi6144 = new BitSet(new long[]{0x1052000A78928160L, 0x83DA02904B081402L, 0x4000400022E0122DL, 0x0000000000000111L});
    public static final BitSet FOLLOW_classState_in_synpred118_Delphi6147 = new BitSet(new long[]{0x1052000A78928140L, 0x83DA02904B081402L, 0x4000400022E0022DL, 0x0000000000000111L});
    public static final BitSet FOLLOW_classParent_in_synpred118_Delphi6152 = new BitSet(new long[]{0x1052000A78928140L, 0x83DA029049081402L, 0x4000400022E0022DL, 0x0000000000000111L});
    public static final BitSet FOLLOW_classItem_in_synpred118_Delphi6157 = new BitSet(new long[]{0x1052000A78928140L, 0x83DA029049081402L, 0x4000400022E0022DL, 0x0000000000000111L});
    public static final BitSet FOLLOW_END_in_synpred118_Delphi6161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classParent_in_synpred119_Delphi6215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_visibility_in_synpred122_Delphi6451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classMethod_in_synpred123_Delphi6484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classField_in_synpred124_Delphi6517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classProperty_in_synpred125_Delphi6550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classMethod_in_synpred132_Delphi6820 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classProperty_in_synpred133_Delphi6853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceKey_in_synpred138_Delphi6939 = new BitSet(new long[]{0x0002000810800000L, 0x0050008002080002L});
    public static final BitSet FOLLOW_classParent_in_synpred138_Delphi6942 = new BitSet(new long[]{0x0002000810800000L, 0x0050008000080002L});
    public static final BitSet FOLLOW_interfaceGuid_in_synpred138_Delphi6947 = new BitSet(new long[]{0x0002000810800000L, 0x0050008000080002L});
    public static final BitSet FOLLOW_interfaceItem_in_synpred138_Delphi6952 = new BitSet(new long[]{0x0002000810800000L, 0x0050008000080002L});
    public static final BitSet FOLLOW_END_in_synpred138_Delphi6956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classParent_in_synpred139_Delphi7051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classMethod_in_synpred141_Delphi7295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLASS_in_synpred142_Delphi7329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_visibility_in_synpred145_Delphi7469 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classMethod_in_synpred146_Delphi7502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simpleRecord_in_synpred147_Delphi7590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_recordField_in_synpred148_Delphi7679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_visibility_in_synpred151_Delphi7829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classMethod_in_synpred152_Delphi7867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classProperty_in_synpred153_Delphi7900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_recordField_in_synpred156_Delphi7999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classMethod_in_synpred170_Delphi8557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_customAttribute_in_synpred171_Delphi8645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_customAttribute_in_synpred176_Delphi8645 = new BitSet(new long[]{0x0000000810800000L, 0x0010000000000000L});
    public static final BitSet FOLLOW_CLASS_in_synpred176_Delphi8650 = new BitSet(new long[]{0x0000000810000000L, 0x0010000000000000L});
    public static final BitSet FOLLOW_methodKey_in_synpred176_Delphi8654 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    public static final BitSet FOLLOW_ident_in_synpred176_Delphi8656 = new BitSet(new long[]{0x0000000000000000L, 0x0000000006000000L, 0x0000000000002000L});
    public static final BitSet FOLLOW_genericDefinition_in_synpred176_Delphi8659 = new BitSet(new long[]{0x0000000000000000L, 0x0000000002000000L, 0x0000000000002000L});
    public static final BitSet FOLLOW_formalParameterSection_in_synpred176_Delphi8664 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002000L});
    public static final BitSet FOLLOW_SEMI_in_synpred176_Delphi8668 = new BitSet(new long[]{0x1460201400401022L, 0x0000CC0089808000L, 0x0000000000180818L, 0x0000000000000002L});
    public static final BitSet FOLLOW_methodDirective_in_synpred176_Delphi8671 = new BitSet(new long[]{0x1460201400401022L, 0x0000CC0089808000L, 0x0000000000180818L, 0x0000000000000002L});
    public static final BitSet FOLLOW_customAttribute_in_synpred177_Delphi8779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_customAttribute_in_synpred181_Delphi8805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_customAttribute_in_synpred183_Delphi8779 = new BitSet(new long[]{0x0000000000800000L, 0x0000000000000002L});
    public static final BitSet FOLLOW_CLASS_in_synpred183_Delphi8784 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_in_synpred183_Delphi8788 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    public static final BitSet FOLLOW_ident_in_synpred183_Delphi8790 = new BitSet(new long[]{0x0000000001000000L, 0x0000000006000000L});
    public static final BitSet FOLLOW_genericDefinition_in_synpred183_Delphi8793 = new BitSet(new long[]{0x0000000001000000L, 0x0000000002000000L});
    public static final BitSet FOLLOW_formalParameterSection_in_synpred183_Delphi8798 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_COLON_in_synpred183_Delphi8802 = new BitSet(new long[]{0x1A500122E0918340L, 0x841722955F093402L, 0x0008E00128E0402FL, 0x0000000000000311L});
    public static final BitSet FOLLOW_customAttribute_in_synpred183_Delphi8805 = new BitSet(new long[]{0x1A500122E0918340L, 0x841722955F093402L, 0x0008E00128E0402FL, 0x0000000000000311L});
    public static final BitSet FOLLOW_typeDecl_in_synpred183_Delphi8809 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002000L});
    public static final BitSet FOLLOW_SEMI_in_synpred183_Delphi8811 = new BitSet(new long[]{0x1460201400401022L, 0x0000CC0089808000L, 0x0000000000180818L, 0x0000000000000002L});
    public static final BitSet FOLLOW_methodDirective_in_synpred183_Delphi8814 = new BitSet(new long[]{0x1460201400401022L, 0x0000CC0089808000L, 0x0000000000180818L, 0x0000000000000002L});
    public static final BitSet FOLLOW_customAttribute_in_synpred184_Delphi8931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_customAttribute_in_synpred188_Delphi8957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_customAttribute_in_synpred189_Delphi9121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_customAttribute_in_synpred191_Delphi9242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_synpred198_Delphi9502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_synpred202_Delphi9653 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_expression_in_synpred202_Delphi9655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_synpred203_Delphi9688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_synpred206_Delphi9853 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_expression_in_synpred206_Delphi9855 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002000L});
    public static final BitSet FOLLOW_SEMI_in_synpred206_Delphi9857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_synpred207_Delphi9890 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002000L});
    public static final BitSet FOLLOW_SEMI_in_synpred207_Delphi9892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_customAttribute_in_synpred220_Delphi10490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionDirective_in_synpred221_Delphi10499 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionDirective_in_synpred224_Delphi10546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_methodDirective_in_synpred225_Delphi10608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_methodBody_in_synpred226_Delphi10613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_customAttribute_in_synpred227_Delphi10673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_customAttribute_in_synpred230_Delphi10673 = new BitSet(new long[]{0x0000000810800000L, 0x0010000000000000L});
    public static final BitSet FOLLOW_CLASS_in_synpred230_Delphi10678 = new BitSet(new long[]{0x0000000810000000L, 0x0010000000000000L});
    public static final BitSet FOLLOW_methodKey_in_synpred230_Delphi10683 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    public static final BitSet FOLLOW_methodName_in_synpred230_Delphi10685 = new BitSet(new long[]{0x0000000000000002L, 0x0000000002000000L});
    public static final BitSet FOLLOW_formalParameterSection_in_synpred230_Delphi10688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_customAttribute_in_synpred231_Delphi10786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_customAttribute_in_synpred234_Delphi10808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_customAttribute_in_synpred236_Delphi10786 = new BitSet(new long[]{0x0000000000800000L, 0x0000000000000002L});
    public static final BitSet FOLLOW_CLASS_in_synpred236_Delphi10791 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_in_synpred236_Delphi10795 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    public static final BitSet FOLLOW_methodName_in_synpred236_Delphi10797 = new BitSet(new long[]{0x0000000001000002L, 0x0000000002000000L});
    public static final BitSet FOLLOW_formalParameterSection_in_synpred236_Delphi10800 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_COLON_in_synpred236_Delphi10805 = new BitSet(new long[]{0x1A500122E0918340L, 0x841722955F093402L, 0x0008E00128E0402FL, 0x0000000000000311L});
    public static final BitSet FOLLOW_customAttribute_in_synpred236_Delphi10808 = new BitSet(new long[]{0x1A500122E0918340L, 0x841722955F093402L, 0x0008E00128E0402FL, 0x0000000000000311L});
    public static final BitSet FOLLOW_typeDecl_in_synpred236_Delphi10812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_customAttribute_in_synpred237_Delphi10921 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_customAttribute_in_synpred239_Delphi10940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionDirective_in_synpred247_Delphi11324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procBody_in_synpred248_Delphi11329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_customAttribute_in_synpred249_Delphi11395 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_customAttribute_in_synpred251_Delphi11395 = new BitSet(new long[]{0x0000000000000000L, 0x0010000000000000L});
    public static final BitSet FOLLOW_PROCEDURE_in_synpred251_Delphi11399 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    public static final BitSet FOLLOW_ident_in_synpred251_Delphi11401 = new BitSet(new long[]{0x0000000000000002L, 0x0000000002000000L});
    public static final BitSet FOLLOW_formalParameterSection_in_synpred251_Delphi11404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_customAttribute_in_synpred252_Delphi11504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_customAttribute_in_synpred256_Delphi11746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionDirective_in_synpred262_Delphi12058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAME_in_synpred264_Delphi12099 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_expression_in_synpred264_Delphi12101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INDEX_in_synpred265_Delphi12105 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_expression_in_synpred265_Delphi12107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionDirective_in_synpred266_Delphi12112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_customAttributeDecl_in_synpred268_Delphi12250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_synpred269_Delphi12306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anonymousExpression_in_synpred271_Delphi12427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relOp_in_synpred272_Delphi12471 = new BitSet(new long[]{0x12500102E0118140L, 0x840702955F083400L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_simpleExpression_in_synpred272_Delphi12473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQUAL_in_synpred273_Delphi12478 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_expression_in_synpred273_Delphi12480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameterSection_in_synpred274_Delphi12561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operator_in_synpred277_Delphi12661 = new BitSet(new long[]{0x12500102E0118140L, 0x840702955F083400L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_factor_in_synpred277_Delphi12663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT2_in_synpred278_Delphi12724 = new BitSet(new long[]{0x12500102E0118140L, 0x840702955F083400L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_factor_in_synpred278_Delphi12726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_201_in_synpred279_Delphi12759 = new BitSet(new long[]{0x12500102E0118140L, 0x840702955F083400L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_factor_in_synpred279_Delphi12761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_synpred280_Delphi12801 = new BitSet(new long[]{0x12500102E0118140L, 0x840702955F083400L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_factor_in_synpred280_Delphi12803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_synpred281_Delphi12836 = new BitSet(new long[]{0x12500102E0118140L, 0x840702955F083400L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_factor_in_synpred281_Delphi12838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_synpred282_Delphi12871 = new BitSet(new long[]{0x12500102E0118140L, 0x840702955F083400L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_factor_in_synpred282_Delphi12873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_POINTER2_in_synpred283_Delphi12906 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    public static final BitSet FOLLOW_ident_in_synpred283_Delphi12908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_intNum_in_synpred284_Delphi12952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_realNum_in_synpred285_Delphi12985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TkAsmHexNum_in_synpred286_Delphi13018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRUE_in_synpred287_Delphi13061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FALSE_in_synpred288_Delphi13094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NIL_in_synpred289_Delphi13127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_POINTER2_in_synpred290_Delphi13167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred291_Delphi13172 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_expression_in_synpred291_Delphi13174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred292_Delphi13160 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_expression_in_synpred292_Delphi13162 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000000400L});
    public static final BitSet FOLLOW_RPAREN_in_synpred292_Delphi13164 = new BitSet(new long[]{0x0000010000000002L, 0x0004000000000000L});
    public static final BitSet FOLLOW_POINTER2_in_synpred292_Delphi13167 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred292_Delphi13172 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_expression_in_synpred292_Delphi13174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringFactor_in_synpred293_Delphi13217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_setSection_in_synpred294_Delphi13250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_designator_in_synpred295_Delphi13283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QuotedString_in_synpred296_Delphi13378 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_ControlString_in_synpred296_Delphi13380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QuotedString_in_synpred297_Delphi13385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ControlString_in_synpred299_Delphi13423 = new BitSet(new long[]{0x0000000000000000L, 0x0400000000000000L});
    public static final BitSet FOLLOW_QuotedString_in_synpred299_Delphi13425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ControlString_in_synpred300_Delphi13430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_synpred303_Delphi13490 = new BitSet(new long[]{0x0000020002000002L});
    public static final BitSet FOLLOW_set_in_synpred303_Delphi13493 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_expression_in_synpred303_Delphi13501 = new BitSet(new long[]{0x0000020002000002L});
    public static final BitSet FOLLOW_INHERITED_in_synpred304_Delphi13564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namespacedQualifiedIdent_in_synpred305_Delphi13571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namespacedQualifiedIdent_in_synpred306_Delphi13571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeId_in_synpred306_Delphi13575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_designatorItem_in_synpred307_Delphi13582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_synpred317_Delphi13816 = new BitSet(new long[]{0x0000000003000002L});
    public static final BitSet FOLLOW_colonConstruct_in_synpred317_Delphi13819 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred317_Delphi13824 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_expression_in_synpred317_Delphi13826 = new BitSet(new long[]{0x0000000003000002L});
    public static final BitSet FOLLOW_colonConstruct_in_synpred317_Delphi13829 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_label_in_synpred348_Delphi15083 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_COLON_in_synpred348_Delphi15085 = new BitSet(new long[]{0x905001026039C940L, 0x880602904F083508L, 0x0000E00010E0006DL, 0x000000000000011DL});
    public static final BitSet FOLLOW_statement_in_synpred348_Delphi15087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_synpred349_Delphi15183 = new BitSet(new long[]{0x905001026039C940L, 0x880602904F083508L, 0x0000E00010E0006DL, 0x000000000000011DL});
    public static final BitSet FOLLOW_statement_in_synpred349_Delphi15185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statementList_in_synpred356_Delphi15453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_synpred357_Delphi15569 = new BitSet(new long[]{0x105001026011C140L, 0x800602904F083400L, 0x0000400000E0002DL, 0x0000000000000111L});
    public static final BitSet FOLLOW_designator_in_synpred357_Delphi15571 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred357_Delphi15573 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_expression_in_synpred357_Delphi15575 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000004000000L});
    public static final BitSet FOLLOW_TO_in_synpred357_Delphi15577 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_expression_in_synpred357_Delphi15579 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_DO_in_synpred357_Delphi15581 = new BitSet(new long[]{0x905001026039C940L, 0x880602904F083508L, 0x0000E00010E0006DL, 0x000000000000011DL});
    public static final BitSet FOLLOW_statement_in_synpred357_Delphi15583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_synpred358_Delphi15616 = new BitSet(new long[]{0x105001026011C140L, 0x800602904F083400L, 0x0000400000E0002DL, 0x0000000000000111L});
    public static final BitSet FOLLOW_designator_in_synpred358_Delphi15618 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred358_Delphi15620 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_expression_in_synpred358_Delphi15622 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_DOWNTO_in_synpred358_Delphi15624 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_expression_in_synpred358_Delphi15626 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_DO_in_synpred358_Delphi15628 = new BitSet(new long[]{0x905001026039C940L, 0x880602904F083508L, 0x0000E00010E0006DL, 0x000000000000011DL});
    public static final BitSet FOLLOW_statement_in_synpred358_Delphi15630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_designator_in_synpred359_Delphi15788 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_AS_in_synpred359_Delphi15790 = new BitSet(new long[]{0x1050010260118140L, 0x800602904F083400L, 0x0000400000E0002DL, 0x0000000000000111L});
    public static final BitSet FOLLOW_designator_in_synpred359_Delphi15792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statementList_in_synpred361_Delphi15890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_synpred362_Delphi15960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_synpred363_Delphi15968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_synpred364_Delphi15965 = new BitSet(new long[]{0x905001026039C942L, 0x880602904F083508L, 0x0000E00010E0006DL, 0x000000000000011DL});
    public static final BitSet FOLLOW_statement_in_synpred364_Delphi15968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_designator_in_synpred365_Delphi16022 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred365_Delphi16024 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_expression_in_synpred365_Delphi16026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_designator_in_synpred366_Delphi16059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred368_Delphi16183 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_expression_in_synpred368_Delphi16185 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000000400L});
    public static final BitSet FOLLOW_RPAREN_in_synpred368_Delphi16187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred372_Delphi16337 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    public static final BitSet FOLLOW_recordConstExpression_in_synpred372_Delphi16339 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002400L});
    public static final BitSet FOLLOW_SEMI_in_synpred372_Delphi16342 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    public static final BitSet FOLLOW_recordConstExpression_in_synpred372_Delphi16344 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002400L});
    public static final BitSet FOLLOW_RPAREN_in_synpred372_Delphi16348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred374_Delphi16382 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_constExpression_in_synpred374_Delphi16384 = new BitSet(new long[]{0x0000000002000000L, 0x0000000000000000L, 0x0000000000000400L});
    public static final BitSet FOLLOW_COMMA_in_synpred374_Delphi16387 = new BitSet(new long[]{0x12500102E0118140L, 0x841702955F083402L, 0x0008E00108E0002DL, 0x0000000000000311L});
    public static final BitSet FOLLOW_constExpression_in_synpred374_Delphi16389 = new BitSet(new long[]{0x0000000002000000L, 0x0000000000000000L, 0x0000000000000400L});
    public static final BitSet FOLLOW_RPAREN_in_synpred374_Delphi16393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statementList_in_synpred375_Delphi16533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRY_in_synpred376_Delphi16530 = new BitSet(new long[]{0x905801026039C940L, 0x880602904F083508L, 0x0000E00010E0206DL, 0x000000000000011DL});
    public static final BitSet FOLLOW_statementList_in_synpred376_Delphi16533 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EXCEPT_in_synpred376_Delphi16537 = new BitSet(new long[]{0x905301026039C940L, 0x880602D04F083508L, 0x0000E00010E0206DL, 0x000000000000011DL});
    public static final BitSet FOLLOW_handlerList_in_synpred376_Delphi16539 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_END_in_synpred376_Delphi16541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statementList_in_synpred377_Delphi16579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statementList_in_synpred378_Delphi16586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_handler_in_synpred381_Delphi16645 = new BitSet(new long[]{0x0001000000000002L, 0x0000004000000000L});
    public static final BitSet FOLLOW_ELSE_in_synpred381_Delphi16650 = new BitSet(new long[]{0x905001026039C940L, 0x880602904F083508L, 0x0000E00010E0206DL, 0x000000000000011DL});
    public static final BitSet FOLLOW_statementList_in_synpred381_Delphi16652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_synpred384_Delphi16862 = new BitSet(new long[]{0x0000000000000002L, 0x0000000000000000L, 0x0000000000002000L});
    public static final BitSet FOLLOW_SEMI_in_synpred384_Delphi16865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_designator_in_synpred385_Delphi16954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_synpred386_Delphi16959 = new BitSet(new long[]{0x1050010260118140L, 0x800602904F083400L, 0x0000400000E0002DL, 0x0000000000000111L});
    public static final BitSet FOLLOW_designator_in_synpred386_Delphi16961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_synpred404_Delphi17876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTERNAL_in_synpred428_Delphi19081 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000000L, 0x0000000000002000L});
    public static final BitSet FOLLOW_SEMI_in_synpred428_Delphi19083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namespaceName_in_synpred467_Delphi20277 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_DOT_in_synpred467_Delphi20279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred468_Delphi20338 = new BitSet(new long[]{0x1050000260108140L, 0x8002029049001400L, 0x0000400000E0002DL, 0x0000000000000111L});
    public static final BitSet FOLLOW_ident_in_synpred468_Delphi20340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_synpred469_Delphi20395 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_DOT_in_synpred469_Delphi20397 = new BitSet(new long[]{0x0000000000000002L});
    static final String DFA26_eotS =
            "\145\uffff";
    static final String DFA26_eofS =
            "\1\1\144\uffff";
    static final String DFA26_minS =
            "\1\4\11\uffff\1\0\6\uffff\1\0\6\uffff\3\0\2\uffff\2\0\1\uffff\1\0\5\uffff" +
                    "\1\0\2\uffff\1\0\1\uffff\1\0\11\uffff\1\0\27\uffff\3\0\13\uffff\1\0\5" +
                    "\uffff\1\0\3\uffff";
    static final String DFA26_maxS =
            "\1\u00c9\11\uffff\1\0\6\uffff\1\0\6\uffff\3\0\2\uffff\2\0\1\uffff\1\0" +
                    "\5\uffff\1\0\2\uffff\1\0\1\uffff\1\0\11\uffff\1\0\27\uffff\3\0\13\uffff" +
                    "\1\0\5\uffff\1\0\3\uffff";
    static final String DFA26_acceptS =
            "\1\uffff\1\2\142\uffff\1\1";
    static final String DFA26_specialS =
            "\12\uffff\1\0\6\uffff\1\1\6\uffff\1\2\1\3\1\4\2\uffff\1\5\1\6\1\uffff" +
                    "\1\7\5\uffff\1\10\2\uffff\1\11\1\uffff\1\12\11\uffff\1\13\27\uffff\1\14" +
                    "\1\15\1\16\13\uffff\1\17\5\uffff\1\20\3\uffff}>";
    static final String[] DFA26_transitionS = {
            "\1\1\1\uffff\1\141\1\1\1\141\1\uffff\3\1\2\uffff\1\141\2\1\1\uffff\1" +
                    "\1\1\141\5\1\1\uffff\2\1\2\141\1\1\1\uffff\1\36\3\1\1\uffff\5\1\5\uffff" +
                    "\4\1\1\141\1\1\1\51\4\1\1\uffff\1\141\2\1\2\uffff\2\1\1\uffff\1\1\4\uffff" +
                    "\1\1\1\40\1\1\1\65\3\1\1\uffff\2\1\1\12\2\uffff\2\1\1\53\2\1\1\141\2" +
                    "\1\1\21\5\1\1\141\2\1\1\133\1\1\1\141\1\1\3\uffff\3\1\1\141\3\1\1\uffff" +
                    "\5\1\1\uffff\1\1\2\uffff\1\30\1\32\1\uffff\1\141\1\46\1\uffff\1\141\2" +
                    "\uffff\4\1\1\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\35\1\117\1\141\4\1\1" +
                    "\uffff\1\1\2\uffff\1\1\14\uffff\1\1\1\115\1\1\3\uffff\1\1\6\uffff\2\1" +
                    "\2\uffff\2\1\1\141\3\uffff\1\31\1\1\1\uffff\1\1\1\116\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            ""
    };
    static final short[] DFA26_eot = DFA.unpackEncodedString(DFA26_eotS);
    static final short[] DFA26_eof = DFA.unpackEncodedString(DFA26_eofS);
    static final char[] DFA26_min = DFA.unpackEncodedStringToUnsignedChars(DFA26_minS);
    static final char[] DFA26_max = DFA.unpackEncodedStringToUnsignedChars(DFA26_maxS);
    static final short[] DFA26_accept = DFA.unpackEncodedString(DFA26_acceptS);
    static final short[] DFA26_special = DFA.unpackEncodedString(DFA26_specialS);
    static final short[][] DFA26_transition;
    static final String DFA30_eotS =
            "\145\uffff";
    static final String DFA30_eofS =
            "\1\1\144\uffff";
    static final String DFA30_minS =
            "\1\4\11\uffff\1\0\6\uffff\1\0\6\uffff\3\0\2\uffff\2\0\1\uffff\1\0\5\uffff" +
                    "\1\0\2\uffff\1\0\1\uffff\1\0\11\uffff\1\0\27\uffff\3\0\13\uffff\1\0\5" +
                    "\uffff\1\0\3\uffff";
    static final String DFA30_maxS =
            "\1\u00c9\11\uffff\1\0\6\uffff\1\0\6\uffff\3\0\2\uffff\2\0\1\uffff\1\0" +
                    "\5\uffff\1\0\2\uffff\1\0\1\uffff\1\0\11\uffff\1\0\27\uffff\3\0\13\uffff" +
                    "\1\0\5\uffff\1\0\3\uffff";
    static final String DFA30_acceptS =
            "\1\uffff\1\2\142\uffff\1\1";
    static final String DFA30_specialS =
            "\12\uffff\1\0\6\uffff\1\1\6\uffff\1\2\1\3\1\4\2\uffff\1\5\1\6\1\uffff" +
                    "\1\7\5\uffff\1\10\2\uffff\1\11\1\uffff\1\12\11\uffff\1\13\27\uffff\1\14" +
                    "\1\15\1\16\13\uffff\1\17\5\uffff\1\20\3\uffff}>";
    static final String[] DFA30_transitionS = {
            "\1\1\1\uffff\1\141\1\1\1\141\1\uffff\3\1\2\uffff\1\141\2\1\1\uffff\1" +
                    "\1\1\141\5\1\1\uffff\2\1\2\141\1\1\1\uffff\1\36\3\1\1\uffff\5\1\5\uffff" +
                    "\4\1\1\141\1\1\1\51\4\1\1\uffff\1\141\2\1\2\uffff\2\1\1\uffff\1\1\4\uffff" +
                    "\1\1\1\40\1\1\1\65\3\1\1\uffff\2\1\1\12\2\uffff\2\1\1\53\2\1\1\141\2" +
                    "\1\1\21\5\1\1\141\2\1\1\133\1\1\1\141\1\1\3\uffff\3\1\1\141\3\1\1\uffff" +
                    "\5\1\1\uffff\1\1\2\uffff\1\30\1\32\1\uffff\1\141\1\46\1\uffff\1\141\2" +
                    "\uffff\4\1\1\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\35\1\117\1\141\4\1\1" +
                    "\uffff\1\1\2\uffff\1\1\14\uffff\1\1\1\115\1\1\3\uffff\1\1\6\uffff\2\1" +
                    "\2\uffff\2\1\1\141\3\uffff\1\31\1\1\1\uffff\1\1\1\116\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            ""
    };
    static final short[] DFA30_eot = DFA.unpackEncodedString(DFA30_eotS);
    static final short[] DFA30_eof = DFA.unpackEncodedString(DFA30_eofS);
    static final char[] DFA30_min = DFA.unpackEncodedStringToUnsignedChars(DFA30_minS);
    static final char[] DFA30_max = DFA.unpackEncodedStringToUnsignedChars(DFA30_maxS);
    static final short[] DFA30_accept = DFA.unpackEncodedString(DFA30_acceptS);
    static final short[] DFA30_special = DFA.unpackEncodedString(DFA30_specialS);
    static final short[][] DFA30_transition;
    static final String DFA33_eotS =
            "\145\uffff";
    static final String DFA33_eofS =
            "\1\1\144\uffff";
    static final String DFA33_minS =
            "\1\4\11\uffff\1\0\6\uffff\1\0\6\uffff\3\0\2\uffff\2\0\1\uffff\1\0\5\uffff" +
                    "\1\0\2\uffff\1\0\1\uffff\1\0\11\uffff\1\0\27\uffff\3\0\13\uffff\1\0\5" +
                    "\uffff\1\0\3\uffff";
    static final String DFA33_maxS =
            "\1\u00c9\11\uffff\1\0\6\uffff\1\0\6\uffff\3\0\2\uffff\2\0\1\uffff\1\0" +
                    "\5\uffff\1\0\2\uffff\1\0\1\uffff\1\0\11\uffff\1\0\27\uffff\3\0\13\uffff" +
                    "\1\0\5\uffff\1\0\3\uffff";
    static final String DFA33_acceptS =
            "\1\uffff\1\2\142\uffff\1\1";
    static final String DFA33_specialS =
            "\12\uffff\1\0\6\uffff\1\1\6\uffff\1\2\1\3\1\4\2\uffff\1\5\1\6\1\uffff" +
                    "\1\7\5\uffff\1\10\2\uffff\1\11\1\uffff\1\12\11\uffff\1\13\27\uffff\1\14" +
                    "\1\15\1\16\13\uffff\1\17\5\uffff\1\20\3\uffff}>";
    static final String[] DFA33_transitionS = {
            "\1\1\1\uffff\1\141\1\1\1\141\1\uffff\3\1\2\uffff\1\141\2\1\1\uffff\1" +
                    "\1\1\141\5\1\1\uffff\2\1\2\141\1\1\1\uffff\1\36\3\1\1\uffff\5\1\5\uffff" +
                    "\4\1\1\141\1\1\1\51\4\1\1\uffff\1\141\2\1\2\uffff\2\1\1\uffff\1\1\4\uffff" +
                    "\1\1\1\40\1\1\1\65\3\1\1\uffff\2\1\1\12\2\uffff\2\1\1\53\2\1\1\141\2" +
                    "\1\1\21\5\1\1\141\2\1\1\133\1\1\1\141\1\1\3\uffff\3\1\1\141\3\1\1\uffff" +
                    "\5\1\1\uffff\1\1\2\uffff\1\30\1\32\1\uffff\1\141\1\46\1\uffff\1\141\2" +
                    "\uffff\4\1\1\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\35\1\117\1\141\4\1\1" +
                    "\uffff\1\1\2\uffff\1\1\14\uffff\1\1\1\115\1\1\3\uffff\1\1\6\uffff\2\1" +
                    "\2\uffff\2\1\1\141\3\uffff\1\31\1\1\1\uffff\1\1\1\116\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            ""
    };
    static final short[] DFA33_eot = DFA.unpackEncodedString(DFA33_eotS);
    static final short[] DFA33_eof = DFA.unpackEncodedString(DFA33_eofS);
    static final char[] DFA33_min = DFA.unpackEncodedStringToUnsignedChars(DFA33_minS);
    static final char[] DFA33_max = DFA.unpackEncodedStringToUnsignedChars(DFA33_maxS);
    static final short[] DFA33_accept = DFA.unpackEncodedString(DFA33_acceptS);
    static final short[] DFA33_special = DFA.unpackEncodedString(DFA33_specialS);
    static final short[][] DFA33_transition;
    static final String DFA46_eotS =
            "\165\uffff";
    static final String DFA46_eofS =
            "\1\25\164\uffff";
    static final String DFA46_minS =
            "\1\4\4\uffff\1\0\1\uffff\1\0\1\uffff\14\0\36\uffff\1\0\3\uffff\1\0\6\uffff" +
                    "\1\0\13\uffff\1\0\1\uffff\3\0\2\uffff\2\0\1\uffff\1\0\5\uffff\1\0\2\uffff" +
                    "\1\0\6\uffff\1\0\20\uffff";
    static final String DFA46_maxS =
            "\1\u00c9\4\uffff\1\0\1\uffff\1\0\1\uffff\14\0\36\uffff\1\0\3\uffff\1\0" +
                    "\6\uffff\1\0\13\uffff\1\0\1\uffff\3\0\2\uffff\2\0\1\uffff\1\0\5\uffff" +
                    "\1\0\2\uffff\1\0\6\uffff\1\0\20\uffff";
    static final String DFA46_acceptS =
            "\1\uffff\1\1\23\uffff\1\7\132\uffff\1\6\1\2\1\3\1\4\1\5";
    static final String DFA46_specialS =
            "\5\uffff\1\0\1\uffff\1\1\1\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12" +
                    "\1\13\1\14\1\15\36\uffff\1\16\3\uffff\1\17\6\uffff\1\20\13\uffff\1\21" +
                    "\1\uffff\1\22\1\23\1\24\2\uffff\1\25\1\26\1\uffff\1\27\5\uffff\1\30\2" +
                    "\uffff\1\31\6\uffff\1\32\20\uffff}>";
    static final String[] DFA46_transitionS = {
            "\1\25\1\uffff\1\144\1\25\1\15\1\1\3\25\2\uffff\1\144\2\25\1\uffff\1\25" +
                    "\1\144\2\25\1\5\2\25\1\uffff\2\25\2\144\1\25\1\uffff\1\121\3\25\1\1\5" +
                    "\25\5\uffff\4\25\1\144\1\25\1\132\4\25\1\1\1\144\2\25\2\uffff\1\16\1" +
                    "\25\1\uffff\1\25\4\uffff\1\25\1\122\1\25\1\135\3\25\1\1\3\25\2\uffff" +
                    "\2\25\1\124\2\25\1\144\2\25\1\76\5\25\1\7\2\25\1\67\1\25\1\144\1\25\2" +
                    "\uffff\1\1\3\25\1\12\1\11\1\25\1\17\1\uffff\5\25\1\uffff\1\25\2\uffff" +
                    "\1\112\1\115\1\1\1\20\1\24\1\uffff\1\144\2\uffff\4\25\1\uffff\1\25\1" +
                    "\1\4\25\1\uffff\1\25\1\116\1\63\1\13\4\25\1\uffff\1\14\2\uffff\1\25\14" +
                    "\uffff\1\25\1\22\1\25\3\uffff\1\25\6\uffff\2\25\2\uffff\2\25\1\21\3\uffff" +
                    "\1\114\1\25\1\uffff\1\25\1\23\1\25",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] DFA46_eot = DFA.unpackEncodedString(DFA46_eotS);
    static final short[] DFA46_eof = DFA.unpackEncodedString(DFA46_eofS);
    static final char[] DFA46_min = DFA.unpackEncodedStringToUnsignedChars(DFA46_minS);
    static final char[] DFA46_max = DFA.unpackEncodedStringToUnsignedChars(DFA46_maxS);
    static final short[] DFA46_accept = DFA.unpackEncodedString(DFA46_acceptS);
    static final short[] DFA46_special = DFA.unpackEncodedString(DFA46_specialS);
    static final short[][] DFA46_transition;
    static final String DFA53_eotS =
            "\14\uffff";
    static final String DFA53_eofS =
            "\1\uffff\1\6\1\uffff\1\6\3\uffff\2\6\1\uffff\2\6";
    static final String DFA53_minS =
            "\1\6\1\7\1\u00ae\1\7\1\uffff\1\6\1\uffff\2\7\1\u00ae\2\7";
    static final String DFA53_maxS =
            "\1\u00c9\1\u00c7\1\u00ae\1\u00c7\1\uffff\1\u00c8\1\uffff\2\u00c7\1\u00ae" +
                    "\2\u00c7";
    static final String DFA53_acceptS =
            "\4\uffff\1\2\1\uffff\1\1\5\uffff";
    static final String DFA53_specialS =
            "\14\uffff}>";
    static final String[] DFA53_transitionS = {
            "\1\3\1\4\1\3\1\uffff\1\4\4\uffff\1\3\1\4\3\uffff\1\3\10\uffff\2\3\1\4" +
                    "\1\uffff\1\3\4\uffff\1\4\1\uffff\2\4\10\uffff\1\4\1\uffff\1\3\1\uffff" +
                    "\1\3\2\uffff\1\4\2\uffff\1\3\4\uffff\2\4\1\uffff\1\4\5\uffff\1\3\1\4" +
                    "\1\3\1\4\3\uffff\1\4\1\uffff\1\4\2\uffff\1\4\1\uffff\1\3\2\4\1\3\2\4" +
                    "\1\3\1\uffff\1\4\1\uffff\2\4\1\3\2\uffff\1\3\1\4\1\3\6\uffff\1\4\1\3" +
                    "\1\4\1\uffff\1\4\5\uffff\1\4\4\uffff\2\3\1\uffff\2\3\1\uffff\1\3\11\uffff" +
                    "\4\4\2\uffff\3\3\3\uffff\1\4\4\uffff\1\4\14\uffff\1\4\1\1\1\4\3\uffff" +
                    "\1\4\14\uffff\1\3\3\uffff\1\3\2\uffff\1\4\1\2\1\4",
            "\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\6\14\uffff\1\4\1\uffff\1\5\1" +
                    "\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1\uffff" +
                    "\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1\4\7\uffff" +
                    "\1\4\1\uffff\1\4\11\uffff\1\6\22\uffff\4\4\64\uffff\1\4",
            "\1\7",
            "\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\6\14\uffff\1\4\1\uffff\1\5\1" +
                    "\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1\uffff" +
                    "\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1\4\7\uffff" +
                    "\1\4\1\uffff\1\4\11\uffff\1\6\22\uffff\4\4\64\uffff\1\4",
            "",
            "\1\12\1\uffff\1\12\6\uffff\1\12\4\uffff\1\12\10\uffff\2\12\2\uffff\1" +
                    "\12\22\uffff\1\12\1\uffff\1\12\5\uffff\1\12\15\uffff\1\12\1\uffff\1\12" +
                    "\13\uffff\1\12\2\uffff\1\12\2\uffff\1\12\5\uffff\1\12\2\uffff\1\12\1" +
                    "\uffff\1\12\7\uffff\1\12\15\uffff\2\12\1\uffff\2\12\1\uffff\1\12\17\uffff" +
                    "\3\12\26\uffff\1\10\21\uffff\1\12\3\uffff\1\12\3\uffff\1\11",
            "",
            "\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\6\14\uffff\1\4\1\uffff\1\5\1" +
                    "\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1\uffff" +
                    "\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1\4\7\uffff" +
                    "\1\4\1\uffff\1\4\11\uffff\1\6\22\uffff\4\4\64\uffff\1\4",
            "\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\6\14\uffff\1\4\1\uffff\1\5\1" +
                    "\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1\uffff" +
                    "\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1\4\7\uffff" +
                    "\1\4\1\uffff\1\4\11\uffff\1\6\22\uffff\4\4\64\uffff\1\4",
            "\1\13",
            "\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\6\14\uffff\1\4\1\uffff\1\5\1" +
                    "\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1\uffff" +
                    "\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1\4\7\uffff" +
                    "\1\4\1\uffff\1\4\11\uffff\1\6\22\uffff\4\4\64\uffff\1\4",
            "\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\6\14\uffff\1\4\1\uffff\1\5\1" +
                    "\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1\uffff" +
                    "\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1\4\7\uffff" +
                    "\1\4\1\uffff\1\4\11\uffff\1\6\22\uffff\4\4\64\uffff\1\4"
    };
    static final short[] DFA53_eot = DFA.unpackEncodedString(DFA53_eotS);
    static final short[] DFA53_eof = DFA.unpackEncodedString(DFA53_eofS);
    static final char[] DFA53_min = DFA.unpackEncodedStringToUnsignedChars(DFA53_minS);
    static final char[] DFA53_max = DFA.unpackEncodedStringToUnsignedChars(DFA53_maxS);
    static final short[] DFA53_accept = DFA.unpackEncodedString(DFA53_acceptS);
    static final short[] DFA53_special = DFA.unpackEncodedString(DFA53_specialS);
    static final short[][] DFA53_transition;
    static final String DFA57_eotS =
            "\145\uffff";
    static final String DFA57_eofS =
            "\1\2\144\uffff";
    static final String DFA57_minS =
            "\1\4\1\0\143\uffff";
    static final String DFA57_maxS =
            "\1\u00c9\1\0\143\uffff";
    static final String DFA57_acceptS =
            "\2\uffff\1\2\141\uffff\1\1";
    static final String DFA57_specialS =
            "\1\uffff\1\0\143\uffff}>";
    static final String[] DFA57_transitionS = {
            "\1\2\1\uffff\3\2\1\uffff\3\2\2\uffff\3\2\1\uffff\7\2\1\uffff\5\2\1\uffff" +
                    "\4\2\1\uffff\5\2\5\uffff\13\2\1\uffff\3\2\2\uffff\2\2\1\uffff\1\2\4\uffff" +
                    "\7\2\1\uffff\2\2\1\1\2\uffff\25\2\3\uffff\7\2\1\uffff\5\2\1\uffff\1\2" +
                    "\2\uffff\2\2\1\uffff\2\2\1\uffff\1\2\2\uffff\4\2\1\uffff\1\2\1\uffff" +
                    "\4\2\1\uffff\10\2\1\uffff\1\2\2\uffff\1\2\14\uffff\3\2\3\uffff\1\2\6" +
                    "\uffff\2\2\2\uffff\3\2\3\uffff\2\2\1\uffff\3\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] DFA57_eot = DFA.unpackEncodedString(DFA57_eotS);
    static final short[] DFA57_eof = DFA.unpackEncodedString(DFA57_eofS);
    static final char[] DFA57_min = DFA.unpackEncodedStringToUnsignedChars(DFA57_minS);
    static final char[] DFA57_max = DFA.unpackEncodedStringToUnsignedChars(DFA57_maxS);
    static final short[] DFA57_accept = DFA.unpackEncodedString(DFA57_acceptS);
    static final short[] DFA57_special = DFA.unpackEncodedString(DFA57_specialS);
    static final short[][] DFA57_transition;
    static final String DFA65_eotS =
            "\162\uffff";
    static final String DFA65_eofS =
            "\1\64\161\uffff";
    static final String DFA65_minS =
            "\1\4\157\0\2\uffff";
    static final String DFA65_maxS =
            "\1\u00c9\157\0\2\uffff";
    static final String DFA65_acceptS =
            "\160\uffff\1\1\1\2";
    static final String DFA65_specialS =
            "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15" +
                    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33" +
                    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51" +
                    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67" +
                    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104" +
                    "\1\105\1\106\1\107\1\110\1\111\1\112\1\113\1\114\1\115\1\116\1\117\1\120" +
                    "\1\121\1\122\1\123\1\124\1\125\1\126\1\127\1\130\1\131\1\132\1\133\1\134" +
                    "\1\135\1\136\1\137\1\140\1\141\1\142\1\143\1\144\1\145\1\146\1\147\1\150" +
                    "\1\151\1\152\1\153\1\154\1\155\1\156\2\uffff}>";
    static final String[] DFA65_transitionS = {
            "\1\63\1\uffff\1\144\1\47\1\16\1\3\1\47\1\111\1\127\2\uffff\1\144\1\27" +
                    "\1\74\1\uffff\1\110\1\144\1\103\1\56\1\6\1\145\1\65\1\uffff\1\100\1\75" +
                    "\2\144\1\42\1\uffff\1\121\1\57\1\75\1\120\1\7\1\47\1\155\1\45\1\52\1" +
                    "\157\5\uffff\1\147\1\102\1\50\1\152\1\144\1\60\1\132\1\107\1\140\1\40" +
                    "\1\134\1\5\1\144\1\150\1\153\2\uffff\1\17\1\66\1\uffff\1\51\4\uffff\1" +
                    "\143\1\122\1\66\1\135\1\44\1\142\1\126\1\7\1\66\1\106\1\1\2\uffff\1\66" +
                    "\1\62\1\124\1\26\1\46\1\144\1\33\1\47\1\76\1\136\1\41\1\123\1\31\1\66" +
                    "\1\10\1\53\1\154\1\67\1\47\1\144\1\125\2\uffff\1\2\1\130\1\61\1\32\1" +
                    "\13\1\12\1\71\1\20\1\uffff\1\77\1\70\1\72\1\73\1\43\1\uffff\1\105\2\uffff" +
                    "\1\112\1\115\1\11\1\21\1\25\1\uffff\1\144\2\uffff\1\113\1\100\1\104\1" +
                    "\131\1\uffff\1\54\1\4\4\47\1\uffff\1\133\1\116\1\55\1\14\1\146\1\101" +
                    "\1\156\1\37\1\uffff\1\15\2\uffff\1\36\14\uffff\1\34\1\23\1\34\3\uffff" +
                    "\1\35\6\uffff\1\141\1\151\2\uffff\1\101\1\137\1\22\3\uffff\1\114\1\117" +
                    "\1\uffff\1\47\1\24\1\30",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    static final short[] DFA65_eot = DFA.unpackEncodedString(DFA65_eotS);
    static final short[] DFA65_eof = DFA.unpackEncodedString(DFA65_eofS);
    static final char[] DFA65_min = DFA.unpackEncodedStringToUnsignedChars(DFA65_minS);
    static final char[] DFA65_max = DFA.unpackEncodedStringToUnsignedChars(DFA65_maxS);
    static final short[] DFA65_accept = DFA.unpackEncodedString(DFA65_acceptS);
    static final short[] DFA65_special = DFA.unpackEncodedString(DFA65_specialS);
    static final short[][] DFA65_transition;
    static final String DFA66_eotS =
            "\145\uffff";
    static final String DFA66_eofS =
            "\1\2\144\uffff";
    static final String DFA66_minS =
            "\1\4\1\0\143\uffff";
    static final String DFA66_maxS =
            "\1\u00c9\1\0\143\uffff";
    static final String DFA66_acceptS =
            "\2\uffff\1\2\141\uffff\1\1";
    static final String DFA66_specialS =
            "\1\uffff\1\0\143\uffff}>";
    static final String[] DFA66_transitionS = {
            "\1\2\1\uffff\3\2\1\uffff\3\2\2\uffff\3\2\1\uffff\7\2\1\uffff\5\2\1\uffff" +
                    "\4\2\1\uffff\5\2\5\uffff\13\2\1\uffff\3\2\2\uffff\2\2\1\uffff\1\2\4\uffff" +
                    "\7\2\1\uffff\3\2\2\uffff\3\2\1\1\21\2\3\uffff\7\2\1\uffff\5\2\1\uffff" +
                    "\1\2\2\uffff\2\2\1\uffff\2\2\1\uffff\1\2\2\uffff\4\2\1\uffff\1\2\1\uffff" +
                    "\4\2\1\uffff\10\2\1\uffff\1\2\2\uffff\1\2\14\uffff\3\2\3\uffff\1\2\6" +
                    "\uffff\2\2\2\uffff\3\2\3\uffff\2\2\1\uffff\3\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] DFA66_eot = DFA.unpackEncodedString(DFA66_eotS);
    static final short[] DFA66_eof = DFA.unpackEncodedString(DFA66_eofS);
    static final char[] DFA66_min = DFA.unpackEncodedStringToUnsignedChars(DFA66_minS);
    static final char[] DFA66_max = DFA.unpackEncodedStringToUnsignedChars(DFA66_maxS);
    static final short[] DFA66_accept = DFA.unpackEncodedString(DFA66_acceptS);
    static final short[] DFA66_special = DFA.unpackEncodedString(DFA66_specialS);
    static final short[][] DFA66_transition;
    static final String DFA68_eotS =
            "\146\uffff";
    static final String DFA68_eofS =
            "\1\5\145\uffff";
    static final String DFA68_minS =
            "\1\4\4\0\40\uffff\1\0\3\uffff\1\0\7\uffff\1\0\14\uffff\1\0\1\uffff\3\0" +
                    "\2\uffff\2\0\1\uffff\1\0\5\uffff\1\0\2\uffff\1\0\6\uffff\1\0\15\uffff";
    static final String DFA68_maxS =
            "\1\u00c9\4\0\40\uffff\1\0\3\uffff\1\0\7\uffff\1\0\14\uffff\1\0\1\uffff" +
                    "\3\0\2\uffff\2\0\1\uffff\1\0\5\uffff\1\0\2\uffff\1\0\6\uffff\1\0\15\uffff";
    static final String DFA68_acceptS =
            "\5\uffff\1\2\136\uffff\1\1\1\3";
    static final String DFA68_specialS =
            "\1\uffff\1\0\1\1\1\2\1\3\40\uffff\1\4\3\uffff\1\5\7\uffff\1\6\14\uffff" +
                    "\1\7\1\uffff\1\10\1\11\1\12\2\uffff\1\13\1\14\1\uffff\1\15\5\uffff\1\16" +
                    "\2\uffff\1\17\6\uffff\1\20\15\uffff}>";
    static final String[] DFA68_transitionS = {
            "\1\5\1\uffff\1\130\1\5\1\130\1\uffff\3\5\2\uffff\1\130\2\5\1\uffff\1" +
                    "\5\1\130\5\5\1\uffff\2\5\2\130\1\5\1\uffff\1\105\3\5\1\uffff\5\5\5\uffff" +
                    "\4\5\1\130\1\5\1\116\4\5\1\uffff\1\130\2\5\2\uffff\2\5\1\uffff\1\5\4" +
                    "\uffff\1\5\1\106\1\5\1\121\3\5\1\uffff\3\5\2\uffff\2\5\1\110\1\4\1\5" +
                    "\1\130\2\5\1\61\5\5\1\130\2\5\1\51\1\5\1\130\1\5\3\uffff\3\5\1\130\3" +
                    "\5\1\uffff\5\5\1\uffff\1\5\2\uffff\1\76\1\101\1\uffff\1\130\1\3\1\uffff" +
                    "\1\130\2\uffff\4\5\1\uffff\1\5\1\uffff\4\5\1\uffff\1\5\1\102\1\45\1\130" +
                    "\4\5\1\uffff\1\5\2\uffff\1\5\14\uffff\1\5\1\1\1\5\3\uffff\1\5\6\uffff" +
                    "\2\5\2\uffff\2\5\1\130\3\uffff\1\100\1\5\1\uffff\1\5\1\2\1\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] DFA68_eot = DFA.unpackEncodedString(DFA68_eotS);
    static final short[] DFA68_eof = DFA.unpackEncodedString(DFA68_eofS);
    static final char[] DFA68_min = DFA.unpackEncodedStringToUnsignedChars(DFA68_minS);
    static final char[] DFA68_max = DFA.unpackEncodedStringToUnsignedChars(DFA68_maxS);
    static final short[] DFA68_accept = DFA.unpackEncodedString(DFA68_acceptS);
    static final short[] DFA68_special = DFA.unpackEncodedString(DFA68_specialS);
    static final short[][] DFA68_transition;
    static final String DFA85_eotS =
            "\133\uffff";
    static final String DFA85_eofS =
            "\1\2\132\uffff";
    static final String DFA85_minS =
            "\1\4\1\6\1\uffff\1\7\1\u00ae\1\7\3\6\1\0\1\7\1\0\1\7\1\u00ae\2\7\1\u00ae" +
                    "\2\7\1\u00ae\1\7\1\uffff\2\0\1\7\1\0\1\6\1\7\1\6\1\7\2\6\1\0\1\7\2\0\1" +
                    "\7\1\u00ae\1\7\1\0\1\7\1\u00ae\2\7\1\u00ae\2\7\1\u00ae\1\7\1\0\1\6\1\7" +
                    "\2\6\1\7\1\0\1\7\1\0\1\6\1\7\1\6\1\7\1\0\1\7\1\u00ae\1\7\2\0\1\7\1\u00ae" +
                    "\1\7\1\0\1\7\1\u00ae\1\7\1\6\1\7\1\6\1\7\2\6\1\7\2\0\1\7\1\u00ae\1\7\1" +
                    "\0\1\6\1\7\1\0";
    static final String DFA85_maxS =
            "\2\u00c9\1\uffff\1\u00c7\1\u00ae\1\u00c7\1\u00c8\2\u00c9\1\0\1\u00c7\1" +
                    "\0\1\u00c7\1\u00ae\2\u00c7\1\u00ae\2\u00c7\1\u00ae\1\u00c7\1\uffff\2\0" +
                    "\1\u00c7\1\0\1\u00c9\1\u00c7\1\u00c9\1\u00c7\1\u00c8\1\u00c9\1\0\1\u00c7" +
                    "\2\0\1\u00c7\1\u00ae\1\u00c7\1\0\1\u00c7\1\u00ae\2\u00c7\1\u00ae\2\u00c7" +
                    "\1\u00ae\1\u00c7\1\0\1\u00c9\1\u00c7\2\u00c9\1\u00c7\1\0\1\u00c7\1\0\1" +
                    "\u00c9\1\u00c7\1\u00c9\1\u00c7\1\0\1\u00c7\1\u00ae\1\u00c7\2\0\1\u00c7" +
                    "\1\u00ae\1\u00c7\1\0\1\u00c7\1\u00ae\1\u00c7\1\u00c9\1\u00c7\1\u00c9\1" +
                    "\u00c7\2\u00c9\1\u00c7\2\0\1\u00c7\1\u00ae\1\u00c7\1\0\1\u00c9\1\u00c7" +
                    "\1\0";
    static final String DFA85_acceptS =
            "\2\uffff\1\2\22\uffff\1\1\105\uffff";
    static final String DFA85_specialS =
            "\11\uffff\1\15\1\uffff\1\14\12\uffff\1\16\1\17\1\uffff\1\20\6\uffff\1" +
                    "\0\1\uffff\1\1\1\21\3\uffff\1\22\11\uffff\1\2\5\uffff\1\4\1\uffff\1\6" +
                    "\4\uffff\1\23\3\uffff\1\10\1\11\3\uffff\1\12\12\uffff\1\7\1\5\3\uffff" +
                    "\1\13\2\uffff\1\3}>";
    static final String[] DFA85_transitionS = {
            "\1\2\1\uffff\3\2\1\uffff\3\2\2\uffff\3\2\1\uffff\7\2\1\uffff\5\2\1\uffff" +
                    "\4\2\1\uffff\5\2\5\uffff\13\2\1\uffff\3\2\2\uffff\2\2\1\uffff\1\2\4\uffff" +
                    "\7\2\1\uffff\3\2\2\uffff\3\2\1\1\21\2\3\uffff\7\2\1\uffff\5\2\1\uffff" +
                    "\1\2\2\uffff\2\2\1\uffff\2\2\1\uffff\1\2\2\uffff\4\2\1\uffff\1\2\1\uffff" +
                    "\4\2\1\uffff\10\2\1\uffff\1\2\2\uffff\1\2\14\uffff\3\2\3\uffff\1\2\6" +
                    "\uffff\2\2\2\uffff\3\2\3\uffff\2\2\1\uffff\3\2",
            "\1\5\1\2\1\5\1\uffff\1\2\4\uffff\1\5\1\2\3\uffff\1\5\3\uffff\2\2\3\uffff" +
                    "\2\5\1\2\1\uffff\1\5\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1\uffff\1\5" +
                    "\1\uffff\1\5\2\uffff\1\2\2\uffff\1\5\4\uffff\2\2\1\uffff\1\2\5\uffff" +
                    "\1\5\1\2\1\5\1\2\3\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\1\5\2\2" +
                    "\1\5\2\2\1\5\1\uffff\1\2\1\uffff\2\2\1\5\2\uffff\1\5\1\2\1\5\6\uffff" +
                    "\1\2\1\5\1\2\1\uffff\1\2\5\uffff\1\2\4\uffff\2\5\1\uffff\2\5\1\uffff" +
                    "\1\5\4\uffff\1\2\4\uffff\4\2\2\uffff\3\5\3\uffff\1\2\4\uffff\1\2\14\uffff" +
                    "\1\2\1\3\1\2\3\uffff\1\2\14\uffff\1\5\3\uffff\1\5\2\uffff\1\2\1\4\1\2",
            "",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1" +
                    "\6\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\1\2\1\7\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2" +
                    "\7\uffff\1\2\1\uffff\1\2\27\uffff\1\11\4\uffff\4\2\64\uffff\1\2",
            "\1\12",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1" +
                    "\6\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\1\2\1\7\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2" +
                    "\7\uffff\1\2\1\uffff\1\2\27\uffff\1\13\4\uffff\4\2\64\uffff\1\2",
            "\1\16\1\uffff\1\16\6\uffff\1\16\4\uffff\1\16\10\uffff\2\16\2\uffff\1" +
                    "\16\22\uffff\1\16\1\uffff\1\16\5\uffff\1\16\15\uffff\1\16\1\uffff\1\16" +
                    "\13\uffff\1\16\2\uffff\1\16\2\uffff\1\16\5\uffff\1\16\2\uffff\1\16\1" +
                    "\uffff\1\16\7\uffff\1\16\15\uffff\2\16\1\uffff\2\16\1\uffff\1\16\17\uffff" +
                    "\3\16\26\uffff\1\14\21\uffff\1\16\3\uffff\1\16\3\uffff\1\15",
            "\1\21\1\2\1\21\1\uffff\1\2\4\uffff\1\21\1\2\3\uffff\1\21\3\uffff\2\2" +
                    "\3\uffff\2\21\1\2\1\uffff\1\21\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1" +
                    "\uffff\1\21\1\uffff\1\21\2\uffff\1\2\2\uffff\1\21\15\uffff\1\21\1\uffff" +
                    "\1\21\1\2\5\uffff\1\2\4\uffff\1\21\2\2\1\21\2\2\1\21\1\uffff\1\2\1\uffff" +
                    "\1\2\1\uffff\1\21\2\uffff\1\21\1\2\1\21\6\uffff\1\2\1\21\1\2\7\uffff" +
                    "\1\2\4\uffff\2\21\1\uffff\2\21\1\uffff\1\21\4\uffff\1\2\4\uffff\4\2\2" +
                    "\uffff\3\21\3\uffff\1\2\4\uffff\1\2\14\uffff\1\2\1\17\1\2\3\uffff\1\2" +
                    "\14\uffff\1\21\3\uffff\1\21\2\uffff\1\2\1\20\1\2",
            "\1\24\1\2\1\24\1\uffff\1\2\4\uffff\1\24\1\2\3\uffff\1\24\3\uffff\2\2" +
                    "\3\uffff\2\24\1\2\1\uffff\1\24\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1" +
                    "\uffff\1\24\1\uffff\1\24\2\uffff\1\2\2\uffff\1\24\4\uffff\2\2\1\uffff" +
                    "\1\2\5\uffff\1\24\1\2\1\24\1\2\3\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1" +
                    "\uffff\1\24\2\2\1\24\2\2\1\24\1\uffff\1\2\1\uffff\2\2\1\24\2\uffff\1" +
                    "\24\1\2\1\24\6\uffff\1\2\1\24\1\2\1\uffff\1\2\5\uffff\1\2\4\uffff\2\24" +
                    "\1\uffff\2\24\1\uffff\1\24\4\uffff\1\2\4\uffff\4\2\2\uffff\3\24\3\uffff" +
                    "\1\2\4\uffff\1\2\14\uffff\1\2\1\22\1\2\3\uffff\1\2\14\uffff\1\24\3\uffff" +
                    "\1\24\2\uffff\1\2\1\23\1\2",
            "\1\uffff",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1" +
                    "\6\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\1\2\1\7\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2" +
                    "\7\uffff\1\2\1\uffff\1\2\27\uffff\1\26\4\uffff\4\2\64\uffff\1\2",
            "\1\uffff",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1" +
                    "\6\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\1\2\1\7\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2" +
                    "\7\uffff\1\2\1\uffff\1\2\27\uffff\1\27\4\uffff\4\2\64\uffff\1\2",
            "\1\30",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1" +
                    "\6\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\1\2\1\7\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2" +
                    "\7\uffff\1\2\1\uffff\1\2\27\uffff\1\31\4\uffff\4\2\64\uffff\1\2",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\34\1\32\14\uffff\1\2\1\uffff" +
                    "\1\2\11\uffff\1\2\21\uffff\1\33\16\uffff\1\2\5\uffff\2\2\1\uffff\2\2" +
                    "\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff" +
                    "\4\2\64\uffff\1\2",
            "\1\35",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\34\1\32\14\uffff\1\2\1\uffff" +
                    "\1\2\11\uffff\1\2\21\uffff\1\33\16\uffff\1\2\5\uffff\2\2\1\uffff\2\2" +
                    "\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff" +
                    "\4\2\64\uffff\1\2",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1" +
                    "\36\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\1\2\1\37\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2" +
                    "\7\uffff\1\2\1\uffff\1\2\27\uffff\1\40\4\uffff\4\2\64\uffff\1\2",
            "\1\41",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1" +
                    "\36\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\1\2\1\37\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2" +
                    "\7\uffff\1\2\1\uffff\1\2\27\uffff\1\42\4\uffff\4\2\64\uffff\1\2",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1" +
                    "\6\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\1\2\1\7\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2" +
                    "\7\uffff\1\2\1\uffff\1\2\27\uffff\1\43\4\uffff\4\2\64\uffff\1\2",
            "\1\uffff",
            "\1\46\1\2\1\46\1\uffff\1\2\4\uffff\1\46\1\2\3\uffff\1\46\3\uffff\2\2" +
                    "\3\uffff\2\46\1\2\1\uffff\1\46\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1" +
                    "\uffff\1\46\1\uffff\1\46\2\uffff\1\2\2\uffff\1\46\4\uffff\2\2\1\uffff" +
                    "\1\2\5\uffff\1\46\1\2\1\46\1\2\3\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1" +
                    "\uffff\1\46\2\2\1\46\2\2\1\46\1\uffff\1\2\1\uffff\2\2\1\46\2\uffff\1" +
                    "\46\1\2\1\46\6\uffff\1\2\1\46\1\2\1\uffff\1\2\5\uffff\1\2\4\uffff\2\46" +
                    "\1\uffff\2\46\1\uffff\1\46\4\uffff\1\2\4\uffff\4\2\2\uffff\3\46\3\uffff" +
                    "\1\2\4\uffff\1\2\14\uffff\1\2\1\44\1\2\3\uffff\1\2\14\uffff\1\46\3\uffff" +
                    "\1\46\2\uffff\1\2\1\45\1\2",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1" +
                    "\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2\7\uffff" +
                    "\1\2\1\uffff\1\2\27\uffff\1\47\4\uffff\4\2\64\uffff\1\2",
            "\1\52\1\2\1\52\1\uffff\1\2\4\uffff\1\52\1\2\3\uffff\1\52\2\uffff\1\25" +
                    "\2\2\2\uffff\1\25\2\52\1\2\1\uffff\1\52\4\uffff\1\2\1\uffff\1\2\11\uffff" +
                    "\1\2\1\uffff\1\52\1\uffff\1\52\2\uffff\1\2\2\uffff\1\52\4\uffff\2\2\1" +
                    "\uffff\1\2\5\uffff\1\52\1\2\1\52\1\2\3\uffff\1\2\1\uffff\1\2\2\uffff" +
                    "\1\2\1\uffff\1\52\2\2\1\52\2\2\1\52\1\uffff\1\2\1\uffff\2\2\1\52\2\uffff" +
                    "\1\52\1\2\1\52\6\uffff\1\2\1\52\1\2\1\uffff\1\2\5\uffff\1\2\4\uffff\2" +
                    "\52\1\25\2\52\1\uffff\1\52\4\uffff\1\2\4\uffff\4\2\2\uffff\3\52\3\uffff" +
                    "\1\2\4\uffff\1\2\14\uffff\1\2\1\50\1\2\3\uffff\1\2\14\uffff\1\52\3\uffff" +
                    "\1\52\2\uffff\1\2\1\51\1\2",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\34\1\32\14\uffff\1\2\1\uffff" +
                    "\1\2\11\uffff\1\2\21\uffff\1\33\16\uffff\1\2\5\uffff\2\2\1\uffff\2\2" +
                    "\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff" +
                    "\4\2\64\uffff\1\2",
            "\1\55\1\uffff\1\55\6\uffff\1\55\4\uffff\1\55\10\uffff\2\55\2\uffff\1" +
                    "\55\22\uffff\1\55\1\uffff\1\55\5\uffff\1\55\15\uffff\1\55\1\uffff\1\55" +
                    "\13\uffff\1\55\2\uffff\1\55\2\uffff\1\55\5\uffff\1\55\2\uffff\1\55\1" +
                    "\uffff\1\55\7\uffff\1\55\15\uffff\2\55\1\uffff\2\55\1\uffff\1\55\17\uffff" +
                    "\3\55\26\uffff\1\53\21\uffff\1\55\3\uffff\1\55\3\uffff\1\54",
            "\1\60\1\2\1\60\1\uffff\1\2\4\uffff\1\60\1\2\3\uffff\1\60\3\uffff\2\2" +
                    "\3\uffff\2\60\1\2\1\uffff\1\60\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1" +
                    "\uffff\1\60\1\uffff\1\60\2\uffff\1\2\2\uffff\1\60\15\uffff\1\60\1\uffff" +
                    "\1\60\1\2\5\uffff\1\2\4\uffff\1\60\2\2\1\60\2\2\1\60\1\uffff\1\2\1\uffff" +
                    "\1\2\1\uffff\1\60\2\uffff\1\60\1\2\1\60\6\uffff\1\2\1\60\1\2\7\uffff" +
                    "\1\2\4\uffff\2\60\1\uffff\2\60\1\uffff\1\60\4\uffff\1\2\4\uffff\4\2\2" +
                    "\uffff\3\60\3\uffff\1\2\4\uffff\1\2\14\uffff\1\2\1\56\1\2\3\uffff\1\2" +
                    "\14\uffff\1\60\3\uffff\1\60\2\uffff\1\2\1\57\1\2",
            "\1\uffff",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1" +
                    "\36\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\1\2\1\37\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2" +
                    "\7\uffff\1\2\1\uffff\1\2\27\uffff\1\61\4\uffff\4\2\64\uffff\1\2",
            "\1\uffff",
            "\1\uffff",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\32\14\uffff\1\2\1\uffff\1" +
                    "\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\62\6\uffff\1\2\5\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2\7\uffff" +
                    "\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff\1\2",
            "\1\63",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\32\14\uffff\1\2\1\uffff\1" +
                    "\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\62\6\uffff\1\2\5\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2\7\uffff" +
                    "\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff\1\2",
            "\1\uffff",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\64\14\uffff\1\2\1\uffff\1" +
                    "\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\65\6\uffff\1\2\5\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2\7\uffff" +
                    "\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff\4\2\64\uffff\1\2",
            "\1\66",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\64\14\uffff\1\2\1\uffff\1" +
                    "\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\65\6\uffff\1\2\5\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2\7\uffff" +
                    "\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff\4\2\64\uffff\1\2",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1" +
                    "\36\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\1\2\1\37\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2" +
                    "\7\uffff\1\2\1\uffff\1\2\27\uffff\1\67\4\uffff\4\2\64\uffff\1\2",
            "\1\70",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1" +
                    "\36\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\1\2\1\37\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2" +
                    "\7\uffff\1\2\1\uffff\1\2\27\uffff\1\71\4\uffff\4\2\64\uffff\1\2",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\74\1\72\14\uffff\1\2\1\uffff" +
                    "\1\2\11\uffff\1\2\21\uffff\1\73\16\uffff\1\2\5\uffff\2\2\1\uffff\2\2" +
                    "\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff" +
                    "\4\2\64\uffff\1\2",
            "\1\75",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\74\1\72\14\uffff\1\2\1\uffff" +
                    "\1\2\11\uffff\1\2\21\uffff\1\73\16\uffff\1\2\5\uffff\2\2\1\uffff\2\2" +
                    "\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff" +
                    "\4\2\64\uffff\1\2",
            "\1\uffff",
            "\3\2\1\uffff\1\2\4\uffff\2\2\3\uffff\1\2\3\uffff\1\2\1\10\3\uffff\3" +
                    "\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\1\2\5\uffff\1\2\1\uffff\1\2\5\uffff\4\2\3\uffff" +
                    "\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\7\2\1\uffff\1\2\1\uffff\3\2\2\uffff" +
                    "\3\2\6\uffff\3\2\7\uffff\1\2\4\uffff\2\2\1\uffff\2\2\1\uffff\1\2\4\uffff" +
                    "\1\76\4\uffff\4\2\2\uffff\3\2\3\uffff\1\2\4\uffff\1\2\14\uffff\3\2\3" +
                    "\uffff\1\2\14\uffff\1\2\3\uffff\1\2\2\uffff\3\2",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\32\14\uffff\1\2\1\uffff\1" +
                    "\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\62\6\uffff\1\2\5\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2\7\uffff" +
                    "\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff\1\2",
            "\1\101\1\2\1\101\1\uffff\1\2\4\uffff\1\101\1\2\3\uffff\1\101\2\uffff" +
                    "\1\25\2\2\2\uffff\1\25\2\101\1\2\1\uffff\1\101\4\uffff\1\2\1\uffff\1" +
                    "\2\11\uffff\1\2\1\uffff\1\101\1\uffff\1\101\2\uffff\1\2\2\uffff\1\101" +
                    "\4\uffff\2\2\1\uffff\1\2\5\uffff\1\101\1\2\1\101\1\2\3\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\1\uffff\1\101\2\2\1\101\2\2\1\101\1\uffff\1\2\1\uffff" +
                    "\2\2\1\101\2\uffff\1\101\1\2\1\101\6\uffff\1\2\1\101\1\2\1\uffff\1\2" +
                    "\5\uffff\1\2\4\uffff\2\101\1\25\2\101\1\uffff\1\101\4\uffff\1\2\4\uffff" +
                    "\4\2\2\uffff\3\101\3\uffff\1\2\4\uffff\1\2\14\uffff\1\2\1\77\1\2\3\uffff" +
                    "\1\2\14\uffff\1\101\3\uffff\1\101\2\uffff\1\2\1\100\1\2",
            "\3\2\1\uffff\1\2\4\uffff\2\2\3\uffff\1\2\3\uffff\1\2\1\10\3\uffff\3" +
                    "\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\1\2\15\uffff\1\2\1\uffff\2\2\5\uffff\1\2\4\uffff" +
                    "\7\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\3\2\6\uffff\3\2\7\uffff" +
                    "\1\2\4\uffff\2\2\1\uffff\2\2\1\uffff\1\2\4\uffff\1\102\4\uffff\4\2\2" +
                    "\uffff\3\2\3\uffff\1\2\4\uffff\1\2\14\uffff\3\2\3\uffff\1\2\14\uffff" +
                    "\1\2\3\uffff\1\2\2\uffff\3\2",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\64\14\uffff\1\2\1\uffff\1" +
                    "\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\65\6\uffff\1\2\5\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2\7\uffff" +
                    "\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff\4\2\64\uffff\1\2",
            "\1\uffff",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1" +
                    "\36\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\1\2\1\37\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2" +
                    "\7\uffff\1\2\1\uffff\1\2\27\uffff\1\103\4\uffff\4\2\64\uffff\1\2",
            "\1\uffff",
            "\1\106\1\2\1\106\1\uffff\1\2\4\uffff\1\106\1\2\3\uffff\1\106\3\uffff" +
                    "\2\2\3\uffff\2\106\1\2\1\uffff\1\106\4\uffff\1\2\1\uffff\1\2\11\uffff" +
                    "\1\2\1\uffff\1\106\1\uffff\1\106\2\uffff\1\2\2\uffff\1\106\4\uffff\2" +
                    "\2\1\uffff\1\2\5\uffff\1\106\1\2\1\106\1\2\3\uffff\1\2\1\uffff\1\2\2" +
                    "\uffff\1\2\1\uffff\1\106\2\2\1\106\2\2\1\106\1\uffff\1\2\1\uffff\2\2" +
                    "\1\106\2\uffff\1\106\1\2\1\106\6\uffff\1\2\1\106\1\2\1\uffff\1\2\5\uffff" +
                    "\1\2\4\uffff\2\106\1\uffff\2\106\1\uffff\1\106\4\uffff\1\2\4\uffff\4" +
                    "\2\2\uffff\3\106\3\uffff\1\2\4\uffff\1\2\14\uffff\1\2\1\104\1\2\3\uffff" +
                    "\1\2\14\uffff\1\106\3\uffff\1\106\2\uffff\1\2\1\105\1\2",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1" +
                    "\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2\7\uffff" +
                    "\1\2\1\uffff\1\2\27\uffff\1\107\4\uffff\4\2\64\uffff\1\2",
            "\1\112\1\2\1\112\1\uffff\1\2\4\uffff\1\112\1\2\3\uffff\1\112\2\uffff" +
                    "\1\25\2\2\2\uffff\1\25\2\112\1\2\1\uffff\1\112\4\uffff\1\2\1\uffff\1" +
                    "\2\11\uffff\1\2\1\uffff\1\112\1\uffff\1\112\2\uffff\1\2\2\uffff\1\112" +
                    "\4\uffff\2\2\1\uffff\1\2\5\uffff\1\112\1\2\1\112\1\2\3\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\1\uffff\1\112\2\2\1\112\2\2\1\112\1\uffff\1\2\1\uffff" +
                    "\2\2\1\112\2\uffff\1\112\1\2\1\112\6\uffff\1\2\1\112\1\2\1\uffff\1\2" +
                    "\5\uffff\1\2\4\uffff\2\112\1\25\2\112\1\uffff\1\112\4\uffff\1\2\4\uffff" +
                    "\4\2\2\uffff\3\112\3\uffff\1\2\4\uffff\1\2\14\uffff\1\2\1\110\1\2\3\uffff" +
                    "\1\2\14\uffff\1\112\3\uffff\1\112\2\uffff\1\2\1\111\1\2",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\74\1\72\14\uffff\1\2\1\uffff" +
                    "\1\2\11\uffff\1\2\21\uffff\1\73\16\uffff\1\2\5\uffff\2\2\1\uffff\2\2" +
                    "\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff" +
                    "\4\2\64\uffff\1\2",
            "\1\uffff",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\64\14\uffff\1\2\1\uffff\1" +
                    "\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\113\6\uffff\1\2\5\uffff\1\2\1" +
                    "\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1" +
                    "\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff\4\2\64\uffff" +
                    "\1\2",
            "\1\114",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\64\14\uffff\1\2\1\uffff\1" +
                    "\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\113\6\uffff\1\2\5\uffff\1\2\1" +
                    "\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1" +
                    "\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff\4\2\64\uffff" +
                    "\1\2",
            "\1\uffff",
            "\1\uffff",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\72\14\uffff\1\2\1\uffff\1" +
                    "\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\115\6\uffff\1\2\5\uffff\1\2\1" +
                    "\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1" +
                    "\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff\1\2",
            "\1\116",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\72\14\uffff\1\2\1\uffff\1" +
                    "\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\115\6\uffff\1\2\5\uffff\1\2\1" +
                    "\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1" +
                    "\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff\1\2",
            "\1\uffff",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\117\14\uffff\1\2\1\uffff" +
                    "\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\120\6\uffff\1\2\5\uffff\1\2" +
                    "\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff" +
                    "\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff\4\2\64" +
                    "\uffff\1\2",
            "\1\121",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\117\14\uffff\1\2\1\uffff" +
                    "\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\120\6\uffff\1\2\5\uffff\1\2" +
                    "\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff" +
                    "\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff\4\2\64" +
                    "\uffff\1\2",
            "\3\2\1\uffff\1\2\4\uffff\2\2\3\uffff\1\2\3\uffff\1\2\1\10\3\uffff\3" +
                    "\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\1\2\15\uffff\1\2\1\uffff\2\2\5\uffff\1\2\4\uffff" +
                    "\7\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\3\2\6\uffff\3\2\7\uffff" +
                    "\1\2\4\uffff\2\2\1\uffff\2\2\1\uffff\1\2\4\uffff\1\122\4\uffff\4\2\2" +
                    "\uffff\3\2\3\uffff\1\2\4\uffff\1\2\14\uffff\3\2\3\uffff\1\2\14\uffff" +
                    "\1\2\3\uffff\1\2\2\uffff\3\2",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\64\14\uffff\1\2\1\uffff\1" +
                    "\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\113\6\uffff\1\2\5\uffff\1\2\1" +
                    "\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1" +
                    "\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff\4\2\64\uffff" +
                    "\1\2",
            "\3\2\1\uffff\1\2\4\uffff\2\2\3\uffff\1\2\3\uffff\1\2\1\10\3\uffff\3" +
                    "\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\1\2\5\uffff\1\2\1\uffff\1\2\5\uffff\4\2\3\uffff" +
                    "\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\7\2\1\uffff\1\2\1\uffff\3\2\2\uffff" +
                    "\3\2\6\uffff\3\2\7\uffff\1\2\4\uffff\2\2\1\uffff\2\2\1\uffff\1\2\4\uffff" +
                    "\1\123\4\uffff\4\2\2\uffff\3\2\3\uffff\1\2\4\uffff\1\2\14\uffff\3\2\3" +
                    "\uffff\1\2\14\uffff\1\2\3\uffff\1\2\2\uffff\3\2",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\72\14\uffff\1\2\1\uffff\1" +
                    "\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\115\6\uffff\1\2\5\uffff\1\2\1" +
                    "\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1" +
                    "\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff\1\2",
            "\1\126\1\2\1\126\1\uffff\1\2\4\uffff\1\126\1\2\3\uffff\1\126\2\uffff" +
                    "\1\25\2\2\2\uffff\1\25\2\126\1\2\1\uffff\1\126\4\uffff\1\2\1\uffff\1" +
                    "\2\11\uffff\1\2\1\uffff\1\126\1\uffff\1\126\2\uffff\1\2\2\uffff\1\126" +
                    "\4\uffff\2\2\1\uffff\1\2\5\uffff\1\126\1\2\1\126\1\2\3\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\1\uffff\1\126\2\2\1\126\2\2\1\126\1\uffff\1\2\1\uffff" +
                    "\2\2\1\126\2\uffff\1\126\1\2\1\126\6\uffff\1\2\1\126\1\2\1\uffff\1\2" +
                    "\5\uffff\1\2\4\uffff\2\126\1\25\2\126\1\uffff\1\126\4\uffff\1\2\4\uffff" +
                    "\4\2\2\uffff\3\126\3\uffff\1\2\4\uffff\1\2\14\uffff\1\2\1\124\1\2\3\uffff" +
                    "\1\2\14\uffff\1\126\3\uffff\1\126\2\uffff\1\2\1\125\1\2",
            "\3\2\1\uffff\1\2\4\uffff\2\2\3\uffff\1\2\3\uffff\1\2\1\10\3\uffff\3" +
                    "\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\1\2\15\uffff\1\2\1\uffff\2\2\5\uffff\1\2\4\uffff" +
                    "\7\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\3\2\6\uffff\3\2\7\uffff" +
                    "\1\2\4\uffff\2\2\1\uffff\2\2\1\uffff\1\2\4\uffff\1\127\4\uffff\4\2\2" +
                    "\uffff\3\2\3\uffff\1\2\4\uffff\1\2\14\uffff\3\2\3\uffff\1\2\14\uffff" +
                    "\1\2\3\uffff\1\2\2\uffff\3\2",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\117\14\uffff\1\2\1\uffff" +
                    "\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\120\6\uffff\1\2\5\uffff\1\2" +
                    "\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff" +
                    "\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff\4\2\64" +
                    "\uffff\1\2",
            "\1\uffff",
            "\1\uffff",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\117\14\uffff\1\2\1\uffff" +
                    "\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\130\6\uffff\1\2\5\uffff\1\2" +
                    "\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff" +
                    "\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff\4\2\64" +
                    "\uffff\1\2",
            "\1\131",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\117\14\uffff\1\2\1\uffff" +
                    "\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\130\6\uffff\1\2\5\uffff\1\2" +
                    "\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff" +
                    "\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff\4\2\64" +
                    "\uffff\1\2",
            "\1\uffff",
            "\3\2\1\uffff\1\2\4\uffff\2\2\3\uffff\1\2\3\uffff\1\2\1\10\3\uffff\3" +
                    "\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\1\2\15\uffff\1\2\1\uffff\2\2\5\uffff\1\2\4\uffff" +
                    "\7\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\3\2\6\uffff\3\2\7\uffff" +
                    "\1\2\4\uffff\2\2\1\uffff\2\2\1\uffff\1\2\4\uffff\1\132\4\uffff\4\2\2" +
                    "\uffff\3\2\3\uffff\1\2\4\uffff\1\2\14\uffff\3\2\3\uffff\1\2\14\uffff" +
                    "\1\2\3\uffff\1\2\2\uffff\3\2",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\117\14\uffff\1\2\1\uffff" +
                    "\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\130\6\uffff\1\2\5\uffff\1\2" +
                    "\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff" +
                    "\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff\4\2\64" +
                    "\uffff\1\2",
            "\1\uffff"
    };
    static final short[] DFA85_eot = DFA.unpackEncodedString(DFA85_eotS);
    static final short[] DFA85_eof = DFA.unpackEncodedString(DFA85_eofS);
    static final char[] DFA85_min = DFA.unpackEncodedStringToUnsignedChars(DFA85_minS);
    static final char[] DFA85_max = DFA.unpackEncodedStringToUnsignedChars(DFA85_maxS);
    static final short[] DFA85_accept = DFA.unpackEncodedString(DFA85_acceptS);
    static final short[] DFA85_special = DFA.unpackEncodedString(DFA85_specialS);
    static final short[][] DFA85_transition;
    static final String DFA97_eotS =
            "\133\uffff";
    static final String DFA97_eofS =
            "\1\2\132\uffff";
    static final String DFA97_minS =
            "\1\4\1\6\1\uffff\1\7\1\u00ae\1\7\3\6\1\0\1\7\1\0\1\7\1\u00ae\2\7\1\u00ae" +
                    "\2\7\1\u00ae\1\7\1\uffff\2\0\1\7\1\0\1\6\1\7\1\6\1\7\2\6\1\0\1\7\2\0\1" +
                    "\7\1\u00ae\1\7\1\0\1\7\1\u00ae\2\7\1\u00ae\2\7\1\u00ae\1\7\1\0\1\6\1\7" +
                    "\2\6\1\7\1\0\1\7\1\0\1\6\1\7\1\6\1\7\1\0\1\7\1\u00ae\1\7\2\0\1\7\1\u00ae" +
                    "\1\7\1\0\1\7\1\u00ae\1\7\1\6\1\7\1\6\1\7\2\6\1\7\2\0\1\7\1\u00ae\1\7\1" +
                    "\0\1\6\1\7\1\0";
    static final String DFA97_maxS =
            "\2\u00c9\1\uffff\1\u00c7\1\u00ae\1\u00c7\1\u00c8\2\u00c9\1\0\1\u00c7\1" +
                    "\0\1\u00c7\1\u00ae\2\u00c7\1\u00ae\2\u00c7\1\u00ae\1\u00c7\1\uffff\2\0" +
                    "\1\u00c7\1\0\1\u00c9\1\u00c7\1\u00c9\1\u00c7\1\u00c8\1\u00c9\1\0\1\u00c7" +
                    "\2\0\1\u00c7\1\u00ae\1\u00c7\1\0\1\u00c7\1\u00ae\2\u00c7\1\u00ae\2\u00c7" +
                    "\1\u00ae\1\u00c7\1\0\1\u00c9\1\u00c7\2\u00c9\1\u00c7\1\0\1\u00c7\1\0\1" +
                    "\u00c9\1\u00c7\1\u00c9\1\u00c7\1\0\1\u00c7\1\u00ae\1\u00c7\2\0\1\u00c7" +
                    "\1\u00ae\1\u00c7\1\0\1\u00c7\1\u00ae\1\u00c7\1\u00c9\1\u00c7\1\u00c9\1" +
                    "\u00c7\2\u00c9\1\u00c7\2\0\1\u00c7\1\u00ae\1\u00c7\1\0\1\u00c9\1\u00c7" +
                    "\1\0";
    static final String DFA97_acceptS =
            "\2\uffff\1\2\22\uffff\1\1\105\uffff";
    static final String DFA97_specialS =
            "\11\uffff\1\0\1\uffff\1\1\12\uffff\1\2\1\3\1\uffff\1\4\6\uffff\1\12\1" +
                    "\uffff\1\11\1\5\3\uffff\1\6\11\uffff\1\13\5\uffff\1\16\1\uffff\1\10\4" +
                    "\uffff\1\7\3\uffff\1\17\1\20\3\uffff\1\21\12\uffff\1\22\1\23\3\uffff\1" +
                    "\15\2\uffff\1\14}>";
    static final String[] DFA97_transitionS = {
            "\1\2\1\uffff\3\2\1\uffff\3\2\2\uffff\3\2\1\uffff\7\2\1\uffff\5\2\1\uffff" +
                    "\4\2\1\uffff\5\2\5\uffff\13\2\1\uffff\3\2\2\uffff\2\2\1\uffff\1\2\4\uffff" +
                    "\7\2\1\uffff\3\2\2\uffff\3\2\1\1\21\2\3\uffff\7\2\1\uffff\5\2\1\uffff" +
                    "\1\2\2\uffff\2\2\1\uffff\2\2\1\uffff\1\2\2\uffff\4\2\1\uffff\1\2\1\uffff" +
                    "\4\2\1\uffff\10\2\1\uffff\1\2\2\uffff\1\2\14\uffff\3\2\3\uffff\1\2\6" +
                    "\uffff\2\2\2\uffff\3\2\3\uffff\2\2\1\uffff\3\2",
            "\1\5\1\2\1\5\1\uffff\1\2\4\uffff\1\5\1\2\3\uffff\1\5\3\uffff\2\2\3\uffff" +
                    "\2\5\1\2\1\uffff\1\5\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1\uffff\1\5" +
                    "\1\uffff\1\5\2\uffff\1\2\2\uffff\1\5\4\uffff\2\2\1\uffff\1\2\5\uffff" +
                    "\1\5\1\2\1\5\1\2\3\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\1\5\2\2" +
                    "\1\5\2\2\1\5\1\uffff\1\2\1\uffff\2\2\1\5\2\uffff\1\5\1\2\1\5\6\uffff" +
                    "\1\2\1\5\1\2\1\uffff\1\2\5\uffff\1\2\4\uffff\2\5\1\uffff\2\5\1\uffff" +
                    "\1\5\4\uffff\1\2\4\uffff\4\2\2\uffff\3\5\3\uffff\1\2\4\uffff\1\2\14\uffff" +
                    "\1\2\1\3\1\2\3\uffff\1\2\14\uffff\1\5\3\uffff\1\5\2\uffff\1\2\1\4\1\2",
            "",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1" +
                    "\6\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\1\2\1\7\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2" +
                    "\7\uffff\1\2\1\uffff\1\2\27\uffff\1\11\4\uffff\4\2\64\uffff\1\2",
            "\1\12",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1" +
                    "\6\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\1\2\1\7\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2" +
                    "\7\uffff\1\2\1\uffff\1\2\27\uffff\1\13\4\uffff\4\2\64\uffff\1\2",
            "\1\16\1\uffff\1\16\6\uffff\1\16\4\uffff\1\16\10\uffff\2\16\2\uffff\1" +
                    "\16\22\uffff\1\16\1\uffff\1\16\5\uffff\1\16\15\uffff\1\16\1\uffff\1\16" +
                    "\13\uffff\1\16\2\uffff\1\16\2\uffff\1\16\5\uffff\1\16\2\uffff\1\16\1" +
                    "\uffff\1\16\7\uffff\1\16\15\uffff\2\16\1\uffff\2\16\1\uffff\1\16\17\uffff" +
                    "\3\16\26\uffff\1\14\21\uffff\1\16\3\uffff\1\16\3\uffff\1\15",
            "\1\21\1\2\1\21\1\uffff\1\2\4\uffff\1\21\1\2\3\uffff\1\21\3\uffff\2\2" +
                    "\3\uffff\2\21\1\2\1\uffff\1\21\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1" +
                    "\uffff\1\21\1\uffff\1\21\2\uffff\1\2\2\uffff\1\21\15\uffff\1\21\1\uffff" +
                    "\1\21\1\2\5\uffff\1\2\4\uffff\1\21\2\2\1\21\2\2\1\21\1\uffff\1\2\1\uffff" +
                    "\1\2\1\uffff\1\21\2\uffff\1\21\1\2\1\21\6\uffff\1\2\1\21\1\2\7\uffff" +
                    "\1\2\4\uffff\2\21\1\uffff\2\21\1\uffff\1\21\4\uffff\1\2\4\uffff\4\2\2" +
                    "\uffff\3\21\3\uffff\1\2\4\uffff\1\2\14\uffff\1\2\1\17\1\2\3\uffff\1\2" +
                    "\14\uffff\1\21\3\uffff\1\21\2\uffff\1\2\1\20\1\2",
            "\1\24\1\2\1\24\1\uffff\1\2\4\uffff\1\24\1\2\3\uffff\1\24\3\uffff\2\2" +
                    "\3\uffff\2\24\1\2\1\uffff\1\24\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1" +
                    "\uffff\1\24\1\uffff\1\24\2\uffff\1\2\2\uffff\1\24\4\uffff\2\2\1\uffff" +
                    "\1\2\5\uffff\1\24\1\2\1\24\1\2\3\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1" +
                    "\uffff\1\24\2\2\1\24\2\2\1\24\1\uffff\1\2\1\uffff\2\2\1\24\2\uffff\1" +
                    "\24\1\2\1\24\6\uffff\1\2\1\24\1\2\1\uffff\1\2\5\uffff\1\2\4\uffff\2\24" +
                    "\1\uffff\2\24\1\uffff\1\24\4\uffff\1\2\4\uffff\4\2\2\uffff\3\24\3\uffff" +
                    "\1\2\4\uffff\1\2\14\uffff\1\2\1\22\1\2\3\uffff\1\2\14\uffff\1\24\3\uffff" +
                    "\1\24\2\uffff\1\2\1\23\1\2",
            "\1\uffff",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1" +
                    "\6\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\1\2\1\7\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2" +
                    "\7\uffff\1\2\1\uffff\1\2\27\uffff\1\26\4\uffff\4\2\64\uffff\1\2",
            "\1\uffff",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1" +
                    "\6\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\1\2\1\7\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2" +
                    "\7\uffff\1\2\1\uffff\1\2\27\uffff\1\27\4\uffff\4\2\64\uffff\1\2",
            "\1\30",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1" +
                    "\6\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\1\2\1\7\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2" +
                    "\7\uffff\1\2\1\uffff\1\2\27\uffff\1\31\4\uffff\4\2\64\uffff\1\2",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\34\1\32\14\uffff\1\2\1\uffff" +
                    "\1\2\11\uffff\1\2\21\uffff\1\33\16\uffff\1\2\5\uffff\2\2\1\uffff\2\2" +
                    "\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff" +
                    "\4\2\64\uffff\1\2",
            "\1\35",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\34\1\32\14\uffff\1\2\1\uffff" +
                    "\1\2\11\uffff\1\2\21\uffff\1\33\16\uffff\1\2\5\uffff\2\2\1\uffff\2\2" +
                    "\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff" +
                    "\4\2\64\uffff\1\2",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1" +
                    "\36\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\1\2\1\37\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2" +
                    "\7\uffff\1\2\1\uffff\1\2\27\uffff\1\40\4\uffff\4\2\64\uffff\1\2",
            "\1\41",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1" +
                    "\36\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\1\2\1\37\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2" +
                    "\7\uffff\1\2\1\uffff\1\2\27\uffff\1\42\4\uffff\4\2\64\uffff\1\2",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1" +
                    "\6\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\1\2\1\7\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2" +
                    "\7\uffff\1\2\1\uffff\1\2\27\uffff\1\43\4\uffff\4\2\64\uffff\1\2",
            "\1\uffff",
            "\1\46\1\2\1\46\1\uffff\1\2\4\uffff\1\46\1\2\3\uffff\1\46\3\uffff\2\2" +
                    "\3\uffff\2\46\1\2\1\uffff\1\46\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1" +
                    "\uffff\1\46\1\uffff\1\46\2\uffff\1\2\2\uffff\1\46\4\uffff\2\2\1\uffff" +
                    "\1\2\5\uffff\1\46\1\2\1\46\1\2\3\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1" +
                    "\uffff\1\46\2\2\1\46\2\2\1\46\1\uffff\1\2\1\uffff\2\2\1\46\2\uffff\1" +
                    "\46\1\2\1\46\6\uffff\1\2\1\46\1\2\1\uffff\1\2\5\uffff\1\2\4\uffff\2\46" +
                    "\1\uffff\2\46\1\uffff\1\46\4\uffff\1\2\4\uffff\4\2\2\uffff\3\46\3\uffff" +
                    "\1\2\4\uffff\1\2\14\uffff\1\2\1\44\1\2\3\uffff\1\2\14\uffff\1\46\3\uffff" +
                    "\1\46\2\uffff\1\2\1\45\1\2",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1" +
                    "\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2\7\uffff" +
                    "\1\2\1\uffff\1\2\27\uffff\1\47\4\uffff\4\2\64\uffff\1\2",
            "\1\52\1\2\1\52\1\uffff\1\2\4\uffff\1\52\1\2\3\uffff\1\52\2\uffff\1\25" +
                    "\2\2\2\uffff\1\25\2\52\1\2\1\uffff\1\52\4\uffff\1\2\1\uffff\1\2\11\uffff" +
                    "\1\2\1\uffff\1\52\1\uffff\1\52\2\uffff\1\2\2\uffff\1\52\4\uffff\2\2\1" +
                    "\uffff\1\2\5\uffff\1\52\1\2\1\52\1\2\3\uffff\1\2\1\uffff\1\2\2\uffff" +
                    "\1\2\1\uffff\1\52\2\2\1\52\2\2\1\52\1\uffff\1\2\1\uffff\2\2\1\52\2\uffff" +
                    "\1\52\1\2\1\52\6\uffff\1\2\1\52\1\2\1\uffff\1\2\5\uffff\1\2\4\uffff\2" +
                    "\52\1\25\2\52\1\uffff\1\52\4\uffff\1\2\4\uffff\4\2\2\uffff\3\52\3\uffff" +
                    "\1\2\4\uffff\1\2\14\uffff\1\2\1\50\1\2\3\uffff\1\2\14\uffff\1\52\3\uffff" +
                    "\1\52\2\uffff\1\2\1\51\1\2",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\34\1\32\14\uffff\1\2\1\uffff" +
                    "\1\2\11\uffff\1\2\21\uffff\1\33\16\uffff\1\2\5\uffff\2\2\1\uffff\2\2" +
                    "\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff" +
                    "\4\2\64\uffff\1\2",
            "\1\55\1\uffff\1\55\6\uffff\1\55\4\uffff\1\55\10\uffff\2\55\2\uffff\1" +
                    "\55\22\uffff\1\55\1\uffff\1\55\5\uffff\1\55\15\uffff\1\55\1\uffff\1\55" +
                    "\13\uffff\1\55\2\uffff\1\55\2\uffff\1\55\5\uffff\1\55\2\uffff\1\55\1" +
                    "\uffff\1\55\7\uffff\1\55\15\uffff\2\55\1\uffff\2\55\1\uffff\1\55\17\uffff" +
                    "\3\55\26\uffff\1\53\21\uffff\1\55\3\uffff\1\55\3\uffff\1\54",
            "\1\60\1\2\1\60\1\uffff\1\2\4\uffff\1\60\1\2\3\uffff\1\60\3\uffff\2\2" +
                    "\3\uffff\2\60\1\2\1\uffff\1\60\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1" +
                    "\uffff\1\60\1\uffff\1\60\2\uffff\1\2\2\uffff\1\60\15\uffff\1\60\1\uffff" +
                    "\1\60\1\2\5\uffff\1\2\4\uffff\1\60\2\2\1\60\2\2\1\60\1\uffff\1\2\1\uffff" +
                    "\1\2\1\uffff\1\60\2\uffff\1\60\1\2\1\60\6\uffff\1\2\1\60\1\2\7\uffff" +
                    "\1\2\4\uffff\2\60\1\uffff\2\60\1\uffff\1\60\4\uffff\1\2\4\uffff\4\2\2" +
                    "\uffff\3\60\3\uffff\1\2\4\uffff\1\2\14\uffff\1\2\1\56\1\2\3\uffff\1\2" +
                    "\14\uffff\1\60\3\uffff\1\60\2\uffff\1\2\1\57\1\2",
            "\1\uffff",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1" +
                    "\36\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\1\2\1\37\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2" +
                    "\7\uffff\1\2\1\uffff\1\2\27\uffff\1\61\4\uffff\4\2\64\uffff\1\2",
            "\1\uffff",
            "\1\uffff",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\32\14\uffff\1\2\1\uffff\1" +
                    "\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\62\6\uffff\1\2\5\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2\7\uffff" +
                    "\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff\1\2",
            "\1\63",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\32\14\uffff\1\2\1\uffff\1" +
                    "\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\62\6\uffff\1\2\5\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2\7\uffff" +
                    "\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff\1\2",
            "\1\uffff",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\64\14\uffff\1\2\1\uffff\1" +
                    "\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\65\6\uffff\1\2\5\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2\7\uffff" +
                    "\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff\4\2\64\uffff\1\2",
            "\1\66",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\64\14\uffff\1\2\1\uffff\1" +
                    "\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\65\6\uffff\1\2\5\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2\7\uffff" +
                    "\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff\4\2\64\uffff\1\2",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1" +
                    "\36\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\1\2\1\37\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2" +
                    "\7\uffff\1\2\1\uffff\1\2\27\uffff\1\67\4\uffff\4\2\64\uffff\1\2",
            "\1\70",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1" +
                    "\36\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\1\2\1\37\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2" +
                    "\7\uffff\1\2\1\uffff\1\2\27\uffff\1\71\4\uffff\4\2\64\uffff\1\2",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\74\1\72\14\uffff\1\2\1\uffff" +
                    "\1\2\11\uffff\1\2\21\uffff\1\73\16\uffff\1\2\5\uffff\2\2\1\uffff\2\2" +
                    "\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff" +
                    "\4\2\64\uffff\1\2",
            "\1\75",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\74\1\72\14\uffff\1\2\1\uffff" +
                    "\1\2\11\uffff\1\2\21\uffff\1\73\16\uffff\1\2\5\uffff\2\2\1\uffff\2\2" +
                    "\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff" +
                    "\4\2\64\uffff\1\2",
            "\1\uffff",
            "\3\2\1\uffff\1\2\4\uffff\2\2\3\uffff\1\2\3\uffff\1\2\1\10\3\uffff\3" +
                    "\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\1\2\5\uffff\1\2\1\uffff\1\2\5\uffff\4\2\3\uffff" +
                    "\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\7\2\1\uffff\1\2\1\uffff\3\2\2\uffff" +
                    "\3\2\6\uffff\3\2\7\uffff\1\2\4\uffff\2\2\1\uffff\2\2\1\uffff\1\2\4\uffff" +
                    "\1\76\4\uffff\4\2\2\uffff\3\2\3\uffff\1\2\4\uffff\1\2\14\uffff\3\2\3" +
                    "\uffff\1\2\14\uffff\1\2\3\uffff\1\2\2\uffff\3\2",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\32\14\uffff\1\2\1\uffff\1" +
                    "\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\62\6\uffff\1\2\5\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2\7\uffff" +
                    "\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff\1\2",
            "\1\101\1\2\1\101\1\uffff\1\2\4\uffff\1\101\1\2\3\uffff\1\101\2\uffff" +
                    "\1\25\2\2\2\uffff\1\25\2\101\1\2\1\uffff\1\101\4\uffff\1\2\1\uffff\1" +
                    "\2\11\uffff\1\2\1\uffff\1\101\1\uffff\1\101\2\uffff\1\2\2\uffff\1\101" +
                    "\4\uffff\2\2\1\uffff\1\2\5\uffff\1\101\1\2\1\101\1\2\3\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\1\uffff\1\101\2\2\1\101\2\2\1\101\1\uffff\1\2\1\uffff" +
                    "\2\2\1\101\2\uffff\1\101\1\2\1\101\6\uffff\1\2\1\101\1\2\1\uffff\1\2" +
                    "\5\uffff\1\2\4\uffff\2\101\1\25\2\101\1\uffff\1\101\4\uffff\1\2\4\uffff" +
                    "\4\2\2\uffff\3\101\3\uffff\1\2\4\uffff\1\2\14\uffff\1\2\1\77\1\2\3\uffff" +
                    "\1\2\14\uffff\1\101\3\uffff\1\101\2\uffff\1\2\1\100\1\2",
            "\3\2\1\uffff\1\2\4\uffff\2\2\3\uffff\1\2\3\uffff\1\2\1\10\3\uffff\3" +
                    "\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\1\2\15\uffff\1\2\1\uffff\2\2\5\uffff\1\2\4\uffff" +
                    "\7\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\3\2\6\uffff\3\2\7\uffff" +
                    "\1\2\4\uffff\2\2\1\uffff\2\2\1\uffff\1\2\4\uffff\1\102\4\uffff\4\2\2" +
                    "\uffff\3\2\3\uffff\1\2\4\uffff\1\2\14\uffff\3\2\3\uffff\1\2\14\uffff" +
                    "\1\2\3\uffff\1\2\2\uffff\3\2",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\64\14\uffff\1\2\1\uffff\1" +
                    "\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\65\6\uffff\1\2\5\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2\7\uffff" +
                    "\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff\4\2\64\uffff\1\2",
            "\1\uffff",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1" +
                    "\36\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\1\2\1\37\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2" +
                    "\7\uffff\1\2\1\uffff\1\2\27\uffff\1\103\4\uffff\4\2\64\uffff\1\2",
            "\1\uffff",
            "\1\106\1\2\1\106\1\uffff\1\2\4\uffff\1\106\1\2\3\uffff\1\106\3\uffff" +
                    "\2\2\3\uffff\2\106\1\2\1\uffff\1\106\4\uffff\1\2\1\uffff\1\2\11\uffff" +
                    "\1\2\1\uffff\1\106\1\uffff\1\106\2\uffff\1\2\2\uffff\1\106\4\uffff\2" +
                    "\2\1\uffff\1\2\5\uffff\1\106\1\2\1\106\1\2\3\uffff\1\2\1\uffff\1\2\2" +
                    "\uffff\1\2\1\uffff\1\106\2\2\1\106\2\2\1\106\1\uffff\1\2\1\uffff\2\2" +
                    "\1\106\2\uffff\1\106\1\2\1\106\6\uffff\1\2\1\106\1\2\1\uffff\1\2\5\uffff" +
                    "\1\2\4\uffff\2\106\1\uffff\2\106\1\uffff\1\106\4\uffff\1\2\4\uffff\4" +
                    "\2\2\uffff\3\106\3\uffff\1\2\4\uffff\1\2\14\uffff\1\2\1\104\1\2\3\uffff" +
                    "\1\2\14\uffff\1\106\3\uffff\1\106\2\uffff\1\2\1\105\1\2",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\10\14\uffff\1\2\1\uffff\1" +
                    "\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2\7\uffff" +
                    "\1\2\1\uffff\1\2\27\uffff\1\107\4\uffff\4\2\64\uffff\1\2",
            "\1\112\1\2\1\112\1\uffff\1\2\4\uffff\1\112\1\2\3\uffff\1\112\2\uffff" +
                    "\1\25\2\2\2\uffff\1\25\2\112\1\2\1\uffff\1\112\4\uffff\1\2\1\uffff\1" +
                    "\2\11\uffff\1\2\1\uffff\1\112\1\uffff\1\112\2\uffff\1\2\2\uffff\1\112" +
                    "\4\uffff\2\2\1\uffff\1\2\5\uffff\1\112\1\2\1\112\1\2\3\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\1\uffff\1\112\2\2\1\112\2\2\1\112\1\uffff\1\2\1\uffff" +
                    "\2\2\1\112\2\uffff\1\112\1\2\1\112\6\uffff\1\2\1\112\1\2\1\uffff\1\2" +
                    "\5\uffff\1\2\4\uffff\2\112\1\25\2\112\1\uffff\1\112\4\uffff\1\2\4\uffff" +
                    "\4\2\2\uffff\3\112\3\uffff\1\2\4\uffff\1\2\14\uffff\1\2\1\110\1\2\3\uffff" +
                    "\1\2\14\uffff\1\112\3\uffff\1\112\2\uffff\1\2\1\111\1\2",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\74\1\72\14\uffff\1\2\1\uffff" +
                    "\1\2\11\uffff\1\2\21\uffff\1\73\16\uffff\1\2\5\uffff\2\2\1\uffff\2\2" +
                    "\12\uffff\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff" +
                    "\4\2\64\uffff\1\2",
            "\1\uffff",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\64\14\uffff\1\2\1\uffff\1" +
                    "\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\113\6\uffff\1\2\5\uffff\1\2\1" +
                    "\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1" +
                    "\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff\4\2\64\uffff" +
                    "\1\2",
            "\1\114",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\64\14\uffff\1\2\1\uffff\1" +
                    "\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\113\6\uffff\1\2\5\uffff\1\2\1" +
                    "\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1" +
                    "\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff\4\2\64\uffff" +
                    "\1\2",
            "\1\uffff",
            "\1\uffff",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\72\14\uffff\1\2\1\uffff\1" +
                    "\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\115\6\uffff\1\2\5\uffff\1\2\1" +
                    "\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1" +
                    "\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff\1\2",
            "\1\116",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\72\14\uffff\1\2\1\uffff\1" +
                    "\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\115\6\uffff\1\2\5\uffff\1\2\1" +
                    "\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1" +
                    "\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff\1\2",
            "\1\uffff",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\117\14\uffff\1\2\1\uffff" +
                    "\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\120\6\uffff\1\2\5\uffff\1\2" +
                    "\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff" +
                    "\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff\4\2\64" +
                    "\uffff\1\2",
            "\1\121",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\117\14\uffff\1\2\1\uffff" +
                    "\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\120\6\uffff\1\2\5\uffff\1\2" +
                    "\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff" +
                    "\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff\4\2\64" +
                    "\uffff\1\2",
            "\3\2\1\uffff\1\2\4\uffff\2\2\3\uffff\1\2\3\uffff\1\2\1\10\3\uffff\3" +
                    "\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\1\2\15\uffff\1\2\1\uffff\2\2\5\uffff\1\2\4\uffff" +
                    "\7\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\3\2\6\uffff\3\2\7\uffff" +
                    "\1\2\4\uffff\2\2\1\uffff\2\2\1\uffff\1\2\4\uffff\1\122\4\uffff\4\2\2" +
                    "\uffff\3\2\3\uffff\1\2\4\uffff\1\2\14\uffff\3\2\3\uffff\1\2\14\uffff" +
                    "\1\2\3\uffff\1\2\2\uffff\3\2",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\64\14\uffff\1\2\1\uffff\1" +
                    "\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\113\6\uffff\1\2\5\uffff\1\2\1" +
                    "\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1" +
                    "\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff\4\2\64\uffff" +
                    "\1\2",
            "\3\2\1\uffff\1\2\4\uffff\2\2\3\uffff\1\2\3\uffff\1\2\1\10\3\uffff\3" +
                    "\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\1\2\5\uffff\1\2\1\uffff\1\2\5\uffff\4\2\3\uffff" +
                    "\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\7\2\1\uffff\1\2\1\uffff\3\2\2\uffff" +
                    "\3\2\6\uffff\3\2\7\uffff\1\2\4\uffff\2\2\1\uffff\2\2\1\uffff\1\2\4\uffff" +
                    "\1\123\4\uffff\4\2\2\uffff\3\2\3\uffff\1\2\4\uffff\1\2\14\uffff\3\2\3" +
                    "\uffff\1\2\14\uffff\1\2\3\uffff\1\2\2\uffff\3\2",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\72\14\uffff\1\2\1\uffff\1" +
                    "\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\115\6\uffff\1\2\5\uffff\1\2\1" +
                    "\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1" +
                    "\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\64\uffff\1\2",
            "\1\126\1\2\1\126\1\uffff\1\2\4\uffff\1\126\1\2\3\uffff\1\126\2\uffff" +
                    "\1\25\2\2\2\uffff\1\25\2\126\1\2\1\uffff\1\126\4\uffff\1\2\1\uffff\1" +
                    "\2\11\uffff\1\2\1\uffff\1\126\1\uffff\1\126\2\uffff\1\2\2\uffff\1\126" +
                    "\4\uffff\2\2\1\uffff\1\2\5\uffff\1\126\1\2\1\126\1\2\3\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\1\uffff\1\126\2\2\1\126\2\2\1\126\1\uffff\1\2\1\uffff" +
                    "\2\2\1\126\2\uffff\1\126\1\2\1\126\6\uffff\1\2\1\126\1\2\1\uffff\1\2" +
                    "\5\uffff\1\2\4\uffff\2\126\1\25\2\126\1\uffff\1\126\4\uffff\1\2\4\uffff" +
                    "\4\2\2\uffff\3\126\3\uffff\1\2\4\uffff\1\2\14\uffff\1\2\1\124\1\2\3\uffff" +
                    "\1\2\14\uffff\1\126\3\uffff\1\126\2\uffff\1\2\1\125\1\2",
            "\3\2\1\uffff\1\2\4\uffff\2\2\3\uffff\1\2\3\uffff\1\2\1\10\3\uffff\3" +
                    "\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\1\2\15\uffff\1\2\1\uffff\2\2\5\uffff\1\2\4\uffff" +
                    "\7\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\3\2\6\uffff\3\2\7\uffff" +
                    "\1\2\4\uffff\2\2\1\uffff\2\2\1\uffff\1\2\4\uffff\1\127\4\uffff\4\2\2" +
                    "\uffff\3\2\3\uffff\1\2\4\uffff\1\2\14\uffff\3\2\3\uffff\1\2\14\uffff" +
                    "\1\2\3\uffff\1\2\2\uffff\3\2",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\117\14\uffff\1\2\1\uffff" +
                    "\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\120\6\uffff\1\2\5\uffff\1\2" +
                    "\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff" +
                    "\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff\4\2\64" +
                    "\uffff\1\2",
            "\1\uffff",
            "\1\uffff",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\117\14\uffff\1\2\1\uffff" +
                    "\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\130\6\uffff\1\2\5\uffff\1\2" +
                    "\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff" +
                    "\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff\4\2\64" +
                    "\uffff\1\2",
            "\1\131",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\117\14\uffff\1\2\1\uffff" +
                    "\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\130\6\uffff\1\2\5\uffff\1\2" +
                    "\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff" +
                    "\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff\4\2\64" +
                    "\uffff\1\2",
            "\1\uffff",
            "\3\2\1\uffff\1\2\4\uffff\2\2\3\uffff\1\2\3\uffff\1\2\1\10\3\uffff\3" +
                    "\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1\uffff\1\2\1\uffff" +
                    "\1\2\2\uffff\1\2\2\uffff\1\2\15\uffff\1\2\1\uffff\2\2\5\uffff\1\2\4\uffff" +
                    "\7\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\3\2\6\uffff\3\2\7\uffff" +
                    "\1\2\4\uffff\2\2\1\uffff\2\2\1\uffff\1\2\4\uffff\1\132\4\uffff\4\2\2" +
                    "\uffff\3\2\3\uffff\1\2\4\uffff\1\2\14\uffff\3\2\3\uffff\1\2\14\uffff" +
                    "\1\2\3\uffff\1\2\2\uffff\3\2",
            "\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\117\14\uffff\1\2\1\uffff" +
                    "\1\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\130\6\uffff\1\2\5\uffff\1\2" +
                    "\1\uffff\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff" +
                    "\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\25\1\uffff\4\2\64" +
                    "\uffff\1\2",
            "\1\uffff"
    };
    static final short[] DFA97_eot = DFA.unpackEncodedString(DFA97_eotS);
    static final short[] DFA97_eof = DFA.unpackEncodedString(DFA97_eofS);
    static final char[] DFA97_min = DFA.unpackEncodedStringToUnsignedChars(DFA97_minS);
    static final char[] DFA97_max = DFA.unpackEncodedStringToUnsignedChars(DFA97_maxS);
    static final short[] DFA97_accept = DFA.unpackEncodedString(DFA97_acceptS);
    static final short[] DFA97_special = DFA.unpackEncodedString(DFA97_specialS);
    static final short[][] DFA97_transition;
    static final String DFA105_eotS =
            "\26\uffff";
    static final String DFA105_eofS =
            "\26\uffff";
    static final String DFA105_minS =
            "\1\6\1\30\1\uffff\1\6\1\30\1\u00ae\1\30\1\6\3\0\1\30\1\0\1\30\1\u00ae" +
                    "\1\30\1\uffff\2\0\1\30\2\0";
    static final String DFA105_maxS =
            "\1\u00c8\1\167\1\uffff\1\u00c8\1\31\1\u00ae\1\31\1\u00c8\3\0\1\31\1\0" +
                    "\1\31\1\u00ae\1\31\1\uffff\2\0\1\31\2\0";
    static final String DFA105_acceptS =
            "\2\uffff\1\2\15\uffff\1\1\5\uffff";
    static final String DFA105_specialS =
            "\10\uffff\1\0\1\1\1\2\1\uffff\1\3\4\uffff\1\4\1\5\1\uffff\1\6\1\7}>";
    static final String[] DFA105_transitionS = {
            "\1\6\1\uffff\1\6\6\uffff\1\6\1\uffff\1\2\2\uffff\1\6\2\uffff\1\2\3\uffff" +
                    "\2\2\2\6\2\uffff\1\6\1\uffff\1\2\15\uffff\1\2\2\uffff\1\6\1\uffff\1\6" +
                    "\5\uffff\1\6\4\uffff\1\2\10\uffff\1\6\1\uffff\1\6\6\uffff\1\2\4\uffff" +
                    "\1\6\2\uffff\1\6\2\uffff\1\6\5\uffff\1\6\2\uffff\1\3\1\uffff\1\6\7\uffff" +
                    "\1\6\1\uffff\2\2\1\uffff\4\2\5\uffff\2\6\1\uffff\2\6\1\uffff\1\6\3\uffff" +
                    "\1\2\13\uffff\1\6\1\1\1\6\1\uffff\1\2\3\uffff\1\2\20\uffff\1\4\17\uffff" +
                    "\1\2\1\uffff\1\6\3\uffff\1\6\3\uffff\1\5",
            "\1\10\1\7\131\uffff\1\2\3\uffff\1\2",
            "",
            "\1\2\1\uffff\1\2\6\uffff\1\2\4\uffff\1\2\3\uffff\1\11\1\7\3\uffff\2" +
                    "\2\2\uffff\1\2\22\uffff\1\2\1\uffff\1\2\5\uffff\1\2\15\uffff\1\2\1\uffff" +
                    "\1\2\13\uffff\1\2\2\uffff\1\2\2\uffff\1\2\5\uffff\1\2\2\uffff\1\2\1\uffff" +
                    "\1\2\7\uffff\1\2\15\uffff\2\2\1\uffff\2\2\1\uffff\1\2\17\uffff\3\2\26" +
                    "\uffff\1\2\21\uffff\1\2\3\uffff\1\2\3\uffff\1\2",
            "\1\12\1\7",
            "\1\13",
            "\1\14\1\7",
            "\1\17\1\uffff\1\17\6\uffff\1\17\4\uffff\1\17\10\uffff\2\17\2\uffff\1" +
                    "\17\22\uffff\1\17\1\uffff\1\17\5\uffff\1\17\15\uffff\1\17\1\uffff\1\17" +
                    "\13\uffff\1\17\2\uffff\1\17\2\uffff\1\17\5\uffff\1\17\2\uffff\1\17\1" +
                    "\uffff\1\17\7\uffff\1\17\15\uffff\2\17\1\uffff\2\17\1\uffff\1\17\17\uffff" +
                    "\3\17\26\uffff\1\15\21\uffff\1\17\3\uffff\1\17\3\uffff\1\16",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\21\1\7",
            "\1\uffff",
            "\1\22\1\7",
            "\1\23",
            "\1\24\1\7",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\25\1\7",
            "\1\uffff",
            "\1\uffff"
    };
    static final short[] DFA105_eot = DFA.unpackEncodedString(DFA105_eotS);
    static final short[] DFA105_eof = DFA.unpackEncodedString(DFA105_eofS);
    static final char[] DFA105_min = DFA.unpackEncodedStringToUnsignedChars(DFA105_minS);
    static final char[] DFA105_max = DFA.unpackEncodedStringToUnsignedChars(DFA105_maxS);
    static final short[] DFA105_accept = DFA.unpackEncodedString(DFA105_acceptS);
    static final short[] DFA105_special = DFA.unpackEncodedString(DFA105_specialS);
    static final short[][] DFA105_transition;
    static final String DFA159_eotS =
            "\145\uffff";
    static final String DFA159_eofS =
            "\1\1\144\uffff";
    static final String DFA159_minS =
            "\1\4\40\uffff\23\0\61\uffff";
    static final String DFA159_maxS =
            "\1\u00c9\40\uffff\23\0\61\uffff";
    static final String DFA159_acceptS =
            "\1\uffff\1\2\142\uffff\1\1";
    static final String DFA159_specialS =
            "\41\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15" +
                    "\1\16\1\17\1\20\1\21\1\22\61\uffff}>";
    static final String[] DFA159_transitionS = {
            "\1\1\1\uffff\3\1\1\uffff\2\1\1\43\2\uffff\3\1\1\uffff\3\1\1\44\3\1\1" +
                    "\uffff\5\1\1\uffff\1\1\1\55\2\1\1\uffff\5\1\5\uffff\5\1\1\56\1\51\1\1" +
                    "\1\62\1\1\1\52\1\uffff\3\1\2\uffff\2\1\1\uffff\1\1\4\uffff\6\1\1\42\1" +
                    "\uffff\3\1\2\uffff\1\1\1\60\1\53\6\1\1\54\12\1\1\41\3\uffff\1\45\1\57" +
                    "\5\1\1\uffff\5\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\1\46\1\uffff\1\1" +
                    "\2\uffff\3\1\1\47\1\uffff\1\1\1\uffff\4\1\1\uffff\1\50\7\1\1\uffff\1" +
                    "\1\2\uffff\1\1\14\uffff\3\1\3\uffff\1\1\6\uffff\1\63\1\1\2\uffff\1\1" +
                    "\1\61\1\1\3\uffff\2\1\1\uffff\3\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] DFA159_eot = DFA.unpackEncodedString(DFA159_eotS);
    static final short[] DFA159_eof = DFA.unpackEncodedString(DFA159_eofS);
    static final char[] DFA159_min = DFA.unpackEncodedStringToUnsignedChars(DFA159_minS);
    static final char[] DFA159_max = DFA.unpackEncodedStringToUnsignedChars(DFA159_maxS);
    static final short[] DFA159_accept = DFA.unpackEncodedString(DFA159_acceptS);
    static final short[] DFA159_special = DFA.unpackEncodedString(DFA159_specialS);
    static final short[][] DFA159_transition;
    static final String DFA161_eotS =
            "\145\uffff";
    static final String DFA161_eofS =
            "\1\1\144\uffff";
    static final String DFA161_minS =
            "\1\4\40\uffff\23\0\61\uffff";
    static final String DFA161_maxS =
            "\1\u00c9\40\uffff\23\0\61\uffff";
    static final String DFA161_acceptS =
            "\1\uffff\1\2\142\uffff\1\1";
    static final String DFA161_specialS =
            "\41\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15" +
                    "\1\16\1\17\1\20\1\21\1\22\61\uffff}>";
    static final String[] DFA161_transitionS = {
            "\1\1\1\uffff\3\1\1\uffff\2\1\1\43\2\uffff\3\1\1\uffff\3\1\1\44\3\1\1" +
                    "\uffff\5\1\1\uffff\1\1\1\55\2\1\1\uffff\5\1\5\uffff\5\1\1\56\1\51\1\1" +
                    "\1\62\1\1\1\52\1\uffff\3\1\2\uffff\2\1\1\uffff\1\1\4\uffff\6\1\1\42\1" +
                    "\uffff\3\1\2\uffff\1\1\1\60\1\53\6\1\1\54\12\1\1\41\3\uffff\1\45\1\57" +
                    "\5\1\1\uffff\5\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\1\46\1\uffff\1\1" +
                    "\2\uffff\3\1\1\47\1\uffff\1\1\1\uffff\4\1\1\uffff\1\50\7\1\1\uffff\1" +
                    "\1\2\uffff\1\1\14\uffff\3\1\3\uffff\1\1\6\uffff\1\63\1\1\2\uffff\1\1" +
                    "\1\61\1\1\3\uffff\2\1\1\uffff\3\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] DFA161_eot = DFA.unpackEncodedString(DFA161_eotS);
    static final short[] DFA161_eof = DFA.unpackEncodedString(DFA161_eofS);
    static final char[] DFA161_min = DFA.unpackEncodedStringToUnsignedChars(DFA161_minS);
    static final char[] DFA161_max = DFA.unpackEncodedStringToUnsignedChars(DFA161_maxS);
    static final short[] DFA161_accept = DFA.unpackEncodedString(DFA161_acceptS);
    static final short[] DFA161_special = DFA.unpackEncodedString(DFA161_specialS);
    static final short[][] DFA161_transition;
    static final String DFA163_eotS =
            "\154\uffff";
    static final String DFA163_eofS =
            "\1\1\153\uffff";
    static final String DFA163_minS =
            "\1\4\33\uffff\1\0\4\uffff\20\0\60\uffff\1\0\3\uffff\1\0\6\uffff";
    static final String DFA163_maxS =
            "\1\u00c9\33\uffff\1\0\4\uffff\20\0\60\uffff\1\0\3\uffff\1\0\6\uffff";
    static final String DFA163_acceptS =
            "\1\uffff\1\2\142\uffff\1\1\7\uffff";
    static final String DFA163_specialS =
            "\34\uffff\1\0\4\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13" +
                    "\1\14\1\15\1\16\1\17\1\20\60\uffff\1\21\3\uffff\1\22\6\uffff}>";
    static final String[] DFA163_transitionS = {
            "\1\1\1\144\3\1\1\uffff\2\1\1\43\2\uffff\3\1\1\uffff\3\1\1\44\3\1\1\uffff" +
                    "\5\1\1\uffff\1\1\1\55\1\1\1\34\1\uffff\5\1\2\uffff\1\144\2\uffff\5\1" +
                    "\1\56\1\51\3\1\1\52\1\uffff\1\145\2\1\2\uffff\2\1\1\uffff\1\1\4\uffff" +
                    "\6\1\1\42\1\uffff\3\1\2\uffff\1\1\1\60\1\53\2\1\1\141\3\1\1\54\12\1\1" +
                    "\41\1\144\2\uffff\1\45\1\57\5\1\1\uffff\5\1\1\uffff\1\1\2\uffff\2\1\1" +
                    "\uffff\1\1\1\46\1\144\1\1\2\uffff\3\1\1\47\1\uffff\1\1\1\uffff\4\1\1" +
                    "\144\1\50\7\1\1\uffff\1\1\2\uffff\1\1\14\uffff\3\1\3\uffff\1\1\6\uffff" +
                    "\2\1\2\uffff\3\1\1\144\2\uffff\2\1\1\uffff\3\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] DFA163_eot = DFA.unpackEncodedString(DFA163_eotS);
    static final short[] DFA163_eof = DFA.unpackEncodedString(DFA163_eofS);
    static final char[] DFA163_min = DFA.unpackEncodedStringToUnsignedChars(DFA163_minS);
    static final char[] DFA163_max = DFA.unpackEncodedStringToUnsignedChars(DFA163_maxS);
    static final short[] DFA163_accept = DFA.unpackEncodedString(DFA163_acceptS);
    static final short[] DFA163_special = DFA.unpackEncodedString(DFA163_specialS);
    static final short[][] DFA163_transition;
    static final String DFA180_eotS =
            "\72\uffff";
    static final String DFA180_eofS =
            "\2\uffff\1\7\1\uffff\1\7\3\uffff\1\7\4\uffff\1\7\17\uffff\1\7\2\uffff" +
                    "\1\7\31\uffff";
    static final String DFA180_minS =
            "\1\50\1\6\1\30\1\u00ae\1\30\1\6\2\uffff\2\30\1\u00ae\1\30\1\6\1\30\2\6" +
                    "\1\30\1\31\1\u00ae\2\31\1\u00ae\4\31\1\30\1\u00ae\2\30\1\31\1\6\1\30\1" +
                    "\31\1\6\1\30\1\31\1\u00ae\5\31\1\u00ae\5\31\1\6\2\31\1\u00ae\5\31";
    static final String DFA180_maxS =
            "\1\50\1\u00c8\1\u008d\1\u00ae\1\u008d\1\u00c8\2\uffff\2\u008d\1\u00ae" +
                    "\1\u008d\1\u00c8\1\u008d\2\u00c8\1\u008d\1\104\1\u00ae\1\104\1\u008d\1" +
                    "\u00ae\5\u008d\1\u00ae\2\u008d\1\104\1\u00c8\2\u008d\1\u00c8\2\u008d\1" +
                    "\u00ae\5\u008d\1\u00ae\5\u008d\1\u00c8\2\u008d\1\u00ae\5\u008d";
    static final String DFA180_acceptS =
            "\6\uffff\1\1\1\2\62\uffff";
    static final String DFA180_specialS =
            "\72\uffff}>";
    static final String[] DFA180_transitionS = {
            "\1\1",
            "\1\4\1\uffff\1\4\6\uffff\1\4\4\uffff\1\4\10\uffff\2\4\2\uffff\1\4\22" +
                    "\uffff\1\4\1\uffff\1\4\5\uffff\1\4\15\uffff\1\4\1\uffff\1\4\13\uffff" +
                    "\1\4\2\uffff\1\4\2\uffff\1\4\5\uffff\1\4\2\uffff\1\4\1\uffff\1\4\7\uffff" +
                    "\1\4\15\uffff\2\4\1\uffff\2\4\1\uffff\1\4\17\uffff\3\4\26\uffff\1\2\21" +
                    "\uffff\1\4\3\uffff\1\4\3\uffff\1\3",
            "\1\7\17\uffff\1\6\60\uffff\1\7\1\5\62\uffff\1\7",
            "\1\10",
            "\1\7\17\uffff\1\6\60\uffff\1\7\1\5\62\uffff\1\7",
            "\1\13\1\uffff\1\13\6\uffff\1\13\4\uffff\1\13\10\uffff\2\13\2\uffff\1" +
                    "\13\22\uffff\1\13\1\uffff\1\13\5\uffff\1\13\15\uffff\1\13\1\uffff\1\13" +
                    "\13\uffff\1\13\2\uffff\1\13\2\uffff\1\13\5\uffff\1\13\2\uffff\1\13\1" +
                    "\uffff\1\13\7\uffff\1\13\15\uffff\2\13\1\uffff\2\13\1\uffff\1\13\17\uffff" +
                    "\3\13\26\uffff\1\11\21\uffff\1\13\3\uffff\1\13\3\uffff\1\12",
            "",
            "",
            "\1\7\17\uffff\1\6\60\uffff\1\7\1\5\62\uffff\1\7",
            "\1\16\1\14\52\uffff\1\15\110\uffff\1\17",
            "\1\20",
            "\1\16\1\14\52\uffff\1\15\110\uffff\1\17",
            "\1\23\1\uffff\1\23\6\uffff\1\23\4\uffff\1\23\10\uffff\2\23\2\uffff\1" +
                    "\23\22\uffff\1\23\1\uffff\1\23\5\uffff\1\23\15\uffff\1\23\1\uffff\1\23" +
                    "\13\uffff\1\23\2\uffff\1\23\2\uffff\1\23\5\uffff\1\23\2\uffff\1\23\1" +
                    "\uffff\1\23\7\uffff\1\23\15\uffff\2\23\1\uffff\2\23\1\uffff\1\23\17\uffff" +
                    "\3\23\26\uffff\1\21\21\uffff\1\23\3\uffff\1\23\3\uffff\1\22",
            "\1\7\17\uffff\1\6\60\uffff\1\7\63\uffff\1\7",
            "\1\26\1\uffff\1\26\6\uffff\1\26\4\uffff\1\26\2\uffff\1\30\4\uffff\1" +
                    "\31\2\26\2\uffff\1\26\22\uffff\1\26\1\uffff\1\26\5\uffff\1\26\15\uffff" +
                    "\1\26\1\uffff\1\26\13\uffff\1\26\2\uffff\1\26\2\uffff\1\26\5\uffff\1" +
                    "\26\2\uffff\1\26\1\uffff\1\26\7\uffff\1\26\15\uffff\2\26\1\27\2\26\1" +
                    "\uffff\1\26\17\uffff\3\26\26\uffff\1\24\21\uffff\1\26\3\uffff\1\26\3" +
                    "\uffff\1\25",
            "\1\34\1\uffff\1\34\6\uffff\1\34\4\uffff\1\34\10\uffff\2\34\2\uffff\1" +
                    "\34\22\uffff\1\34\1\uffff\1\34\5\uffff\1\34\15\uffff\1\34\1\uffff\1\34" +
                    "\13\uffff\1\34\2\uffff\1\34\2\uffff\1\34\5\uffff\1\34\2\uffff\1\34\1" +
                    "\uffff\1\34\7\uffff\1\34\15\uffff\2\34\1\uffff\2\34\1\uffff\1\34\17\uffff" +
                    "\3\34\26\uffff\1\32\21\uffff\1\34\3\uffff\1\34\3\uffff\1\33",
            "\1\16\1\14\52\uffff\1\15\110\uffff\1\17",
            "\1\14\52\uffff\1\35",
            "\1\36",
            "\1\14\52\uffff\1\35",
            "\1\37\52\uffff\1\40\110\uffff\1\17",
            "\1\41",
            "\1\37\52\uffff\1\40\110\uffff\1\17",
            "\1\37\52\uffff\1\40\110\uffff\1\17",
            "\1\37\52\uffff\1\40\110\uffff\1\17",
            "\1\37\52\uffff\1\40\110\uffff\1\17",
            "\1\42\53\uffff\1\40\110\uffff\1\17",
            "\1\43",
            "\1\42\53\uffff\1\40\110\uffff\1\17",
            "\1\7\17\uffff\1\6\60\uffff\1\7\63\uffff\1\7",
            "\1\14\52\uffff\1\35",
            "\1\46\1\uffff\1\46\6\uffff\1\46\4\uffff\1\46\2\uffff\1\50\4\uffff\1" +
                    "\51\2\46\2\uffff\1\46\22\uffff\1\46\1\uffff\1\46\5\uffff\1\46\15\uffff" +
                    "\1\46\1\uffff\1\46\13\uffff\1\46\2\uffff\1\46\2\uffff\1\46\5\uffff\1" +
                    "\46\2\uffff\1\46\1\uffff\1\46\7\uffff\1\46\15\uffff\2\46\1\47\2\46\1" +
                    "\uffff\1\46\17\uffff\3\46\26\uffff\1\44\21\uffff\1\46\3\uffff\1\46\3" +
                    "\uffff\1\45",
            "\1\7\17\uffff\1\6\60\uffff\1\7\63\uffff\1\7",
            "\1\37\52\uffff\1\40\110\uffff\1\17",
            "\1\54\1\uffff\1\54\6\uffff\1\54\4\uffff\1\54\2\uffff\1\56\4\uffff\1" +
                    "\57\2\54\2\uffff\1\54\22\uffff\1\54\1\uffff\1\54\5\uffff\1\54\15\uffff" +
                    "\1\54\1\uffff\1\54\13\uffff\1\54\2\uffff\1\54\2\uffff\1\54\5\uffff\1" +
                    "\54\2\uffff\1\54\1\uffff\1\54\7\uffff\1\54\15\uffff\2\54\1\55\2\54\1" +
                    "\uffff\1\54\17\uffff\3\54\26\uffff\1\52\21\uffff\1\54\3\uffff\1\54\3" +
                    "\uffff\1\53",
            "\1\42\53\uffff\1\40\110\uffff\1\17",
            "\1\37\52\uffff\1\40\110\uffff\1\17",
            "\1\60",
            "\1\37\52\uffff\1\40\110\uffff\1\17",
            "\1\37\52\uffff\1\40\110\uffff\1\17",
            "\1\37\52\uffff\1\40\110\uffff\1\17",
            "\1\37\52\uffff\1\40\110\uffff\1\17",
            "\1\61\52\uffff\1\40\110\uffff\1\17",
            "\1\62",
            "\1\61\52\uffff\1\40\110\uffff\1\17",
            "\1\61\52\uffff\1\40\110\uffff\1\17",
            "\1\61\52\uffff\1\40\110\uffff\1\17",
            "\1\61\52\uffff\1\40\110\uffff\1\17",
            "\1\37\52\uffff\1\40\110\uffff\1\17",
            "\1\65\1\uffff\1\65\6\uffff\1\65\4\uffff\1\65\2\uffff\1\67\4\uffff\1" +
                    "\70\2\65\2\uffff\1\65\22\uffff\1\65\1\uffff\1\65\5\uffff\1\65\15\uffff" +
                    "\1\65\1\uffff\1\65\13\uffff\1\65\2\uffff\1\65\2\uffff\1\65\5\uffff\1" +
                    "\65\2\uffff\1\65\1\uffff\1\65\7\uffff\1\65\15\uffff\2\65\1\66\2\65\1" +
                    "\uffff\1\65\17\uffff\3\65\26\uffff\1\63\21\uffff\1\65\3\uffff\1\65\3" +
                    "\uffff\1\64",
            "\1\61\52\uffff\1\40\110\uffff\1\17",
            "\1\61\52\uffff\1\40\110\uffff\1\17",
            "\1\71",
            "\1\61\52\uffff\1\40\110\uffff\1\17",
            "\1\61\52\uffff\1\40\110\uffff\1\17",
            "\1\61\52\uffff\1\40\110\uffff\1\17",
            "\1\61\52\uffff\1\40\110\uffff\1\17",
            "\1\61\52\uffff\1\40\110\uffff\1\17"
    };
    static final short[] DFA180_eot = DFA.unpackEncodedString(DFA180_eotS);
    static final short[] DFA180_eof = DFA.unpackEncodedString(DFA180_eofS);
    static final char[] DFA180_min = DFA.unpackEncodedStringToUnsignedChars(DFA180_minS);
    static final char[] DFA180_max = DFA.unpackEncodedStringToUnsignedChars(DFA180_maxS);
    static final short[] DFA180_accept = DFA.unpackEncodedString(DFA180_acceptS);
    static final short[] DFA180_special = DFA.unpackEncodedString(DFA180_specialS);
    static final short[][] DFA180_transition;
    static final String DFA182_eotS =
            "\146\uffff";
    static final String DFA182_eofS =
            "\1\1\145\uffff";
    static final String DFA182_minS =
            "\1\4\1\uffff\1\0\40\uffff\22\0\61\uffff";
    static final String DFA182_maxS =
            "\1\u00c9\1\uffff\1\0\40\uffff\22\0\61\uffff";
    static final String DFA182_acceptS =
            "\1\uffff\1\2\143\uffff\1\1";
    static final String DFA182_specialS =
            "\2\uffff\1\0\40\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13" +
                    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\61\uffff}>";
    static final String[] DFA182_transitionS = {
            "\1\1\1\uffff\3\1\1\uffff\2\1\1\45\2\uffff\3\1\1\uffff\3\1\1\46\3\1\1" +
                    "\uffff\5\1\1\uffff\1\1\1\57\2\1\1\uffff\5\1\5\uffff\5\1\1\60\1\53\1\1" +
                    "\1\2\1\1\1\54\1\uffff\3\1\1\uffff\3\1\1\uffff\1\1\4\uffff\6\1\1\44\1" +
                    "\uffff\3\1\2\uffff\1\1\1\62\1\55\6\1\1\56\12\1\1\43\3\uffff\1\47\1\61" +
                    "\5\1\1\uffff\5\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\1\50\1\uffff\1\1" +
                    "\2\uffff\3\1\1\51\1\uffff\1\1\1\uffff\4\1\1\uffff\1\52\7\1\1\uffff\1" +
                    "\1\2\uffff\1\1\14\uffff\3\1\3\uffff\1\1\6\uffff\1\64\1\1\2\uffff\1\1" +
                    "\1\63\1\1\3\uffff\2\1\1\uffff\3\1",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] DFA182_eot = DFA.unpackEncodedString(DFA182_eotS);
    static final short[] DFA182_eof = DFA.unpackEncodedString(DFA182_eofS);
    static final char[] DFA182_min = DFA.unpackEncodedStringToUnsignedChars(DFA182_minS);
    static final char[] DFA182_max = DFA.unpackEncodedStringToUnsignedChars(DFA182_maxS);
    static final short[] DFA182_accept = DFA.unpackEncodedString(DFA182_acceptS);
    static final short[] DFA182_special = DFA.unpackEncodedString(DFA182_specialS);
    static final short[][] DFA182_transition;
    static final String DFA195_eotS =
            "\145\uffff";
    static final String DFA195_eofS =
            "\1\1\144\uffff";
    static final String DFA195_minS =
            "\1\4\40\uffff\23\0\61\uffff";
    static final String DFA195_maxS =
            "\1\u00c9\40\uffff\23\0\61\uffff";
    static final String DFA195_acceptS =
            "\1\uffff\1\2\142\uffff\1\1";
    static final String DFA195_specialS =
            "\41\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15" +
                    "\1\16\1\17\1\20\1\21\1\22\61\uffff}>";
    static final String[] DFA195_transitionS = {
            "\1\1\1\uffff\3\1\1\uffff\2\1\1\43\2\uffff\3\1\1\uffff\3\1\1\44\3\1\1" +
                    "\uffff\5\1\1\uffff\1\1\1\55\2\1\1\uffff\5\1\5\uffff\5\1\1\56\1\51\1\1" +
                    "\1\62\1\1\1\52\1\uffff\3\1\2\uffff\2\1\1\uffff\1\1\4\uffff\6\1\1\42\1" +
                    "\uffff\3\1\2\uffff\1\1\1\60\1\53\6\1\1\54\12\1\1\41\3\uffff\1\45\1\57" +
                    "\5\1\1\uffff\5\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\1\46\1\uffff\1\1" +
                    "\2\uffff\3\1\1\47\1\uffff\1\1\1\uffff\4\1\1\uffff\1\50\7\1\1\uffff\1" +
                    "\1\2\uffff\1\1\14\uffff\3\1\3\uffff\1\1\6\uffff\1\63\1\1\2\uffff\1\1" +
                    "\1\61\1\1\3\uffff\2\1\1\uffff\3\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] DFA195_eot = DFA.unpackEncodedString(DFA195_eotS);
    static final short[] DFA195_eof = DFA.unpackEncodedString(DFA195_eofS);
    static final char[] DFA195_min = DFA.unpackEncodedStringToUnsignedChars(DFA195_minS);
    static final char[] DFA195_max = DFA.unpackEncodedStringToUnsignedChars(DFA195_maxS);
    static final short[] DFA195_accept = DFA.unpackEncodedString(DFA195_acceptS);
    static final short[] DFA195_special = DFA.unpackEncodedString(DFA195_specialS);
    static final short[][] DFA195_transition;
    static final String DFA205_eotS =
            "\145\uffff";
    static final String DFA205_eofS =
            "\1\2\144\uffff";
    static final String DFA205_minS =
            "\1\4\1\0\143\uffff";
    static final String DFA205_maxS =
            "\1\u00c9\1\0\143\uffff";
    static final String DFA205_acceptS =
            "\2\uffff\1\2\141\uffff\1\1";
    static final String DFA205_specialS =
            "\1\uffff\1\0\143\uffff}>";
    static final String[] DFA205_transitionS = {
            "\1\2\1\uffff\3\2\1\uffff\3\2\2\uffff\3\2\1\uffff\7\2\1\uffff\5\2\1\uffff" +
                    "\4\2\1\uffff\5\2\5\uffff\13\2\1\uffff\3\2\2\uffff\2\2\1\uffff\1\2\4\uffff" +
                    "\7\2\1\uffff\3\2\2\uffff\3\2\1\1\21\2\3\uffff\7\2\1\uffff\5\2\1\uffff" +
                    "\1\2\2\uffff\2\2\1\uffff\2\2\1\uffff\1\2\2\uffff\4\2\1\uffff\1\2\1\uffff" +
                    "\4\2\1\uffff\10\2\1\uffff\1\2\2\uffff\1\2\14\uffff\3\2\3\uffff\1\2\6" +
                    "\uffff\2\2\2\uffff\3\2\3\uffff\2\2\1\uffff\3\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] DFA205_eot = DFA.unpackEncodedString(DFA205_eotS);
    static final short[] DFA205_eof = DFA.unpackEncodedString(DFA205_eofS);
    static final char[] DFA205_min = DFA.unpackEncodedStringToUnsignedChars(DFA205_minS);
    static final char[] DFA205_max = DFA.unpackEncodedStringToUnsignedChars(DFA205_maxS);
    static final short[] DFA205_accept = DFA.unpackEncodedString(DFA205_acceptS);
    static final short[] DFA205_special = DFA.unpackEncodedString(DFA205_specialS);
    static final short[][] DFA205_transition;
    static final String DFA211_eotS =
            "\164\uffff";
    static final String DFA211_eofS =
            "\1\21\163\uffff";
    static final String DFA211_minS =
            "\1\4\20\0\1\uffff\3\0\5\uffff\1\0\7\uffff\3\0\2\uffff\2\0\1\uffff\1\0" +
                    "\5\uffff\1\0\2\uffff\1\0\1\uffff\1\0\26\uffff\1\0\16\uffff\1\0\5\uffff" +
                    "\1\0\22\uffff";
    static final String DFA211_maxS =
            "\1\u00c9\20\0\1\uffff\3\0\5\uffff\1\0\7\uffff\3\0\2\uffff\2\0\1\uffff" +
                    "\1\0\5\uffff\1\0\2\uffff\1\0\1\uffff\1\0\26\uffff\1\0\16\uffff\1\0\5\uffff" +
                    "\1\0\22\uffff";
    static final String DFA211_acceptS =
            "\21\uffff\1\20\122\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1" +
                    "\13\1\14\1\15\1\16\1\17\1\21";
    static final String DFA211_specialS =
            "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15" +
                    "\1\16\1\17\1\uffff\1\20\1\21\1\22\5\uffff\1\23\7\uffff\1\24\1\25\1\26" +
                    "\2\uffff\1\27\1\30\1\uffff\1\31\5\uffff\1\32\2\uffff\1\33\1\uffff\1\34" +
                    "\26\uffff\1\35\16\uffff\1\36\5\uffff\1\37\22\uffff}>";
    static final String[] DFA211_transitionS = {
            "\1\21\1\uffff\1\141\1\21\1\141\1\uffff\3\21\2\uffff\1\141\1\1\1\21\1" +
                    "\uffff\1\21\1\141\5\21\1\uffff\2\21\2\141\1\16\1\uffff\1\47\3\21\1\uffff" +
                    "\5\21\5\uffff\4\21\1\141\1\21\1\60\2\21\1\13\1\21\1\uffff\1\141\2\21" +
                    "\2\uffff\2\21\1\uffff\1\21\4\uffff\1\21\1\50\1\21\1\65\3\21\1\uffff\2" +
                    "\21\1\20\2\uffff\2\21\1\63\1\15\1\21\1\141\1\5\1\21\1\24\1\21\1\14\1" +
                    "\21\1\3\1\21\1\141\2\21\1\133\1\21\1\141\1\21\3\uffff\2\21\1\4\1\141" +
                    "\1\6\2\21\1\uffff\4\21\1\17\1\uffff\1\21\2\uffff\1\32\1\43\1\uffff\1" +
                    "\141\1\52\1\uffff\1\141\2\uffff\4\21\1\uffff\1\21\1\uffff\4\21\1\uffff" +
                    "\1\21\1\44\1\114\1\141\3\21\1\12\1\uffff\1\21\2\uffff\1\11\14\uffff\1" +
                    "\7\1\22\1\7\3\uffff\1\10\6\uffff\2\21\2\uffff\2\21\1\141\3\uffff\1\42" +
                    "\1\21\1\uffff\1\21\1\23\1\2",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] DFA211_eot = DFA.unpackEncodedString(DFA211_eotS);
    static final short[] DFA211_eof = DFA.unpackEncodedString(DFA211_eofS);
    static final char[] DFA211_min = DFA.unpackEncodedStringToUnsignedChars(DFA211_minS);
    static final char[] DFA211_max = DFA.unpackEncodedStringToUnsignedChars(DFA211_maxS);
    static final short[] DFA211_accept = DFA.unpackEncodedString(DFA211_acceptS);
    static final short[] DFA211_special = DFA.unpackEncodedString(DFA211_specialS);
    static final short[][] DFA211_transition;
    static final String DFA222_eotS =
            "\151\uffff";
    static final String DFA222_eofS =
            "\1\1\150\uffff";
    static final String DFA222_minS =
            "\1\4\2\uffff\1\0\55\uffff\1\0\4\uffff\1\0\6\uffff\1\0\4\uffff\1\0\6\uffff" +
                    "\1\0\37\uffff";
    static final String DFA222_maxS =
            "\1\u00c9\2\uffff\1\0\55\uffff\1\0\4\uffff\1\0\6\uffff\1\0\4\uffff\1\0" +
                    "\6\uffff\1\0\37\uffff";
    static final String DFA222_acceptS =
            "\1\uffff\1\2\146\uffff\1\1";
    static final String DFA222_specialS =
            "\3\uffff\1\0\55\uffff\1\1\4\uffff\1\2\6\uffff\1\3\4\uffff\1\4\6\uffff" +
                    "\1\5\37\uffff}>";
    static final String[] DFA222_transitionS = {
            "\1\1\1\uffff\3\1\1\uffff\3\1\1\uffff\2\1\1\75\1\1\1\uffff\7\1\1\uffff" +
                    "\5\1\1\uffff\4\1\1\uffff\2\1\1\66\2\1\5\uffff\13\1\1\uffff\3\1\2\uffff" +
                    "\2\1\1\uffff\1\1\4\uffff\7\1\1\uffff\2\1\1\61\2\uffff\3\1\1\111\1\3\20" +
                    "\1\3\uffff\4\1\1\102\2\1\1\uffff\5\1\1\uffff\1\1\2\uffff\2\1\1\uffff" +
                    "\2\1\1\uffff\1\1\2\uffff\4\1\1\uffff\1\1\1\uffff\4\1\1\uffff\10\1\1\uffff" +
                    "\1\1\2\uffff\1\1\14\uffff\3\1\3\uffff\1\1\6\uffff\2\1\2\uffff\3\1\3\uffff" +
                    "\2\1\1\uffff\3\1",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] DFA222_eot = DFA.unpackEncodedString(DFA222_eotS);
    static final short[] DFA222_eof = DFA.unpackEncodedString(DFA222_eofS);
    static final char[] DFA222_min = DFA.unpackEncodedStringToUnsignedChars(DFA222_minS);
    static final char[] DFA222_max = DFA.unpackEncodedStringToUnsignedChars(DFA222_maxS);
    static final short[] DFA222_accept = DFA.unpackEncodedString(DFA222_acceptS);
    static final short[] DFA222_special = DFA.unpackEncodedString(DFA222_specialS);
    static final short[][] DFA222_transition;
    static final String DFA252_eotS =
            "\146\uffff";
    static final String DFA252_eofS =
            "\1\2\145\uffff";
    static final String DFA252_minS =
            "\1\4\1\0\144\uffff";
    static final String DFA252_maxS =
            "\1\u00c9\1\0\144\uffff";
    static final String DFA252_acceptS =
            "\2\uffff\1\3\141\uffff\1\1\1\2";
    static final String DFA252_specialS =
            "\1\uffff\1\0\144\uffff}>";
    static final String[] DFA252_transitionS = {
            "\1\2\1\uffff\3\2\1\uffff\3\2\2\uffff\3\2\1\uffff\7\2\1\uffff\5\2\1\uffff" +
                    "\4\2\1\uffff\5\2\5\uffff\13\2\1\uffff\3\2\2\uffff\2\2\1\uffff\1\2\4\uffff" +
                    "\7\2\1\uffff\3\2\2\uffff\3\2\1\1\21\2\3\uffff\7\2\1\uffff\5\2\1\uffff" +
                    "\1\2\2\uffff\2\2\1\uffff\2\2\1\uffff\1\2\2\uffff\4\2\1\uffff\1\2\1\uffff" +
                    "\4\2\1\uffff\10\2\1\uffff\1\2\2\uffff\1\2\14\uffff\3\2\3\uffff\1\2\6" +
                    "\uffff\2\2\2\uffff\3\2\3\uffff\2\2\1\uffff\3\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] DFA252_eot = DFA.unpackEncodedString(DFA252_eotS);
    static final short[] DFA252_eof = DFA.unpackEncodedString(DFA252_eofS);
    static final char[] DFA252_min = DFA.unpackEncodedStringToUnsignedChars(DFA252_minS);
    static final char[] DFA252_max = DFA.unpackEncodedStringToUnsignedChars(DFA252_maxS);
    static final short[] DFA252_accept = DFA.unpackEncodedString(DFA252_acceptS);
    static final short[] DFA252_special = DFA.unpackEncodedString(DFA252_specialS);
    static final short[][] DFA252_transition;
    static final String DFA285_eotS =
            "\u00a5\uffff";
    static final String DFA285_eofS =
            "\1\1\1\uffff\1\1\1\14\1\uffff\1\14\1\uffff\4\1\2\uffff\2\1\1\uffff\1\14" +
                    "\3\uffff\2\1\1\uffff\4\1\3\uffff\7\1\1\uffff\1\1\1\105\3\uffff\1\1\2\uffff" +
                    "\1\1\1\uffff\1\1\1\uffff\2\1\5\uffff\1\1\7\uffff\1\1\1\uffff\1\1\5\uffff" +
                    "\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\1\uffff" +
                    "\1\1\1\uffff\7\1\5\uffff\1\1\1\uffff\1\1\1\uffff\3\1\2\uffff\1\1\7\uffff" +
                    "\1\1\3\uffff\7\1\1\uffff\2\1\1\uffff\10\1\1\uffff\1\1\2\uffff\1\1\1\uffff" +
                    "\5\1\1\uffff\3\1\1\uffff\11\1";
    static final String DFA285_minS =
            "\1\31\1\uffff\1\6\1\4\1\u00ae\1\4\1\0\4\6\1\0\1\uffff\1\6\1\4\1\6\1\4" +
                    "\2\0\1\uffff\2\6\1\0\4\6\3\0\1\6\6\7\1\u00ae\1\7\1\4\1\7\1\u00ae\1\7\1" +
                    "\4\2\0\1\6\1\0\1\6\1\0\2\6\4\0\2\6\7\0\1\7\1\0\1\6\1\0\1\uffff\1\6\1\7" +
                    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\7\1\u00ae\2\7\1\0\1\7\1\u00ae\1" +
                    "\6\7\7\1\u00ae\1\7\2\0\1\6\1\0\1\6\1\0\1\6\1\7\2\6\1\0\1\7\7\0\1\4\1\7" +
                    "\2\0\1\6\6\7\1\u00ae\2\7\1\u00ae\1\6\7\7\1\u00ae\1\7\2\0\1\7\2\6\1\7\1" +
                    "\6\2\7\1\u00ae\3\7\1\u00ae\1\6\10\7";
    static final String DFA285_maxS =
            "\1\u008d\1\uffff\1\u00c8\1\u00c9\1\u00ae\1\u00c9\1\0\4\u00c8\1\0\1\uffff" +
                    "\4\u00c9\2\0\1\uffff\2\u00c8\1\0\4\u00c8\3\0\1\u00c8\6\u00c7\1\u00ae\1" +
                    "\u00c7\1\u00c9\1\u00c7\1\u00ae\1\u00c7\1\u00c9\2\0\1\u00c8\1\0\1\u00c8" +
                    "\1\0\2\u00c8\4\0\1\u00c8\1\u00c9\7\0\1\u00c7\1\0\1\u00c9\1\0\1\uffff\1" +
                    "\u00c9\1\u00c7\1\0\1\u00c8\1\0\1\u00c8\1\0\1\u00c8\1\0\1\u00c8\1\0\1\u00c7" +
                    "\1\u00ae\2\u00c7\1\0\1\u00c7\1\u00ae\1\u00c8\7\u00c7\1\u00ae\1\u00c7\2" +
                    "\0\1\u00c8\1\0\1\u00c8\1\0\1\u00c9\1\u00c7\1\u00c9\1\u00c8\1\0\1\u00c7" +
                    "\7\0\1\u00c9\1\u00c7\2\0\1\u00c8\6\u00c7\1\u00ae\2\u00c7\1\u00ae\1\u00c8" +
                    "\7\u00c7\1\u00ae\1\u00c7\2\0\1\u00c7\1\u00c8\1\u00c9\1\u00c7\1\u00c9\2" +
                    "\u00c7\1\u00ae\3\u00c7\1\u00ae\1\u00c8\10\u00c7";
    static final String DFA285_acceptS =
            "\1\uffff\1\2\12\uffff\1\1\6\uffff\1\1\61\uffff\1\1\137\uffff";
    static final String DFA285_specialS =
            "\6\uffff\1\0\4\uffff\1\4\5\uffff\1\1\1\5\3\uffff\1\21\4\uffff\1\22\1\24" +
                    "\1\25\16\uffff\1\2\1\6\1\uffff\1\20\1\uffff\1\27\2\uffff\1\32\1\33\1\34" +
                    "\1\35\2\uffff\1\10\1\11\1\12\1\13\1\7\1\14\1\15\1\uffff\1\16\1\uffff\1" +
                    "\3\3\uffff\1\37\1\uffff\1\30\1\uffff\1\31\1\uffff\1\41\1\uffff\1\43\4" +
                    "\uffff\1\17\14\uffff\1\26\1\23\1\uffff\1\44\1\uffff\1\45\4\uffff\1\47" +
                    "\1\uffff\1\50\1\51\1\52\1\53\1\54\1\46\1\55\2\uffff\1\36\1\42\25\uffff" +
                    "\1\56\1\40\25\uffff}>";
    static final String[] DFA285_transitionS = {
            "\1\1\10\uffff\1\1\5\uffff\1\2\14\uffff\1\1\25\uffff\1\1\13\uffff\1\1" +
                    "\1\uffff\1\1\25\uffff\1\1\35\uffff\1\1",
            "",
            "\1\5\1\uffff\1\5\6\uffff\1\5\4\uffff\1\5\10\uffff\2\5\2\uffff\1\5\22" +
                    "\uffff\1\5\1\uffff\1\5\5\uffff\1\5\15\uffff\1\5\1\uffff\1\5\13\uffff" +
                    "\1\5\2\uffff\1\5\2\uffff\1\5\5\uffff\1\5\2\uffff\1\5\1\uffff\1\5\7\uffff" +
                    "\1\5\15\uffff\2\5\1\uffff\2\5\1\uffff\1\5\17\uffff\3\5\26\uffff\1\3\21" +
                    "\uffff\1\5\3\uffff\1\5\3\uffff\1\4",
            "\1\1\1\uffff\3\1\1\uffff\3\1\1\uffff\4\1\1\uffff\6\1\1\15\1\uffff\5" +
                    "\1\1\uffff\1\1\1\7\2\1\1\uffff\2\1\1\6\2\1\5\uffff\5\1\1\10\5\1\1\uffff" +
                    "\3\1\2\uffff\2\1\1\uffff\1\1\4\uffff\2\1\1\16\4\1\1\uffff\3\1\2\uffff" +
                    "\1\1\1\12\1\1\1\17\21\1\3\uffff\1\1\1\11\5\1\1\uffff\5\1\1\uffff\1\1" +
                    "\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\2\uffff\4\1\1\uffff\1\13\1\uffff" +
                    "\4\1\1\uffff\10\1\1\uffff\1\1\2\uffff\1\1\14\uffff\3\1\3\uffff\1\1\6" +
                    "\uffff\2\1\2\uffff\3\1\3\uffff\2\1\1\uffff\3\1",
            "\1\20",
            "\1\1\1\uffff\3\1\1\uffff\3\1\1\uffff\4\1\1\uffff\6\1\1\15\1\uffff\5" +
                    "\1\1\uffff\1\1\1\7\2\1\1\uffff\2\1\1\21\2\1\5\uffff\5\1\1\10\5\1\1\uffff" +
                    "\3\1\2\uffff\2\1\1\uffff\1\1\4\uffff\2\1\1\16\4\1\1\uffff\3\1\2\uffff" +
                    "\1\1\1\12\1\1\1\17\21\1\3\uffff\1\1\1\11\5\1\1\uffff\5\1\1\uffff\1\1" +
                    "\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\2\uffff\4\1\1\uffff\1\22\1\uffff" +
                    "\4\1\1\uffff\10\1\1\uffff\1\1\2\uffff\1\1\14\uffff\3\1\3\uffff\1\1\6" +
                    "\uffff\2\1\2\uffff\3\1\3\uffff\2\1\1\uffff\3\1",
            "\1\uffff",
            "\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff" +
                    "\4\1\1\24\1\uffff\1\1\1\27\1\1\15\uffff\1\1\2\uffff\1\1\1\30\1\1\5\uffff" +
                    "\1\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\32\1" +
                    "\1\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff" +
                    "\1\31\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\1\25\4\uffff\2\1\1\uffff\2" +
                    "\1\1\uffff\1\1\3\uffff\2\1\2\uffff\1\26\7\uffff\3\1\1\uffff\1\1\3\uffff" +
                    "\1\1\20\uffff\1\1\17\uffff\1\1\1\uffff\1\1\3\uffff\1\1\3\uffff\1\1",
            "\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff" +
                    "\4\1\2\uffff\1\1\1\27\1\1\15\uffff\1\1\2\uffff\1\1\1\30\1\1\5\uffff\1" +
                    "\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\32\1\1" +
                    "\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff" +
                    "\1\31\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\5\uffff\2\1\1\uffff\2\1\1\uffff" +
                    "\1\1\3\uffff\2\1\2\uffff\1\33\7\uffff\3\1\1\uffff\1\1\3\uffff\1\1\20" +
                    "\uffff\1\1\17\uffff\1\1\1\uffff\1\1\3\uffff\1\1\3\uffff\1\1",
            "\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff" +
                    "\4\1\2\uffff\1\1\1\27\1\1\15\uffff\1\1\2\uffff\1\1\1\30\1\1\5\uffff\1" +
                    "\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\32\1\1" +
                    "\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff" +
                    "\1\31\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\5\uffff\2\1\1\uffff\2\1\1\uffff" +
                    "\1\1\3\uffff\2\1\2\uffff\1\34\7\uffff\3\1\1\uffff\1\1\3\uffff\1\1\20" +
                    "\uffff\1\1\17\uffff\1\1\1\uffff\1\1\3\uffff\1\1\3\uffff\1\1",
            "\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff" +
                    "\4\1\2\uffff\1\1\1\27\1\1\15\uffff\1\1\2\uffff\1\1\1\30\1\1\5\uffff\1" +
                    "\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\32\1\1" +
                    "\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff" +
                    "\1\31\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\5\uffff\2\1\1\uffff\2\1\1\uffff" +
                    "\1\1\3\uffff\2\1\2\uffff\1\35\7\uffff\3\1\1\uffff\1\1\3\uffff\1\1\20" +
                    "\uffff\1\1\17\uffff\1\1\1\uffff\1\1\3\uffff\1\1\3\uffff\1\1",
            "\1\uffff",
            "",
            "\1\46\1\1\1\41\2\1\4\uffff\1\46\1\1\3\uffff\1\46\2\uffff\3\1\3\uffff" +
                    "\2\46\1\1\1\uffff\1\46\3\uffff\5\1\10\uffff\1\1\1\uffff\1\46\1\uffff" +
                    "\1\46\2\uffff\1\1\1\uffff\1\1\1\46\4\uffff\2\1\1\uffff\1\1\5\uffff\1" +
                    "\46\1\1\1\46\1\1\2\uffff\2\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\46\2\1" +
                    "\1\46\2\1\1\46\1\uffff\1\1\1\uffff\2\1\1\36\2\uffff\1\46\1\1\1\46\3\uffff" +
                    "\1\1\2\uffff\1\1\1\37\1\1\1\uffff\1\1\5\uffff\1\1\1\uffff\1\1\2\uffff" +
                    "\2\46\1\1\1\42\1\46\1\uffff\1\46\4\uffff\1\1\3\uffff\5\1\2\uffff\2\46" +
                    "\1\40\3\uffff\1\1\1\uffff\1\1\2\uffff\1\1\14\uffff\1\1\1\44\1\1\3\uffff" +
                    "\1\1\14\uffff\1\43\3\uffff\1\46\2\uffff\1\1\1\45\1\1",
            "\1\1\1\uffff\3\1\1\uffff\3\1\2\uffff\3\1\1\uffff\7\1\1\uffff\5\1\1\uffff" +
                    "\4\1\1\uffff\5\1\5\uffff\13\1\1\uffff\3\1\2\uffff\2\1\1\uffff\1\1\4\uffff" +
                    "\7\1\1\uffff\3\1\2\uffff\25\1\3\uffff\7\1\1\uffff\4\1\1\47\1\uffff\1" +
                    "\1\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\2\uffff\4\1\1\uffff\1\1\1\uffff" +
                    "\4\1\1\uffff\10\1\1\uffff\1\1\2\uffff\1\1\14\uffff\3\1\3\uffff\1\1\6" +
                    "\uffff\2\1\2\uffff\3\1\3\uffff\2\1\1\uffff\3\1",
            "\1\52\1\1\1\52\1\uffff\1\1\4\uffff\1\52\1\1\3\uffff\1\52\3\uffff\2\1" +
                    "\3\uffff\2\52\1\1\1\uffff\1\52\4\uffff\1\1\1\uffff\1\1\11\uffff\1\1\1" +
                    "\uffff\1\52\1\uffff\1\52\2\uffff\1\1\2\uffff\1\52\4\uffff\2\1\1\uffff" +
                    "\1\1\5\uffff\1\52\1\1\1\52\1\1\3\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1" +
                    "\uffff\1\52\2\1\1\52\2\1\1\52\1\uffff\1\1\1\uffff\2\1\1\52\2\uffff\1" +
                    "\52\1\1\1\52\6\uffff\1\1\1\52\1\1\1\uffff\1\1\5\uffff\1\1\4\uffff\2\52" +
                    "\1\uffff\2\52\1\uffff\1\52\4\uffff\1\53\4\uffff\4\1\2\uffff\3\52\3\uffff" +
                    "\1\1\4\uffff\1\1\14\uffff\1\1\1\50\1\1\3\uffff\1\1\14\uffff\1\52\3\uffff" +
                    "\1\52\2\uffff\1\1\1\51\1\1",
            "\1\1\1\uffff\3\1\1\uffff\3\1\1\uffff\4\1\1\uffff\6\1\1\15\1\uffff\5" +
                    "\1\1\uffff\1\1\1\7\2\1\1\uffff\2\1\1\54\2\1\5\uffff\5\1\1\10\5\1\1\uffff" +
                    "\3\1\2\uffff\2\1\1\uffff\1\1\4\uffff\2\1\1\16\4\1\1\uffff\3\1\2\uffff" +
                    "\1\1\1\12\1\1\1\17\21\1\3\uffff\1\1\1\11\5\1\1\uffff\5\1\1\uffff\1\1" +
                    "\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\2\uffff\4\1\1\uffff\1\55\1\uffff" +
                    "\4\1\1\uffff\10\1\1\uffff\1\1\2\uffff\1\1\14\uffff\3\1\3\uffff\1\1\6" +
                    "\uffff\2\1\2\uffff\3\1\3\uffff\2\1\1\uffff\3\1",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff" +
                    "\4\1\2\uffff\1\1\1\27\1\1\15\uffff\1\1\2\uffff\1\1\1\30\1\1\5\uffff\1" +
                    "\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\32\1\1" +
                    "\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff" +
                    "\1\31\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\1\56\4\uffff\2\1\1\uffff\2" +
                    "\1\1\uffff\1\1\3\uffff\2\1\2\uffff\1\57\7\uffff\3\1\1\uffff\1\1\3\uffff" +
                    "\1\1\20\uffff\1\1\17\uffff\1\1\1\uffff\1\1\3\uffff\1\1\3\uffff\1\1",
            "\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff" +
                    "\4\1\1\60\1\uffff\1\1\1\27\1\1\15\uffff\1\1\2\uffff\1\1\1\30\1\1\5\uffff" +
                    "\1\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\32\1" +
                    "\1\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff" +
                    "\1\31\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\5\uffff\2\1\1\uffff\2\1\1\uffff" +
                    "\1\1\3\uffff\2\1\2\uffff\1\61\7\uffff\3\1\1\uffff\1\1\3\uffff\1\1\20" +
                    "\uffff\1\1\17\uffff\1\1\1\uffff\1\1\3\uffff\1\1\3\uffff\1\1",
            "\1\uffff",
            "\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff" +
                    "\4\1\1\62\1\uffff\1\1\1\27\1\1\15\uffff\1\1\2\uffff\1\1\1\30\1\1\5\uffff" +
                    "\1\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\32\1" +
                    "\1\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff" +
                    "\1\31\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\1\63\4\uffff\2\1\1\uffff\2" +
                    "\1\1\uffff\1\1\3\uffff\2\1\2\uffff\1\64\7\uffff\3\1\1\uffff\1\1\3\uffff" +
                    "\1\1\20\uffff\1\1\17\uffff\1\1\1\uffff\1\1\3\uffff\1\1\3\uffff\1\1",
            "\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff" +
                    "\4\1\2\uffff\1\1\1\27\1\1\15\uffff\1\1\2\uffff\1\1\1\30\1\1\5\uffff\1" +
                    "\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\32\1\1" +
                    "\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff" +
                    "\1\31\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\5\uffff\2\1\1\uffff\2\1\1\uffff" +
                    "\1\1\3\uffff\2\1\2\uffff\1\65\7\uffff\3\1\1\uffff\1\1\3\uffff\1\1\20" +
                    "\uffff\1\1\17\uffff\1\1\1\uffff\1\1\3\uffff\1\1\3\uffff\1\1",
            "\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff" +
                    "\4\1\2\uffff\1\1\1\27\1\1\15\uffff\1\1\2\uffff\1\1\1\30\1\1\5\uffff\1" +
                    "\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\32\1\1" +
                    "\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff" +
                    "\1\31\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\5\uffff\2\1\1\uffff\2\1\1\uffff" +
                    "\1\1\3\uffff\2\1\2\uffff\1\66\7\uffff\3\1\1\uffff\1\1\3\uffff\1\1\20" +
                    "\uffff\1\1\17\uffff\1\1\1\uffff\1\1\3\uffff\1\1\3\uffff\1\1",
            "\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff" +
                    "\4\1\2\uffff\1\1\1\27\1\1\15\uffff\1\1\2\uffff\1\1\1\30\1\1\5\uffff\1" +
                    "\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\32\1\1" +
                    "\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff" +
                    "\1\31\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\5\uffff\2\1\1\uffff\2\1\1\uffff" +
                    "\1\1\3\uffff\2\1\2\uffff\1\67\7\uffff\3\1\1\uffff\1\1\3\uffff\1\1\20" +
                    "\uffff\1\1\17\uffff\1\1\1\uffff\1\1\3\uffff\1\1\3\uffff\1\1",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\3\1\1\uffff\1\1\4\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\15\2\uffff\3" +
                    "\1\2\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\70\1\1\7\uffff\2\1\1\uffff\1" +
                    "\1\1\uffff\1\1\5\uffff\1\1\4\uffff\2\1\1\uffff\1\1\5\uffff\1\1\1\71\1" +
                    "\1\4\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\4\uffff\2\1\2\uffff" +
                    "\3\1\6\uffff\5\1\2\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff" +
                    "\1\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\72\1\uffff\4\1\2\uffff\3\1\26" +
                    "\uffff\1\1\21\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\15\14\uffff\2\1\1\70\1\1" +
                    "\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\1\1\4\uffff\1\1\1" +
                    "\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1\1\4\uffff\1" +
                    "\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff\1\1\2\uffff" +
                    "\1\73\1\uffff\4\1\64\uffff\1\1",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\15\14\uffff\2\1\1\70\1\1" +
                    "\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\1\1\4\uffff\1\1\1" +
                    "\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1\1\4\uffff\1" +
                    "\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff\1\1\2\uffff" +
                    "\1\74\1\uffff\4\1\64\uffff\1\1",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\15\14\uffff\2\1\1\70\1\1" +
                    "\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\1\1\4\uffff\1\1\1" +
                    "\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1\1\4\uffff\1" +
                    "\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff\1\1\2\uffff" +
                    "\1\75\1\uffff\4\1\64\uffff\1\1",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\15\14\uffff\2\1\1\70\1\1" +
                    "\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\1\1\4\uffff\1\1\1" +
                    "\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1\1\4\uffff\1" +
                    "\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff\1\1\2\uffff" +
                    "\1\76\1\uffff\4\1\7\uffff\1\1\54\uffff\1\1",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\15\14\uffff\2\1\1\70\1\1" +
                    "\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\1\1\4\uffff\1\1\1" +
                    "\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1\1\4\uffff\1" +
                    "\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff\1\1\2\uffff" +
                    "\1\77\1\uffff\4\1\64\uffff\1\1",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\15\14\uffff\2\1\1\70\1\1" +
                    "\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\1\1\4\uffff\1\1\1" +
                    "\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1\1\4\uffff\1" +
                    "\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff\1\1\2\uffff" +
                    "\1\100\1\uffff\4\1\64\uffff\1\1",
            "\1\101",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\15\14\uffff\2\1\1\70\1\1" +
                    "\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\1\1\4\uffff\1\1\1" +
                    "\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1\1\4\uffff\1" +
                    "\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff\1\1\2\uffff" +
                    "\1\102\1\uffff\4\1\64\uffff\1\1",
            "\1\1\1\uffff\3\1\1\uffff\3\1\2\uffff\3\1\1\uffff\6\1\1\103\1\uffff\5" +
                    "\1\1\uffff\4\1\1\uffff\5\1\5\uffff\13\1\1\uffff\3\1\2\uffff\2\1\1\uffff" +
                    "\1\1\4\uffff\7\1\1\uffff\3\1\2\uffff\25\1\3\uffff\7\1\1\uffff\5\1\1\uffff" +
                    "\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\2\uffff\4\1\1\uffff\1\104\1" +
                    "\uffff\4\1\1\uffff\10\1\1\uffff\1\1\2\uffff\1\1\14\uffff\3\1\3\uffff" +
                    "\1\1\6\uffff\2\1\2\uffff\3\1\3\uffff\2\1\1\uffff\3\1",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\106\14\uffff\1\1\1\uffff" +
                    "\1\1\11\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\1\5\uffff\1\1\1" +
                    "\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1" +
                    "\1\7\uffff\1\1\1\uffff\1\1\27\uffff\1\53\4\uffff\4\1\64\uffff\1\1",
            "\1\107",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\106\14\uffff\1\1\1\uffff" +
                    "\1\1\11\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\1\5\uffff\1\1\1" +
                    "\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1" +
                    "\1\7\uffff\1\1\1\uffff\1\1\27\uffff\1\53\4\uffff\4\1\64\uffff\1\1",
            "\1\1\1\uffff\3\1\1\uffff\3\1\1\uffff\4\1\1\uffff\7\1\1\uffff\5\1\1\uffff" +
                    "\4\1\1\uffff\5\1\5\uffff\13\1\1\uffff\3\1\2\uffff\2\1\1\uffff\1\1\4\uffff" +
                    "\7\1\1\uffff\3\1\2\uffff\25\1\3\uffff\7\1\1\uffff\5\1\1\uffff\1\1\2\uffff" +
                    "\2\1\1\uffff\2\1\1\uffff\1\1\2\uffff\4\1\1\uffff\1\110\1\uffff\4\1\1" +
                    "\uffff\10\1\1\uffff\1\1\2\uffff\1\1\14\uffff\3\1\3\uffff\1\1\6\uffff" +
                    "\2\1\2\uffff\3\1\3\uffff\2\1\1\uffff\3\1",
            "\1\uffff",
            "\1\uffff",
            "\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff" +
                    "\4\1\1\111\1\uffff\1\1\1\27\1\1\15\uffff\1\1\2\uffff\1\1\1\30\1\1\5\uffff" +
                    "\1\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\32\1" +
                    "\1\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff" +
                    "\1\31\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\5\uffff\2\1\1\uffff\2\1\1\uffff" +
                    "\1\1\3\uffff\2\1\2\uffff\1\112\7\uffff\3\1\1\uffff\1\1\3\uffff\1\1\20" +
                    "\uffff\1\1\17\uffff\1\1\1\uffff\1\1\3\uffff\1\1\3\uffff\1\1",
            "\1\uffff",
            "\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff" +
                    "\4\1\2\uffff\1\1\1\27\1\1\15\uffff\1\1\2\uffff\1\1\1\30\1\1\5\uffff\1" +
                    "\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\32\1\1" +
                    "\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff" +
                    "\1\31\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\1\113\4\uffff\2\1\1\uffff\2" +
                    "\1\1\uffff\1\1\3\uffff\2\1\2\uffff\1\114\7\uffff\3\1\1\uffff\1\1\3\uffff" +
                    "\1\1\20\uffff\1\1\17\uffff\1\1\1\uffff\1\1\3\uffff\1\1\3\uffff\1\1",
            "\1\uffff",
            "\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff" +
                    "\4\1\2\uffff\1\1\1\27\1\1\15\uffff\1\1\2\uffff\1\1\1\30\1\1\5\uffff\1" +
                    "\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\32\1\1" +
                    "\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff" +
                    "\1\31\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\1\115\4\uffff\2\1\1\uffff\2" +
                    "\1\1\uffff\1\1\3\uffff\2\1\2\uffff\1\116\7\uffff\3\1\1\uffff\1\1\3\uffff" +
                    "\1\1\20\uffff\1\1\17\uffff\1\1\1\uffff\1\1\3\uffff\1\1\3\uffff\1\1",
            "\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff" +
                    "\4\1\1\117\1\uffff\1\1\1\27\1\1\15\uffff\1\1\2\uffff\1\1\1\30\1\1\5\uffff" +
                    "\1\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\32\1" +
                    "\1\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff" +
                    "\1\31\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\5\uffff\2\1\1\uffff\2\1\1\uffff" +
                    "\1\1\3\uffff\2\1\2\uffff\1\120\7\uffff\3\1\1\uffff\1\1\3\uffff\1\1\20" +
                    "\uffff\1\1\17\uffff\1\1\1\uffff\1\1\3\uffff\1\1\3\uffff\1\1",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\123\1\uffff\1\123\6\uffff\1\123\4\uffff\1\123\10\uffff\2\123\2\uffff" +
                    "\1\123\22\uffff\1\123\1\uffff\1\123\5\uffff\1\123\15\uffff\1\123\1\uffff" +
                    "\1\123\13\uffff\1\123\2\uffff\1\123\2\uffff\1\123\5\uffff\1\123\2\uffff" +
                    "\1\123\1\uffff\1\123\7\uffff\1\123\15\uffff\2\123\1\uffff\2\123\1\uffff" +
                    "\1\123\17\uffff\3\123\26\uffff\1\121\21\uffff\1\123\3\uffff\1\123\3\uffff" +
                    "\1\122",
            "\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\3\uffff\2\1\3\uffff\3\1\1\uffff" +
                    "\1\1\4\uffff\1\1\1\uffff\2\1\10\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff" +
                    "\1\1\2\uffff\1\1\7\uffff\1\1\5\uffff\1\1\1\uffff\2\1\5\uffff\1\1\4\uffff" +
                    "\7\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\3\1\6\uffff\3\1\7\uffff" +
                    "\1\124\1\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\4\uffff\1\1\4" +
                    "\uffff\4\1\2\uffff\3\1\3\uffff\1\1\4\uffff\1\1\14\uffff\3\1\3\uffff\1" +
                    "\1\14\uffff\1\1\3\uffff\1\1\2\uffff\3\1",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\15\14\uffff\2\1\1\70\1\1" +
                    "\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\1\1\4\uffff\1\1\1" +
                    "\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1\1\4\uffff\1" +
                    "\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff\1\1\2\uffff" +
                    "\1\125\1\uffff\4\1\64\uffff\1\1",
            "\1\uffff",
            "\1\136\1\1\1\133\2\1\4\uffff\1\136\1\1\3\uffff\1\136\2\uffff\3\1\3\uffff" +
                    "\2\136\1\1\1\uffff\1\136\3\uffff\2\1\1\uffff\2\1\10\uffff\1\1\1\uffff" +
                    "\1\136\1\uffff\1\136\2\uffff\1\1\1\uffff\1\1\1\136\4\uffff\2\1\1\uffff" +
                    "\1\1\5\uffff\1\136\1\1\1\136\1\1\2\uffff\2\1\1\uffff\1\1\2\uffff\1\1" +
                    "\1\uffff\1\136\2\1\1\136\2\1\1\136\1\uffff\1\1\1\uffff\2\1\1\130\2\uffff" +
                    "\1\136\1\1\1\136\3\uffff\1\1\2\uffff\1\1\1\131\1\1\1\uffff\1\1\5\uffff" +
                    "\1\1\1\uffff\1\1\2\uffff\2\136\1\1\1\134\1\136\1\uffff\1\136\4\uffff" +
                    "\1\1\3\uffff\5\1\2\uffff\2\136\1\132\3\uffff\1\1\1\uffff\1\1\2\uffff" +
                    "\1\1\14\uffff\1\1\1\126\1\1\3\uffff\1\1\14\uffff\1\135\3\uffff\1\136" +
                    "\2\uffff\1\1\1\127\1\1",
            "\1\uffff",
            "",
            "\1\141\1\1\1\141\1\uffff\1\1\4\uffff\1\141\1\1\3\uffff\1\141\3\uffff" +
                    "\2\1\3\uffff\2\141\1\1\1\uffff\1\141\4\uffff\1\1\1\uffff\1\1\11\uffff" +
                    "\1\1\1\uffff\1\141\1\uffff\1\141\2\uffff\1\1\2\uffff\1\141\4\uffff\2" +
                    "\1\1\uffff\1\1\5\uffff\1\141\1\1\1\141\1\1\3\uffff\1\1\1\uffff\1\1\2" +
                    "\uffff\1\1\1\uffff\1\141\2\1\1\141\2\1\1\141\1\uffff\1\1\1\uffff\2\1" +
                    "\1\141\2\uffff\1\141\1\1\1\141\6\uffff\1\1\1\141\1\1\1\uffff\1\1\5\uffff" +
                    "\1\1\4\uffff\2\141\1\uffff\2\141\1\uffff\1\141\4\uffff\1\1\4\uffff\4" +
                    "\1\2\uffff\3\141\3\uffff\1\1\4\uffff\1\1\14\uffff\1\1\1\137\1\1\3\uffff" +
                    "\1\1\14\uffff\1\141\3\uffff\1\141\2\uffff\1\1\1\140\1\1",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\106\14\uffff\1\1\1\uffff" +
                    "\1\1\11\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\1\5\uffff\1\1\1" +
                    "\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1" +
                    "\1\7\uffff\1\1\1\uffff\1\1\27\uffff\1\53\4\uffff\4\1\64\uffff\1\1",
            "\1\uffff",
            "\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff" +
                    "\4\1\2\uffff\1\1\1\27\1\1\15\uffff\1\1\2\uffff\1\1\1\30\1\1\5\uffff\1" +
                    "\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\32\1\1" +
                    "\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff" +
                    "\1\31\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\1\56\4\uffff\2\1\1\uffff\2" +
                    "\1\1\uffff\1\1\3\uffff\2\1\2\uffff\1\142\7\uffff\3\1\1\uffff\1\1\3\uffff" +
                    "\1\1\20\uffff\1\1\17\uffff\1\1\1\uffff\1\1\3\uffff\1\1\3\uffff\1\1",
            "\1\uffff",
            "\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff" +
                    "\4\1\1\60\1\uffff\1\1\1\27\1\1\15\uffff\1\1\2\uffff\1\1\1\30\1\1\5\uffff" +
                    "\1\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\32\1" +
                    "\1\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff" +
                    "\1\31\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\5\uffff\2\1\1\uffff\2\1\1\uffff" +
                    "\1\1\3\uffff\2\1\2\uffff\1\143\7\uffff\3\1\1\uffff\1\1\3\uffff\1\1\20" +
                    "\uffff\1\1\17\uffff\1\1\1\uffff\1\1\3\uffff\1\1\3\uffff\1\1",
            "\1\uffff",
            "\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff" +
                    "\4\1\1\144\1\uffff\1\1\1\27\1\1\15\uffff\1\1\2\uffff\1\1\1\30\1\1\5\uffff" +
                    "\1\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\32\1" +
                    "\1\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff" +
                    "\1\31\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\5\uffff\2\1\1\uffff\2\1\1\uffff" +
                    "\1\1\3\uffff\2\1\2\uffff\1\145\7\uffff\3\1\1\uffff\1\1\3\uffff\1\1\20" +
                    "\uffff\1\1\17\uffff\1\1\1\uffff\1\1\3\uffff\1\1\3\uffff\1\1",
            "\1\uffff",
            "\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff" +
                    "\4\1\2\uffff\1\1\1\27\1\1\15\uffff\1\1\2\uffff\1\1\1\30\1\1\5\uffff\1" +
                    "\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\32\1\1" +
                    "\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff" +
                    "\1\31\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\1\146\4\uffff\2\1\1\uffff\2" +
                    "\1\1\uffff\1\1\3\uffff\2\1\2\uffff\1\147\7\uffff\3\1\1\uffff\1\1\3\uffff" +
                    "\1\1\20\uffff\1\1\17\uffff\1\1\1\uffff\1\1\3\uffff\1\1\3\uffff\1\1",
            "\1\uffff",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\150\14\uffff\2\1\1\70\1\1" +
                    "\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\5\uffff\1\1\1\uffff" +
                    "\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1\1\7\uffff" +
                    "\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\105\1\uffff\4\1" +
                    "\64\uffff\1\1",
            "\1\151",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\150\14\uffff\2\1\1\70\1\1" +
                    "\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\5\uffff\1\1\1\uffff" +
                    "\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1\1\7\uffff" +
                    "\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\105\1\uffff\4\1" +
                    "\64\uffff\1\1",
            "\1\1\2\uffff\1\1\15\uffff\1\1\1\152\5\uffff\1\1\6\uffff\1\1\2\uffff" +
                    "\1\1\10\uffff\1\1\21\uffff\1\1\27\uffff\2\1\12\uffff\1\1\7\uffff\1\1" +
                    "\13\uffff\1\1\15\uffff\1\1\2\uffff\1\105\1\uffff\4\1\64\uffff\1\1",
            "\1\uffff",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\103\14\uffff\1\1\1\uffff" +
                    "\1\153\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\1\1\4\uffff" +
                    "\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1\1\4\uffff" +
                    "\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff\1\1\2" +
                    "\uffff\1\154\1\uffff\4\1\64\uffff\1\1",
            "\1\155",
            "\3\1\1\uffff\1\1\4\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\103\2\uffff\3" +
                    "\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\153\1\1\7\uffff\2\1" +
                    "\1\uffff\1\1\1\uffff\1\1\5\uffff\1\1\4\uffff\2\1\1\uffff\1\1\5\uffff" +
                    "\1\1\1\71\1\1\4\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\4\uffff" +
                    "\2\1\2\uffff\3\1\6\uffff\5\1\2\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\uffff" +
                    "\2\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\156\1\uffff\4\1\2" +
                    "\uffff\3\1\26\uffff\1\1\21\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\103\14\uffff\1\1\1\uffff" +
                    "\1\153\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\1\1\4\uffff" +
                    "\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1\1\4\uffff" +
                    "\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff\1\1\2" +
                    "\uffff\1\157\1\uffff\4\1\64\uffff\1\1",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\103\14\uffff\1\1\1\uffff" +
                    "\1\153\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\1\1\4\uffff" +
                    "\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1\1\4\uffff" +
                    "\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff\1\1\2" +
                    "\uffff\1\160\1\uffff\4\1\64\uffff\1\1",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\103\14\uffff\1\1\1\uffff" +
                    "\1\153\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\1\1\4\uffff" +
                    "\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1\1\4\uffff" +
                    "\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff\1\1\2" +
                    "\uffff\1\161\1\uffff\4\1\64\uffff\1\1",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\103\14\uffff\1\1\1\uffff" +
                    "\1\153\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\1\1\4\uffff" +
                    "\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1\1\4\uffff" +
                    "\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff\1\1\2" +
                    "\uffff\1\162\1\uffff\4\1\7\uffff\1\1\54\uffff\1\1",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\103\14\uffff\1\1\1\uffff" +
                    "\1\153\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\1\1\4\uffff" +
                    "\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1\1\4\uffff" +
                    "\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff\1\1\2" +
                    "\uffff\1\163\1\uffff\4\1\64\uffff\1\1",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\103\14\uffff\1\1\1\uffff" +
                    "\1\153\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\1\1\4\uffff" +
                    "\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1\1\4\uffff" +
                    "\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff\1\1\2" +
                    "\uffff\1\164\1\uffff\4\1\64\uffff\1\1",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\106\14\uffff\1\1\1\uffff" +
                    "\1\1\11\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\1\5\uffff\1\1\1" +
                    "\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1" +
                    "\1\7\uffff\1\1\1\uffff\1\1\27\uffff\1\165\4\uffff\4\1\64\uffff\1\1",
            "\1\166",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\106\14\uffff\1\1\1\uffff" +
                    "\1\1\11\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\1\5\uffff\1\1\1" +
                    "\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1" +
                    "\1\7\uffff\1\1\1\uffff\1\1\27\uffff\1\165\4\uffff\4\1\64\uffff\1\1",
            "\1\uffff",
            "\1\uffff",
            "\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff" +
                    "\4\1\2\uffff\1\1\1\27\1\1\15\uffff\1\1\2\uffff\1\1\1\30\1\1\5\uffff\1" +
                    "\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\32\1\1" +
                    "\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff" +
                    "\1\31\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\1\115\4\uffff\2\1\1\uffff\2" +
                    "\1\1\uffff\1\1\3\uffff\2\1\2\uffff\1\167\7\uffff\3\1\1\uffff\1\1\3\uffff" +
                    "\1\1\20\uffff\1\1\17\uffff\1\1\1\uffff\1\1\3\uffff\1\1\3\uffff\1\1",
            "\1\uffff",
            "\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff" +
                    "\4\1\1\117\1\uffff\1\1\1\27\1\1\15\uffff\1\1\2\uffff\1\1\1\30\1\1\5\uffff" +
                    "\1\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\32\1" +
                    "\1\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff" +
                    "\1\31\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\5\uffff\2\1\1\uffff\2\1\1\uffff" +
                    "\1\1\3\uffff\2\1\2\uffff\1\170\7\uffff\3\1\1\uffff\1\1\3\uffff\1\1\20" +
                    "\uffff\1\1\17\uffff\1\1\1\uffff\1\1\3\uffff\1\1\3\uffff\1\1",
            "\1\uffff",
            "\1\u0081\1\1\1\174\2\1\4\uffff\1\u0081\1\1\3\uffff\1\u0081\2\uffff\3" +
                    "\1\3\uffff\2\u0081\1\1\1\uffff\1\u0081\3\uffff\5\1\10\uffff\1\1\1\uffff" +
                    "\1\u0081\1\uffff\1\u0081\2\uffff\1\1\1\uffff\1\1\1\u0081\4\uffff\2\1" +
                    "\1\uffff\1\1\5\uffff\1\u0081\1\1\1\u0081\1\1\2\uffff\2\1\1\uffff\1\1" +
                    "\2\uffff\1\1\1\uffff\1\u0081\2\1\1\u0081\2\1\1\u0081\1\uffff\1\1\1\uffff" +
                    "\2\1\1\171\2\uffff\1\u0081\1\1\1\u0081\3\uffff\1\1\2\uffff\1\1\1\172" +
                    "\1\1\1\uffff\1\1\5\uffff\1\1\1\uffff\1\1\2\uffff\2\u0081\1\1\1\175\1" +
                    "\u0081\1\uffff\1\u0081\4\uffff\1\1\3\uffff\5\1\2\uffff\2\u0081\1\173" +
                    "\3\uffff\1\1\1\uffff\1\1\2\uffff\1\1\14\uffff\1\1\1\177\1\1\3\uffff\1" +
                    "\1\14\uffff\1\176\3\uffff\1\u0081\2\uffff\1\1\1\u0080\1\1",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\150\14\uffff\2\1\1\70\1\1" +
                    "\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\5\uffff\1\1\1\uffff" +
                    "\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1\1\7\uffff" +
                    "\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\105\1\uffff\4\1" +
                    "\64\uffff\1\1",
            "\1\u008a\1\1\1\u0087\2\1\4\uffff\1\u008a\1\1\3\uffff\1\u008a\2\uffff" +
                    "\3\1\3\uffff\2\u008a\1\1\1\uffff\1\u008a\3\uffff\2\1\1\uffff\2\1\10\uffff" +
                    "\1\1\1\uffff\1\u008a\1\uffff\1\u008a\2\uffff\1\1\1\uffff\1\1\1\u008a" +
                    "\4\uffff\2\1\1\uffff\1\1\5\uffff\1\u008a\1\1\1\u008a\1\1\2\uffff\2\1" +
                    "\1\uffff\1\1\2\uffff\1\1\1\uffff\1\u008a\2\1\1\u008a\2\1\1\u008a\1\uffff" +
                    "\1\1\1\uffff\2\1\1\u0084\2\uffff\1\u008a\1\1\1\u008a\3\uffff\1\1\2\uffff" +
                    "\1\1\1\u0085\1\1\1\uffff\1\1\5\uffff\1\1\1\uffff\1\1\2\uffff\2\u008a" +
                    "\1\1\1\u0088\1\u008a\1\uffff\1\u008a\4\uffff\1\1\3\uffff\5\1\2\uffff" +
                    "\2\u008a\1\u0086\3\uffff\1\1\1\uffff\1\1\2\uffff\1\1\14\uffff\1\1\1\u0082" +
                    "\1\1\3\uffff\1\1\14\uffff\1\u0089\3\uffff\1\u008a\2\uffff\1\1\1\u0083" +
                    "\1\1",
            "\1\u008d\1\uffff\1\u008d\6\uffff\1\u008d\4\uffff\1\u008d\10\uffff\2" +
                    "\u008d\2\uffff\1\u008d\22\uffff\1\u008d\1\uffff\1\u008d\5\uffff\1\u008d" +
                    "\15\uffff\1\u008d\1\uffff\1\u008d\13\uffff\1\u008d\2\uffff\1\u008d\2" +
                    "\uffff\1\u008d\5\uffff\1\u008d\2\uffff\1\u008d\1\uffff\1\u008d\7\uffff" +
                    "\1\u008d\15\uffff\2\u008d\1\uffff\2\u008d\1\uffff\1\u008d\17\uffff\3" +
                    "\u008d\26\uffff\1\u008b\21\uffff\1\u008d\3\uffff\1\u008d\3\uffff\1\u008c",
            "\1\uffff",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\103\14\uffff\1\1\1\uffff" +
                    "\1\153\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\1\1\4\uffff" +
                    "\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1\1\4\uffff" +
                    "\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff\1\1\2" +
                    "\uffff\1\u008e\1\uffff\4\1\64\uffff\1\1",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\1\1\uffff\3\1\1\uffff\3\1\1\uffff\4\1\1\uffff\7\1\1\uffff\5\1\1\uffff" +
                    "\4\1\1\uffff\5\1\5\uffff\13\1\1\uffff\3\1\2\uffff\2\1\1\uffff\1\1\4\uffff" +
                    "\7\1\1\uffff\3\1\2\uffff\25\1\3\uffff\7\1\1\uffff\5\1\1\uffff\1\1\2\uffff" +
                    "\2\1\1\uffff\2\1\1\uffff\1\1\2\uffff\4\1\1\uffff\1\u008f\1\uffff\4\1" +
                    "\1\uffff\10\1\1\uffff\1\1\2\uffff\1\1\14\uffff\3\1\3\uffff\1\1\6\uffff" +
                    "\2\1\2\uffff\3\1\3\uffff\2\1\1\uffff\3\1",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\106\14\uffff\1\1\1\uffff" +
                    "\1\1\11\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\1\5\uffff\1\1\1" +
                    "\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1" +
                    "\1\7\uffff\1\1\1\uffff\1\1\27\uffff\1\165\4\uffff\4\1\64\uffff\1\1",
            "\1\uffff",
            "\1\uffff",
            "\3\1\1\uffff\1\1\4\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\150\2\uffff\3" +
                    "\1\2\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\70\1\1\7\uffff\2\1\1\uffff\1" +
                    "\1\1\uffff\1\1\5\uffff\1\1\4\uffff\2\1\1\uffff\1\1\5\uffff\1\1\1\71\1" +
                    "\1\4\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\4\uffff\2\1\2\uffff" +
                    "\3\1\6\uffff\5\1\2\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff" +
                    "\1\1\4\uffff\1\1\2\uffff\1\105\1\uffff\4\1\2\uffff\3\1\26\uffff\1\1\21" +
                    "\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\150\14\uffff\2\1\1\70\1\1" +
                    "\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\5\uffff\1\1\1\uffff" +
                    "\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1\1\7\uffff" +
                    "\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\105\1\uffff\4\1" +
                    "\64\uffff\1\1",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\150\14\uffff\2\1\1\70\1\1" +
                    "\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\5\uffff\1\1\1\uffff" +
                    "\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1\1\7\uffff" +
                    "\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\105\1\uffff\4\1" +
                    "\64\uffff\1\1",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\150\14\uffff\2\1\1\70\1\1" +
                    "\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\5\uffff\1\1\1\uffff" +
                    "\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1\1\7\uffff" +
                    "\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\105\1\uffff\4\1" +
                    "\64\uffff\1\1",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\150\14\uffff\2\1\1\70\1\1" +
                    "\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\5\uffff\1\1\1\uffff" +
                    "\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1\1\7\uffff" +
                    "\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\105\1\uffff\4\1" +
                    "\7\uffff\1\1\54\uffff\1\1",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\150\14\uffff\2\1\1\70\1\1" +
                    "\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\5\uffff\1\1\1\uffff" +
                    "\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1\1\7\uffff" +
                    "\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\105\1\uffff\4\1" +
                    "\64\uffff\1\1",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\150\14\uffff\2\1\1\70\1\1" +
                    "\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\5\uffff\1\1\1\uffff" +
                    "\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1\1\7\uffff" +
                    "\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\105\1\uffff\4\1" +
                    "\64\uffff\1\1",
            "\1\u0090",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\150\14\uffff\2\1\1\70\1\1" +
                    "\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\5\uffff\1\1\1\uffff" +
                    "\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1\1\7\uffff" +
                    "\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\105\1\uffff\4\1" +
                    "\64\uffff\1\1",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\152\14\uffff\1\1\1\uffff" +
                    "\1\u0091\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0092\5" +
                    "\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1" +
                    "\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff" +
                    "\1\105\1\uffff\4\1\64\uffff\1\1",
            "\1\u0093",
            "\3\1\1\uffff\1\1\4\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\152\2\uffff\3" +
                    "\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\u0091\1\1\7\uffff\2" +
                    "\1\1\uffff\1\1\1\uffff\1\1\5\uffff\1\1\4\uffff\2\1\1\uffff\1\1\5\uffff" +
                    "\1\1\1\u0092\1\1\4\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\4\uffff" +
                    "\2\1\2\uffff\3\1\6\uffff\5\1\2\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\uffff" +
                    "\2\1\1\uffff\1\1\4\uffff\1\1\2\uffff\1\105\1\uffff\4\1\2\uffff\3\1\26" +
                    "\uffff\1\1\21\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\152\14\uffff\1\1\1\uffff" +
                    "\1\u0091\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0092\5" +
                    "\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1" +
                    "\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff" +
                    "\1\105\1\uffff\4\1\64\uffff\1\1",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\152\14\uffff\1\1\1\uffff" +
                    "\1\u0091\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0092\5" +
                    "\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1" +
                    "\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff" +
                    "\1\105\1\uffff\4\1\64\uffff\1\1",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\152\14\uffff\1\1\1\uffff" +
                    "\1\u0091\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0092\5" +
                    "\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1" +
                    "\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff" +
                    "\1\105\1\uffff\4\1\64\uffff\1\1",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\152\14\uffff\1\1\1\uffff" +
                    "\1\u0091\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0092\5" +
                    "\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1" +
                    "\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff" +
                    "\1\105\1\uffff\4\1\7\uffff\1\1\54\uffff\1\1",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\152\14\uffff\1\1\1\uffff" +
                    "\1\u0091\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0092\5" +
                    "\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1" +
                    "\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff" +
                    "\1\105\1\uffff\4\1\64\uffff\1\1",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\152\14\uffff\1\1\1\uffff" +
                    "\1\u0091\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0092\5" +
                    "\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1" +
                    "\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff" +
                    "\1\105\1\uffff\4\1\64\uffff\1\1",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u0094\14\uffff\1\1\1\uffff" +
                    "\1\153\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\5\uffff" +
                    "\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff" +
                    "\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\105" +
                    "\1\uffff\4\1\64\uffff\1\1",
            "\1\u0095",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u0094\14\uffff\1\1\1\uffff" +
                    "\1\153\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\5\uffff" +
                    "\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff" +
                    "\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\105" +
                    "\1\uffff\4\1\64\uffff\1\1",
            "\1\uffff",
            "\1\uffff",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\150\14\uffff\2\1\1\70\1\1" +
                    "\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\5\uffff\1\1\1\uffff" +
                    "\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1\1\7\uffff" +
                    "\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\105\1\uffff\4\1" +
                    "\64\uffff\1\1",
            "\1\u0098\1\uffff\1\u0098\6\uffff\1\u0098\4\uffff\1\u0098\10\uffff\2" +
                    "\u0098\2\uffff\1\u0098\22\uffff\1\u0098\1\uffff\1\u0098\5\uffff\1\u0098" +
                    "\15\uffff\1\u0098\1\uffff\1\u0098\13\uffff\1\u0098\2\uffff\1\u0098\2" +
                    "\uffff\1\u0098\5\uffff\1\u0098\2\uffff\1\u0098\1\uffff\1\u0098\7\uffff" +
                    "\1\u0098\15\uffff\2\u0098\1\uffff\2\u0098\1\uffff\1\u0098\17\uffff\3" +
                    "\u0098\26\uffff\1\u0096\21\uffff\1\u0098\3\uffff\1\u0098\3\uffff\1\u0097",
            "\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\3\uffff\2\1\3\uffff\3\1\1\uffff" +
                    "\1\1\4\uffff\1\1\1\uffff\2\1\10\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff" +
                    "\1\1\2\uffff\1\1\7\uffff\1\1\5\uffff\1\1\1\uffff\2\1\5\uffff\1\1\4\uffff" +
                    "\7\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\3\1\6\uffff\3\1\7\uffff" +
                    "\1\u0099\1\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\4\uffff\1\1" +
                    "\4\uffff\4\1\2\uffff\3\1\3\uffff\1\1\4\uffff\1\1\14\uffff\3\1\3\uffff" +
                    "\1\1\14\uffff\1\1\3\uffff\1\1\2\uffff\3\1",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\152\14\uffff\1\1\1\uffff" +
                    "\1\u0091\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0092\5" +
                    "\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1" +
                    "\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff" +
                    "\1\105\1\uffff\4\1\64\uffff\1\1",
            "\1\u00a2\1\1\1\u009f\2\1\4\uffff\1\u00a2\1\1\3\uffff\1\u00a2\2\uffff" +
                    "\3\1\3\uffff\2\u00a2\1\1\1\uffff\1\u00a2\3\uffff\2\1\1\uffff\2\1\10\uffff" +
                    "\1\1\1\uffff\1\u00a2\1\uffff\1\u00a2\2\uffff\1\1\1\uffff\1\1\1\u00a2" +
                    "\4\uffff\2\1\1\uffff\1\1\5\uffff\1\u00a2\1\1\1\u00a2\1\1\2\uffff\2\1" +
                    "\1\uffff\1\1\2\uffff\1\1\1\uffff\1\u00a2\2\1\1\u00a2\2\1\1\u00a2\1\uffff" +
                    "\1\1\1\uffff\2\1\1\u009c\2\uffff\1\u00a2\1\1\1\u00a2\3\uffff\1\1\2\uffff" +
                    "\1\1\1\u009d\1\1\1\uffff\1\1\5\uffff\1\1\1\uffff\1\1\2\uffff\2\u00a2" +
                    "\1\1\1\u00a0\1\u00a2\1\uffff\1\u00a2\4\uffff\1\1\3\uffff\5\1\2\uffff" +
                    "\2\u00a2\1\u009e\3\uffff\1\1\1\uffff\1\1\2\uffff\1\1\14\uffff\1\1\1\u009a" +
                    "\1\1\3\uffff\1\1\14\uffff\1\u00a1\3\uffff\1\u00a2\2\uffff\1\1\1\u009b" +
                    "\1\1",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u0094\14\uffff\1\1\1\uffff" +
                    "\1\153\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\5\uffff" +
                    "\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff" +
                    "\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\105" +
                    "\1\uffff\4\1\64\uffff\1\1",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\152\14\uffff\1\1\1\uffff" +
                    "\1\u0091\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0092\5" +
                    "\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1" +
                    "\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff" +
                    "\1\105\1\uffff\4\1\64\uffff\1\1",
            "\1\u00a3",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\152\14\uffff\1\1\1\uffff" +
                    "\1\u0091\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0092\5" +
                    "\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1" +
                    "\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff" +
                    "\1\105\1\uffff\4\1\64\uffff\1\1",
            "\1\1\2\uffff\1\1\15\uffff\1\1\1\152\5\uffff\1\1\6\uffff\1\1\2\uffff" +
                    "\1\1\10\uffff\1\1\21\uffff\1\1\27\uffff\2\1\12\uffff\1\1\7\uffff\1\1" +
                    "\13\uffff\1\1\15\uffff\1\1\2\uffff\1\105\1\uffff\4\1\64\uffff\1\1",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u0094\14\uffff\1\1\1\uffff" +
                    "\1\153\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\5\uffff" +
                    "\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff" +
                    "\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\105" +
                    "\1\uffff\4\1\64\uffff\1\1",
            "\1\u00a4",
            "\3\1\1\uffff\1\1\4\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\u0094\2\uffff" +
                    "\3\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\153\1\1\7\uffff\2" +
                    "\1\1\uffff\1\1\1\uffff\1\1\5\uffff\1\1\4\uffff\2\1\1\uffff\1\1\5\uffff" +
                    "\1\1\1\71\1\1\4\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\4\uffff" +
                    "\2\1\2\uffff\3\1\6\uffff\5\1\2\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\uffff" +
                    "\2\1\1\uffff\1\1\4\uffff\1\1\2\uffff\1\105\1\uffff\4\1\2\uffff\3\1\26" +
                    "\uffff\1\1\21\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u0094\14\uffff\1\1\1\uffff" +
                    "\1\153\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\5\uffff" +
                    "\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff" +
                    "\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\105" +
                    "\1\uffff\4\1\64\uffff\1\1",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u0094\14\uffff\1\1\1\uffff" +
                    "\1\153\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\5\uffff" +
                    "\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff" +
                    "\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\105" +
                    "\1\uffff\4\1\64\uffff\1\1",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u0094\14\uffff\1\1\1\uffff" +
                    "\1\153\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\5\uffff" +
                    "\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff" +
                    "\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\105" +
                    "\1\uffff\4\1\64\uffff\1\1",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u0094\14\uffff\1\1\1\uffff" +
                    "\1\153\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\5\uffff" +
                    "\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff" +
                    "\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\105" +
                    "\1\uffff\4\1\7\uffff\1\1\54\uffff\1\1",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u0094\14\uffff\1\1\1\uffff" +
                    "\1\153\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\5\uffff" +
                    "\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff" +
                    "\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\105" +
                    "\1\uffff\4\1\64\uffff\1\1",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u0094\14\uffff\1\1\1\uffff" +
                    "\1\153\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\5\uffff" +
                    "\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff" +
                    "\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\105" +
                    "\1\uffff\4\1\64\uffff\1\1",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\152\14\uffff\1\1\1\uffff" +
                    "\1\u0091\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0092\5" +
                    "\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1" +
                    "\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff" +
                    "\1\105\1\uffff\4\1\64\uffff\1\1",
            "\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u0094\14\uffff\1\1\1\uffff" +
                    "\1\153\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\71\5\uffff" +
                    "\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff" +
                    "\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\105" +
                    "\1\uffff\4\1\64\uffff\1\1"
    };
    static final short[] DFA285_eot = DFA.unpackEncodedString(DFA285_eotS);
    static final short[] DFA285_eof = DFA.unpackEncodedString(DFA285_eofS);
    static final char[] DFA285_min = DFA.unpackEncodedStringToUnsignedChars(DFA285_minS);
    static final char[] DFA285_max = DFA.unpackEncodedStringToUnsignedChars(DFA285_maxS);
    static final short[] DFA285_accept = DFA.unpackEncodedString(DFA285_acceptS);
    static final short[] DFA285_special = DFA.unpackEncodedString(DFA285_specialS);
    static final short[][] DFA285_transition;

    static {
        int numStates = DFA26_transitionS.length;
        DFA26_transition = new short[numStates][];
        for (int i = 0; i < numStates; i++) {
            DFA26_transition[i] = DFA.unpackEncodedString(DFA26_transitionS[i]);
        }
    }

    static {
        int numStates = DFA30_transitionS.length;
        DFA30_transition = new short[numStates][];
        for (int i = 0; i < numStates; i++) {
            DFA30_transition[i] = DFA.unpackEncodedString(DFA30_transitionS[i]);
        }
    }

    static {
        int numStates = DFA33_transitionS.length;
        DFA33_transition = new short[numStates][];
        for (int i = 0; i < numStates; i++) {
            DFA33_transition[i] = DFA.unpackEncodedString(DFA33_transitionS[i]);
        }
    }

    static {
        int numStates = DFA46_transitionS.length;
        DFA46_transition = new short[numStates][];
        for (int i = 0; i < numStates; i++) {
            DFA46_transition[i] = DFA.unpackEncodedString(DFA46_transitionS[i]);
        }
    }

    static {
        int numStates = DFA53_transitionS.length;
        DFA53_transition = new short[numStates][];
        for (int i = 0; i < numStates; i++) {
            DFA53_transition[i] = DFA.unpackEncodedString(DFA53_transitionS[i]);
        }
    }

    static {
        int numStates = DFA57_transitionS.length;
        DFA57_transition = new short[numStates][];
        for (int i = 0; i < numStates; i++) {
            DFA57_transition[i] = DFA.unpackEncodedString(DFA57_transitionS[i]);
        }
    }

    static {
        int numStates = DFA65_transitionS.length;
        DFA65_transition = new short[numStates][];
        for (int i = 0; i < numStates; i++) {
            DFA65_transition[i] = DFA.unpackEncodedString(DFA65_transitionS[i]);
        }
    }

    static {
        int numStates = DFA66_transitionS.length;
        DFA66_transition = new short[numStates][];
        for (int i = 0; i < numStates; i++) {
            DFA66_transition[i] = DFA.unpackEncodedString(DFA66_transitionS[i]);
        }
    }

    static {
        int numStates = DFA68_transitionS.length;
        DFA68_transition = new short[numStates][];
        for (int i = 0; i < numStates; i++) {
            DFA68_transition[i] = DFA.unpackEncodedString(DFA68_transitionS[i]);
        }
    }

    static {
        int numStates = DFA85_transitionS.length;
        DFA85_transition = new short[numStates][];
        for (int i = 0; i < numStates; i++) {
            DFA85_transition[i] = DFA.unpackEncodedString(DFA85_transitionS[i]);
        }
    }

    static {
        int numStates = DFA97_transitionS.length;
        DFA97_transition = new short[numStates][];
        for (int i = 0; i < numStates; i++) {
            DFA97_transition[i] = DFA.unpackEncodedString(DFA97_transitionS[i]);
        }
    }

    static {
        int numStates = DFA105_transitionS.length;
        DFA105_transition = new short[numStates][];
        for (int i = 0; i < numStates; i++) {
            DFA105_transition[i] = DFA.unpackEncodedString(DFA105_transitionS[i]);
        }
    }

    static {
        int numStates = DFA159_transitionS.length;
        DFA159_transition = new short[numStates][];
        for (int i = 0; i < numStates; i++) {
            DFA159_transition[i] = DFA.unpackEncodedString(DFA159_transitionS[i]);
        }
    }

    static {
        int numStates = DFA161_transitionS.length;
        DFA161_transition = new short[numStates][];
        for (int i = 0; i < numStates; i++) {
            DFA161_transition[i] = DFA.unpackEncodedString(DFA161_transitionS[i]);
        }
    }

    static {
        int numStates = DFA163_transitionS.length;
        DFA163_transition = new short[numStates][];
        for (int i = 0; i < numStates; i++) {
            DFA163_transition[i] = DFA.unpackEncodedString(DFA163_transitionS[i]);
        }
    }

    static {
        int numStates = DFA180_transitionS.length;
        DFA180_transition = new short[numStates][];
        for (int i = 0; i < numStates; i++) {
            DFA180_transition[i] = DFA.unpackEncodedString(DFA180_transitionS[i]);
        }
    }

    static {
        int numStates = DFA182_transitionS.length;
        DFA182_transition = new short[numStates][];
        for (int i = 0; i < numStates; i++) {
            DFA182_transition[i] = DFA.unpackEncodedString(DFA182_transitionS[i]);
        }
    }

    static {
        int numStates = DFA195_transitionS.length;
        DFA195_transition = new short[numStates][];
        for (int i = 0; i < numStates; i++) {
            DFA195_transition[i] = DFA.unpackEncodedString(DFA195_transitionS[i]);
        }
    }

    static {
        int numStates = DFA205_transitionS.length;
        DFA205_transition = new short[numStates][];
        for (int i = 0; i < numStates; i++) {
            DFA205_transition[i] = DFA.unpackEncodedString(DFA205_transitionS[i]);
        }
    }

    static {
        int numStates = DFA211_transitionS.length;
        DFA211_transition = new short[numStates][];
        for (int i = 0; i < numStates; i++) {
            DFA211_transition[i] = DFA.unpackEncodedString(DFA211_transitionS[i]);
        }
    }

    static {
        int numStates = DFA222_transitionS.length;
        DFA222_transition = new short[numStates][];
        for (int i = 0; i < numStates; i++) {
            DFA222_transition[i] = DFA.unpackEncodedString(DFA222_transitionS[i]);
        }
    }

    static {
        int numStates = DFA252_transitionS.length;
        DFA252_transition = new short[numStates][];
        for (int i = 0; i < numStates; i++) {
            DFA252_transition[i] = DFA.unpackEncodedString(DFA252_transitionS[i]);
        }
    }

    static {
        int numStates = DFA285_transitionS.length;
        DFA285_transition = new short[numStates][];
        for (int i = 0; i < numStates; i++) {
            DFA285_transition[i] = DFA.unpackEncodedString(DFA285_transitionS[i]);
        }
    }

    protected TreeAdaptor adaptor = new CommonTreeAdaptor();
    protected DFA26 dfa26 = new DFA26(this);
    protected DFA30 dfa30 = new DFA30(this);
    protected DFA33 dfa33 = new DFA33(this);
    protected DFA46 dfa46 = new DFA46(this);
    protected DFA53 dfa53 = new DFA53(this);
    protected DFA57 dfa57 = new DFA57(this);
    protected DFA65 dfa65 = new DFA65(this);
    protected DFA66 dfa66 = new DFA66(this);
    protected DFA68 dfa68 = new DFA68(this);
    protected DFA85 dfa85 = new DFA85(this);
    protected DFA97 dfa97 = new DFA97(this);
    protected DFA105 dfa105 = new DFA105(this);
    protected DFA159 dfa159 = new DFA159(this);
    protected DFA161 dfa161 = new DFA161(this);
    protected DFA163 dfa163 = new DFA163(this);
    protected DFA180 dfa180 = new DFA180(this);
    protected DFA182 dfa182 = new DFA182(this);
    protected DFA195 dfa195 = new DFA195(this);
    protected DFA205 dfa205 = new DFA205(this);
    protected DFA211 dfa211 = new DFA211(this);
    protected DFA222 dfa222 = new DFA222(this);
    protected DFA252 dfa252 = new DFA252(this);
    protected DFA285 dfa285 = new DFA285(this);
    public DelphiParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public DelphiParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
        this.state.ruleMemo = new HashMap[644 + 1];


    }

    // delegates
    public Parser[] getDelegates() {
        return new Parser[]{};
    }

    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }

    @Override
    public String[] getTokenNames() {
        return DelphiParser.tokenNames;
    }

    @Override
    public String getGrammarFileName() {
        return "org\\sonar\\plugins\\delphi\\antlr\\Delphi.g";
    }

    // $ANTLR start "file"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:70:1: file : ( program | library | unit | packageE );
    public final DelphiParser.file_return file() throws RecognitionException {
        DelphiParser.file_return retval = new DelphiParser.file_return();
        retval.start = input.LT(1);
        int file_StartIndex = input.index();

        Object root_0 = null;

        ParserRuleReturnScope program1 = null;
        ParserRuleReturnScope library2 = null;
        ParserRuleReturnScope unit3 = null;
        ParserRuleReturnScope packageE4 = null;


        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 1)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:70:30: ( program | library | unit | packageE )
            int alt1 = 4;
            switch (input.LA(1)) {
                case ASM:
                case BEGIN:
                case CLASS:
                case CONST:
                case CONSTRUCTOR:
                case DESTRUCTOR:
                case DOT:
                case EXPORTS:
                case FUNCTION:
                case LABEL:
                case LBRACK:
                case PROCEDURE:
                case PROGRAM:
                case RESOURCESTRING:
                case THREADVAR:
                case TYPE:
                case USES:
                case VAR: {
                    alt1 = 1;
                }
                break;
                case LIBRARY: {
                    alt1 = 2;
                }
                break;
                case UNIT: {
                    alt1 = 3;
                }
                break;
                case PACKAGE: {
                    alt1 = 4;
                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae =
                            new NoViableAltException("", 1, 0, input);
                    throw nvae;
            }
            switch (alt1) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:70:32: program
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_program_in_file84);
                    program1 = program();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, program1.getTree());

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:70:42: library
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_library_in_file88);
                    library2 = library();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, library2.getTree());

                }
                break;
                case 3:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:70:52: unit
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_unit_in_file92);
                    unit3 = unit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, unit3.getTree());

                }
                break;
                case 4:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:70:59: packageE
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_packageE_in_file96);
                    packageE4 = packageE();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, packageE4.getTree());

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 1, file_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "program"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:76:1: program : ( programHead )? ( usesFileClause )? block '.' ;
    public final DelphiParser.program_return program() throws RecognitionException {
        DelphiParser.program_return retval = new DelphiParser.program_return();
        retval.start = input.LT(1);
        int program_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal8 = null;
        ParserRuleReturnScope programHead5 = null;
        ParserRuleReturnScope usesFileClause6 = null;
        ParserRuleReturnScope block7 = null;

        Object char_literal8_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 2)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:76:30: ( ( programHead )? ( usesFileClause )? block '.' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:76:32: ( programHead )? ( usesFileClause )? block '.'
            {
                root_0 = (Object) adaptor.nil();


                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:76:32: ( programHead )?
                int alt2 = 2;
                int LA2_0 = input.LA(1);
                if ((LA2_0 == PROGRAM)) {
                    alt2 = 1;
                }
                switch (alt2) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:76:33: programHead
                    {
                        pushFollow(FOLLOW_programHead_in_program159);
                        programHead5 = programHead();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) adaptor.addChild(root_0, programHead5.getTree());

                    }
                    break;

                }

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:76:47: ( usesFileClause )?
                int alt3 = 2;
                int LA3_0 = input.LA(1);
                if ((LA3_0 == USES)) {
                    alt3 = 1;
                }
                switch (alt3) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:76:48: usesFileClause
                    {
                        pushFollow(FOLLOW_usesFileClause_in_program164);
                        usesFileClause6 = usesFileClause();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) adaptor.addChild(root_0, usesFileClause6.getTree());

                    }
                    break;

                }

                pushFollow(FOLLOW_block_in_program168);
                block7 = block();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, block7.getTree());

                char_literal8 = (Token) match(input, DOT, FOLLOW_DOT_in_program170);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    char_literal8_tree = (Object) adaptor.create(char_literal8);
                    adaptor.addChild(root_0, char_literal8_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 2, program_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "programHead"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:78:1: programHead : 'program' namespaceName ( programParmSeq )? ';' ;
    public final DelphiParser.programHead_return programHead() throws RecognitionException {
        DelphiParser.programHead_return retval = new DelphiParser.programHead_return();
        retval.start = input.LT(1);
        int programHead_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal9 = null;
        Token char_literal12 = null;
        ParserRuleReturnScope namespaceName10 = null;
        ParserRuleReturnScope programParmSeq11 = null;

        Object string_literal9_tree = null;
        Object char_literal12_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 3)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:78:30: ( 'program' namespaceName ( programParmSeq )? ';' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:78:32: 'program' namespaceName ( programParmSeq )? ';'
            {
                root_0 = (Object) adaptor.nil();


                string_literal9 = (Token) match(input, PROGRAM, FOLLOW_PROGRAM_in_programHead224);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    string_literal9_tree = (Object) adaptor.create(string_literal9);
                    adaptor.addChild(root_0, string_literal9_tree);
                }

                pushFollow(FOLLOW_namespaceName_in_programHead226);
                namespaceName10 = namespaceName();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, namespaceName10.getTree());

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:78:56: ( programParmSeq )?
                int alt4 = 2;
                int LA4_0 = input.LA(1);
                if ((LA4_0 == LPAREN)) {
                    alt4 = 1;
                }
                switch (alt4) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:78:57: programParmSeq
                    {
                        pushFollow(FOLLOW_programParmSeq_in_programHead229);
                        programParmSeq11 = programParmSeq();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) adaptor.addChild(root_0, programParmSeq11.getTree());

                    }
                    break;

                }

                char_literal12 = (Token) match(input, SEMI, FOLLOW_SEMI_in_programHead233);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    char_literal12_tree = (Object) adaptor.create(char_literal12);
                    adaptor.addChild(root_0, char_literal12_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 3, programHead_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "programParmSeq"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:80:1: programParmSeq : '(' ( ident ( ',' ident )* )? ')' ;
    public final DelphiParser.programParmSeq_return programParmSeq() throws RecognitionException {
        DelphiParser.programParmSeq_return retval = new DelphiParser.programParmSeq_return();
        retval.start = input.LT(1);
        int programParmSeq_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal13 = null;
        Token char_literal15 = null;
        Token char_literal17 = null;
        ParserRuleReturnScope ident14 = null;
        ParserRuleReturnScope ident16 = null;

        Object char_literal13_tree = null;
        Object char_literal15_tree = null;
        Object char_literal17_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 4)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:80:30: ( '(' ( ident ( ',' ident )* )? ')' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:80:32: '(' ( ident ( ',' ident )* )? ')'
            {
                root_0 = (Object) adaptor.nil();


                char_literal13 = (Token) match(input, LPAREN, FOLLOW_LPAREN_in_programParmSeq284);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    char_literal13_tree = (Object) adaptor.create(char_literal13);
                    adaptor.addChild(root_0, char_literal13_tree);
                }

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:80:36: ( ident ( ',' ident )* )?
                int alt6 = 2;
                int LA6_0 = input.LA(1);
                if ((LA6_0 == ADD || LA6_0 == ANSISTRING || LA6_0 == AT || LA6_0 == BREAK || (LA6_0 >= CONTAINS && LA6_0 <= CONTINUE) || LA6_0 == DEFAULT || LA6_0 == EXIT || LA6_0 == EXPORT || LA6_0 == FINAL || LA6_0 == IMPLEMENTS || LA6_0 == INDEX || LA6_0 == LOCAL || LA6_0 == MESSAGE || LA6_0 == NAME || LA6_0 == OBJECT || LA6_0 == OPERATOR || LA6_0 == OUT || LA6_0 == POINTER || (LA6_0 >= READ && LA6_0 <= READONLY) || (LA6_0 >= REFERENCE && LA6_0 <= REGISTER) || LA6_0 == REMOVE || (LA6_0 >= STORED && LA6_0 <= STRING) || LA6_0 == TkIdentifier || LA6_0 == VARIANT || LA6_0 == WRITE || LA6_0 == 200)) {
                    alt6 = 1;
                }
                switch (alt6) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:80:37: ident ( ',' ident )*
                    {
                        pushFollow(FOLLOW_ident_in_programParmSeq287);
                        ident14 = ident();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) adaptor.addChild(root_0, ident14.getTree());

                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:80:43: ( ',' ident )*
                        loop5:
                        while (true) {
                            int alt5 = 2;
                            int LA5_0 = input.LA(1);
                            if ((LA5_0 == COMMA)) {
                                alt5 = 1;
                            }

                            switch (alt5) {
                                case 1:
                                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:80:44: ',' ident
                                {
                                    char_literal15 = (Token) match(input, COMMA, FOLLOW_COMMA_in_programParmSeq290);
                                    if (state.failed) return retval;
                                    if (state.backtracking == 0) {
                                        char_literal15_tree = (Object) adaptor.create(char_literal15);
                                        adaptor.addChild(root_0, char_literal15_tree);
                                    }

                                    pushFollow(FOLLOW_ident_in_programParmSeq292);
                                    ident16 = ident();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if (state.backtracking == 0) adaptor.addChild(root_0, ident16.getTree());

                                }
                                break;

                                default:
                                    break loop5;
                            }
                        }

                    }
                    break;

                }

                char_literal17 = (Token) match(input, RPAREN, FOLLOW_RPAREN_in_programParmSeq299);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    char_literal17_tree = (Object) adaptor.create(char_literal17);
                    adaptor.addChild(root_0, char_literal17_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 4, programParmSeq_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "library"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:82:1: library : libraryHead ( usesFileClause )? block '.' ;
    public final DelphiParser.library_return library() throws RecognitionException {
        DelphiParser.library_return retval = new DelphiParser.library_return();
        retval.start = input.LT(1);
        int library_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal21 = null;
        ParserRuleReturnScope libraryHead18 = null;
        ParserRuleReturnScope usesFileClause19 = null;
        ParserRuleReturnScope block20 = null;

        Object char_literal21_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 5)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:82:30: ( libraryHead ( usesFileClause )? block '.' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:82:32: libraryHead ( usesFileClause )? block '.'
            {
                root_0 = (Object) adaptor.nil();


                pushFollow(FOLLOW_libraryHead_in_library357);
                libraryHead18 = libraryHead();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, libraryHead18.getTree());

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:82:44: ( usesFileClause )?
                int alt7 = 2;
                int LA7_0 = input.LA(1);
                if ((LA7_0 == USES)) {
                    alt7 = 1;
                }
                switch (alt7) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:82:45: usesFileClause
                    {
                        pushFollow(FOLLOW_usesFileClause_in_library360);
                        usesFileClause19 = usesFileClause();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) adaptor.addChild(root_0, usesFileClause19.getTree());

                    }
                    break;

                }

                pushFollow(FOLLOW_block_in_library364);
                block20 = block();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, block20.getTree());

                char_literal21 = (Token) match(input, DOT, FOLLOW_DOT_in_library366);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    char_literal21_tree = (Object) adaptor.create(char_literal21);
                    adaptor.addChild(root_0, char_literal21_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 5, library_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "libraryHead"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:84:1: libraryHead : 'library' namespaceName ( hintingDirective )* ';' -> ^( 'library' namespaceName ) ;
    public final DelphiParser.libraryHead_return libraryHead() throws RecognitionException {
        DelphiParser.libraryHead_return retval = new DelphiParser.libraryHead_return();
        retval.start = input.LT(1);
        int libraryHead_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal22 = null;
        Token char_literal25 = null;
        ParserRuleReturnScope namespaceName23 = null;
        ParserRuleReturnScope hintingDirective24 = null;

        Object string_literal22_tree = null;
        Object char_literal25_tree = null;
        RewriteRuleTokenStream stream_SEMI = new RewriteRuleTokenStream(adaptor, "token SEMI");
        RewriteRuleTokenStream stream_LIBRARY = new RewriteRuleTokenStream(adaptor, "token LIBRARY");
        RewriteRuleSubtreeStream stream_hintingDirective = new RewriteRuleSubtreeStream(adaptor, "rule hintingDirective");
        RewriteRuleSubtreeStream stream_namespaceName = new RewriteRuleSubtreeStream(adaptor, "rule namespaceName");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 6)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:84:30: ( 'library' namespaceName ( hintingDirective )* ';' -> ^( 'library' namespaceName ) )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:84:32: 'library' namespaceName ( hintingDirective )* ';'
            {
                string_literal22 = (Token) match(input, LIBRARY, FOLLOW_LIBRARY_in_libraryHead420);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_LIBRARY.add(string_literal22);

                pushFollow(FOLLOW_namespaceName_in_libraryHead422);
                namespaceName23 = namespaceName();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_namespaceName.add(namespaceName23.getTree());
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:84:56: ( hintingDirective )*
                loop8:
                while (true) {
                    int alt8 = 2;
                    int LA8_0 = input.LA(1);
                    if ((LA8_0 == DEPRECATED || LA8_0 == EXPERIMENTAL || LA8_0 == LIBRARY || LA8_0 == PLATFORM)) {
                        alt8 = 1;
                    }

                    switch (alt8) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:84:57: hintingDirective
                        {
                            pushFollow(FOLLOW_hintingDirective_in_libraryHead425);
                            hintingDirective24 = hintingDirective();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_hintingDirective.add(hintingDirective24.getTree());
                        }
                        break;

                        default:
                            break loop8;
                    }
                }

                char_literal25 = (Token) match(input, SEMI, FOLLOW_SEMI_in_libraryHead429);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_SEMI.add(char_literal25);

                // AST REWRITE
                // elements: namespaceName, LIBRARY
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 84:80: -> ^( 'library' namespaceName )
                    {
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:84:83: ^( 'library' namespaceName )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot(stream_LIBRARY.nextNode(), root_1);
                            adaptor.addChild(root_1, stream_namespaceName.nextTree());
                            adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 6, libraryHead_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "packageE"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:86:1: packageE : packageHead requiresClause ( containsClause )? 'end' '.' ;
    public final DelphiParser.packageE_return packageE() throws RecognitionException {
        DelphiParser.packageE_return retval = new DelphiParser.packageE_return();
        retval.start = input.LT(1);
        int packageE_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal29 = null;
        Token char_literal30 = null;
        ParserRuleReturnScope packageHead26 = null;
        ParserRuleReturnScope requiresClause27 = null;
        ParserRuleReturnScope containsClause28 = null;

        Object string_literal29_tree = null;
        Object char_literal30_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 7)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:86:30: ( packageHead requiresClause ( containsClause )? 'end' '.' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:86:32: packageHead requiresClause ( containsClause )? 'end' '.'
            {
                root_0 = (Object) adaptor.nil();


                pushFollow(FOLLOW_packageHead_in_packageE494);
                packageHead26 = packageHead();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, packageHead26.getTree());

                pushFollow(FOLLOW_requiresClause_in_packageE496);
                requiresClause27 = requiresClause();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, requiresClause27.getTree());

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:86:59: ( containsClause )?
                int alt9 = 2;
                int LA9_0 = input.LA(1);
                if ((LA9_0 == CONTAINS)) {
                    alt9 = 1;
                }
                switch (alt9) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:86:60: containsClause
                    {
                        pushFollow(FOLLOW_containsClause_in_packageE499);
                        containsClause28 = containsClause();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) adaptor.addChild(root_0, containsClause28.getTree());

                    }
                    break;

                }

                string_literal29 = (Token) match(input, END, FOLLOW_END_in_packageE503);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    string_literal29_tree = (Object) adaptor.create(string_literal29);
                    adaptor.addChild(root_0, string_literal29_tree);
                }

                char_literal30 = (Token) match(input, DOT, FOLLOW_DOT_in_packageE505);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    char_literal30_tree = (Object) adaptor.create(char_literal30);
                    adaptor.addChild(root_0, char_literal30_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 7, packageE_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "packageHead"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:88:1: packageHead : 'package' namespaceName ';' ;
    public final DelphiParser.packageHead_return packageHead() throws RecognitionException {
        DelphiParser.packageHead_return retval = new DelphiParser.packageHead_return();
        retval.start = input.LT(1);
        int packageHead_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal31 = null;
        Token char_literal33 = null;
        ParserRuleReturnScope namespaceName32 = null;

        Object string_literal31_tree = null;
        Object char_literal33_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 8)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:88:30: ( 'package' namespaceName ';' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:88:32: 'package' namespaceName ';'
            {
                root_0 = (Object) adaptor.nil();


                string_literal31 = (Token) match(input, PACKAGE, FOLLOW_PACKAGE_in_packageHead559);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    string_literal31_tree = (Object) adaptor.create(string_literal31);
                    adaptor.addChild(root_0, string_literal31_tree);
                }

                pushFollow(FOLLOW_namespaceName_in_packageHead561);
                namespaceName32 = namespaceName();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, namespaceName32.getTree());

                char_literal33 = (Token) match(input, SEMI, FOLLOW_SEMI_in_packageHead563);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    char_literal33_tree = (Object) adaptor.create(char_literal33);
                    adaptor.addChild(root_0, char_literal33_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 8, packageHead_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "unit"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:90:1: unit : unitHead unitInterface unitImplementation unitBlock '.' ;
    public final DelphiParser.unit_return unit() throws RecognitionException {
        DelphiParser.unit_return retval = new DelphiParser.unit_return();
        retval.start = input.LT(1);
        int unit_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal38 = null;
        ParserRuleReturnScope unitHead34 = null;
        ParserRuleReturnScope unitInterface35 = null;
        ParserRuleReturnScope unitImplementation36 = null;
        ParserRuleReturnScope unitBlock37 = null;

        Object char_literal38_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 9)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:90:30: ( unitHead unitInterface unitImplementation unitBlock '.' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:90:32: unitHead unitInterface unitImplementation unitBlock '.'
            {
                root_0 = (Object) adaptor.nil();


                pushFollow(FOLLOW_unitHead_in_unit624);
                unitHead34 = unitHead();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, unitHead34.getTree());

                pushFollow(FOLLOW_unitInterface_in_unit626);
                unitInterface35 = unitInterface();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, unitInterface35.getTree());

                pushFollow(FOLLOW_unitImplementation_in_unit628);
                unitImplementation36 = unitImplementation();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, unitImplementation36.getTree());

                pushFollow(FOLLOW_unitBlock_in_unit630);
                unitBlock37 = unitBlock();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, unitBlock37.getTree());

                char_literal38 = (Token) match(input, DOT, FOLLOW_DOT_in_unit632);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    char_literal38_tree = (Object) adaptor.create(char_literal38);
                    adaptor.addChild(root_0, char_literal38_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 9, unit_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "unitHead"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:92:1: unitHead : 'unit' namespaceName ( hintingDirective )* ';' -> ^( 'unit' namespaceName ( hintingDirective )* ) ;
    public final DelphiParser.unitHead_return unitHead() throws RecognitionException {
        DelphiParser.unitHead_return retval = new DelphiParser.unitHead_return();
        retval.start = input.LT(1);
        int unitHead_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal39 = null;
        Token char_literal42 = null;
        ParserRuleReturnScope namespaceName40 = null;
        ParserRuleReturnScope hintingDirective41 = null;

        Object string_literal39_tree = null;
        Object char_literal42_tree = null;
        RewriteRuleTokenStream stream_UNIT = new RewriteRuleTokenStream(adaptor, "token UNIT");
        RewriteRuleTokenStream stream_SEMI = new RewriteRuleTokenStream(adaptor, "token SEMI");
        RewriteRuleSubtreeStream stream_hintingDirective = new RewriteRuleSubtreeStream(adaptor, "rule hintingDirective");
        RewriteRuleSubtreeStream stream_namespaceName = new RewriteRuleSubtreeStream(adaptor, "rule namespaceName");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 10)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:92:30: ( 'unit' namespaceName ( hintingDirective )* ';' -> ^( 'unit' namespaceName ( hintingDirective )* ) )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:92:32: 'unit' namespaceName ( hintingDirective )* ';'
            {
                string_literal39 = (Token) match(input, UNIT, FOLLOW_UNIT_in_unitHead689);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_UNIT.add(string_literal39);

                pushFollow(FOLLOW_namespaceName_in_unitHead691);
                namespaceName40 = namespaceName();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_namespaceName.add(namespaceName40.getTree());
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:92:53: ( hintingDirective )*
                loop10:
                while (true) {
                    int alt10 = 2;
                    int LA10_0 = input.LA(1);
                    if ((LA10_0 == DEPRECATED || LA10_0 == EXPERIMENTAL || LA10_0 == LIBRARY || LA10_0 == PLATFORM)) {
                        alt10 = 1;
                    }

                    switch (alt10) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:92:54: hintingDirective
                        {
                            pushFollow(FOLLOW_hintingDirective_in_unitHead694);
                            hintingDirective41 = hintingDirective();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_hintingDirective.add(hintingDirective41.getTree());
                        }
                        break;

                        default:
                            break loop10;
                    }
                }

                char_literal42 = (Token) match(input, SEMI, FOLLOW_SEMI_in_unitHead698);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_SEMI.add(char_literal42);

                // AST REWRITE
                // elements: namespaceName, UNIT, hintingDirective
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 92:77: -> ^( 'unit' namespaceName ( hintingDirective )* )
                    {
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:92:80: ^( 'unit' namespaceName ( hintingDirective )* )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot(stream_UNIT.nextNode(), root_1);
                            adaptor.addChild(root_1, stream_namespaceName.nextTree());
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:92:103: ( hintingDirective )*
                            while (stream_hintingDirective.hasNext()) {
                                adaptor.addChild(root_1, stream_hintingDirective.nextTree());
                            }
                            stream_hintingDirective.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 10, unitHead_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "unitInterface"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:94:1: unitInterface : 'interface' ( usesClause )? ( interfaceDecl )* -> ^( 'interface' ( usesClause )? ( interfaceDecl )* ) ;
    public final DelphiParser.unitInterface_return unitInterface() throws RecognitionException {
        DelphiParser.unitInterface_return retval = new DelphiParser.unitInterface_return();
        retval.start = input.LT(1);
        int unitInterface_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal43 = null;
        ParserRuleReturnScope usesClause44 = null;
        ParserRuleReturnScope interfaceDecl45 = null;

        Object string_literal43_tree = null;
        RewriteRuleTokenStream stream_INTERFACE = new RewriteRuleTokenStream(adaptor, "token INTERFACE");
        RewriteRuleSubtreeStream stream_interfaceDecl = new RewriteRuleSubtreeStream(adaptor, "rule interfaceDecl");
        RewriteRuleSubtreeStream stream_usesClause = new RewriteRuleSubtreeStream(adaptor, "rule usesClause");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 11)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:94:30: ( 'interface' ( usesClause )? ( interfaceDecl )* -> ^( 'interface' ( usesClause )? ( interfaceDecl )* ) )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:94:32: 'interface' ( usesClause )? ( interfaceDecl )*
            {
                string_literal43 = (Token) match(input, INTERFACE, FOLLOW_INTERFACE_in_unitInterface763);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_INTERFACE.add(string_literal43);

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:94:44: ( usesClause )?
                int alt11 = 2;
                int LA11_0 = input.LA(1);
                if ((LA11_0 == USES)) {
                    alt11 = 1;
                }
                switch (alt11) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:94:45: usesClause
                    {
                        pushFollow(FOLLOW_usesClause_in_unitInterface766);
                        usesClause44 = usesClause();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_usesClause.add(usesClause44.getTree());
                    }
                    break;

                }

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:94:58: ( interfaceDecl )*
                loop12:
                while (true) {
                    int alt12 = 2;
                    int LA12_0 = input.LA(1);
                    if ((LA12_0 == CLASS || (LA12_0 >= CONST && LA12_0 <= CONSTRUCTOR) || LA12_0 == DESTRUCTOR || LA12_0 == EXPORTS || LA12_0 == FUNCTION || LA12_0 == LBRACK || LA12_0 == PROCEDURE || LA12_0 == RESOURCESTRING || LA12_0 == THREADVAR || LA12_0 == TYPE || LA12_0 == VAR)) {
                        alt12 = 1;
                    }

                    switch (alt12) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:94:59: interfaceDecl
                        {
                            pushFollow(FOLLOW_interfaceDecl_in_unitInterface771);
                            interfaceDecl45 = interfaceDecl();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_interfaceDecl.add(interfaceDecl45.getTree());
                        }
                        break;

                        default:
                            break loop12;
                    }
                }

                // AST REWRITE
                // elements: interfaceDecl, usesClause, INTERFACE
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 94:75: -> ^( 'interface' ( usesClause )? ( interfaceDecl )* )
                    {
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:94:78: ^( 'interface' ( usesClause )? ( interfaceDecl )* )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot(stream_INTERFACE.nextNode(), root_1);
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:94:92: ( usesClause )?
                            if (stream_usesClause.hasNext()) {
                                adaptor.addChild(root_1, stream_usesClause.nextTree());
                            }
                            stream_usesClause.reset();

                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:94:106: ( interfaceDecl )*
                            while (stream_interfaceDecl.hasNext()) {
                                adaptor.addChild(root_1, stream_interfaceDecl.nextTree());
                            }
                            stream_interfaceDecl.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 11, unitInterface_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "unitImplementation"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:96:1: unitImplementation : 'implementation' ( usesClause )? ( declSection )* -> ^( 'implementation' ( usesClause )? ( declSection )* ) ;
    public final DelphiParser.unitImplementation_return unitImplementation() throws RecognitionException {
        DelphiParser.unitImplementation_return retval = new DelphiParser.unitImplementation_return();
        retval.start = input.LT(1);
        int unitImplementation_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal46 = null;
        ParserRuleReturnScope usesClause47 = null;
        ParserRuleReturnScope declSection48 = null;

        Object string_literal46_tree = null;
        RewriteRuleTokenStream stream_IMPLEMENTATION = new RewriteRuleTokenStream(adaptor, "token IMPLEMENTATION");
        RewriteRuleSubtreeStream stream_declSection = new RewriteRuleSubtreeStream(adaptor, "rule declSection");
        RewriteRuleSubtreeStream stream_usesClause = new RewriteRuleSubtreeStream(adaptor, "rule usesClause");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 12)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:96:30: ( 'implementation' ( usesClause )? ( declSection )* -> ^( 'implementation' ( usesClause )? ( declSection )* ) )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:96:32: 'implementation' ( usesClause )? ( declSection )*
            {
                string_literal46 = (Token) match(input, IMPLEMENTATION, FOLLOW_IMPLEMENTATION_in_unitImplementation836);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_IMPLEMENTATION.add(string_literal46);

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:96:49: ( usesClause )?
                int alt13 = 2;
                int LA13_0 = input.LA(1);
                if ((LA13_0 == USES)) {
                    alt13 = 1;
                }
                switch (alt13) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:96:50: usesClause
                    {
                        pushFollow(FOLLOW_usesClause_in_unitImplementation839);
                        usesClause47 = usesClause();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_usesClause.add(usesClause47.getTree());
                    }
                    break;

                }

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:96:63: ( declSection )*
                loop14:
                while (true) {
                    int alt14 = 2;
                    int LA14_0 = input.LA(1);
                    if ((LA14_0 == CLASS || (LA14_0 >= CONST && LA14_0 <= CONSTRUCTOR) || LA14_0 == DESTRUCTOR || LA14_0 == EXPORTS || LA14_0 == FUNCTION || (LA14_0 >= LABEL && LA14_0 <= LBRACK) || LA14_0 == PROCEDURE || LA14_0 == RESOURCESTRING || LA14_0 == THREADVAR || LA14_0 == TYPE || LA14_0 == VAR)) {
                        alt14 = 1;
                    }

                    switch (alt14) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:96:64: declSection
                        {
                            pushFollow(FOLLOW_declSection_in_unitImplementation844);
                            declSection48 = declSection();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_declSection.add(declSection48.getTree());
                        }
                        break;

                        default:
                            break loop14;
                    }
                }

                // AST REWRITE
                // elements: declSection, IMPLEMENTATION, usesClause
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 96:78: -> ^( 'implementation' ( usesClause )? ( declSection )* )
                    {
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:96:81: ^( 'implementation' ( usesClause )? ( declSection )* )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot(stream_IMPLEMENTATION.nextNode(), root_1);
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:96:100: ( usesClause )?
                            if (stream_usesClause.hasNext()) {
                                adaptor.addChild(root_1, stream_usesClause.nextTree());
                            }
                            stream_usesClause.reset();

                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:96:114: ( declSection )*
                            while (stream_declSection.hasNext()) {
                                adaptor.addChild(root_1, stream_declSection.nextTree());
                            }
                            stream_declSection.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 12, unitImplementation_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "unitBlock"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:98:1: unitBlock : ( unitInitialization 'end' | compoundStatement | 'end' );
    public final DelphiParser.unitBlock_return unitBlock() throws RecognitionException {
        DelphiParser.unitBlock_return retval = new DelphiParser.unitBlock_return();
        retval.start = input.LT(1);
        int unitBlock_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal50 = null;
        Token string_literal52 = null;
        ParserRuleReturnScope unitInitialization49 = null;
        ParserRuleReturnScope compoundStatement51 = null;

        Object string_literal50_tree = null;
        Object string_literal52_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 13)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:98:30: ( unitInitialization 'end' | compoundStatement | 'end' )
            int alt15 = 3;
            switch (input.LA(1)) {
                case INITIALIZATION: {
                    alt15 = 1;
                }
                break;
                case BEGIN: {
                    alt15 = 2;
                }
                break;
                case END: {
                    alt15 = 3;
                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae =
                            new NoViableAltException("", 15, 0, input);
                    throw nvae;
            }
            switch (alt15) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:98:32: unitInitialization 'end'
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_unitInitialization_in_unitBlock918);
                    unitInitialization49 = unitInitialization();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, unitInitialization49.getTree());

                    string_literal50 = (Token) match(input, END, FOLLOW_END_in_unitBlock920);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal50_tree = (Object) adaptor.create(string_literal50);
                        adaptor.addChild(root_0, string_literal50_tree);
                    }

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:99:32: compoundStatement
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_compoundStatement_in_unitBlock953);
                    compoundStatement51 = compoundStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, compoundStatement51.getTree());

                }
                break;
                case 3:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:100:32: 'end'
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal52 = (Token) match(input, END, FOLLOW_END_in_unitBlock986);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal52_tree = (Object) adaptor.create(string_literal52);
                        adaptor.addChild(root_0, string_literal52_tree);
                    }

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 13, unitBlock_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "unitInitialization"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:102:1: unitInitialization : 'initialization' statementList ( unitFinalization )? ;
    public final DelphiParser.unitInitialization_return unitInitialization() throws RecognitionException {
        DelphiParser.unitInitialization_return retval = new DelphiParser.unitInitialization_return();
        retval.start = input.LT(1);
        int unitInitialization_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal53 = null;
        ParserRuleReturnScope statementList54 = null;
        ParserRuleReturnScope unitFinalization55 = null;

        Object string_literal53_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 14)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:102:30: ( 'initialization' statementList ( unitFinalization )? )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:102:32: 'initialization' statementList ( unitFinalization )?
            {
                root_0 = (Object) adaptor.nil();


                string_literal53 = (Token) match(input, INITIALIZATION, FOLLOW_INITIALIZATION_in_unitInitialization1033);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    string_literal53_tree = (Object) adaptor.create(string_literal53);
                    adaptor.addChild(root_0, string_literal53_tree);
                }

                pushFollow(FOLLOW_statementList_in_unitInitialization1035);
                statementList54 = statementList();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, statementList54.getTree());

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:102:63: ( unitFinalization )?
                int alt16 = 2;
                int LA16_0 = input.LA(1);
                if ((LA16_0 == FINALIZATION)) {
                    alt16 = 1;
                }
                switch (alt16) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:102:64: unitFinalization
                    {
                        pushFollow(FOLLOW_unitFinalization_in_unitInitialization1038);
                        unitFinalization55 = unitFinalization();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) adaptor.addChild(root_0, unitFinalization55.getTree());

                    }
                    break;

                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 14, unitInitialization_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "unitFinalization"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:104:1: unitFinalization : 'finalization' statementList ;
    public final DelphiParser.unitFinalization_return unitFinalization() throws RecognitionException {
        DelphiParser.unitFinalization_return retval = new DelphiParser.unitFinalization_return();
        retval.start = input.LT(1);
        int unitFinalization_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal56 = null;
        ParserRuleReturnScope statementList57 = null;

        Object string_literal56_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 15)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:104:30: ( 'finalization' statementList )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:104:32: 'finalization' statementList
            {
                root_0 = (Object) adaptor.nil();


                string_literal56 = (Token) match(input, FINALIZATION, FOLLOW_FINALIZATION_in_unitFinalization1089);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    string_literal56_tree = (Object) adaptor.create(string_literal56);
                    adaptor.addChild(root_0, string_literal56_tree);
                }

                pushFollow(FOLLOW_statementList_in_unitFinalization1091);
                statementList57 = statementList();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, statementList57.getTree());

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 15, unitFinalization_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "containsClause"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:109:1: containsClause : 'contains' namespaceFileNameList ;
    public final DelphiParser.containsClause_return containsClause() throws RecognitionException {
        DelphiParser.containsClause_return retval = new DelphiParser.containsClause_return();
        retval.start = input.LT(1);
        int containsClause_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal58 = null;
        ParserRuleReturnScope namespaceFileNameList59 = null;

        Object string_literal58_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 16)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:109:30: ( 'contains' namespaceFileNameList )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:109:32: 'contains' namespaceFileNameList
            {
                root_0 = (Object) adaptor.nil();


                string_literal58 = (Token) match(input, CONTAINS, FOLLOW_CONTAINS_in_containsClause1145);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    string_literal58_tree = (Object) adaptor.create(string_literal58);
                    adaptor.addChild(root_0, string_literal58_tree);
                }

                pushFollow(FOLLOW_namespaceFileNameList_in_containsClause1147);
                namespaceFileNameList59 = namespaceFileNameList();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, namespaceFileNameList59.getTree());

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 16, containsClause_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "requiresClause"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:111:1: requiresClause : 'requires' namespaceNameList ;
    public final DelphiParser.requiresClause_return requiresClause() throws RecognitionException {
        DelphiParser.requiresClause_return retval = new DelphiParser.requiresClause_return();
        retval.start = input.LT(1);
        int requiresClause_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal60 = null;
        ParserRuleReturnScope namespaceNameList61 = null;

        Object string_literal60_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 17)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:111:30: ( 'requires' namespaceNameList )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:111:32: 'requires' namespaceNameList
            {
                root_0 = (Object) adaptor.nil();


                string_literal60 = (Token) match(input, REQUIRES, FOLLOW_REQUIRES_in_requiresClause1198);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    string_literal60_tree = (Object) adaptor.create(string_literal60);
                    adaptor.addChild(root_0, string_literal60_tree);
                }

                pushFollow(FOLLOW_namespaceNameList_in_requiresClause1200);
                namespaceNameList61 = namespaceNameList();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, namespaceNameList61.getTree());

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 17, requiresClause_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "usesClause"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:113:1: usesClause : 'uses' namespaceNameList -> ^( 'uses' namespaceNameList ) ;
    public final DelphiParser.usesClause_return usesClause() throws RecognitionException {
        DelphiParser.usesClause_return retval = new DelphiParser.usesClause_return();
        retval.start = input.LT(1);
        int usesClause_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal62 = null;
        ParserRuleReturnScope namespaceNameList63 = null;

        Object string_literal62_tree = null;
        RewriteRuleTokenStream stream_USES = new RewriteRuleTokenStream(adaptor, "token USES");
        RewriteRuleSubtreeStream stream_namespaceNameList = new RewriteRuleSubtreeStream(adaptor, "rule namespaceNameList");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 18)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:113:30: ( 'uses' namespaceNameList -> ^( 'uses' namespaceNameList ) )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:113:32: 'uses' namespaceNameList
            {
                string_literal62 = (Token) match(input, USES, FOLLOW_USES_in_usesClause1255);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_USES.add(string_literal62);

                pushFollow(FOLLOW_namespaceNameList_in_usesClause1257);
                namespaceNameList63 = namespaceNameList();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_namespaceNameList.add(namespaceNameList63.getTree());
                // AST REWRITE
                // elements: namespaceNameList, USES
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 113:57: -> ^( 'uses' namespaceNameList )
                    {
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:113:60: ^( 'uses' namespaceNameList )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot(stream_USES.nextNode(), root_1);
                            adaptor.addChild(root_1, stream_namespaceNameList.nextTree());
                            adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 18, usesClause_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "usesFileClause"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:115:1: usesFileClause : 'uses' namespaceFileNameList -> ^( 'uses' namespaceFileNameList ) ;
    public final DelphiParser.usesFileClause_return usesFileClause() throws RecognitionException {
        DelphiParser.usesFileClause_return retval = new DelphiParser.usesFileClause_return();
        retval.start = input.LT(1);
        int usesFileClause_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal64 = null;
        ParserRuleReturnScope namespaceFileNameList65 = null;

        Object string_literal64_tree = null;
        RewriteRuleTokenStream stream_USES = new RewriteRuleTokenStream(adaptor, "token USES");
        RewriteRuleSubtreeStream stream_namespaceFileNameList = new RewriteRuleSubtreeStream(adaptor, "rule namespaceFileNameList");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 19)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:115:30: ( 'uses' namespaceFileNameList -> ^( 'uses' namespaceFileNameList ) )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:115:32: 'uses' namespaceFileNameList
            {
                string_literal64 = (Token) match(input, USES, FOLLOW_USES_in_usesFileClause1316);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_USES.add(string_literal64);

                pushFollow(FOLLOW_namespaceFileNameList_in_usesFileClause1318);
                namespaceFileNameList65 = namespaceFileNameList();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_namespaceFileNameList.add(namespaceFileNameList65.getTree());
                // AST REWRITE
                // elements: namespaceFileNameList, USES
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 115:61: -> ^( 'uses' namespaceFileNameList )
                    {
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:115:64: ^( 'uses' namespaceFileNameList )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot(stream_USES.nextNode(), root_1);
                            adaptor.addChild(root_1, stream_namespaceFileNameList.nextTree());
                            adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 19, usesFileClause_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "namespaceFileNameList"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:117:1: namespaceFileNameList : namespaceFileName ( ',' namespaceFileName )* ';' -> namespaceFileName ( namespaceFileName )* ;
    public final DelphiParser.namespaceFileNameList_return namespaceFileNameList() throws RecognitionException {
        DelphiParser.namespaceFileNameList_return retval = new DelphiParser.namespaceFileNameList_return();
        retval.start = input.LT(1);
        int namespaceFileNameList_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal67 = null;
        Token char_literal69 = null;
        ParserRuleReturnScope namespaceFileName66 = null;
        ParserRuleReturnScope namespaceFileName68 = null;

        Object char_literal67_tree = null;
        Object char_literal69_tree = null;
        RewriteRuleTokenStream stream_COMMA = new RewriteRuleTokenStream(adaptor, "token COMMA");
        RewriteRuleTokenStream stream_SEMI = new RewriteRuleTokenStream(adaptor, "token SEMI");
        RewriteRuleSubtreeStream stream_namespaceFileName = new RewriteRuleSubtreeStream(adaptor, "rule namespaceFileName");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 20)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:117:30: ( namespaceFileName ( ',' namespaceFileName )* ';' -> namespaceFileName ( namespaceFileName )* )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:117:32: namespaceFileName ( ',' namespaceFileName )* ';'
            {
                pushFollow(FOLLOW_namespaceFileName_in_namespaceFileNameList1370);
                namespaceFileName66 = namespaceFileName();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_namespaceFileName.add(namespaceFileName66.getTree());
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:117:50: ( ',' namespaceFileName )*
                loop17:
                while (true) {
                    int alt17 = 2;
                    int LA17_0 = input.LA(1);
                    if ((LA17_0 == COMMA)) {
                        alt17 = 1;
                    }

                    switch (alt17) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:117:51: ',' namespaceFileName
                        {
                            char_literal67 = (Token) match(input, COMMA, FOLLOW_COMMA_in_namespaceFileNameList1373);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_COMMA.add(char_literal67);

                            pushFollow(FOLLOW_namespaceFileName_in_namespaceFileNameList1375);
                            namespaceFileName68 = namespaceFileName();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_namespaceFileName.add(namespaceFileName68.getTree());
                        }
                        break;

                        default:
                            break loop17;
                    }
                }

                char_literal69 = (Token) match(input, SEMI, FOLLOW_SEMI_in_namespaceFileNameList1379);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_SEMI.add(char_literal69);

                // AST REWRITE
                // elements: namespaceFileName, namespaceFileName
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 117:79: -> namespaceFileName ( namespaceFileName )*
                    {
                        adaptor.addChild(root_0, stream_namespaceFileName.nextTree());
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:117:100: ( namespaceFileName )*
                        while (stream_namespaceFileName.hasNext()) {
                            adaptor.addChild(root_0, stream_namespaceFileName.nextTree());
                        }
                        stream_namespaceFileName.reset();

                    }


                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 20, namespaceFileNameList_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "namespaceFileName"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:119:1: namespaceFileName : namespaceName ( 'in' QuotedString )? -> ^( namespaceName ( QuotedString )? ) ;
    public final DelphiParser.namespaceFileName_return namespaceFileName() throws RecognitionException {
        DelphiParser.namespaceFileName_return retval = new DelphiParser.namespaceFileName_return();
        retval.start = input.LT(1);
        int namespaceFileName_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal71 = null;
        Token QuotedString72 = null;
        ParserRuleReturnScope namespaceName70 = null;

        Object string_literal71_tree = null;
        Object QuotedString72_tree = null;
        RewriteRuleTokenStream stream_IN = new RewriteRuleTokenStream(adaptor, "token IN");
        RewriteRuleTokenStream stream_QuotedString = new RewriteRuleTokenStream(adaptor, "token QuotedString");
        RewriteRuleSubtreeStream stream_namespaceName = new RewriteRuleSubtreeStream(adaptor, "rule namespaceName");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 21)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:119:30: ( namespaceName ( 'in' QuotedString )? -> ^( namespaceName ( QuotedString )? ) )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:119:32: namespaceName ( 'in' QuotedString )?
            {
                pushFollow(FOLLOW_namespaceName_in_namespaceFileName1436);
                namespaceName70 = namespaceName();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_namespaceName.add(namespaceName70.getTree());
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:119:46: ( 'in' QuotedString )?
                int alt18 = 2;
                int LA18_0 = input.LA(1);
                if ((LA18_0 == IN)) {
                    alt18 = 1;
                }
                switch (alt18) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:119:47: 'in' QuotedString
                    {
                        string_literal71 = (Token) match(input, IN, FOLLOW_IN_in_namespaceFileName1439);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_IN.add(string_literal71);

                        QuotedString72 = (Token) match(input, QuotedString, FOLLOW_QuotedString_in_namespaceFileName1441);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_QuotedString.add(QuotedString72);

                    }
                    break;

                }

                // AST REWRITE
                // elements: namespaceName, QuotedString
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 119:67: -> ^( namespaceName ( QuotedString )? )
                    {
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:119:70: ^( namespaceName ( QuotedString )? )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot(stream_namespaceName.nextNode(), root_1);
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:119:86: ( QuotedString )?
                            if (stream_QuotedString.hasNext()) {
                                adaptor.addChild(root_1, stream_QuotedString.nextNode());
                            }
                            stream_QuotedString.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 21, namespaceFileName_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "namespaceNameList"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:121:1: namespaceNameList : namespaceName ( ',' namespaceName )* ';' -> namespaceName ( namespaceName )* ;
    public final DelphiParser.namespaceNameList_return namespaceNameList() throws RecognitionException {
        DelphiParser.namespaceNameList_return retval = new DelphiParser.namespaceNameList_return();
        retval.start = input.LT(1);
        int namespaceNameList_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal74 = null;
        Token char_literal76 = null;
        ParserRuleReturnScope namespaceName73 = null;
        ParserRuleReturnScope namespaceName75 = null;

        Object char_literal74_tree = null;
        Object char_literal76_tree = null;
        RewriteRuleTokenStream stream_COMMA = new RewriteRuleTokenStream(adaptor, "token COMMA");
        RewriteRuleTokenStream stream_SEMI = new RewriteRuleTokenStream(adaptor, "token SEMI");
        RewriteRuleSubtreeStream stream_namespaceName = new RewriteRuleSubtreeStream(adaptor, "rule namespaceName");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 22)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:121:30: ( namespaceName ( ',' namespaceName )* ';' -> namespaceName ( namespaceName )* )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:121:32: namespaceName ( ',' namespaceName )* ';'
            {
                pushFollow(FOLLOW_namespaceName_in_namespaceNameList1502);
                namespaceName73 = namespaceName();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_namespaceName.add(namespaceName73.getTree());
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:121:46: ( ',' namespaceName )*
                loop19:
                while (true) {
                    int alt19 = 2;
                    int LA19_0 = input.LA(1);
                    if ((LA19_0 == COMMA)) {
                        alt19 = 1;
                    }

                    switch (alt19) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:121:47: ',' namespaceName
                        {
                            char_literal74 = (Token) match(input, COMMA, FOLLOW_COMMA_in_namespaceNameList1505);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_COMMA.add(char_literal74);

                            pushFollow(FOLLOW_namespaceName_in_namespaceNameList1507);
                            namespaceName75 = namespaceName();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_namespaceName.add(namespaceName75.getTree());
                        }
                        break;

                        default:
                            break loop19;
                    }
                }

                char_literal76 = (Token) match(input, SEMI, FOLLOW_SEMI_in_namespaceNameList1511);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_SEMI.add(char_literal76);

                // AST REWRITE
                // elements: namespaceName, namespaceName
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 121:71: -> namespaceName ( namespaceName )*
                    {
                        adaptor.addChild(root_0, stream_namespaceName.nextTree());
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:121:88: ( namespaceName )*
                        while (stream_namespaceName.hasNext()) {
                            adaptor.addChild(root_0, stream_namespaceName.nextTree());
                        }
                        stream_namespaceName.reset();

                    }


                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 22, namespaceNameList_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "block"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:1: block : ( declSection )* ( blockBody )? ;
    public final DelphiParser.block_return block() throws RecognitionException {
        DelphiParser.block_return retval = new DelphiParser.block_return();
        retval.start = input.LT(1);
        int block_StartIndex = input.index();

        Object root_0 = null;

        ParserRuleReturnScope declSection77 = null;
        ParserRuleReturnScope blockBody78 = null;


        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 23)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:30: ( ( declSection )* ( blockBody )? )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:32: ( declSection )* ( blockBody )?
            {
                root_0 = (Object) adaptor.nil();


                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:32: ( declSection )*
                loop20:
                while (true) {
                    int alt20 = 2;
                    switch (input.LA(1)) {
                        case LABEL: {
                            int LA20_2 = input.LA(2);
                            if ((synpred23_Delphi())) {
                                alt20 = 1;
                            }

                        }
                        break;
                        case CONST:
                        case RESOURCESTRING: {
                            int LA20_3 = input.LA(2);
                            if ((synpred23_Delphi())) {
                                alt20 = 1;
                            }

                        }
                        break;
                        case TYPE: {
                            int LA20_4 = input.LA(2);
                            if ((synpred23_Delphi())) {
                                alt20 = 1;
                            }

                        }
                        break;
                        case THREADVAR:
                        case VAR: {
                            int LA20_5 = input.LA(2);
                            if ((synpred23_Delphi())) {
                                alt20 = 1;
                            }

                        }
                        break;
                        case PROCEDURE: {
                            int LA20_6 = input.LA(2);
                            if ((synpred23_Delphi())) {
                                alt20 = 1;
                            }

                        }
                        break;
                        case FUNCTION: {
                            int LA20_7 = input.LA(2);
                            if ((synpred23_Delphi())) {
                                alt20 = 1;
                            }

                        }
                        break;
                        case LBRACK: {
                            int LA20_8 = input.LA(2);
                            if ((synpred23_Delphi())) {
                                alt20 = 1;
                            }

                        }
                        break;
                        case CLASS: {
                            int LA20_9 = input.LA(2);
                            if ((synpred23_Delphi())) {
                                alt20 = 1;
                            }

                        }
                        break;
                        case CONSTRUCTOR:
                        case DESTRUCTOR: {
                            int LA20_10 = input.LA(2);
                            if ((synpred23_Delphi())) {
                                alt20 = 1;
                            }

                        }
                        break;
                        case EXPORTS: {
                            int LA20_11 = input.LA(2);
                            if ((synpred23_Delphi())) {
                                alt20 = 1;
                            }

                        }
                        break;
                    }
                    switch (alt20) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:33: declSection
                        {
                            pushFollow(FOLLOW_declSection_in_block1584);
                            declSection77 = declSection();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, declSection77.getTree());

                        }
                        break;

                        default:
                            break loop20;
                    }
                }

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:47: ( blockBody )?
                int alt21 = 2;
                int LA21_0 = input.LA(1);
                if ((LA21_0 == BEGIN)) {
                    int LA21_1 = input.LA(2);
                    if ((synpred24_Delphi())) {
                        alt21 = 1;
                    }
                } else if ((LA21_0 == ASM)) {
                    int LA21_2 = input.LA(2);
                    if ((synpred24_Delphi())) {
                        alt21 = 1;
                    }
                }
                switch (alt21) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:48: blockBody
                    {
                        pushFollow(FOLLOW_blockBody_in_block1589);
                        blockBody78 = blockBody();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) adaptor.addChild(root_0, blockBody78.getTree());

                    }
                    break;

                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 23, block_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "blockBody"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:128:1: blockBody : ( compoundStatement | assemblerStatement );
    public final DelphiParser.blockBody_return blockBody() throws RecognitionException {
        DelphiParser.blockBody_return retval = new DelphiParser.blockBody_return();
        retval.start = input.LT(1);
        int blockBody_StartIndex = input.index();

        Object root_0 = null;

        ParserRuleReturnScope compoundStatement79 = null;
        ParserRuleReturnScope assemblerStatement80 = null;


        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 24)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:128:30: ( compoundStatement | assemblerStatement )
            int alt22 = 2;
            int LA22_0 = input.LA(1);
            if ((LA22_0 == BEGIN)) {
                alt22 = 1;
            } else if ((LA22_0 == ASM)) {
                alt22 = 2;
            } else {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae =
                        new NoViableAltException("", 22, 0, input);
                throw nvae;
            }

            switch (alt22) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:128:32: compoundStatement
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_compoundStatement_in_blockBody1647);
                    compoundStatement79 = compoundStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, compoundStatement79.getTree());

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:129:32: assemblerStatement
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_assemblerStatement_in_blockBody1680);
                    assemblerStatement80 = assemblerStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, assemblerStatement80.getTree());

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 24, blockBody_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "declSection"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:131:1: declSection : ( labelDeclSection | constSection | typeSection | varSection | exportedProcHeading | methodDecl | procDecl | exportsSection );
    public final DelphiParser.declSection_return declSection() throws RecognitionException {
        DelphiParser.declSection_return retval = new DelphiParser.declSection_return();
        retval.start = input.LT(1);
        int declSection_StartIndex = input.index();

        Object root_0 = null;

        ParserRuleReturnScope labelDeclSection81 = null;
        ParserRuleReturnScope constSection82 = null;
        ParserRuleReturnScope typeSection83 = null;
        ParserRuleReturnScope varSection84 = null;
        ParserRuleReturnScope exportedProcHeading85 = null;
        ParserRuleReturnScope methodDecl86 = null;
        ParserRuleReturnScope procDecl87 = null;
        ParserRuleReturnScope exportsSection88 = null;


        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 25)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:131:30: ( labelDeclSection | constSection | typeSection | varSection | exportedProcHeading | methodDecl | procDecl | exportsSection )
            int alt23 = 8;
            switch (input.LA(1)) {
                case LABEL: {
                    alt23 = 1;
                }
                break;
                case CONST:
                case RESOURCESTRING: {
                    alt23 = 2;
                }
                break;
                case TYPE: {
                    alt23 = 3;
                }
                break;
                case THREADVAR:
                case VAR: {
                    alt23 = 4;
                }
                break;
                case PROCEDURE: {
                    int LA23_5 = input.LA(2);
                    if ((synpred30_Delphi())) {
                        alt23 = 5;
                    } else if ((synpred31_Delphi())) {
                        alt23 = 6;
                    } else if ((synpred32_Delphi())) {
                        alt23 = 7;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try {
                            input.consume();
                            NoViableAltException nvae =
                                    new NoViableAltException("", 23, 5, input);
                            throw nvae;
                        } finally {
                            input.rewind(nvaeMark);
                        }
                    }

                }
                break;
                case FUNCTION: {
                    int LA23_6 = input.LA(2);
                    if ((synpred30_Delphi())) {
                        alt23 = 5;
                    } else if ((synpred31_Delphi())) {
                        alt23 = 6;
                    } else if ((synpred32_Delphi())) {
                        alt23 = 7;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try {
                            input.consume();
                            NoViableAltException nvae =
                                    new NoViableAltException("", 23, 6, input);
                            throw nvae;
                        } finally {
                            input.rewind(nvaeMark);
                        }
                    }

                }
                break;
                case LBRACK: {
                    int LA23_7 = input.LA(2);
                    if ((synpred31_Delphi())) {
                        alt23 = 6;
                    } else if ((synpred32_Delphi())) {
                        alt23 = 7;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try {
                            input.consume();
                            NoViableAltException nvae =
                                    new NoViableAltException("", 23, 7, input);
                            throw nvae;
                        } finally {
                            input.rewind(nvaeMark);
                        }
                    }

                }
                break;
                case CLASS:
                case CONSTRUCTOR:
                case DESTRUCTOR: {
                    alt23 = 6;
                }
                break;
                case EXPORTS: {
                    alt23 = 8;
                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae =
                            new NoViableAltException("", 23, 0, input);
                    throw nvae;
            }
            switch (alt23) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:131:32: labelDeclSection
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_labelDeclSection_in_declSection1734);
                    labelDeclSection81 = labelDeclSection();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, labelDeclSection81.getTree());

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:132:32: constSection
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_constSection_in_declSection1767);
                    constSection82 = constSection();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, constSection82.getTree());

                }
                break;
                case 3:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:133:32: typeSection
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_typeSection_in_declSection1800);
                    typeSection83 = typeSection();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, typeSection83.getTree());

                }
                break;
                case 4:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:134:32: varSection
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_varSection_in_declSection1833);
                    varSection84 = varSection();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, varSection84.getTree());

                }
                break;
                case 5:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:135:32: exportedProcHeading
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_exportedProcHeading_in_declSection1866);
                    exportedProcHeading85 = exportedProcHeading();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, exportedProcHeading85.getTree());

                }
                break;
                case 6:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:136:32: methodDecl
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_methodDecl_in_declSection1899);
                    methodDecl86 = methodDecl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, methodDecl86.getTree());

                }
                break;
                case 7:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:137:32: procDecl
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_procDecl_in_declSection1932);
                    procDecl87 = procDecl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, procDecl87.getTree());

                }
                break;
                case 8:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:138:32: exportsSection
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_exportsSection_in_declSection1965);
                    exportsSection88 = exportsSection();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, exportsSection88.getTree());

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 25, declSection_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "interfaceDecl"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:140:1: interfaceDecl : ( constSection | typeSection | varSection | exportedProcHeading | exportsSection | procDecl | methodDecl );
    public final DelphiParser.interfaceDecl_return interfaceDecl() throws RecognitionException {
        DelphiParser.interfaceDecl_return retval = new DelphiParser.interfaceDecl_return();
        retval.start = input.LT(1);
        int interfaceDecl_StartIndex = input.index();

        Object root_0 = null;

        ParserRuleReturnScope constSection89 = null;
        ParserRuleReturnScope typeSection90 = null;
        ParserRuleReturnScope varSection91 = null;
        ParserRuleReturnScope exportedProcHeading92 = null;
        ParserRuleReturnScope exportsSection93 = null;
        ParserRuleReturnScope procDecl94 = null;
        ParserRuleReturnScope methodDecl95 = null;


        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 26)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:140:30: ( constSection | typeSection | varSection | exportedProcHeading | exportsSection | procDecl | methodDecl )
            int alt24 = 7;
            switch (input.LA(1)) {
                case CONST:
                case RESOURCESTRING: {
                    alt24 = 1;
                }
                break;
                case TYPE: {
                    alt24 = 2;
                }
                break;
                case THREADVAR:
                case VAR: {
                    alt24 = 3;
                }
                break;
                case PROCEDURE: {
                    int LA24_4 = input.LA(2);
                    if ((synpred36_Delphi())) {
                        alt24 = 4;
                    } else if ((synpred38_Delphi())) {
                        alt24 = 6;
                    } else if ((true)) {
                        alt24 = 7;
                    }

                }
                break;
                case FUNCTION: {
                    int LA24_5 = input.LA(2);
                    if ((synpred36_Delphi())) {
                        alt24 = 4;
                    } else if ((synpred38_Delphi())) {
                        alt24 = 6;
                    } else if ((true)) {
                        alt24 = 7;
                    }

                }
                break;
                case EXPORTS: {
                    alt24 = 5;
                }
                break;
                case LBRACK: {
                    int LA24_7 = input.LA(2);
                    if ((synpred38_Delphi())) {
                        alt24 = 6;
                    } else if ((true)) {
                        alt24 = 7;
                    }

                }
                break;
                case CLASS:
                case CONSTRUCTOR:
                case DESTRUCTOR: {
                    alt24 = 7;
                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae =
                            new NoViableAltException("", 24, 0, input);
                    throw nvae;
            }
            switch (alt24) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:140:32: constSection
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_constSection_in_interfaceDecl2017);
                    constSection89 = constSection();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, constSection89.getTree());

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:141:32: typeSection
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_typeSection_in_interfaceDecl2050);
                    typeSection90 = typeSection();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, typeSection90.getTree());

                }
                break;
                case 3:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:142:32: varSection
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_varSection_in_interfaceDecl2083);
                    varSection91 = varSection();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, varSection91.getTree());

                }
                break;
                case 4:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:143:32: exportedProcHeading
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_exportedProcHeading_in_interfaceDecl2116);
                    exportedProcHeading92 = exportedProcHeading();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, exportedProcHeading92.getTree());

                }
                break;
                case 5:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:144:32: exportsSection
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_exportsSection_in_interfaceDecl2149);
                    exportsSection93 = exportsSection();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, exportsSection93.getTree());

                }
                break;
                case 6:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:145:32: procDecl
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_procDecl_in_interfaceDecl2182);
                    procDecl94 = procDecl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, procDecl94.getTree());

                }
                break;
                case 7:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:146:32: methodDecl
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_methodDecl_in_interfaceDecl2215);
                    methodDecl95 = methodDecl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, methodDecl95.getTree());

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 26, interfaceDecl_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "labelDeclSection"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:148:1: labelDeclSection : 'label' label ( ',' label )* ';' ;
    public final DelphiParser.labelDeclSection_return labelDeclSection() throws RecognitionException {
        DelphiParser.labelDeclSection_return retval = new DelphiParser.labelDeclSection_return();
        retval.start = input.LT(1);
        int labelDeclSection_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal96 = null;
        Token char_literal98 = null;
        Token char_literal100 = null;
        ParserRuleReturnScope label97 = null;
        ParserRuleReturnScope label99 = null;

        Object string_literal96_tree = null;
        Object char_literal98_tree = null;
        Object char_literal100_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 27)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:148:30: ( 'label' label ( ',' label )* ';' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:148:32: 'label' label ( ',' label )* ';'
            {
                root_0 = (Object) adaptor.nil();


                string_literal96 = (Token) match(input, LABEL, FOLLOW_LABEL_in_labelDeclSection2264);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    string_literal96_tree = (Object) adaptor.create(string_literal96);
                    adaptor.addChild(root_0, string_literal96_tree);
                }

                pushFollow(FOLLOW_label_in_labelDeclSection2266);
                label97 = label();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, label97.getTree());

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:148:46: ( ',' label )*
                loop25:
                while (true) {
                    int alt25 = 2;
                    int LA25_0 = input.LA(1);
                    if ((LA25_0 == COMMA)) {
                        alt25 = 1;
                    }

                    switch (alt25) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:148:47: ',' label
                        {
                            char_literal98 = (Token) match(input, COMMA, FOLLOW_COMMA_in_labelDeclSection2269);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) {
                                char_literal98_tree = (Object) adaptor.create(char_literal98);
                                adaptor.addChild(root_0, char_literal98_tree);
                            }

                            pushFollow(FOLLOW_label_in_labelDeclSection2271);
                            label99 = label();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, label99.getTree());

                        }
                        break;

                        default:
                            break loop25;
                    }
                }

                char_literal100 = (Token) match(input, SEMI, FOLLOW_SEMI_in_labelDeclSection2275);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    char_literal100_tree = (Object) adaptor.create(char_literal100);
                    adaptor.addChild(root_0, char_literal100_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 27, labelDeclSection_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "constSection"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:150:1: constSection : constKey ( constDeclaration )* -> ^( constKey ( constDeclaration )* ) ;
    public final DelphiParser.constSection_return constSection() throws RecognitionException {
        DelphiParser.constSection_return retval = new DelphiParser.constSection_return();
        retval.start = input.LT(1);
        int constSection_StartIndex = input.index();

        Object root_0 = null;

        ParserRuleReturnScope constKey101 = null;
        ParserRuleReturnScope constDeclaration102 = null;

        RewriteRuleSubtreeStream stream_constDeclaration = new RewriteRuleSubtreeStream(adaptor, "rule constDeclaration");
        RewriteRuleSubtreeStream stream_constKey = new RewriteRuleSubtreeStream(adaptor, "rule constKey");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 28)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:150:30: ( constKey ( constDeclaration )* -> ^( constKey ( constDeclaration )* ) )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:150:32: constKey ( constDeclaration )*
            {
                pushFollow(FOLLOW_constKey_in_constSection2328);
                constKey101 = constKey();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_constKey.add(constKey101.getTree());
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:150:41: ( constDeclaration )*
                loop26:
                while (true) {
                    int alt26 = 2;
                    alt26 = dfa26.predict(input);
                    switch (alt26) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:150:42: constDeclaration
                        {
                            pushFollow(FOLLOW_constDeclaration_in_constSection2331);
                            constDeclaration102 = constDeclaration();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_constDeclaration.add(constDeclaration102.getTree());
                        }
                        break;

                        default:
                            break loop26;
                    }
                }

                // AST REWRITE
                // elements: constKey, constDeclaration
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 150:61: -> ^( constKey ( constDeclaration )* )
                    {
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:150:64: ^( constKey ( constDeclaration )* )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot(stream_constKey.nextNode(), root_1);
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:150:75: ( constDeclaration )*
                            while (stream_constDeclaration.hasNext()) {
                                adaptor.addChild(root_1, stream_constDeclaration.nextTree());
                            }
                            stream_constDeclaration.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 28, constSection_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "constKey"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:152:1: constKey : ( 'const' | 'resourcestring' );
    public final DelphiParser.constKey_return constKey() throws RecognitionException {
        DelphiParser.constKey_return retval = new DelphiParser.constKey_return();
        retval.start = input.LT(1);
        int constKey_StartIndex = input.index();

        Object root_0 = null;

        Token set103 = null;

        Object set103_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 29)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:152:30: ( 'const' | 'resourcestring' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
            {
                root_0 = (Object) adaptor.nil();


                set103 = input.LT(1);
                if (input.LA(1) == CONST || input.LA(1) == RESOURCESTRING) {
                    input.consume();
                    if (state.backtracking == 0) adaptor.addChild(root_0, (Object) adaptor.create(set103));
                    state.errorRecovery = false;
                    state.failed = false;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 29, constKey_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "constDeclaration"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:155:1: constDeclaration : ( customAttribute )? ident ( ':' typeDecl )? '=' constExpression ( hintingDirective )* ';' -> ident ( typeDecl )? '=' constExpression ;
    public final DelphiParser.constDeclaration_return constDeclaration() throws RecognitionException {
        DelphiParser.constDeclaration_return retval = new DelphiParser.constDeclaration_return();
        retval.start = input.LT(1);
        int constDeclaration_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal106 = null;
        Token char_literal108 = null;
        Token char_literal111 = null;
        ParserRuleReturnScope customAttribute104 = null;
        ParserRuleReturnScope ident105 = null;
        ParserRuleReturnScope typeDecl107 = null;
        ParserRuleReturnScope constExpression109 = null;
        ParserRuleReturnScope hintingDirective110 = null;

        Object char_literal106_tree = null;
        Object char_literal108_tree = null;
        Object char_literal111_tree = null;
        RewriteRuleTokenStream stream_EQUAL = new RewriteRuleTokenStream(adaptor, "token EQUAL");
        RewriteRuleTokenStream stream_SEMI = new RewriteRuleTokenStream(adaptor, "token SEMI");
        RewriteRuleTokenStream stream_COLON = new RewriteRuleTokenStream(adaptor, "token COLON");
        RewriteRuleSubtreeStream stream_customAttribute = new RewriteRuleSubtreeStream(adaptor, "rule customAttribute");
        RewriteRuleSubtreeStream stream_ident = new RewriteRuleSubtreeStream(adaptor, "rule ident");
        RewriteRuleSubtreeStream stream_constExpression = new RewriteRuleSubtreeStream(adaptor, "rule constExpression");
        RewriteRuleSubtreeStream stream_hintingDirective = new RewriteRuleSubtreeStream(adaptor, "rule hintingDirective");
        RewriteRuleSubtreeStream stream_typeDecl = new RewriteRuleSubtreeStream(adaptor, "rule typeDecl");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 30)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:155:30: ( ( customAttribute )? ident ( ':' typeDecl )? '=' constExpression ( hintingDirective )* ';' -> ident ( typeDecl )? '=' constExpression )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:155:32: ( customAttribute )? ident ( ':' typeDecl )? '=' constExpression ( hintingDirective )* ';'
            {
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:155:32: ( customAttribute )?
                int alt27 = 2;
                switch (input.LA(1)) {
                    case LBRACK: {
                        alt27 = 1;
                    }
                    break;
                    case TkIdentifier: {
                        int LA27_2 = input.LA(2);
                        if ((synpred42_Delphi())) {
                            alt27 = 1;
                        }
                    }
                    break;
                    case 200: {
                        int LA27_3 = input.LA(2);
                        if ((synpred42_Delphi())) {
                            alt27 = 1;
                        }
                    }
                    break;
                    case ADD:
                    case ANSISTRING:
                    case AT:
                    case BREAK:
                    case CONTAINS:
                    case CONTINUE:
                    case DEFAULT:
                    case EXIT:
                    case EXPORT:
                    case FINAL:
                    case IMPLEMENTS:
                    case INDEX:
                    case LOCAL:
                    case MESSAGE:
                    case NAME:
                    case OBJECT:
                    case OPERATOR:
                    case OUT:
                    case POINTER:
                    case READ:
                    case READONLY:
                    case REFERENCE:
                    case REGISTER:
                    case REMOVE:
                    case STORED:
                    case STRICT:
                    case STRING:
                    case VARIANT:
                    case WRITE: {
                        int LA27_4 = input.LA(2);
                        if ((synpred42_Delphi())) {
                            alt27 = 1;
                        }
                    }
                    break;
                }
                switch (alt27) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:155:33: customAttribute
                    {
                        pushFollow(FOLLOW_customAttribute_in_constDeclaration2486);
                        customAttribute104 = customAttribute();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_customAttribute.add(customAttribute104.getTree());
                    }
                    break;

                }

                pushFollow(FOLLOW_ident_in_constDeclaration2490);
                ident105 = ident();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_ident.add(ident105.getTree());
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:155:57: ( ':' typeDecl )?
                int alt28 = 2;
                int LA28_0 = input.LA(1);
                if ((LA28_0 == COLON)) {
                    alt28 = 1;
                }
                switch (alt28) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:155:58: ':' typeDecl
                    {
                        char_literal106 = (Token) match(input, COLON, FOLLOW_COLON_in_constDeclaration2493);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_COLON.add(char_literal106);

                        pushFollow(FOLLOW_typeDecl_in_constDeclaration2495);
                        typeDecl107 = typeDecl();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_typeDecl.add(typeDecl107.getTree());
                    }
                    break;

                }

                char_literal108 = (Token) match(input, EQUAL, FOLLOW_EQUAL_in_constDeclaration2499);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_EQUAL.add(char_literal108);

                pushFollow(FOLLOW_constExpression_in_constDeclaration2501);
                constExpression109 = constExpression();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_constExpression.add(constExpression109.getTree());
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:155:93: ( hintingDirective )*
                loop29:
                while (true) {
                    int alt29 = 2;
                    int LA29_0 = input.LA(1);
                    if ((LA29_0 == DEPRECATED || LA29_0 == EXPERIMENTAL || LA29_0 == LIBRARY || LA29_0 == PLATFORM)) {
                        alt29 = 1;
                    }

                    switch (alt29) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:155:94: hintingDirective
                        {
                            pushFollow(FOLLOW_hintingDirective_in_constDeclaration2504);
                            hintingDirective110 = hintingDirective();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_hintingDirective.add(hintingDirective110.getTree());
                        }
                        break;

                        default:
                            break loop29;
                    }
                }

                char_literal111 = (Token) match(input, SEMI, FOLLOW_SEMI_in_constDeclaration2508);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_SEMI.add(char_literal111);

                // AST REWRITE
                // elements: ident, typeDecl, constExpression, EQUAL
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 155:117: -> ident ( typeDecl )? '=' constExpression
                    {
                        adaptor.addChild(root_0, stream_ident.nextTree());
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:155:126: ( typeDecl )?
                        if (stream_typeDecl.hasNext()) {
                            adaptor.addChild(root_0, stream_typeDecl.nextTree());
                        }
                        stream_typeDecl.reset();

                        adaptor.addChild(root_0, stream_EQUAL.nextNode());
                        adaptor.addChild(root_0, stream_constExpression.nextTree());
                    }


                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 30, constDeclaration_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "typeSection"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:157:1: typeSection : 'type' typeDeclaration ( typeDeclaration )* -> ^( 'type' typeDeclaration ( typeDeclaration )* ) ;
    public final DelphiParser.typeSection_return typeSection() throws RecognitionException {
        DelphiParser.typeSection_return retval = new DelphiParser.typeSection_return();
        retval.start = input.LT(1);
        int typeSection_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal112 = null;
        ParserRuleReturnScope typeDeclaration113 = null;
        ParserRuleReturnScope typeDeclaration114 = null;

        Object string_literal112_tree = null;
        RewriteRuleTokenStream stream_TYPE = new RewriteRuleTokenStream(adaptor, "token TYPE");
        RewriteRuleSubtreeStream stream_typeDeclaration = new RewriteRuleSubtreeStream(adaptor, "rule typeDeclaration");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 31)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:157:30: ( 'type' typeDeclaration ( typeDeclaration )* -> ^( 'type' typeDeclaration ( typeDeclaration )* ) )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:157:32: 'type' typeDeclaration ( typeDeclaration )*
            {
                string_literal112 = (Token) match(input, TYPE, FOLLOW_TYPE_in_typeSection2575);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_TYPE.add(string_literal112);

                pushFollow(FOLLOW_typeDeclaration_in_typeSection2577);
                typeDeclaration113 = typeDeclaration();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_typeDeclaration.add(typeDeclaration113.getTree());
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:157:55: ( typeDeclaration )*
                loop30:
                while (true) {
                    int alt30 = 2;
                    alt30 = dfa30.predict(input);
                    switch (alt30) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:157:56: typeDeclaration
                        {
                            pushFollow(FOLLOW_typeDeclaration_in_typeSection2580);
                            typeDeclaration114 = typeDeclaration();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_typeDeclaration.add(typeDeclaration114.getTree());
                        }
                        break;

                        default:
                            break loop30;
                    }
                }

                // AST REWRITE
                // elements: typeDeclaration, typeDeclaration, TYPE
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 157:74: -> ^( 'type' typeDeclaration ( typeDeclaration )* )
                    {
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:157:77: ^( 'type' typeDeclaration ( typeDeclaration )* )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot(stream_TYPE.nextNode(), root_1);
                            adaptor.addChild(root_1, stream_typeDeclaration.nextTree());
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:157:102: ( typeDeclaration )*
                            while (stream_typeDeclaration.hasNext()) {
                                adaptor.addChild(root_1, stream_typeDeclaration.nextTree());
                            }
                            stream_typeDeclaration.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 31, typeSection_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "typeDeclaration"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:159:1: typeDeclaration : ( customAttribute )? genericTypeIdent '=' typeDecl ( hintingDirective )* ';' -> ^( TkNewType ( customAttribute )? ^( genericTypeIdent typeDecl ( hintingDirective )* ) ) ;
    public final DelphiParser.typeDeclaration_return typeDeclaration() throws RecognitionException {
        DelphiParser.typeDeclaration_return retval = new DelphiParser.typeDeclaration_return();
        retval.start = input.LT(1);
        int typeDeclaration_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal117 = null;
        Token char_literal120 = null;
        ParserRuleReturnScope customAttribute115 = null;
        ParserRuleReturnScope genericTypeIdent116 = null;
        ParserRuleReturnScope typeDecl118 = null;
        ParserRuleReturnScope hintingDirective119 = null;

        Object char_literal117_tree = null;
        Object char_literal120_tree = null;
        RewriteRuleTokenStream stream_EQUAL = new RewriteRuleTokenStream(adaptor, "token EQUAL");
        RewriteRuleTokenStream stream_SEMI = new RewriteRuleTokenStream(adaptor, "token SEMI");
        RewriteRuleSubtreeStream stream_customAttribute = new RewriteRuleSubtreeStream(adaptor, "rule customAttribute");
        RewriteRuleSubtreeStream stream_genericTypeIdent = new RewriteRuleSubtreeStream(adaptor, "rule genericTypeIdent");
        RewriteRuleSubtreeStream stream_hintingDirective = new RewriteRuleSubtreeStream(adaptor, "rule hintingDirective");
        RewriteRuleSubtreeStream stream_typeDecl = new RewriteRuleSubtreeStream(adaptor, "rule typeDecl");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 32)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:159:30: ( ( customAttribute )? genericTypeIdent '=' typeDecl ( hintingDirective )* ';' -> ^( TkNewType ( customAttribute )? ^( genericTypeIdent typeDecl ( hintingDirective )* ) ) )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:159:32: ( customAttribute )? genericTypeIdent '=' typeDecl ( hintingDirective )* ';'
            {
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:159:32: ( customAttribute )?
                int alt31 = 2;
                switch (input.LA(1)) {
                    case LBRACK: {
                        alt31 = 1;
                    }
                    break;
                    case TkIdentifier: {
                        int LA31_2 = input.LA(2);
                        if ((synpred46_Delphi())) {
                            alt31 = 1;
                        }
                    }
                    break;
                    case 200: {
                        int LA31_3 = input.LA(2);
                        if ((synpred46_Delphi())) {
                            alt31 = 1;
                        }
                    }
                    break;
                    case ADD:
                    case ANSISTRING:
                    case AT:
                    case BREAK:
                    case CONTAINS:
                    case CONTINUE:
                    case DEFAULT:
                    case EXIT:
                    case EXPORT:
                    case FINAL:
                    case IMPLEMENTS:
                    case INDEX:
                    case LOCAL:
                    case MESSAGE:
                    case NAME:
                    case OBJECT:
                    case OPERATOR:
                    case OUT:
                    case POINTER:
                    case READ:
                    case READONLY:
                    case REFERENCE:
                    case REGISTER:
                    case REMOVE:
                    case STORED:
                    case STRICT:
                    case STRING:
                    case VARIANT:
                    case WRITE: {
                        int LA31_4 = input.LA(2);
                        if ((synpred46_Delphi())) {
                            alt31 = 1;
                        }
                    }
                    break;
                }
                switch (alt31) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:159:33: customAttribute
                    {
                        pushFollow(FOLLOW_customAttribute_in_typeDeclaration2646);
                        customAttribute115 = customAttribute();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_customAttribute.add(customAttribute115.getTree());
                    }
                    break;

                }

                pushFollow(FOLLOW_genericTypeIdent_in_typeDeclaration2650);
                genericTypeIdent116 = genericTypeIdent();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_genericTypeIdent.add(genericTypeIdent116.getTree());
                char_literal117 = (Token) match(input, EQUAL, FOLLOW_EQUAL_in_typeDeclaration2652);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_EQUAL.add(char_literal117);

                pushFollow(FOLLOW_typeDecl_in_typeDeclaration2654);
                typeDecl118 = typeDecl();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_typeDecl.add(typeDecl118.getTree());
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:159:81: ( hintingDirective )*
                loop32:
                while (true) {
                    int alt32 = 2;
                    int LA32_0 = input.LA(1);
                    if ((LA32_0 == DEPRECATED || LA32_0 == EXPERIMENTAL || LA32_0 == LIBRARY || LA32_0 == PLATFORM)) {
                        alt32 = 1;
                    }

                    switch (alt32) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:159:82: hintingDirective
                        {
                            pushFollow(FOLLOW_hintingDirective_in_typeDeclaration2657);
                            hintingDirective119 = hintingDirective();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_hintingDirective.add(hintingDirective119.getTree());
                        }
                        break;

                        default:
                            break loop32;
                    }
                }

                char_literal120 = (Token) match(input, SEMI, FOLLOW_SEMI_in_typeDeclaration2661);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_SEMI.add(char_literal120);

                // AST REWRITE
                // elements: genericTypeIdent, hintingDirective, customAttribute, typeDecl
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 159:105: -> ^( TkNewType ( customAttribute )? ^( genericTypeIdent typeDecl ( hintingDirective )* ) )
                    {
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:159:108: ^( TkNewType ( customAttribute )? ^( genericTypeIdent typeDecl ( hintingDirective )* ) )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(TkNewType, "TkNewType"), root_1);
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:159:120: ( customAttribute )?
                            if (stream_customAttribute.hasNext()) {
                                adaptor.addChild(root_1, stream_customAttribute.nextTree());
                            }
                            stream_customAttribute.reset();

                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:159:139: ^( genericTypeIdent typeDecl ( hintingDirective )* )
                            {
                                Object root_2 = (Object) adaptor.nil();
                                root_2 = (Object) adaptor.becomeRoot(stream_genericTypeIdent.nextNode(), root_2);
                                adaptor.addChild(root_2, stream_typeDecl.nextTree());
                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:159:167: ( hintingDirective )*
                                while (stream_hintingDirective.hasNext()) {
                                    adaptor.addChild(root_2, stream_hintingDirective.nextTree());
                                }
                                stream_hintingDirective.reset();

                                adaptor.addChild(root_1, root_2);
                            }

                            adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 32, typeDeclaration_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "varSection"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:161:1: varSection : varKey varDeclaration ( varDeclaration )* -> ^( varKey varDeclaration ( varDeclaration )* ) ;
    public final DelphiParser.varSection_return varSection() throws RecognitionException {
        DelphiParser.varSection_return retval = new DelphiParser.varSection_return();
        retval.start = input.LT(1);
        int varSection_StartIndex = input.index();

        Object root_0 = null;

        ParserRuleReturnScope varKey121 = null;
        ParserRuleReturnScope varDeclaration122 = null;
        ParserRuleReturnScope varDeclaration123 = null;

        RewriteRuleSubtreeStream stream_varDeclaration = new RewriteRuleSubtreeStream(adaptor, "rule varDeclaration");
        RewriteRuleSubtreeStream stream_varKey = new RewriteRuleSubtreeStream(adaptor, "rule varKey");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 33)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:161:30: ( varKey varDeclaration ( varDeclaration )* -> ^( varKey varDeclaration ( varDeclaration )* ) )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:161:32: varKey varDeclaration ( varDeclaration )*
            {
                pushFollow(FOLLOW_varKey_in_varSection2738);
                varKey121 = varKey();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_varKey.add(varKey121.getTree());
                pushFollow(FOLLOW_varDeclaration_in_varSection2740);
                varDeclaration122 = varDeclaration();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_varDeclaration.add(varDeclaration122.getTree());
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:161:54: ( varDeclaration )*
                loop33:
                while (true) {
                    int alt33 = 2;
                    alt33 = dfa33.predict(input);
                    switch (alt33) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:161:55: varDeclaration
                        {
                            pushFollow(FOLLOW_varDeclaration_in_varSection2743);
                            varDeclaration123 = varDeclaration();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_varDeclaration.add(varDeclaration123.getTree());
                        }
                        break;

                        default:
                            break loop33;
                    }
                }

                // AST REWRITE
                // elements: varDeclaration, varKey, varDeclaration
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 161:72: -> ^( varKey varDeclaration ( varDeclaration )* )
                    {
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:161:75: ^( varKey varDeclaration ( varDeclaration )* )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot(stream_varKey.nextNode(), root_1);
                            adaptor.addChild(root_1, stream_varDeclaration.nextTree());
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:161:99: ( varDeclaration )*
                            while (stream_varDeclaration.hasNext()) {
                                adaptor.addChild(root_1, stream_varDeclaration.nextTree());
                            }
                            stream_varDeclaration.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 33, varSection_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "varKey"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:163:1: varKey : ( 'var' | 'threadvar' );
    public final DelphiParser.varKey_return varKey() throws RecognitionException {
        DelphiParser.varKey_return retval = new DelphiParser.varKey_return();
        retval.start = input.LT(1);
        int varKey_StartIndex = input.index();

        Object root_0 = null;

        Token set124 = null;

        Object set124_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 34)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:163:30: ( 'var' | 'threadvar' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
            {
                root_0 = (Object) adaptor.nil();


                set124 = input.LT(1);
                if (input.LA(1) == THREADVAR || input.LA(1) == VAR) {
                    input.consume();
                    if (state.backtracking == 0) adaptor.addChild(root_0, (Object) adaptor.create(set124));
                    state.errorRecovery = false;
                    state.failed = false;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 34, varKey_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "varDeclaration"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:1: varDeclaration : ( customAttribute )? identListFlat ':' typeDecl ( varValueSpec )? ( hintingDirective )* ';' -> ( customAttribute )? ^( TkVariableIdents identListFlat ) ^( TkVariableType typeDecl ) ;
    public final DelphiParser.varDeclaration_return varDeclaration() throws RecognitionException {
        DelphiParser.varDeclaration_return retval = new DelphiParser.varDeclaration_return();
        retval.start = input.LT(1);
        int varDeclaration_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal127 = null;
        Token char_literal131 = null;
        ParserRuleReturnScope customAttribute125 = null;
        ParserRuleReturnScope identListFlat126 = null;
        ParserRuleReturnScope typeDecl128 = null;
        ParserRuleReturnScope varValueSpec129 = null;
        ParserRuleReturnScope hintingDirective130 = null;

        Object char_literal127_tree = null;
        Object char_literal131_tree = null;
        RewriteRuleTokenStream stream_SEMI = new RewriteRuleTokenStream(adaptor, "token SEMI");
        RewriteRuleTokenStream stream_COLON = new RewriteRuleTokenStream(adaptor, "token COLON");
        RewriteRuleSubtreeStream stream_customAttribute = new RewriteRuleSubtreeStream(adaptor, "rule customAttribute");
        RewriteRuleSubtreeStream stream_identListFlat = new RewriteRuleSubtreeStream(adaptor, "rule identListFlat");
        RewriteRuleSubtreeStream stream_hintingDirective = new RewriteRuleSubtreeStream(adaptor, "rule hintingDirective");
        RewriteRuleSubtreeStream stream_varValueSpec = new RewriteRuleSubtreeStream(adaptor, "rule varValueSpec");
        RewriteRuleSubtreeStream stream_typeDecl = new RewriteRuleSubtreeStream(adaptor, "rule typeDecl");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 35)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:30: ( ( customAttribute )? identListFlat ':' typeDecl ( varValueSpec )? ( hintingDirective )* ';' -> ( customAttribute )? ^( TkVariableIdents identListFlat ) ^( TkVariableType typeDecl ) )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:32: ( customAttribute )? identListFlat ':' typeDecl ( varValueSpec )? ( hintingDirective )* ';'
            {
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:32: ( customAttribute )?
                int alt34 = 2;
                switch (input.LA(1)) {
                    case LBRACK: {
                        alt34 = 1;
                    }
                    break;
                    case TkIdentifier: {
                        int LA34_2 = input.LA(2);
                        if ((synpred50_Delphi())) {
                            alt34 = 1;
                        }
                    }
                    break;
                    case 200: {
                        int LA34_3 = input.LA(2);
                        if ((synpred50_Delphi())) {
                            alt34 = 1;
                        }
                    }
                    break;
                    case ADD:
                    case ANSISTRING:
                    case AT:
                    case BREAK:
                    case CONTAINS:
                    case CONTINUE:
                    case DEFAULT:
                    case EXIT:
                    case EXPORT:
                    case FINAL:
                    case IMPLEMENTS:
                    case INDEX:
                    case LOCAL:
                    case MESSAGE:
                    case NAME:
                    case OBJECT:
                    case OPERATOR:
                    case OUT:
                    case POINTER:
                    case READ:
                    case READONLY:
                    case REFERENCE:
                    case REGISTER:
                    case REMOVE:
                    case STORED:
                    case STRICT:
                    case STRING:
                    case VARIANT:
                    case WRITE: {
                        int LA34_4 = input.LA(2);
                        if ((synpred50_Delphi())) {
                            alt34 = 1;
                        }
                    }
                    break;
                }
                switch (alt34) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:33: customAttribute
                    {
                        pushFollow(FOLLOW_customAttribute_in_varDeclaration2903);
                        customAttribute125 = customAttribute();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_customAttribute.add(customAttribute125.getTree());
                    }
                    break;

                }

                pushFollow(FOLLOW_identListFlat_in_varDeclaration2907);
                identListFlat126 = identListFlat();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_identListFlat.add(identListFlat126.getTree());
                char_literal127 = (Token) match(input, COLON, FOLLOW_COLON_in_varDeclaration2909);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_COLON.add(char_literal127);

                pushFollow(FOLLOW_typeDecl_in_varDeclaration2911);
                typeDecl128 = typeDecl();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_typeDecl.add(typeDecl128.getTree());
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:78: ( varValueSpec )?
                int alt35 = 2;
                int LA35_0 = input.LA(1);
                if ((LA35_0 == ABSOLUTE || LA35_0 == EQUAL)) {
                    alt35 = 1;
                }
                switch (alt35) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:79: varValueSpec
                    {
                        pushFollow(FOLLOW_varValueSpec_in_varDeclaration2914);
                        varValueSpec129 = varValueSpec();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_varValueSpec.add(varValueSpec129.getTree());
                    }
                    break;

                }

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:94: ( hintingDirective )*
                loop36:
                while (true) {
                    int alt36 = 2;
                    int LA36_0 = input.LA(1);
                    if ((LA36_0 == DEPRECATED || LA36_0 == EXPERIMENTAL || LA36_0 == LIBRARY || LA36_0 == PLATFORM)) {
                        alt36 = 1;
                    }

                    switch (alt36) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:95: hintingDirective
                        {
                            pushFollow(FOLLOW_hintingDirective_in_varDeclaration2919);
                            hintingDirective130 = hintingDirective();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_hintingDirective.add(hintingDirective130.getTree());
                        }
                        break;

                        default:
                            break loop36;
                    }
                }

                char_literal131 = (Token) match(input, SEMI, FOLLOW_SEMI_in_varDeclaration2923);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_SEMI.add(char_literal131);

                // AST REWRITE
                // elements: identListFlat, typeDecl, customAttribute
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 167:118: -> ( customAttribute )? ^( TkVariableIdents identListFlat ) ^( TkVariableType typeDecl )
                    {
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:121: ( customAttribute )?
                        if (stream_customAttribute.hasNext()) {
                            adaptor.addChild(root_0, stream_customAttribute.nextTree());
                        }
                        stream_customAttribute.reset();

                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:140: ^( TkVariableIdents identListFlat )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(TkVariableIdents, "TkVariableIdents"), root_1);
                            adaptor.addChild(root_1, stream_identListFlat.nextTree());
                            adaptor.addChild(root_0, root_1);
                        }

                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:174: ^( TkVariableType typeDecl )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(TkVariableType, "TkVariableType"), root_1);
                            adaptor.addChild(root_1, stream_typeDecl.nextTree());
                            adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 35, varDeclaration_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "varValueSpec"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:169:1: varValueSpec : ( 'absolute' ident | 'absolute' constExpression | '=' constExpression );
    public final DelphiParser.varValueSpec_return varValueSpec() throws RecognitionException {
        DelphiParser.varValueSpec_return retval = new DelphiParser.varValueSpec_return();
        retval.start = input.LT(1);
        int varValueSpec_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal132 = null;
        Token string_literal134 = null;
        Token char_literal136 = null;
        ParserRuleReturnScope ident133 = null;
        ParserRuleReturnScope constExpression135 = null;
        ParserRuleReturnScope constExpression137 = null;

        Object string_literal132_tree = null;
        Object string_literal134_tree = null;
        Object char_literal136_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 36)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:169:30: ( 'absolute' ident | 'absolute' constExpression | '=' constExpression )
            int alt37 = 3;
            int LA37_0 = input.LA(1);
            if ((LA37_0 == ABSOLUTE)) {
                switch (input.LA(2)) {
                    case TkIdentifier: {
                        int LA37_3 = input.LA(3);
                        if ((synpred53_Delphi())) {
                            alt37 = 1;
                        } else if ((synpred54_Delphi())) {
                            alt37 = 2;
                        } else {
                            if (state.backtracking > 0) {
                                state.failed = true;
                                return retval;
                            }
                            int nvaeMark = input.mark();
                            try {
                                for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
                                    input.consume();
                                }
                                NoViableAltException nvae =
                                        new NoViableAltException("", 37, 3, input);
                                throw nvae;
                            } finally {
                                input.rewind(nvaeMark);
                            }
                        }

                    }
                    break;
                    case 200: {
                        int LA37_4 = input.LA(3);
                        if ((LA37_4 == TkIdentifier)) {
                            int LA37_8 = input.LA(4);
                            if ((synpred53_Delphi())) {
                                alt37 = 1;
                            } else if ((synpred54_Delphi())) {
                                alt37 = 2;
                            } else {
                                if (state.backtracking > 0) {
                                    state.failed = true;
                                    return retval;
                                }
                                int nvaeMark = input.mark();
                                try {
                                    for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
                                        input.consume();
                                    }
                                    NoViableAltException nvae =
                                            new NoViableAltException("", 37, 8, input);
                                    throw nvae;
                                } finally {
                                    input.rewind(nvaeMark);
                                }
                            }

                        } else {
                            if (state.backtracking > 0) {
                                state.failed = true;
                                return retval;
                            }
                            int nvaeMark = input.mark();
                            try {
                                for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
                                    input.consume();
                                }
                                NoViableAltException nvae =
                                        new NoViableAltException("", 37, 4, input);
                                throw nvae;
                            } finally {
                                input.rewind(nvaeMark);
                            }
                        }

                    }
                    break;
                    case ADD:
                    case ANSISTRING:
                    case AT:
                    case BREAK:
                    case CONTAINS:
                    case CONTINUE:
                    case DEFAULT:
                    case EXIT:
                    case EXPORT:
                    case FINAL:
                    case IMPLEMENTS:
                    case INDEX:
                    case LOCAL:
                    case MESSAGE:
                    case NAME:
                    case OBJECT:
                    case OPERATOR:
                    case OUT:
                    case POINTER:
                    case READ:
                    case READONLY:
                    case REFERENCE:
                    case REGISTER:
                    case REMOVE:
                    case STORED:
                    case STRICT:
                    case STRING:
                    case VARIANT:
                    case WRITE: {
                        int LA37_5 = input.LA(3);
                        if ((synpred53_Delphi())) {
                            alt37 = 1;
                        } else if ((synpred54_Delphi())) {
                            alt37 = 2;
                        } else {
                            if (state.backtracking > 0) {
                                state.failed = true;
                                return retval;
                            }
                            int nvaeMark = input.mark();
                            try {
                                for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
                                    input.consume();
                                }
                                NoViableAltException nvae =
                                        new NoViableAltException("", 37, 5, input);
                                throw nvae;
                            } finally {
                                input.rewind(nvaeMark);
                            }
                        }

                    }
                    break;
                    case EOF:
                    case AND:
                    case AS:
                    case AT2:
                    case ControlString:
                    case DEPRECATED:
                    case DIV:
                    case DOT:
                    case EQUAL:
                    case EXPERIMENTAL:
                    case FALSE:
                    case FUNCTION:
                    case GE:
                    case GT:
                    case IN:
                    case INHERITED:
                    case IS:
                    case LBRACK:
                    case LE:
                    case LIBRARY:
                    case LPAREN:
                    case LT:
                    case MINUS:
                    case MOD:
                    case NIL:
                    case NOT:
                    case NOT_EQUAL:
                    case OR:
                    case PLATFORM:
                    case PLUS:
                    case POINTER2:
                    case PROCEDURE:
                    case QuotedString:
                    case SEMI:
                    case SHL:
                    case SHR:
                    case SLASH:
                    case STAR:
                    case TRUE:
                    case TkAsmHexNum:
                    case TkHexNum:
                    case TkIntNum:
                    case TkRealNum:
                    case XOR:
                    case 201: {
                        alt37 = 2;
                    }
                    break;
                    default:
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try {
                            input.consume();
                            NoViableAltException nvae =
                                    new NoViableAltException("", 37, 1, input);
                            throw nvae;
                        } finally {
                            input.rewind(nvaeMark);
                        }
                }
            } else if ((LA37_0 == EQUAL)) {
                alt37 = 3;
            } else {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae =
                        new NoViableAltException("", 37, 0, input);
                throw nvae;
            }

            switch (alt37) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:169:32: 'absolute' ident
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal132 = (Token) match(input, ABSOLUTE, FOLLOW_ABSOLUTE_in_varValueSpec2995);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal132_tree = (Object) adaptor.create(string_literal132);
                        adaptor.addChild(root_0, string_literal132_tree);
                    }

                    pushFollow(FOLLOW_ident_in_varValueSpec2997);
                    ident133 = ident();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, ident133.getTree());

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:170:32: 'absolute' constExpression
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal134 = (Token) match(input, ABSOLUTE, FOLLOW_ABSOLUTE_in_varValueSpec3030);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal134_tree = (Object) adaptor.create(string_literal134);
                        adaptor.addChild(root_0, string_literal134_tree);
                    }

                    pushFollow(FOLLOW_constExpression_in_varValueSpec3032);
                    constExpression135 = constExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, constExpression135.getTree());

                }
                break;
                case 3:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:171:32: '=' constExpression
                {
                    root_0 = (Object) adaptor.nil();


                    char_literal136 = (Token) match(input, EQUAL, FOLLOW_EQUAL_in_varValueSpec3065);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal136_tree = (Object) adaptor.create(char_literal136);
                        adaptor.addChild(root_0, char_literal136_tree);
                    }

                    pushFollow(FOLLOW_constExpression_in_varValueSpec3067);
                    constExpression137 = constExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, constExpression137.getTree());

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 36, varValueSpec_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "exportsSection"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:173:1: exportsSection : 'exports' ident exportItem ( ',' ident exportItem )* ';' ;
    public final DelphiParser.exportsSection_return exportsSection() throws RecognitionException {
        DelphiParser.exportsSection_return retval = new DelphiParser.exportsSection_return();
        retval.start = input.LT(1);
        int exportsSection_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal138 = null;
        Token char_literal141 = null;
        Token char_literal144 = null;
        ParserRuleReturnScope ident139 = null;
        ParserRuleReturnScope exportItem140 = null;
        ParserRuleReturnScope ident142 = null;
        ParserRuleReturnScope exportItem143 = null;

        Object string_literal138_tree = null;
        Object char_literal141_tree = null;
        Object char_literal144_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 37)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:173:30: ( 'exports' ident exportItem ( ',' ident exportItem )* ';' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:173:32: 'exports' ident exportItem ( ',' ident exportItem )* ';'
            {
                root_0 = (Object) adaptor.nil();


                string_literal138 = (Token) match(input, EXPORTS, FOLLOW_EXPORTS_in_exportsSection3118);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    string_literal138_tree = (Object) adaptor.create(string_literal138);
                    adaptor.addChild(root_0, string_literal138_tree);
                }

                pushFollow(FOLLOW_ident_in_exportsSection3120);
                ident139 = ident();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, ident139.getTree());

                pushFollow(FOLLOW_exportItem_in_exportsSection3122);
                exportItem140 = exportItem();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, exportItem140.getTree());

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:173:59: ( ',' ident exportItem )*
                loop38:
                while (true) {
                    int alt38 = 2;
                    int LA38_0 = input.LA(1);
                    if ((LA38_0 == COMMA)) {
                        alt38 = 1;
                    }

                    switch (alt38) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:173:60: ',' ident exportItem
                        {
                            char_literal141 = (Token) match(input, COMMA, FOLLOW_COMMA_in_exportsSection3125);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) {
                                char_literal141_tree = (Object) adaptor.create(char_literal141);
                                adaptor.addChild(root_0, char_literal141_tree);
                            }

                            pushFollow(FOLLOW_ident_in_exportsSection3127);
                            ident142 = ident();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, ident142.getTree());

                            pushFollow(FOLLOW_exportItem_in_exportsSection3129);
                            exportItem143 = exportItem();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, exportItem143.getTree());

                        }
                        break;

                        default:
                            break loop38;
                    }
                }

                char_literal144 = (Token) match(input, SEMI, FOLLOW_SEMI_in_exportsSection3133);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    char_literal144_tree = (Object) adaptor.create(char_literal144);
                    adaptor.addChild(root_0, char_literal144_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 37, exportsSection_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "exportItem"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:1: exportItem : ( '(' ( formalParameterList )? ')' )? ( INDEX expression )? ( NAME expression )? ( 'resident' )? ;
    public final DelphiParser.exportItem_return exportItem() throws RecognitionException {
        DelphiParser.exportItem_return retval = new DelphiParser.exportItem_return();
        retval.start = input.LT(1);
        int exportItem_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal145 = null;
        Token char_literal147 = null;
        Token INDEX148 = null;
        Token NAME150 = null;
        Token string_literal152 = null;
        ParserRuleReturnScope formalParameterList146 = null;
        ParserRuleReturnScope expression149 = null;
        ParserRuleReturnScope expression151 = null;

        Object char_literal145_tree = null;
        Object char_literal147_tree = null;
        Object INDEX148_tree = null;
        Object NAME150_tree = null;
        Object string_literal152_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 38)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:30: ( ( '(' ( formalParameterList )? ')' )? ( INDEX expression )? ( NAME expression )? ( 'resident' )? )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:32: ( '(' ( formalParameterList )? ')' )? ( INDEX expression )? ( NAME expression )? ( 'resident' )?
            {
                root_0 = (Object) adaptor.nil();


                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:32: ( '(' ( formalParameterList )? ')' )?
                int alt40 = 2;
                int LA40_0 = input.LA(1);
                if ((LA40_0 == LPAREN)) {
                    alt40 = 1;
                }
                switch (alt40) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:33: '(' ( formalParameterList )? ')'
                    {
                        char_literal145 = (Token) match(input, LPAREN, FOLLOW_LPAREN_in_exportItem3189);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) {
                            char_literal145_tree = (Object) adaptor.create(char_literal145);
                            adaptor.addChild(root_0, char_literal145_tree);
                        }

                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:37: ( formalParameterList )?
                        int alt39 = 2;
                        int LA39_0 = input.LA(1);
                        if ((LA39_0 == ADD || LA39_0 == ANSISTRING || LA39_0 == AT || LA39_0 == BREAK || LA39_0 == CONST || (LA39_0 >= CONTAINS && LA39_0 <= CONTINUE) || LA39_0 == DEFAULT || LA39_0 == EXIT || LA39_0 == EXPORT || LA39_0 == FINAL || LA39_0 == IMPLEMENTS || LA39_0 == INDEX || LA39_0 == LBRACK || LA39_0 == LOCAL || LA39_0 == MESSAGE || LA39_0 == NAME || LA39_0 == OBJECT || LA39_0 == OPERATOR || LA39_0 == OUT || LA39_0 == POINTER || (LA39_0 >= READ && LA39_0 <= READONLY) || (LA39_0 >= REFERENCE && LA39_0 <= REGISTER) || LA39_0 == REMOVE || (LA39_0 >= STORED && LA39_0 <= STRING) || LA39_0 == TkIdentifier || LA39_0 == VAR || LA39_0 == VARIANT || LA39_0 == WRITE || LA39_0 == 200)) {
                            alt39 = 1;
                        }
                        switch (alt39) {
                            case 1:
                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:38: formalParameterList
                            {
                                pushFollow(FOLLOW_formalParameterList_in_exportItem3192);
                                formalParameterList146 = formalParameterList();
                                state._fsp--;
                                if (state.failed) return retval;
                                if (state.backtracking == 0) adaptor.addChild(root_0, formalParameterList146.getTree());

                            }
                            break;

                        }

                        char_literal147 = (Token) match(input, RPAREN, FOLLOW_RPAREN_in_exportItem3196);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) {
                            char_literal147_tree = (Object) adaptor.create(char_literal147);
                            adaptor.addChild(root_0, char_literal147_tree);
                        }

                    }
                    break;

                }

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:66: ( INDEX expression )?
                int alt41 = 2;
                int LA41_0 = input.LA(1);
                if ((LA41_0 == INDEX)) {
                    alt41 = 1;
                }
                switch (alt41) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:67: INDEX expression
                    {
                        INDEX148 = (Token) match(input, INDEX, FOLLOW_INDEX_in_exportItem3201);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) {
                            INDEX148_tree = (Object) adaptor.create(INDEX148);
                            adaptor.addChild(root_0, INDEX148_tree);
                        }

                        pushFollow(FOLLOW_expression_in_exportItem3203);
                        expression149 = expression();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) adaptor.addChild(root_0, expression149.getTree());

                    }
                    break;

                }

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:86: ( NAME expression )?
                int alt42 = 2;
                int LA42_0 = input.LA(1);
                if ((LA42_0 == NAME)) {
                    alt42 = 1;
                }
                switch (alt42) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:87: NAME expression
                    {
                        NAME150 = (Token) match(input, NAME, FOLLOW_NAME_in_exportItem3208);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) {
                            NAME150_tree = (Object) adaptor.create(NAME150);
                            adaptor.addChild(root_0, NAME150_tree);
                        }

                        pushFollow(FOLLOW_expression_in_exportItem3210);
                        expression151 = expression();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) adaptor.addChild(root_0, expression151.getTree());

                    }
                    break;

                }

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:105: ( 'resident' )?
                int alt43 = 2;
                int LA43_0 = input.LA(1);
                if ((LA43_0 == RESIDENT)) {
                    alt43 = 1;
                }
                switch (alt43) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:106: 'resident'
                    {
                        string_literal152 = (Token) match(input, RESIDENT, FOLLOW_RESIDENT_in_exportItem3215);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) {
                            string_literal152_tree = (Object) adaptor.create(string_literal152);
                            adaptor.addChild(root_0, string_literal152_tree);
                        }

                    }
                    break;

                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 38, exportItem_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "typeDecl"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:180:1: typeDecl : ( strucType | pointerType | stringType | procedureType | variantType | ( 'type' )? typeId ( genericPostfix )? | simpleType );
    public final DelphiParser.typeDecl_return typeDecl() throws RecognitionException {
        DelphiParser.typeDecl_return retval = new DelphiParser.typeDecl_return();
        retval.start = input.LT(1);
        int typeDecl_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal158 = null;
        ParserRuleReturnScope strucType153 = null;
        ParserRuleReturnScope pointerType154 = null;
        ParserRuleReturnScope stringType155 = null;
        ParserRuleReturnScope procedureType156 = null;
        ParserRuleReturnScope variantType157 = null;
        ParserRuleReturnScope typeId159 = null;
        ParserRuleReturnScope genericPostfix160 = null;
        ParserRuleReturnScope simpleType161 = null;

        Object string_literal158_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 39)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:180:30: ( strucType | pointerType | stringType | procedureType | variantType | ( 'type' )? typeId ( genericPostfix )? | simpleType )
            int alt46 = 7;
            alt46 = dfa46.predict(input);
            switch (alt46) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:180:32: strucType
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_strucType_in_typeDecl3277);
                    strucType153 = strucType();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, strucType153.getTree());

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:181:32: pointerType
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_pointerType_in_typeDecl3310);
                    pointerType154 = pointerType();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, pointerType154.getTree());

                }
                break;
                case 3:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:182:32: stringType
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_stringType_in_typeDecl3343);
                    stringType155 = stringType();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, stringType155.getTree());

                }
                break;
                case 4:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:183:32: procedureType
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_procedureType_in_typeDecl3376);
                    procedureType156 = procedureType();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, procedureType156.getTree());

                }
                break;
                case 5:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:184:32: variantType
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_variantType_in_typeDecl3410);
                    variantType157 = variantType();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, variantType157.getTree());

                }
                break;
                case 6:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:32: ( 'type' )? typeId ( genericPostfix )?
                {
                    root_0 = (Object) adaptor.nil();


                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:32: ( 'type' )?
                    int alt44 = 2;
                    int LA44_0 = input.LA(1);
                    if ((LA44_0 == TYPE)) {
                        alt44 = 1;
                    }
                    switch (alt44) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:33: 'type'
                        {
                            string_literal158 = (Token) match(input, TYPE, FOLLOW_TYPE_in_typeDecl3444);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) {
                                string_literal158_tree = (Object) adaptor.create(string_literal158);
                                adaptor.addChild(root_0, string_literal158_tree);
                            }

                        }
                        break;

                    }

                    pushFollow(FOLLOW_typeId_in_typeDecl3448);
                    typeId159 = typeId();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, typeId159.getTree());

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:49: ( genericPostfix )?
                    int alt45 = 2;
                    int LA45_0 = input.LA(1);
                    if ((LA45_0 == LT)) {
                        int LA45_1 = input.LA(2);
                        if ((synpred67_Delphi())) {
                            alt45 = 1;
                        }
                    }
                    switch (alt45) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:50: genericPostfix
                        {
                            pushFollow(FOLLOW_genericPostfix_in_typeDecl3451);
                            genericPostfix160 = genericPostfix();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, genericPostfix160.getTree());

                        }
                        break;

                    }

                }
                break;
                case 7:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:186:32: simpleType
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_simpleType_in_typeDecl3486);
                    simpleType161 = simpleType();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, simpleType161.getTree());

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 39, typeDecl_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "strucType"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:188:1: strucType : ( 'packed' )? strucTypePart -> strucTypePart ;
    public final DelphiParser.strucType_return strucType() throws RecognitionException {
        DelphiParser.strucType_return retval = new DelphiParser.strucType_return();
        retval.start = input.LT(1);
        int strucType_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal162 = null;
        ParserRuleReturnScope strucTypePart163 = null;

        Object string_literal162_tree = null;
        RewriteRuleTokenStream stream_PACKED = new RewriteRuleTokenStream(adaptor, "token PACKED");
        RewriteRuleSubtreeStream stream_strucTypePart = new RewriteRuleSubtreeStream(adaptor, "rule strucTypePart");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 40)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:188:30: ( ( 'packed' )? strucTypePart -> strucTypePart )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:188:32: ( 'packed' )? strucTypePart
            {
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:188:32: ( 'packed' )?
                int alt47 = 2;
                int LA47_0 = input.LA(1);
                if ((LA47_0 == PACKED)) {
                    alt47 = 1;
                }
                switch (alt47) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:188:33: 'packed'
                    {
                        string_literal162 = (Token) match(input, PACKED, FOLLOW_PACKED_in_strucType3543);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_PACKED.add(string_literal162);

                    }
                    break;

                }

                pushFollow(FOLLOW_strucTypePart_in_strucType3547);
                strucTypePart163 = strucTypePart();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_strucTypePart.add(strucTypePart163.getTree());
                // AST REWRITE
                // elements: strucTypePart
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 188:58: -> strucTypePart
                    {
                        adaptor.addChild(root_0, stream_strucTypePart.nextTree());
                    }


                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 40, strucType_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "strucTypePart"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:190:1: strucTypePart : ( arrayType | setType | fileType | classDecl );
    public final DelphiParser.strucTypePart_return strucTypePart() throws RecognitionException {
        DelphiParser.strucTypePart_return retval = new DelphiParser.strucTypePart_return();
        retval.start = input.LT(1);
        int strucTypePart_StartIndex = input.index();

        Object root_0 = null;

        ParserRuleReturnScope arrayType164 = null;
        ParserRuleReturnScope setType165 = null;
        ParserRuleReturnScope fileType166 = null;
        ParserRuleReturnScope classDecl167 = null;


        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 41)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:190:30: ( arrayType | setType | fileType | classDecl )
            int alt48 = 4;
            switch (input.LA(1)) {
                case ARRAY: {
                    alt48 = 1;
                }
                break;
                case SET: {
                    alt48 = 2;
                }
                break;
                case FILE: {
                    alt48 = 3;
                }
                break;
                case CLASS:
                case DISPINTERFACE:
                case INTERFACE:
                case OBJECT:
                case RECORD: {
                    alt48 = 4;
                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae =
                            new NoViableAltException("", 48, 0, input);
                    throw nvae;
            }
            switch (alt48) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:190:32: arrayType
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_arrayType_in_strucTypePart3603);
                    arrayType164 = arrayType();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, arrayType164.getTree());

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:191:32: setType
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_setType_in_strucTypePart3636);
                    setType165 = setType();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, setType165.getTree());

                }
                break;
                case 3:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:192:32: fileType
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_fileType_in_strucTypePart3669);
                    fileType166 = fileType();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, fileType166.getTree());

                }
                break;
                case 4:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:193:32: classDecl
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_classDecl_in_strucTypePart3702);
                    classDecl167 = classDecl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, classDecl167.getTree());

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 41, strucTypePart_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "arrayType"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:196:1: arrayType : 'array' ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )? 'of' arraySubType -> ^( arraySubType 'array' ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )? ) ;
    public final DelphiParser.arrayType_return arrayType() throws RecognitionException {
        DelphiParser.arrayType_return retval = new DelphiParser.arrayType_return();
        retval.start = input.LT(1);
        int arrayType_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal168 = null;
        Token char_literal169 = null;
        Token char_literal171 = null;
        Token char_literal173 = null;
        Token string_literal174 = null;
        ParserRuleReturnScope arrayIndex170 = null;
        ParserRuleReturnScope arrayIndex172 = null;
        ParserRuleReturnScope arraySubType175 = null;

        Object string_literal168_tree = null;
        Object char_literal169_tree = null;
        Object char_literal171_tree = null;
        Object char_literal173_tree = null;
        Object string_literal174_tree = null;
        RewriteRuleTokenStream stream_COMMA = new RewriteRuleTokenStream(adaptor, "token COMMA");
        RewriteRuleTokenStream stream_RBRACK = new RewriteRuleTokenStream(adaptor, "token RBRACK");
        RewriteRuleTokenStream stream_ARRAY = new RewriteRuleTokenStream(adaptor, "token ARRAY");
        RewriteRuleTokenStream stream_LBRACK = new RewriteRuleTokenStream(adaptor, "token LBRACK");
        RewriteRuleTokenStream stream_OF = new RewriteRuleTokenStream(adaptor, "token OF");
        RewriteRuleSubtreeStream stream_arraySubType = new RewriteRuleSubtreeStream(adaptor, "rule arraySubType");
        RewriteRuleSubtreeStream stream_arrayIndex = new RewriteRuleSubtreeStream(adaptor, "rule arrayIndex");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 42)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:196:30: ( 'array' ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )? 'of' arraySubType -> ^( arraySubType 'array' ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )? ) )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:196:33: 'array' ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )? 'of' arraySubType
            {
                string_literal168 = (Token) match(input, ARRAY, FOLLOW_ARRAY_in_arrayType3760);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_ARRAY.add(string_literal168);

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:196:41: ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )?
                int alt52 = 2;
                int LA52_0 = input.LA(1);
                if ((LA52_0 == LBRACK)) {
                    alt52 = 1;
                }
                switch (alt52) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:196:42: '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']'
                    {
                        char_literal169 = (Token) match(input, LBRACK, FOLLOW_LBRACK_in_arrayType3763);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_LBRACK.add(char_literal169);

                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:196:46: ( arrayIndex )?
                        int alt49 = 2;
                        int LA49_0 = input.LA(1);
                        if (((LA49_0 >= ADD && LA49_0 <= ANSISTRING) || LA49_0 == AS || (LA49_0 >= AT && LA49_0 <= AT2) || LA49_0 == BREAK || (LA49_0 >= CONTAINS && LA49_0 <= ControlString) || LA49_0 == DEFAULT || LA49_0 == DIV || (LA49_0 >= DOT && LA49_0 <= DOTDOT) || LA49_0 == EQUAL || LA49_0 == EXIT || LA49_0 == EXPORT || LA49_0 == FALSE || LA49_0 == FINAL || (LA49_0 >= FUNCTION && LA49_0 <= GE) || LA49_0 == GT || (LA49_0 >= IMPLEMENTS && LA49_0 <= INHERITED) || LA49_0 == IS || LA49_0 == LBRACK || LA49_0 == LE || (LA49_0 >= LOCAL && LA49_0 <= NAME) || LA49_0 == NIL || (LA49_0 >= NOT && LA49_0 <= OBJECT) || (LA49_0 >= OPERATOR && LA49_0 <= OUT) || (LA49_0 >= PLUS && LA49_0 <= POINTER2) || LA49_0 == PROCEDURE || LA49_0 == QuotedString || (LA49_0 >= READ && LA49_0 <= READONLY) || (LA49_0 >= REFERENCE && LA49_0 <= REGISTER) || LA49_0 == REMOVE || (LA49_0 >= SHL && LA49_0 <= STAR) || (LA49_0 >= STORED && LA49_0 <= STRING) || LA49_0 == TRUE || LA49_0 == TkAsmHexNum || (LA49_0 >= TkHexNum && LA49_0 <= TkIntNum) || LA49_0 == TkRealNum || LA49_0 == VARIANT || LA49_0 == WRITE || (LA49_0 >= XOR && LA49_0 <= 201))) {
                            alt49 = 1;
                        }
                        switch (alt49) {
                            case 1:
                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:196:47: arrayIndex
                            {
                                pushFollow(FOLLOW_arrayIndex_in_arrayType3766);
                                arrayIndex170 = arrayIndex();
                                state._fsp--;
                                if (state.failed) return retval;
                                if (state.backtracking == 0) stream_arrayIndex.add(arrayIndex170.getTree());
                            }
                            break;

                        }

                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:196:60: ( ',' ( arrayIndex )? )*
                        loop51:
                        while (true) {
                            int alt51 = 2;
                            int LA51_0 = input.LA(1);
                            if ((LA51_0 == COMMA)) {
                                alt51 = 1;
                            }

                            switch (alt51) {
                                case 1:
                                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:196:61: ',' ( arrayIndex )?
                                {
                                    char_literal171 = (Token) match(input, COMMA, FOLLOW_COMMA_in_arrayType3771);
                                    if (state.failed) return retval;
                                    if (state.backtracking == 0) stream_COMMA.add(char_literal171);

                                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:196:65: ( arrayIndex )?
                                    int alt50 = 2;
                                    int LA50_0 = input.LA(1);
                                    if (((LA50_0 >= ADD && LA50_0 <= ANSISTRING) || LA50_0 == AS || (LA50_0 >= AT && LA50_0 <= AT2) || LA50_0 == BREAK || (LA50_0 >= CONTAINS && LA50_0 <= ControlString) || LA50_0 == DEFAULT || LA50_0 == DIV || (LA50_0 >= DOT && LA50_0 <= DOTDOT) || LA50_0 == EQUAL || LA50_0 == EXIT || LA50_0 == EXPORT || LA50_0 == FALSE || LA50_0 == FINAL || (LA50_0 >= FUNCTION && LA50_0 <= GE) || LA50_0 == GT || (LA50_0 >= IMPLEMENTS && LA50_0 <= INHERITED) || LA50_0 == IS || LA50_0 == LBRACK || LA50_0 == LE || (LA50_0 >= LOCAL && LA50_0 <= NAME) || LA50_0 == NIL || (LA50_0 >= NOT && LA50_0 <= OBJECT) || (LA50_0 >= OPERATOR && LA50_0 <= OUT) || (LA50_0 >= PLUS && LA50_0 <= POINTER2) || LA50_0 == PROCEDURE || LA50_0 == QuotedString || (LA50_0 >= READ && LA50_0 <= READONLY) || (LA50_0 >= REFERENCE && LA50_0 <= REGISTER) || LA50_0 == REMOVE || (LA50_0 >= SHL && LA50_0 <= STAR) || (LA50_0 >= STORED && LA50_0 <= STRING) || LA50_0 == TRUE || LA50_0 == TkAsmHexNum || (LA50_0 >= TkHexNum && LA50_0 <= TkIntNum) || LA50_0 == TkRealNum || LA50_0 == VARIANT || LA50_0 == WRITE || (LA50_0 >= XOR && LA50_0 <= 201))) {
                                        alt50 = 1;
                                    }
                                    switch (alt50) {
                                        case 1:
                                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:196:66: arrayIndex
                                        {
                                            pushFollow(FOLLOW_arrayIndex_in_arrayType3774);
                                            arrayIndex172 = arrayIndex();
                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if (state.backtracking == 0) stream_arrayIndex.add(arrayIndex172.getTree());
                                        }
                                        break;

                                    }

                                }
                                break;

                                default:
                                    break loop51;
                            }
                        }

                        char_literal173 = (Token) match(input, RBRACK, FOLLOW_RBRACK_in_arrayType3780);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_RBRACK.add(char_literal173);

                    }
                    break;

                }

                string_literal174 = (Token) match(input, OF, FOLLOW_OF_in_arrayType3784);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_OF.add(string_literal174);

                pushFollow(FOLLOW_arraySubType_in_arrayType3786);
                arraySubType175 = arraySubType();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_arraySubType.add(arraySubType175.getTree());
                // AST REWRITE
                // elements: arrayIndex, LBRACK, COMMA, RBRACK, ARRAY, arraySubType, arrayIndex
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 197:30: -> ^( arraySubType 'array' ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )? )
                    {
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:197:33: ^( arraySubType 'array' ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )? )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot(stream_arraySubType.nextNode(), root_1);
                            adaptor.addChild(root_1, stream_ARRAY.nextNode());
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:197:56: ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )?
                            if (stream_arrayIndex.hasNext() || stream_LBRACK.hasNext() || stream_COMMA.hasNext() || stream_RBRACK.hasNext()) {
                                adaptor.addChild(root_1, stream_LBRACK.nextNode());
                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:197:61: ( arrayIndex )?
                                if (stream_arrayIndex.hasNext()) {
                                    adaptor.addChild(root_1, stream_arrayIndex.nextTree());
                                }
                                stream_arrayIndex.reset();

                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:197:75: ( ',' ( arrayIndex )? )*
                                while (stream_COMMA.hasNext()) {
                                    adaptor.addChild(root_1, stream_COMMA.nextNode());
                                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:197:80: ( arrayIndex )?
                                    if (stream_arrayIndex.hasNext()) {
                                        adaptor.addChild(root_1, stream_arrayIndex.nextTree());
                                    }
                                    stream_arrayIndex.reset();

                                }
                                stream_COMMA.reset();

                                adaptor.addChild(root_1, stream_RBRACK.nextNode());
                            }
                            stream_arrayIndex.reset();
                            stream_LBRACK.reset();
                            stream_COMMA.reset();
                            stream_RBRACK.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 42, arrayType_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "arrayIndex"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:200:1: arrayIndex : ( typeId | expression '..' expression );
    public final DelphiParser.arrayIndex_return arrayIndex() throws RecognitionException {
        DelphiParser.arrayIndex_return retval = new DelphiParser.arrayIndex_return();
        retval.start = input.LT(1);
        int arrayIndex_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal178 = null;
        ParserRuleReturnScope typeId176 = null;
        ParserRuleReturnScope expression177 = null;
        ParserRuleReturnScope expression179 = null;

        Object string_literal178_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 43)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:200:30: ( typeId | expression '..' expression )
            int alt53 = 2;
            alt53 = dfa53.predict(input);
            switch (alt53) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:200:32: typeId
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_typeId_in_arrayIndex3913);
                    typeId176 = typeId();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, typeId176.getTree());

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:201:32: expression '..' expression
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_expression_in_arrayIndex3946);
                    expression177 = expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, expression177.getTree());

                    string_literal178 = (Token) match(input, DOTDOT, FOLLOW_DOTDOT_in_arrayIndex3948);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal178_tree = (Object) adaptor.create(string_literal178);
                        adaptor.addChild(root_0, string_literal178_tree);
                    }

                    pushFollow(FOLLOW_expression_in_arrayIndex3950);
                    expression179 = expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, expression179.getTree());

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 43, arrayIndex_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "arraySubType"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:204:1: arraySubType : ( 'const' | typeDecl );
    public final DelphiParser.arraySubType_return arraySubType() throws RecognitionException {
        DelphiParser.arraySubType_return retval = new DelphiParser.arraySubType_return();
        retval.start = input.LT(1);
        int arraySubType_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal180 = null;
        ParserRuleReturnScope typeDecl181 = null;

        Object string_literal180_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 44)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:204:30: ( 'const' | typeDecl )
            int alt54 = 2;
            int LA54_0 = input.LA(1);
            if ((LA54_0 == CONST)) {
                int LA54_1 = input.LA(2);
                if ((synpred78_Delphi())) {
                    alt54 = 1;
                } else if ((true)) {
                    alt54 = 2;
                }

            } else if ((LA54_0 == EOF || LA54_0 == ABSOLUTE || (LA54_0 >= ADD && LA54_0 <= ASSEMBLER) || (LA54_0 >= AT && LA54_0 <= AUTOMATED) || (LA54_0 >= BEGIN && LA54_0 <= COMMA) || (LA54_0 >= CONSTRUCTOR && LA54_0 <= ControlString) || (LA54_0 >= DEFAULT && LA54_0 <= DOWNTO) || (LA54_0 >= ELSE && LA54_0 <= FINALLY) || (LA54_0 >= FUNCTION && LA54_0 <= GE) || LA54_0 == GT || (LA54_0 >= IMPLEMENTATION && LA54_0 <= LBRACK) || (LA54_0 >= LE && LA54_0 <= OVERLOAD) || (LA54_0 >= PACKED && LA54_0 <= PROCEDURE) || (LA54_0 >= PROPERTY && LA54_0 <= QuotedString) || LA54_0 == RBRACK || (LA54_0 >= READ && LA54_0 <= REGISTER) || LA54_0 == REMOVE || (LA54_0 >= RESIDENT && LA54_0 <= SAFECALL) || (LA54_0 >= SEMI && LA54_0 <= STAR) || (LA54_0 >= STDCALL && LA54_0 <= TRUE) || LA54_0 == TYPE || LA54_0 == TkAsmHexNum || (LA54_0 >= TkHexNum && LA54_0 <= TkIntNum) || LA54_0 == TkRealNum || (LA54_0 >= UNSAFE && LA54_0 <= UNTIL) || (LA54_0 >= VAR && LA54_0 <= VARIANT) || (LA54_0 >= WRITE && LA54_0 <= WRITEONLY) || (LA54_0 >= XOR && LA54_0 <= 201))) {
                alt54 = 2;
            } else {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae =
                        new NoViableAltException("", 54, 0, input);
                throw nvae;
            }

            switch (alt54) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:204:32: 'const'
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal180 = (Token) match(input, CONST, FOLLOW_CONST_in_arraySubType4004);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal180_tree = (Object) adaptor.create(string_literal180);
                        adaptor.addChild(root_0, string_literal180_tree);
                    }

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:205:32: typeDecl
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_typeDecl_in_arraySubType4037);
                    typeDecl181 = typeDecl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, typeDecl181.getTree());

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 44, arraySubType_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "setType"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:207:1: setType : 'set' 'of' typeDecl -> 'set' typeDecl ;
    public final DelphiParser.setType_return setType() throws RecognitionException {
        DelphiParser.setType_return retval = new DelphiParser.setType_return();
        retval.start = input.LT(1);
        int setType_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal182 = null;
        Token string_literal183 = null;
        ParserRuleReturnScope typeDecl184 = null;

        Object string_literal182_tree = null;
        Object string_literal183_tree = null;
        RewriteRuleTokenStream stream_SET = new RewriteRuleTokenStream(adaptor, "token SET");
        RewriteRuleTokenStream stream_OF = new RewriteRuleTokenStream(adaptor, "token OF");
        RewriteRuleSubtreeStream stream_typeDecl = new RewriteRuleSubtreeStream(adaptor, "rule typeDecl");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 45)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:207:30: ( 'set' 'of' typeDecl -> 'set' typeDecl )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:207:32: 'set' 'of' typeDecl
            {
                string_literal182 = (Token) match(input, SET, FOLLOW_SET_in_setType4095);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_SET.add(string_literal182);

                string_literal183 = (Token) match(input, OF, FOLLOW_OF_in_setType4097);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_OF.add(string_literal183);

                pushFollow(FOLLOW_typeDecl_in_setType4099);
                typeDecl184 = typeDecl();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_typeDecl.add(typeDecl184.getTree());
                // AST REWRITE
                // elements: SET, typeDecl
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 207:52: -> 'set' typeDecl
                    {
                        adaptor.addChild(root_0, stream_SET.nextNode());
                        adaptor.addChild(root_0, stream_typeDecl.nextTree());
                    }


                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 45, setType_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "fileType"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:210:1: fileType : 'file' ( 'of' typeDecl )? ;
    public final DelphiParser.fileType_return fileType() throws RecognitionException {
        DelphiParser.fileType_return retval = new DelphiParser.fileType_return();
        retval.start = input.LT(1);
        int fileType_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal185 = null;
        Token string_literal186 = null;
        ParserRuleReturnScope typeDecl187 = null;

        Object string_literal185_tree = null;
        Object string_literal186_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 46)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:210:30: ( 'file' ( 'of' typeDecl )? )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:210:32: 'file' ( 'of' typeDecl )?
            {
                root_0 = (Object) adaptor.nil();


                string_literal185 = (Token) match(input, FILE, FOLLOW_FILE_in_fileType4173);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    string_literal185_tree = (Object) adaptor.create(string_literal185);
                    adaptor.addChild(root_0, string_literal185_tree);
                }

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:210:39: ( 'of' typeDecl )?
                int alt55 = 2;
                int LA55_0 = input.LA(1);
                if ((LA55_0 == OF)) {
                    int LA55_1 = input.LA(2);
                    if ((synpred79_Delphi())) {
                        alt55 = 1;
                    }
                }
                switch (alt55) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:210:40: 'of' typeDecl
                    {
                        string_literal186 = (Token) match(input, OF, FOLLOW_OF_in_fileType4176);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) {
                            string_literal186_tree = (Object) adaptor.create(string_literal186);
                            adaptor.addChild(root_0, string_literal186_tree);
                        }

                        pushFollow(FOLLOW_typeDecl_in_fileType4178);
                        typeDecl187 = typeDecl();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) adaptor.addChild(root_0, typeDecl187.getTree());

                    }
                    break;

                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 46, fileType_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "pointerType"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:212:1: pointerType : ( '^' typeDecl | 'pointer' );
    public final DelphiParser.pointerType_return pointerType() throws RecognitionException {
        DelphiParser.pointerType_return retval = new DelphiParser.pointerType_return();
        retval.start = input.LT(1);
        int pointerType_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal188 = null;
        Token string_literal190 = null;
        ParserRuleReturnScope typeDecl189 = null;

        Object char_literal188_tree = null;
        Object string_literal190_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 47)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:212:30: ( '^' typeDecl | 'pointer' )
            int alt56 = 2;
            int LA56_0 = input.LA(1);
            if ((LA56_0 == POINTER2)) {
                alt56 = 1;
            } else if ((LA56_0 == POINTER)) {
                alt56 = 2;
            } else {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae =
                        new NoViableAltException("", 56, 0, input);
                throw nvae;
            }

            switch (alt56) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:212:32: '^' typeDecl
                {
                    root_0 = (Object) adaptor.nil();


                    char_literal188 = (Token) match(input, POINTER2, FOLLOW_POINTER2_in_pointerType4234);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal188_tree = (Object) adaptor.create(char_literal188);
                        adaptor.addChild(root_0, char_literal188_tree);
                    }

                    pushFollow(FOLLOW_typeDecl_in_pointerType4236);
                    typeDecl189 = typeDecl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, typeDecl189.getTree());

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:213:32: 'pointer'
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal190 = (Token) match(input, POINTER, FOLLOW_POINTER_in_pointerType4269);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal190_tree = (Object) adaptor.create(string_literal190);
                        adaptor.addChild(root_0, string_literal190_tree);
                    }

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 47, pointerType_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "stringType"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:215:1: stringType : ( 'string' ( '[' expression ']' )? -> 'string' | ( 'type' )? ANSISTRING ( codePageNumber )? );
    public final DelphiParser.stringType_return stringType() throws RecognitionException {
        DelphiParser.stringType_return retval = new DelphiParser.stringType_return();
        retval.start = input.LT(1);
        int stringType_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal191 = null;
        Token char_literal192 = null;
        Token char_literal194 = null;
        Token string_literal195 = null;
        Token ANSISTRING196 = null;
        ParserRuleReturnScope expression193 = null;
        ParserRuleReturnScope codePageNumber197 = null;

        Object string_literal191_tree = null;
        Object char_literal192_tree = null;
        Object char_literal194_tree = null;
        Object string_literal195_tree = null;
        Object ANSISTRING196_tree = null;
        RewriteRuleTokenStream stream_RBRACK = new RewriteRuleTokenStream(adaptor, "token RBRACK");
        RewriteRuleTokenStream stream_LBRACK = new RewriteRuleTokenStream(adaptor, "token LBRACK");
        RewriteRuleTokenStream stream_STRING = new RewriteRuleTokenStream(adaptor, "token STRING");
        RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor, "rule expression");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 48)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:215:30: ( 'string' ( '[' expression ']' )? -> 'string' | ( 'type' )? ANSISTRING ( codePageNumber )? )
            int alt60 = 2;
            int LA60_0 = input.LA(1);
            if ((LA60_0 == STRING)) {
                alt60 = 1;
            } else if ((LA60_0 == ANSISTRING || LA60_0 == TYPE)) {
                alt60 = 2;
            } else {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae =
                        new NoViableAltException("", 60, 0, input);
                throw nvae;
            }

            switch (alt60) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:215:32: 'string' ( '[' expression ']' )?
                {
                    string_literal191 = (Token) match(input, STRING, FOLLOW_STRING_in_stringType4324);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_STRING.add(string_literal191);

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:215:41: ( '[' expression ']' )?
                    int alt57 = 2;
                    alt57 = dfa57.predict(input);
                    switch (alt57) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:215:42: '[' expression ']'
                        {
                            char_literal192 = (Token) match(input, LBRACK, FOLLOW_LBRACK_in_stringType4327);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_LBRACK.add(char_literal192);

                            pushFollow(FOLLOW_expression_in_stringType4329);
                            expression193 = expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_expression.add(expression193.getTree());
                            char_literal194 = (Token) match(input, RBRACK, FOLLOW_RBRACK_in_stringType4331);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_RBRACK.add(char_literal194);

                        }
                        break;

                    }

                    // AST REWRITE
                    // elements: STRING
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if (state.backtracking == 0) {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                        root_0 = (Object) adaptor.nil();
                        // 215:63: -> 'string'
                        {
                            adaptor.addChild(root_0, stream_STRING.nextNode());
                        }


                        retval.tree = root_0;
                    }

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:216:32: ( 'type' )? ANSISTRING ( codePageNumber )?
                {
                    root_0 = (Object) adaptor.nil();


                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:216:32: ( 'type' )?
                    int alt58 = 2;
                    int LA58_0 = input.LA(1);
                    if ((LA58_0 == TYPE)) {
                        alt58 = 1;
                    }
                    switch (alt58) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:216:33: 'type'
                        {
                            string_literal195 = (Token) match(input, TYPE, FOLLOW_TYPE_in_stringType4371);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) {
                                string_literal195_tree = (Object) adaptor.create(string_literal195);
                                adaptor.addChild(root_0, string_literal195_tree);
                            }

                        }
                        break;

                    }

                    ANSISTRING196 = (Token) match(input, ANSISTRING, FOLLOW_ANSISTRING_in_stringType4375);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        ANSISTRING196_tree = (Object) adaptor.create(ANSISTRING196);
                        adaptor.addChild(root_0, ANSISTRING196_tree);
                    }

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:216:53: ( codePageNumber )?
                    int alt59 = 2;
                    int LA59_0 = input.LA(1);
                    if ((LA59_0 == LPAREN)) {
                        int LA59_1 = input.LA(2);
                        if ((LA59_1 == TkHexNum || LA59_1 == TkIntNum)) {
                            int LA59_3 = input.LA(3);
                            if ((LA59_3 == RPAREN)) {
                                int LA59_4 = input.LA(4);
                                if ((synpred84_Delphi())) {
                                    alt59 = 1;
                                }
                            }
                        }
                    }
                    switch (alt59) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:216:54: codePageNumber
                        {
                            pushFollow(FOLLOW_codePageNumber_in_stringType4378);
                            codePageNumber197 = codePageNumber();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, codePageNumber197.getTree());

                        }
                        break;

                    }

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 48, stringType_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "codePageNumber"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:218:1: codePageNumber : '(' intNum ')' ;
    public final DelphiParser.codePageNumber_return codePageNumber() throws RecognitionException {
        DelphiParser.codePageNumber_return retval = new DelphiParser.codePageNumber_return();
        retval.start = input.LT(1);
        int codePageNumber_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal198 = null;
        Token char_literal200 = null;
        ParserRuleReturnScope intNum199 = null;

        Object char_literal198_tree = null;
        Object char_literal200_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 49)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:218:30: ( '(' intNum ')' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:218:32: '(' intNum ')'
            {
                root_0 = (Object) adaptor.nil();


                char_literal198 = (Token) match(input, LPAREN, FOLLOW_LPAREN_in_codePageNumber4431);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    char_literal198_tree = (Object) adaptor.create(char_literal198);
                    adaptor.addChild(root_0, char_literal198_tree);
                }

                pushFollow(FOLLOW_intNum_in_codePageNumber4433);
                intNum199 = intNum();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, intNum199.getTree());

                char_literal200 = (Token) match(input, RPAREN, FOLLOW_RPAREN_in_codePageNumber4435);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    char_literal200_tree = (Object) adaptor.create(char_literal200);
                    adaptor.addChild(root_0, char_literal200_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 49, codePageNumber_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "procedureType"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:220:1: procedureType : ( methodType | simpleProcedureType | procedureReference );
    public final DelphiParser.procedureType_return procedureType() throws RecognitionException {
        DelphiParser.procedureType_return retval = new DelphiParser.procedureType_return();
        retval.start = input.LT(1);
        int procedureType_StartIndex = input.index();

        Object root_0 = null;

        ParserRuleReturnScope methodType201 = null;
        ParserRuleReturnScope simpleProcedureType202 = null;
        ParserRuleReturnScope procedureReference203 = null;


        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 50)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:220:30: ( methodType | simpleProcedureType | procedureReference )
            int alt61 = 3;
            switch (input.LA(1)) {
                case FUNCTION: {
                    int LA61_1 = input.LA(2);
                    if ((synpred85_Delphi())) {
                        alt61 = 1;
                    } else if ((synpred86_Delphi())) {
                        alt61 = 2;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try {
                            input.consume();
                            NoViableAltException nvae =
                                    new NoViableAltException("", 61, 1, input);
                            throw nvae;
                        } finally {
                            input.rewind(nvaeMark);
                        }
                    }

                }
                break;
                case PROCEDURE: {
                    int LA61_2 = input.LA(2);
                    if ((synpred85_Delphi())) {
                        alt61 = 1;
                    } else if ((synpred86_Delphi())) {
                        alt61 = 2;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try {
                            input.consume();
                            NoViableAltException nvae =
                                    new NoViableAltException("", 61, 2, input);
                            throw nvae;
                        } finally {
                            input.rewind(nvaeMark);
                        }
                    }

                }
                break;
                case REFERENCE: {
                    alt61 = 3;
                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae =
                            new NoViableAltException("", 61, 0, input);
                    throw nvae;
            }
            switch (alt61) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:220:32: methodType
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_methodType_in_procedureType4487);
                    methodType201 = methodType();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, methodType201.getTree());

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:221:32: simpleProcedureType
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_simpleProcedureType_in_procedureType4520);
                    simpleProcedureType202 = simpleProcedureType();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, simpleProcedureType202.getTree());

                }
                break;
                case 3:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:222:32: procedureReference
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_procedureReference_in_procedureType4553);
                    procedureReference203 = procedureReference();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, procedureReference203.getTree());

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 50, procedureType_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "methodType"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:224:1: methodType : procedureTypeHeading 'of' 'object' ;
    public final DelphiParser.methodType_return methodType() throws RecognitionException {
        DelphiParser.methodType_return retval = new DelphiParser.methodType_return();
        retval.start = input.LT(1);
        int methodType_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal205 = null;
        Token string_literal206 = null;
        ParserRuleReturnScope procedureTypeHeading204 = null;

        Object string_literal205_tree = null;
        Object string_literal206_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 51)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:224:30: ( procedureTypeHeading 'of' 'object' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:224:32: procedureTypeHeading 'of' 'object'
            {
                root_0 = (Object) adaptor.nil();


                pushFollow(FOLLOW_procedureTypeHeading_in_methodType4608);
                procedureTypeHeading204 = procedureTypeHeading();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, procedureTypeHeading204.getTree());

                string_literal205 = (Token) match(input, OF, FOLLOW_OF_in_methodType4610);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    string_literal205_tree = (Object) adaptor.create(string_literal205);
                    adaptor.addChild(root_0, string_literal205_tree);
                }

                string_literal206 = (Token) match(input, OBJECT, FOLLOW_OBJECT_in_methodType4612);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    string_literal206_tree = (Object) adaptor.create(string_literal206);
                    adaptor.addChild(root_0, string_literal206_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 51, methodType_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "simpleProcedureType"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:226:1: simpleProcedureType : procedureTypeHeading ( ( ';' )? callConventionNoSemi )? ;
    public final DelphiParser.simpleProcedureType_return simpleProcedureType() throws RecognitionException {
        DelphiParser.simpleProcedureType_return retval = new DelphiParser.simpleProcedureType_return();
        retval.start = input.LT(1);
        int simpleProcedureType_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal208 = null;
        ParserRuleReturnScope procedureTypeHeading207 = null;
        ParserRuleReturnScope callConventionNoSemi209 = null;

        Object char_literal208_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 52)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:226:30: ( procedureTypeHeading ( ( ';' )? callConventionNoSemi )? )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:226:32: procedureTypeHeading ( ( ';' )? callConventionNoSemi )?
            {
                root_0 = (Object) adaptor.nil();


                pushFollow(FOLLOW_procedureTypeHeading_in_simpleProcedureType4658);
                procedureTypeHeading207 = procedureTypeHeading();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, procedureTypeHeading207.getTree());

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:226:53: ( ( ';' )? callConventionNoSemi )?
                int alt63 = 2;
                switch (input.LA(1)) {
                    case SEMI: {
                        int LA63_1 = input.LA(2);
                        if ((synpred88_Delphi())) {
                            alt63 = 1;
                        }
                    }
                    break;
                    case REGISTER: {
                        int LA63_2 = input.LA(2);
                        if ((synpred88_Delphi())) {
                            alt63 = 1;
                        }
                    }
                    break;
                    case CDECL: {
                        int LA63_4 = input.LA(2);
                        if ((synpred88_Delphi())) {
                            alt63 = 1;
                        }
                    }
                    break;
                    case PASCAL: {
                        int LA63_5 = input.LA(2);
                        if ((synpred88_Delphi())) {
                            alt63 = 1;
                        }
                    }
                    break;
                    case SAFECALL: {
                        int LA63_6 = input.LA(2);
                        if ((synpred88_Delphi())) {
                            alt63 = 1;
                        }
                    }
                    break;
                    case EXPORT: {
                        int LA63_7 = input.LA(2);
                        if ((synpred88_Delphi())) {
                            alt63 = 1;
                        }
                    }
                    break;
                    case STDCALL: {
                        int LA63_8 = input.LA(2);
                        if ((synpred88_Delphi())) {
                            alt63 = 1;
                        }
                    }
                    break;
                }
                switch (alt63) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:226:55: ( ';' )? callConventionNoSemi
                    {
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:226:55: ( ';' )?
                        int alt62 = 2;
                        int LA62_0 = input.LA(1);
                        if ((LA62_0 == SEMI)) {
                            alt62 = 1;
                        }
                        switch (alt62) {
                            case 1:
                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:226:56: ';'
                            {
                                char_literal208 = (Token) match(input, SEMI, FOLLOW_SEMI_in_simpleProcedureType4663);
                                if (state.failed) return retval;
                                if (state.backtracking == 0) {
                                    char_literal208_tree = (Object) adaptor.create(char_literal208);
                                    adaptor.addChild(root_0, char_literal208_tree);
                                }

                            }
                            break;

                        }

                        pushFollow(FOLLOW_callConventionNoSemi_in_simpleProcedureType4667);
                        callConventionNoSemi209 = callConventionNoSemi();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) adaptor.addChild(root_0, callConventionNoSemi209.getTree());

                    }
                    break;

                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 52, simpleProcedureType_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "procedureReference"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:228:1: procedureReference : 'reference' 'to' procedureTypeHeading ;
    public final DelphiParser.procedureReference_return procedureReference() throws RecognitionException {
        DelphiParser.procedureReference_return retval = new DelphiParser.procedureReference_return();
        retval.start = input.LT(1);
        int procedureReference_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal210 = null;
        Token string_literal211 = null;
        ParserRuleReturnScope procedureTypeHeading212 = null;

        Object string_literal210_tree = null;
        Object string_literal211_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 53)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:228:30: ( 'reference' 'to' procedureTypeHeading )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:228:32: 'reference' 'to' procedureTypeHeading
            {
                root_0 = (Object) adaptor.nil();


                string_literal210 = (Token) match(input, REFERENCE, FOLLOW_REFERENCE_in_procedureReference4716);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    string_literal210_tree = (Object) adaptor.create(string_literal210);
                    adaptor.addChild(root_0, string_literal210_tree);
                }

                string_literal211 = (Token) match(input, TO, FOLLOW_TO_in_procedureReference4718);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    string_literal211_tree = (Object) adaptor.create(string_literal211);
                    adaptor.addChild(root_0, string_literal211_tree);
                }

                pushFollow(FOLLOW_procedureTypeHeading_in_procedureReference4720);
                procedureTypeHeading212 = procedureTypeHeading();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, procedureTypeHeading212.getTree());

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 53, procedureReference_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "procedureTypeHeading"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:230:1: procedureTypeHeading : ( 'function' ( formalParameterSection )? ':' ( customAttribute )? typeDecl -> 'function' ( formalParameterSection )? ^( TkFunctionReturn typeDecl ) | 'procedure' ( formalParameterSection )? );
    public final DelphiParser.procedureTypeHeading_return procedureTypeHeading() throws RecognitionException {
        DelphiParser.procedureTypeHeading_return retval = new DelphiParser.procedureTypeHeading_return();
        retval.start = input.LT(1);
        int procedureTypeHeading_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal213 = null;
        Token char_literal215 = null;
        Token string_literal218 = null;
        ParserRuleReturnScope formalParameterSection214 = null;
        ParserRuleReturnScope customAttribute216 = null;
        ParserRuleReturnScope typeDecl217 = null;
        ParserRuleReturnScope formalParameterSection219 = null;

        Object string_literal213_tree = null;
        Object char_literal215_tree = null;
        Object string_literal218_tree = null;
        RewriteRuleTokenStream stream_COLON = new RewriteRuleTokenStream(adaptor, "token COLON");
        RewriteRuleTokenStream stream_FUNCTION = new RewriteRuleTokenStream(adaptor, "token FUNCTION");
        RewriteRuleSubtreeStream stream_customAttribute = new RewriteRuleSubtreeStream(adaptor, "rule customAttribute");
        RewriteRuleSubtreeStream stream_formalParameterSection = new RewriteRuleSubtreeStream(adaptor, "rule formalParameterSection");
        RewriteRuleSubtreeStream stream_typeDecl = new RewriteRuleSubtreeStream(adaptor, "rule typeDecl");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 54)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:230:30: ( 'function' ( formalParameterSection )? ':' ( customAttribute )? typeDecl -> 'function' ( formalParameterSection )? ^( TkFunctionReturn typeDecl ) | 'procedure' ( formalParameterSection )? )
            int alt67 = 2;
            int LA67_0 = input.LA(1);
            if ((LA67_0 == FUNCTION)) {
                alt67 = 1;
            } else if ((LA67_0 == PROCEDURE)) {
                alt67 = 2;
            } else {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae =
                        new NoViableAltException("", 67, 0, input);
                throw nvae;
            }

            switch (alt67) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:230:32: 'function' ( formalParameterSection )? ':' ( customAttribute )? typeDecl
                {
                    string_literal213 = (Token) match(input, FUNCTION, FOLLOW_FUNCTION_in_procedureTypeHeading4765);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_FUNCTION.add(string_literal213);

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:230:43: ( formalParameterSection )?
                    int alt64 = 2;
                    int LA64_0 = input.LA(1);
                    if ((LA64_0 == LPAREN)) {
                        alt64 = 1;
                    }
                    switch (alt64) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:230:44: formalParameterSection
                        {
                            pushFollow(FOLLOW_formalParameterSection_in_procedureTypeHeading4768);
                            formalParameterSection214 = formalParameterSection();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0)
                                stream_formalParameterSection.add(formalParameterSection214.getTree());
                        }
                        break;

                    }

                    char_literal215 = (Token) match(input, COLON, FOLLOW_COLON_in_procedureTypeHeading4772);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_COLON.add(char_literal215);

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:230:73: ( customAttribute )?
                    int alt65 = 2;
                    alt65 = dfa65.predict(input);
                    switch (alt65) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:230:74: customAttribute
                        {
                            pushFollow(FOLLOW_customAttribute_in_procedureTypeHeading4775);
                            customAttribute216 = customAttribute();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_customAttribute.add(customAttribute216.getTree());
                        }
                        break;

                    }

                    pushFollow(FOLLOW_typeDecl_in_procedureTypeHeading4779);
                    typeDecl217 = typeDecl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_typeDecl.add(typeDecl217.getTree());
                    // AST REWRITE
                    // elements: formalParameterSection, typeDecl, FUNCTION
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if (state.backtracking == 0) {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                        root_0 = (Object) adaptor.nil();
                        // 230:101: -> 'function' ( formalParameterSection )? ^( TkFunctionReturn typeDecl )
                        {
                            adaptor.addChild(root_0, stream_FUNCTION.nextNode());
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:230:115: ( formalParameterSection )?
                            if (stream_formalParameterSection.hasNext()) {
                                adaptor.addChild(root_0, stream_formalParameterSection.nextTree());
                            }
                            stream_formalParameterSection.reset();

                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:230:141: ^( TkFunctionReturn typeDecl )
                            {
                                Object root_1 = (Object) adaptor.nil();
                                root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(TkFunctionReturn, "TkFunctionReturn"), root_1);
                                adaptor.addChild(root_1, stream_typeDecl.nextTree());
                                adaptor.addChild(root_0, root_1);
                            }

                        }


                        retval.tree = root_0;
                    }

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:231:32: 'procedure' ( formalParameterSection )?
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal218 = (Token) match(input, PROCEDURE, FOLLOW_PROCEDURE_in_procedureTypeHeading4827);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal218_tree = (Object) adaptor.create(string_literal218);
                        adaptor.addChild(root_0, string_literal218_tree);
                    }

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:231:44: ( formalParameterSection )?
                    int alt66 = 2;
                    alt66 = dfa66.predict(input);
                    switch (alt66) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:231:45: formalParameterSection
                        {
                            pushFollow(FOLLOW_formalParameterSection_in_procedureTypeHeading4830);
                            formalParameterSection219 = formalParameterSection();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, formalParameterSection219.getTree());

                        }
                        break;

                    }

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 54, procedureTypeHeading_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "variantType"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:233:1: variantType : 'variant' ;
    public final DelphiParser.variantType_return variantType() throws RecognitionException {
        DelphiParser.variantType_return retval = new DelphiParser.variantType_return();
        retval.start = input.LT(1);
        int variantType_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal220 = null;

        Object string_literal220_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 55)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:233:30: ( 'variant' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:233:32: 'variant'
            {
                root_0 = (Object) adaptor.nil();


                string_literal220 = (Token) match(input, VARIANT, FOLLOW_VARIANT_in_variantType4886);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    string_literal220_tree = (Object) adaptor.create(string_literal220);
                    adaptor.addChild(root_0, string_literal220_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 55, variantType_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "simpleType"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:235:1: simpleType : ( ident | subRangeType | enumType );
    public final DelphiParser.simpleType_return simpleType() throws RecognitionException {
        DelphiParser.simpleType_return retval = new DelphiParser.simpleType_return();
        retval.start = input.LT(1);
        int simpleType_StartIndex = input.index();

        Object root_0 = null;

        ParserRuleReturnScope ident221 = null;
        ParserRuleReturnScope subRangeType222 = null;
        ParserRuleReturnScope enumType223 = null;


        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 56)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:235:30: ( ident | subRangeType | enumType )
            int alt68 = 3;
            alt68 = dfa68.predict(input);
            switch (alt68) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:235:32: ident
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_ident_in_simpleType4942);
                    ident221 = ident();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, ident221.getTree());

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:236:32: subRangeType
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_subRangeType_in_simpleType4975);
                    subRangeType222 = subRangeType();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, subRangeType222.getTree());

                }
                break;
                case 3:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:237:32: enumType
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_enumType_in_simpleType5008);
                    enumType223 = enumType();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, enumType223.getTree());

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 56, simpleType_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "subRangeType"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:239:1: subRangeType : constExpression ( '..' constExpression )? ;
    public final DelphiParser.subRangeType_return subRangeType() throws RecognitionException {
        DelphiParser.subRangeType_return retval = new DelphiParser.subRangeType_return();
        retval.start = input.LT(1);
        int subRangeType_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal225 = null;
        ParserRuleReturnScope constExpression224 = null;
        ParserRuleReturnScope constExpression226 = null;

        Object string_literal225_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 57)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:239:30: ( constExpression ( '..' constExpression )? )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:239:32: constExpression ( '..' constExpression )?
            {
                root_0 = (Object) adaptor.nil();


                pushFollow(FOLLOW_constExpression_in_subRangeType5061);
                constExpression224 = constExpression();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, constExpression224.getTree());

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:239:48: ( '..' constExpression )?
                int alt69 = 2;
                int LA69_0 = input.LA(1);
                if ((LA69_0 == DOTDOT)) {
                    int LA69_1 = input.LA(2);
                    if ((synpred95_Delphi())) {
                        alt69 = 1;
                    }
                }
                switch (alt69) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:239:49: '..' constExpression
                    {
                        string_literal225 = (Token) match(input, DOTDOT, FOLLOW_DOTDOT_in_subRangeType5064);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) {
                            string_literal225_tree = (Object) adaptor.create(string_literal225);
                            adaptor.addChild(root_0, string_literal225_tree);
                        }

                        pushFollow(FOLLOW_constExpression_in_subRangeType5066);
                        constExpression226 = constExpression();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) adaptor.addChild(root_0, constExpression226.getTree());

                    }
                    break;

                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 57, subRangeType_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "enumType"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:241:1: enumType : '(' ident ( '=' expression )? ( ',' ident ( '=' expression )? )* ')' ;
    public final DelphiParser.enumType_return enumType() throws RecognitionException {
        DelphiParser.enumType_return retval = new DelphiParser.enumType_return();
        retval.start = input.LT(1);
        int enumType_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal227 = null;
        Token char_literal229 = null;
        Token char_literal231 = null;
        Token char_literal233 = null;
        Token char_literal235 = null;
        ParserRuleReturnScope ident228 = null;
        ParserRuleReturnScope expression230 = null;
        ParserRuleReturnScope ident232 = null;
        ParserRuleReturnScope expression234 = null;

        Object char_literal227_tree = null;
        Object char_literal229_tree = null;
        Object char_literal231_tree = null;
        Object char_literal233_tree = null;
        Object char_literal235_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 58)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:241:30: ( '(' ident ( '=' expression )? ( ',' ident ( '=' expression )? )* ')' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:241:32: '(' ident ( '=' expression )? ( ',' ident ( '=' expression )? )* ')'
            {
                root_0 = (Object) adaptor.nil();


                char_literal227 = (Token) match(input, LPAREN, FOLLOW_LPAREN_in_enumType5125);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    char_literal227_tree = (Object) adaptor.create(char_literal227);
                    adaptor.addChild(root_0, char_literal227_tree);
                }

                pushFollow(FOLLOW_ident_in_enumType5127);
                ident228 = ident();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, ident228.getTree());

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:241:42: ( '=' expression )?
                int alt70 = 2;
                int LA70_0 = input.LA(1);
                if ((LA70_0 == EQUAL)) {
                    alt70 = 1;
                }
                switch (alt70) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:241:43: '=' expression
                    {
                        char_literal229 = (Token) match(input, EQUAL, FOLLOW_EQUAL_in_enumType5130);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) {
                            char_literal229_tree = (Object) adaptor.create(char_literal229);
                            adaptor.addChild(root_0, char_literal229_tree);
                        }

                        pushFollow(FOLLOW_expression_in_enumType5132);
                        expression230 = expression();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) adaptor.addChild(root_0, expression230.getTree());

                    }
                    break;

                }

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:241:60: ( ',' ident ( '=' expression )? )*
                loop72:
                while (true) {
                    int alt72 = 2;
                    int LA72_0 = input.LA(1);
                    if ((LA72_0 == COMMA)) {
                        alt72 = 1;
                    }

                    switch (alt72) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:241:61: ',' ident ( '=' expression )?
                        {
                            char_literal231 = (Token) match(input, COMMA, FOLLOW_COMMA_in_enumType5137);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) {
                                char_literal231_tree = (Object) adaptor.create(char_literal231);
                                adaptor.addChild(root_0, char_literal231_tree);
                            }

                            pushFollow(FOLLOW_ident_in_enumType5139);
                            ident232 = ident();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, ident232.getTree());

                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:241:71: ( '=' expression )?
                            int alt71 = 2;
                            int LA71_0 = input.LA(1);
                            if ((LA71_0 == EQUAL)) {
                                alt71 = 1;
                            }
                            switch (alt71) {
                                case 1:
                                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:241:72: '=' expression
                                {
                                    char_literal233 = (Token) match(input, EQUAL, FOLLOW_EQUAL_in_enumType5142);
                                    if (state.failed) return retval;
                                    if (state.backtracking == 0) {
                                        char_literal233_tree = (Object) adaptor.create(char_literal233);
                                        adaptor.addChild(root_0, char_literal233_tree);
                                    }

                                    pushFollow(FOLLOW_expression_in_enumType5144);
                                    expression234 = expression();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if (state.backtracking == 0) adaptor.addChild(root_0, expression234.getTree());

                                }
                                break;

                            }

                        }
                        break;

                        default:
                            break loop72;
                    }
                }

                char_literal235 = (Token) match(input, RPAREN, FOLLOW_RPAREN_in_enumType5151);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    char_literal235_tree = (Object) adaptor.create(char_literal235);
                    adaptor.addChild(root_0, char_literal235_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 58, enumType_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "typeId"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:243:1: typeId : namespacedQualifiedIdent ;
    public final DelphiParser.typeId_return typeId() throws RecognitionException {
        DelphiParser.typeId_return retval = new DelphiParser.typeId_return();
        retval.start = input.LT(1);
        int typeId_StartIndex = input.index();

        Object root_0 = null;

        ParserRuleReturnScope namespacedQualifiedIdent236 = null;


        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 59)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:243:30: ( namespacedQualifiedIdent )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:243:32: namespacedQualifiedIdent
            {
                root_0 = (Object) adaptor.nil();


                pushFollow(FOLLOW_namespacedQualifiedIdent_in_typeId5210);
                namespacedQualifiedIdent236 = namespacedQualifiedIdent();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, namespacedQualifiedIdent236.getTree());

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 59, typeId_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "genericTypeIdent"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:248:1: genericTypeIdent : qualifiedIdent ( genericDefinition )? -> qualifiedIdent ;
    public final DelphiParser.genericTypeIdent_return genericTypeIdent() throws RecognitionException {
        DelphiParser.genericTypeIdent_return retval = new DelphiParser.genericTypeIdent_return();
        retval.start = input.LT(1);
        int genericTypeIdent_StartIndex = input.index();

        Object root_0 = null;

        ParserRuleReturnScope qualifiedIdent237 = null;
        ParserRuleReturnScope genericDefinition238 = null;

        RewriteRuleSubtreeStream stream_genericDefinition = new RewriteRuleSubtreeStream(adaptor, "rule genericDefinition");
        RewriteRuleSubtreeStream stream_qualifiedIdent = new RewriteRuleSubtreeStream(adaptor, "rule qualifiedIdent");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 60)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:248:30: ( qualifiedIdent ( genericDefinition )? -> qualifiedIdent )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:248:32: qualifiedIdent ( genericDefinition )?
            {
                pushFollow(FOLLOW_qualifiedIdent_in_genericTypeIdent5262);
                qualifiedIdent237 = qualifiedIdent();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_qualifiedIdent.add(qualifiedIdent237.getTree());
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:248:47: ( genericDefinition )?
                int alt73 = 2;
                int LA73_0 = input.LA(1);
                if ((LA73_0 == LT)) {
                    alt73 = 1;
                }
                switch (alt73) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:248:48: genericDefinition
                    {
                        pushFollow(FOLLOW_genericDefinition_in_genericTypeIdent5265);
                        genericDefinition238 = genericDefinition();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_genericDefinition.add(genericDefinition238.getTree());
                    }
                    break;

                }

                // AST REWRITE
                // elements: qualifiedIdent
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 248:68: -> qualifiedIdent
                    {
                        adaptor.addChild(root_0, stream_qualifiedIdent.nextTree());
                    }


                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 60, genericTypeIdent_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "genericDefinition"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:250:1: genericDefinition : ( simpleGenericDefinition | constrainedGenericDefinition );
    public final DelphiParser.genericDefinition_return genericDefinition() throws RecognitionException {
        DelphiParser.genericDefinition_return retval = new DelphiParser.genericDefinition_return();
        retval.start = input.LT(1);
        int genericDefinition_StartIndex = input.index();

        Object root_0 = null;

        ParserRuleReturnScope simpleGenericDefinition239 = null;
        ParserRuleReturnScope constrainedGenericDefinition240 = null;


        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 61)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:250:30: ( simpleGenericDefinition | constrainedGenericDefinition )
            int alt74 = 2;
            int LA74_0 = input.LA(1);
            if ((LA74_0 == LT)) {
                switch (input.LA(2)) {
                    case TkIdentifier: {
                        switch (input.LA(3)) {
                            case COMMA: {
                                alt74 = 1;
                            }
                            break;
                            case GT: {
                                int LA74_6 = input.LA(4);
                                if ((synpred100_Delphi())) {
                                    alt74 = 1;
                                } else if ((true)) {
                                    alt74 = 2;
                                }

                            }
                            break;
                            case COLON:
                            case SEMI: {
                                alt74 = 2;
                            }
                            break;
                            default:
                                if (state.backtracking > 0) {
                                    state.failed = true;
                                    return retval;
                                }
                                int nvaeMark = input.mark();
                                try {
                                    for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
                                        input.consume();
                                    }
                                    NoViableAltException nvae =
                                            new NoViableAltException("", 74, 2, input);
                                    throw nvae;
                                } finally {
                                    input.rewind(nvaeMark);
                                }
                        }
                    }
                    break;
                    case 200: {
                        int LA74_3 = input.LA(3);
                        if ((LA74_3 == TkIdentifier)) {
                            switch (input.LA(4)) {
                                case COMMA: {
                                    alt74 = 1;
                                }
                                break;
                                case GT: {
                                    int LA74_10 = input.LA(5);
                                    if ((synpred100_Delphi())) {
                                        alt74 = 1;
                                    } else if ((true)) {
                                        alt74 = 2;
                                    }

                                }
                                break;
                                case COLON:
                                case SEMI: {
                                    alt74 = 2;
                                }
                                break;
                                default:
                                    if (state.backtracking > 0) {
                                        state.failed = true;
                                        return retval;
                                    }
                                    int nvaeMark = input.mark();
                                    try {
                                        for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
                                            input.consume();
                                        }
                                        NoViableAltException nvae =
                                                new NoViableAltException("", 74, 8, input);
                                        throw nvae;
                                    } finally {
                                        input.rewind(nvaeMark);
                                    }
                            }
                        } else {
                            if (state.backtracking > 0) {
                                state.failed = true;
                                return retval;
                            }
                            int nvaeMark = input.mark();
                            try {
                                for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
                                    input.consume();
                                }
                                NoViableAltException nvae =
                                        new NoViableAltException("", 74, 3, input);
                                throw nvae;
                            } finally {
                                input.rewind(nvaeMark);
                            }
                        }

                    }
                    break;
                    case ADD:
                    case ANSISTRING:
                    case AT:
                    case BREAK:
                    case CONTAINS:
                    case CONTINUE:
                    case DEFAULT:
                    case EXIT:
                    case EXPORT:
                    case FINAL:
                    case IMPLEMENTS:
                    case INDEX:
                    case LOCAL:
                    case MESSAGE:
                    case NAME:
                    case OBJECT:
                    case OPERATOR:
                    case OUT:
                    case POINTER:
                    case READ:
                    case READONLY:
                    case REFERENCE:
                    case REGISTER:
                    case REMOVE:
                    case STORED:
                    case STRICT:
                    case STRING:
                    case VARIANT:
                    case WRITE: {
                        switch (input.LA(3)) {
                            case COMMA: {
                                alt74 = 1;
                            }
                            break;
                            case GT: {
                                int LA74_9 = input.LA(4);
                                if ((synpred100_Delphi())) {
                                    alt74 = 1;
                                } else if ((true)) {
                                    alt74 = 2;
                                }

                            }
                            break;
                            case COLON:
                            case SEMI: {
                                alt74 = 2;
                            }
                            break;
                            default:
                                if (state.backtracking > 0) {
                                    state.failed = true;
                                    return retval;
                                }
                                int nvaeMark = input.mark();
                                try {
                                    for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
                                        input.consume();
                                    }
                                    NoViableAltException nvae =
                                            new NoViableAltException("", 74, 4, input);
                                    throw nvae;
                                } finally {
                                    input.rewind(nvaeMark);
                                }
                        }
                    }
                    break;
                    default:
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try {
                            input.consume();
                            NoViableAltException nvae =
                                    new NoViableAltException("", 74, 1, input);
                            throw nvae;
                        } finally {
                            input.rewind(nvaeMark);
                        }
                }
            } else {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae =
                        new NoViableAltException("", 74, 0, input);
                throw nvae;
            }

            switch (alt74) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:250:32: simpleGenericDefinition
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_simpleGenericDefinition_in_genericDefinition5323);
                    simpleGenericDefinition239 = simpleGenericDefinition();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, simpleGenericDefinition239.getTree());

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:251:32: constrainedGenericDefinition
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_constrainedGenericDefinition_in_genericDefinition5356);
                    constrainedGenericDefinition240 = constrainedGenericDefinition();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, constrainedGenericDefinition240.getTree());

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 61, genericDefinition_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "simpleGenericDefinition"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:253:1: simpleGenericDefinition : '<' ident ( ',' ident )* '>' ;
    public final DelphiParser.simpleGenericDefinition_return simpleGenericDefinition() throws RecognitionException {
        DelphiParser.simpleGenericDefinition_return retval = new DelphiParser.simpleGenericDefinition_return();
        retval.start = input.LT(1);
        int simpleGenericDefinition_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal241 = null;
        Token char_literal243 = null;
        Token char_literal245 = null;
        ParserRuleReturnScope ident242 = null;
        ParserRuleReturnScope ident244 = null;

        Object char_literal241_tree = null;
        Object char_literal243_tree = null;
        Object char_literal245_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 62)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:253:30: ( '<' ident ( ',' ident )* '>' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:253:32: '<' ident ( ',' ident )* '>'
            {
                root_0 = (Object) adaptor.nil();


                char_literal241 = (Token) match(input, LT, FOLLOW_LT_in_simpleGenericDefinition5398);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    char_literal241_tree = (Object) adaptor.create(char_literal241);
                    adaptor.addChild(root_0, char_literal241_tree);
                }

                pushFollow(FOLLOW_ident_in_simpleGenericDefinition5400);
                ident242 = ident();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, ident242.getTree());

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:253:42: ( ',' ident )*
                loop75:
                while (true) {
                    int alt75 = 2;
                    int LA75_0 = input.LA(1);
                    if ((LA75_0 == COMMA)) {
                        alt75 = 1;
                    }

                    switch (alt75) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:253:43: ',' ident
                        {
                            char_literal243 = (Token) match(input, COMMA, FOLLOW_COMMA_in_simpleGenericDefinition5403);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) {
                                char_literal243_tree = (Object) adaptor.create(char_literal243);
                                adaptor.addChild(root_0, char_literal243_tree);
                            }

                            pushFollow(FOLLOW_ident_in_simpleGenericDefinition5405);
                            ident244 = ident();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, ident244.getTree());

                        }
                        break;

                        default:
                            break loop75;
                    }
                }

                char_literal245 = (Token) match(input, GT, FOLLOW_GT_in_simpleGenericDefinition5409);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    char_literal245_tree = (Object) adaptor.create(char_literal245);
                    adaptor.addChild(root_0, char_literal245_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 62, simpleGenericDefinition_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "constrainedGenericDefinition"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:255:1: constrainedGenericDefinition : '<' constrainedGeneric ( ';' constrainedGeneric )* '>' ;
    public final DelphiParser.constrainedGenericDefinition_return constrainedGenericDefinition() throws RecognitionException {
        DelphiParser.constrainedGenericDefinition_return retval = new DelphiParser.constrainedGenericDefinition_return();
        retval.start = input.LT(1);
        int constrainedGenericDefinition_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal246 = null;
        Token char_literal248 = null;
        Token char_literal250 = null;
        ParserRuleReturnScope constrainedGeneric247 = null;
        ParserRuleReturnScope constrainedGeneric249 = null;

        Object char_literal246_tree = null;
        Object char_literal248_tree = null;
        Object char_literal250_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 63)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:255:30: ( '<' constrainedGeneric ( ';' constrainedGeneric )* '>' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:255:32: '<' constrainedGeneric ( ';' constrainedGeneric )* '>'
            {
                root_0 = (Object) adaptor.nil();


                char_literal246 = (Token) match(input, LT, FOLLOW_LT_in_constrainedGenericDefinition5446);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    char_literal246_tree = (Object) adaptor.create(char_literal246);
                    adaptor.addChild(root_0, char_literal246_tree);
                }

                pushFollow(FOLLOW_constrainedGeneric_in_constrainedGenericDefinition5448);
                constrainedGeneric247 = constrainedGeneric();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, constrainedGeneric247.getTree());

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:255:55: ( ';' constrainedGeneric )*
                loop76:
                while (true) {
                    int alt76 = 2;
                    int LA76_0 = input.LA(1);
                    if ((LA76_0 == SEMI)) {
                        alt76 = 1;
                    }

                    switch (alt76) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:255:56: ';' constrainedGeneric
                        {
                            char_literal248 = (Token) match(input, SEMI, FOLLOW_SEMI_in_constrainedGenericDefinition5451);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) {
                                char_literal248_tree = (Object) adaptor.create(char_literal248);
                                adaptor.addChild(root_0, char_literal248_tree);
                            }

                            pushFollow(FOLLOW_constrainedGeneric_in_constrainedGenericDefinition5453);
                            constrainedGeneric249 = constrainedGeneric();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, constrainedGeneric249.getTree());

                        }
                        break;

                        default:
                            break loop76;
                    }
                }

                char_literal250 = (Token) match(input, GT, FOLLOW_GT_in_constrainedGenericDefinition5457);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    char_literal250_tree = (Object) adaptor.create(char_literal250);
                    adaptor.addChild(root_0, char_literal250_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 63, constrainedGenericDefinition_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "constrainedGeneric"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:257:1: constrainedGeneric : ident ( ':' genericConstraint ( ',' genericConstraint )* )? ;
    public final DelphiParser.constrainedGeneric_return constrainedGeneric() throws RecognitionException {
        DelphiParser.constrainedGeneric_return retval = new DelphiParser.constrainedGeneric_return();
        retval.start = input.LT(1);
        int constrainedGeneric_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal252 = null;
        Token char_literal254 = null;
        ParserRuleReturnScope ident251 = null;
        ParserRuleReturnScope genericConstraint253 = null;
        ParserRuleReturnScope genericConstraint255 = null;

        Object char_literal252_tree = null;
        Object char_literal254_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 64)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:257:30: ( ident ( ':' genericConstraint ( ',' genericConstraint )* )? )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:257:32: ident ( ':' genericConstraint ( ',' genericConstraint )* )?
            {
                root_0 = (Object) adaptor.nil();


                pushFollow(FOLLOW_ident_in_constrainedGeneric5504);
                ident251 = ident();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, ident251.getTree());

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:257:38: ( ':' genericConstraint ( ',' genericConstraint )* )?
                int alt78 = 2;
                int LA78_0 = input.LA(1);
                if ((LA78_0 == COLON)) {
                    alt78 = 1;
                }
                switch (alt78) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:257:39: ':' genericConstraint ( ',' genericConstraint )*
                    {
                        char_literal252 = (Token) match(input, COLON, FOLLOW_COLON_in_constrainedGeneric5507);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) {
                            char_literal252_tree = (Object) adaptor.create(char_literal252);
                            adaptor.addChild(root_0, char_literal252_tree);
                        }

                        pushFollow(FOLLOW_genericConstraint_in_constrainedGeneric5509);
                        genericConstraint253 = genericConstraint();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) adaptor.addChild(root_0, genericConstraint253.getTree());

                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:257:61: ( ',' genericConstraint )*
                        loop77:
                        while (true) {
                            int alt77 = 2;
                            int LA77_0 = input.LA(1);
                            if ((LA77_0 == COMMA)) {
                                alt77 = 1;
                            }

                            switch (alt77) {
                                case 1:
                                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:257:62: ',' genericConstraint
                                {
                                    char_literal254 = (Token) match(input, COMMA, FOLLOW_COMMA_in_constrainedGeneric5512);
                                    if (state.failed) return retval;
                                    if (state.backtracking == 0) {
                                        char_literal254_tree = (Object) adaptor.create(char_literal254);
                                        adaptor.addChild(root_0, char_literal254_tree);
                                    }

                                    pushFollow(FOLLOW_genericConstraint_in_constrainedGeneric5514);
                                    genericConstraint255 = genericConstraint();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if (state.backtracking == 0)
                                        adaptor.addChild(root_0, genericConstraint255.getTree());

                                }
                                break;

                                default:
                                    break loop77;
                            }
                        }

                    }
                    break;

                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 64, constrainedGeneric_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "genericConstraint"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:259:1: genericConstraint : ( ident | 'record' | 'class' | 'constructor' );
    public final DelphiParser.genericConstraint_return genericConstraint() throws RecognitionException {
        DelphiParser.genericConstraint_return retval = new DelphiParser.genericConstraint_return();
        retval.start = input.LT(1);
        int genericConstraint_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal257 = null;
        Token string_literal258 = null;
        Token string_literal259 = null;
        ParserRuleReturnScope ident256 = null;

        Object string_literal257_tree = null;
        Object string_literal258_tree = null;
        Object string_literal259_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 65)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:259:30: ( ident | 'record' | 'class' | 'constructor' )
            int alt79 = 4;
            switch (input.LA(1)) {
                case ADD:
                case ANSISTRING:
                case AT:
                case BREAK:
                case CONTAINS:
                case CONTINUE:
                case DEFAULT:
                case EXIT:
                case EXPORT:
                case FINAL:
                case IMPLEMENTS:
                case INDEX:
                case LOCAL:
                case MESSAGE:
                case NAME:
                case OBJECT:
                case OPERATOR:
                case OUT:
                case POINTER:
                case READ:
                case READONLY:
                case REFERENCE:
                case REGISTER:
                case REMOVE:
                case STORED:
                case STRICT:
                case STRING:
                case TkIdentifier:
                case VARIANT:
                case WRITE:
                case 200: {
                    alt79 = 1;
                }
                break;
                case RECORD: {
                    alt79 = 2;
                }
                break;
                case CLASS: {
                    alt79 = 3;
                }
                break;
                case CONSTRUCTOR: {
                    alt79 = 4;
                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae =
                            new NoViableAltException("", 79, 0, input);
                    throw nvae;
            }
            switch (alt79) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:259:32: ident
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_ident_in_genericConstraint5566);
                    ident256 = ident();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, ident256.getTree());

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:260:32: 'record'
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal257 = (Token) match(input, RECORD, FOLLOW_RECORD_in_genericConstraint5599);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal257_tree = (Object) adaptor.create(string_literal257);
                        adaptor.addChild(root_0, string_literal257_tree);
                    }

                }
                break;
                case 3:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:261:32: 'class'
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal258 = (Token) match(input, CLASS, FOLLOW_CLASS_in_genericConstraint5632);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal258_tree = (Object) adaptor.create(string_literal258);
                        adaptor.addChild(root_0, string_literal258_tree);
                    }

                }
                break;
                case 4:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:262:32: 'constructor'
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal259 = (Token) match(input, CONSTRUCTOR, FOLLOW_CONSTRUCTOR_in_genericConstraint5665);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal259_tree = (Object) adaptor.create(string_literal259);
                        adaptor.addChild(root_0, string_literal259_tree);
                    }

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 65, genericConstraint_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "genericPostfix"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:264:1: genericPostfix : '<' typeDecl ( ',' typeDecl )* '>' ;
    public final DelphiParser.genericPostfix_return genericPostfix() throws RecognitionException {
        DelphiParser.genericPostfix_return retval = new DelphiParser.genericPostfix_return();
        retval.start = input.LT(1);
        int genericPostfix_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal260 = null;
        Token char_literal262 = null;
        Token char_literal264 = null;
        ParserRuleReturnScope typeDecl261 = null;
        ParserRuleReturnScope typeDecl263 = null;

        Object char_literal260_tree = null;
        Object char_literal262_tree = null;
        Object char_literal264_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 66)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:264:30: ( '<' typeDecl ( ',' typeDecl )* '>' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:264:32: '<' typeDecl ( ',' typeDecl )* '>'
            {
                root_0 = (Object) adaptor.nil();


                char_literal260 = (Token) match(input, LT, FOLLOW_LT_in_genericPostfix5716);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    char_literal260_tree = (Object) adaptor.create(char_literal260);
                    adaptor.addChild(root_0, char_literal260_tree);
                }

                pushFollow(FOLLOW_typeDecl_in_genericPostfix5718);
                typeDecl261 = typeDecl();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, typeDecl261.getTree());

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:264:45: ( ',' typeDecl )*
                loop80:
                while (true) {
                    int alt80 = 2;
                    int LA80_0 = input.LA(1);
                    if ((LA80_0 == COMMA)) {
                        alt80 = 1;
                    }

                    switch (alt80) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:264:46: ',' typeDecl
                        {
                            char_literal262 = (Token) match(input, COMMA, FOLLOW_COMMA_in_genericPostfix5721);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) {
                                char_literal262_tree = (Object) adaptor.create(char_literal262);
                                adaptor.addChild(root_0, char_literal262_tree);
                            }

                            pushFollow(FOLLOW_typeDecl_in_genericPostfix5723);
                            typeDecl263 = typeDecl();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, typeDecl263.getTree());

                        }
                        break;

                        default:
                            break loop80;
                    }
                }

                char_literal264 = (Token) match(input, GT, FOLLOW_GT_in_genericPostfix5727);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    char_literal264_tree = (Object) adaptor.create(char_literal264);
                    adaptor.addChild(root_0, char_literal264_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 66, genericPostfix_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "classDecl"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:269:1: classDecl : ( classTypeTypeDecl | classTypeDecl -> ^( TkClass classTypeDecl ) | classHelperDecl -> ^( TkClass classHelperDecl ) | interfaceTypeDecl -> ^( TkInterface interfaceTypeDecl ) | objectDecl -> ^( TkObject objectDecl ) | recordDecl -> ^( TkRecord recordDecl ) | recordHelperDecl -> ^( TkRecordHelper recordHelperDecl ) );
    public final DelphiParser.classDecl_return classDecl() throws RecognitionException {
        DelphiParser.classDecl_return retval = new DelphiParser.classDecl_return();
        retval.start = input.LT(1);
        int classDecl_StartIndex = input.index();

        Object root_0 = null;

        ParserRuleReturnScope classTypeTypeDecl265 = null;
        ParserRuleReturnScope classTypeDecl266 = null;
        ParserRuleReturnScope classHelperDecl267 = null;
        ParserRuleReturnScope interfaceTypeDecl268 = null;
        ParserRuleReturnScope objectDecl269 = null;
        ParserRuleReturnScope recordDecl270 = null;
        ParserRuleReturnScope recordHelperDecl271 = null;

        RewriteRuleSubtreeStream stream_interfaceTypeDecl = new RewriteRuleSubtreeStream(adaptor, "rule interfaceTypeDecl");
        RewriteRuleSubtreeStream stream_recordHelperDecl = new RewriteRuleSubtreeStream(adaptor, "rule recordHelperDecl");
        RewriteRuleSubtreeStream stream_objectDecl = new RewriteRuleSubtreeStream(adaptor, "rule objectDecl");
        RewriteRuleSubtreeStream stream_classHelperDecl = new RewriteRuleSubtreeStream(adaptor, "rule classHelperDecl");
        RewriteRuleSubtreeStream stream_recordDecl = new RewriteRuleSubtreeStream(adaptor, "rule recordDecl");
        RewriteRuleSubtreeStream stream_classTypeDecl = new RewriteRuleSubtreeStream(adaptor, "rule classTypeDecl");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 67)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:269:30: ( classTypeTypeDecl | classTypeDecl -> ^( TkClass classTypeDecl ) | classHelperDecl -> ^( TkClass classHelperDecl ) | interfaceTypeDecl -> ^( TkInterface interfaceTypeDecl ) | objectDecl -> ^( TkObject objectDecl ) | recordDecl -> ^( TkRecord recordDecl ) | recordHelperDecl -> ^( TkRecordHelper recordHelperDecl ) )
            int alt81 = 7;
            switch (input.LA(1)) {
                case CLASS: {
                    switch (input.LA(2)) {
                        case OF: {
                            switch (input.LA(3)) {
                                case OBJECT: {
                                    int LA81_10 = input.LA(4);
                                    if ((synpred109_Delphi())) {
                                        alt81 = 1;
                                    } else if ((synpred110_Delphi())) {
                                        alt81 = 2;
                                    } else {
                                        if (state.backtracking > 0) {
                                            state.failed = true;
                                            return retval;
                                        }
                                        int nvaeMark = input.mark();
                                        try {
                                            for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
                                                input.consume();
                                            }
                                            NoViableAltException nvae =
                                                    new NoViableAltException("", 81, 10, input);
                                            throw nvae;
                                        } finally {
                                            input.rewind(nvaeMark);
                                        }
                                    }

                                }
                                break;
                                case TkIdentifier: {
                                    int LA81_11 = input.LA(4);
                                    if ((synpred109_Delphi())) {
                                        alt81 = 1;
                                    } else if ((synpred110_Delphi())) {
                                        alt81 = 2;
                                    } else {
                                        if (state.backtracking > 0) {
                                            state.failed = true;
                                            return retval;
                                        }
                                        int nvaeMark = input.mark();
                                        try {
                                            for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
                                                input.consume();
                                            }
                                            NoViableAltException nvae =
                                                    new NoViableAltException("", 81, 11, input);
                                            throw nvae;
                                        } finally {
                                            input.rewind(nvaeMark);
                                        }
                                    }

                                }
                                break;
                                case 200: {
                                    int LA81_12 = input.LA(4);
                                    if ((LA81_12 == TkIdentifier)) {
                                        int LA81_15 = input.LA(5);
                                        if ((synpred109_Delphi())) {
                                            alt81 = 1;
                                        } else if ((synpred110_Delphi())) {
                                            alt81 = 2;
                                        } else {
                                            if (state.backtracking > 0) {
                                                state.failed = true;
                                                return retval;
                                            }
                                            int nvaeMark = input.mark();
                                            try {
                                                for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++) {
                                                    input.consume();
                                                }
                                                NoViableAltException nvae =
                                                        new NoViableAltException("", 81, 15, input);
                                                throw nvae;
                                            } finally {
                                                input.rewind(nvaeMark);
                                            }
                                        }

                                    } else {
                                        if (state.backtracking > 0) {
                                            state.failed = true;
                                            return retval;
                                        }
                                        int nvaeMark = input.mark();
                                        try {
                                            for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
                                                input.consume();
                                            }
                                            NoViableAltException nvae =
                                                    new NoViableAltException("", 81, 12, input);
                                            throw nvae;
                                        } finally {
                                            input.rewind(nvaeMark);
                                        }
                                    }

                                }
                                break;
                                case ADD:
                                case ANSISTRING:
                                case AT:
                                case BREAK:
                                case CONTAINS:
                                case CONTINUE:
                                case DEFAULT:
                                case EXIT:
                                case EXPORT:
                                case FINAL:
                                case IMPLEMENTS:
                                case INDEX:
                                case LOCAL:
                                case MESSAGE:
                                case NAME:
                                case OPERATOR:
                                case OUT:
                                case POINTER:
                                case READ:
                                case READONLY:
                                case REFERENCE:
                                case REGISTER:
                                case REMOVE:
                                case STORED:
                                case STRICT:
                                case STRING:
                                case VARIANT:
                                case WRITE: {
                                    int LA81_13 = input.LA(4);
                                    if ((synpred109_Delphi())) {
                                        alt81 = 1;
                                    } else if ((synpred110_Delphi())) {
                                        alt81 = 2;
                                    } else {
                                        if (state.backtracking > 0) {
                                            state.failed = true;
                                            return retval;
                                        }
                                        int nvaeMark = input.mark();
                                        try {
                                            for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
                                                input.consume();
                                            }
                                            NoViableAltException nvae =
                                                    new NoViableAltException("", 81, 13, input);
                                            throw nvae;
                                        } finally {
                                            input.rewind(nvaeMark);
                                        }
                                    }

                                }
                                break;
                                case AND:
                                case AS:
                                case AT2:
                                case COLON:
                                case COMMA:
                                case ControlString:
                                case DIV:
                                case DOT:
                                case DOTDOT:
                                case ELSE:
                                case END:
                                case EQUAL:
                                case FALSE:
                                case FUNCTION:
                                case GE:
                                case GT:
                                case IN:
                                case INHERITED:
                                case IS:
                                case LBRACK:
                                case LE:
                                case LPAREN:
                                case LT:
                                case MINUS:
                                case MOD:
                                case NIL:
                                case NOT:
                                case NOT_EQUAL:
                                case OR:
                                case PLUS:
                                case POINTER2:
                                case PROCEDURE:
                                case QuotedString:
                                case SEMI:
                                case SHL:
                                case SHR:
                                case SLASH:
                                case STAR:
                                case TRUE:
                                case TkAsmHexNum:
                                case TkHexNum:
                                case TkIntNum:
                                case TkRealNum:
                                case XOR:
                                case 201: {
                                    alt81 = 2;
                                }
                                break;
                                default:
                                    if (state.backtracking > 0) {
                                        state.failed = true;
                                        return retval;
                                    }
                                    int nvaeMark = input.mark();
                                    try {
                                        for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
                                            input.consume();
                                        }
                                        NoViableAltException nvae =
                                                new NoViableAltException("", 81, 5, input);
                                        throw nvae;
                                    } finally {
                                        input.rewind(nvaeMark);
                                    }
                            }
                        }
                        break;
                        case HELPER: {
                            alt81 = 3;
                        }
                        break;
                        case EOF:
                        case ABSOLUTE:
                        case ABSTRACT:
                        case ADD:
                        case AND:
                        case ANSISTRING:
                        case AS:
                        case ASM:
                        case ASSEMBLER:
                        case AT:
                        case AT2:
                        case AUTOMATED:
                        case BEGIN:
                        case BREAK:
                        case CASE:
                        case CDECL:
                        case CLASS:
                        case COLON:
                        case COMMA:
                        case CONST:
                        case CONSTRUCTOR:
                        case CONTAINS:
                        case CONTINUE:
                        case ControlString:
                        case DEFAULT:
                        case DEPRECATED:
                        case DESTRUCTOR:
                        case DISPID:
                        case DIV:
                        case DO:
                        case DOT:
                        case DOTDOT:
                        case DOWNTO:
                        case ELSE:
                        case END:
                        case EQUAL:
                        case EXCEPT:
                        case EXIT:
                        case EXPERIMENTAL:
                        case EXPORT:
                        case EXPORTS:
                        case EXTERNAL:
                        case FALSE:
                        case FAR:
                        case FINAL:
                        case FINALIZATION:
                        case FINALLY:
                        case FUNCTION:
                        case GE:
                        case GT:
                        case IMPLEMENTATION:
                        case IMPLEMENTS:
                        case IN:
                        case INDEX:
                        case INHERITED:
                        case INITIALIZATION:
                        case INLINE:
                        case IS:
                        case LABEL:
                        case LBRACK:
                        case LE:
                        case LIBRARY:
                        case LOCAL:
                        case LPAREN:
                        case LT:
                        case MESSAGE:
                        case MINUS:
                        case MOD:
                        case NAME:
                        case NEAR:
                        case NIL:
                        case NODEFAULT:
                        case NOT:
                        case NOT_EQUAL:
                        case OBJECT:
                        case ON:
                        case OPERATOR:
                        case OR:
                        case OUT:
                        case OVERLOAD:
                        case PASCAL:
                        case PLATFORM:
                        case PLUS:
                        case POINTER:
                        case POINTER2:
                        case PRIVATE:
                        case PROCEDURE:
                        case PROPERTY:
                        case PROTECTED:
                        case PUBLIC:
                        case PUBLISHED:
                        case QuotedString:
                        case RBRACK:
                        case READ:
                        case READONLY:
                        case REFERENCE:
                        case REGISTER:
                        case REMOVE:
                        case RESIDENT:
                        case RESOURCESTRING:
                        case RPAREN:
                        case SAFECALL:
                        case SEALED:
                        case SEMI:
                        case SHL:
                        case SHR:
                        case SLASH:
                        case STAR:
                        case STDCALL:
                        case STORED:
                        case STRICT:
                        case STRING:
                        case THEN:
                        case THREADVAR:
                        case TO:
                        case TRUE:
                        case TYPE:
                        case TkAsmHexNum:
                        case TkHexNum:
                        case TkIdentifier:
                        case TkIntNum:
                        case TkRealNum:
                        case UNSAFE:
                        case UNTIL:
                        case VAR:
                        case VARARGS:
                        case VARIANT:
                        case WRITE:
                        case WRITEONLY:
                        case XOR:
                        case 200:
                        case 201: {
                            alt81 = 2;
                        }
                        break;
                        default:
                            if (state.backtracking > 0) {
                                state.failed = true;
                                return retval;
                            }
                            int nvaeMark = input.mark();
                            try {
                                input.consume();
                                NoViableAltException nvae =
                                        new NoViableAltException("", 81, 1, input);
                                throw nvae;
                            } finally {
                                input.rewind(nvaeMark);
                            }
                    }
                }
                break;
                case DISPINTERFACE:
                case INTERFACE: {
                    alt81 = 4;
                }
                break;
                case OBJECT: {
                    alt81 = 5;
                }
                break;
                case RECORD: {
                    int LA81_4 = input.LA(2);
                    if ((LA81_4 == HELPER)) {
                        alt81 = 7;
                    } else if ((LA81_4 == ADD || LA81_4 == ANSISTRING || LA81_4 == AT || LA81_4 == AUTOMATED || (LA81_4 >= BREAK && LA81_4 <= CASE) || LA81_4 == CLASS || (LA81_4 >= CONST && LA81_4 <= CONTINUE) || LA81_4 == DEFAULT || LA81_4 == DESTRUCTOR || LA81_4 == END || LA81_4 == EXIT || LA81_4 == EXPORT || LA81_4 == FINAL || LA81_4 == FUNCTION || LA81_4 == IMPLEMENTS || LA81_4 == INDEX || LA81_4 == LBRACK || LA81_4 == LOCAL || LA81_4 == MESSAGE || LA81_4 == NAME || LA81_4 == OBJECT || LA81_4 == OPERATOR || LA81_4 == OUT || LA81_4 == POINTER || (LA81_4 >= PRIVATE && LA81_4 <= PROCEDURE) || (LA81_4 >= PROPERTY && LA81_4 <= PUBLISHED) || (LA81_4 >= READ && LA81_4 <= READONLY) || (LA81_4 >= REFERENCE && LA81_4 <= REGISTER) || LA81_4 == REMOVE || LA81_4 == RESOURCESTRING || (LA81_4 >= STORED && LA81_4 <= STRING) || LA81_4 == THREADVAR || LA81_4 == TYPE || LA81_4 == TkIdentifier || LA81_4 == VAR || LA81_4 == VARIANT || LA81_4 == WRITE || LA81_4 == 200)) {
                        alt81 = 6;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try {
                            input.consume();
                            NoViableAltException nvae =
                                    new NoViableAltException("", 81, 4, input);
                            throw nvae;
                        } finally {
                            input.rewind(nvaeMark);
                        }
                    }

                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae =
                            new NoViableAltException("", 81, 0, input);
                    throw nvae;
            }
            switch (alt81) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:269:32: classTypeTypeDecl
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_classTypeTypeDecl_in_classDecl5786);
                    classTypeTypeDecl265 = classTypeTypeDecl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, classTypeTypeDecl265.getTree());

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:270:32: classTypeDecl
                {
                    pushFollow(FOLLOW_classTypeDecl_in_classDecl5819);
                    classTypeDecl266 = classTypeDecl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_classTypeDecl.add(classTypeDecl266.getTree());
                    // AST REWRITE
                    // elements: classTypeDecl
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if (state.backtracking == 0) {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                        root_0 = (Object) adaptor.nil();
                        // 270:46: -> ^( TkClass classTypeDecl )
                        {
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:270:49: ^( TkClass classTypeDecl )
                            {
                                Object root_1 = (Object) adaptor.nil();
                                root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(TkClass, "TkClass"), root_1);
                                adaptor.addChild(root_1, stream_classTypeDecl.nextTree());
                                adaptor.addChild(root_0, root_1);
                            }

                        }


                        retval.tree = root_0;
                    }

                }
                break;
                case 3:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:271:32: classHelperDecl
                {
                    pushFollow(FOLLOW_classHelperDecl_in_classDecl5860);
                    classHelperDecl267 = classHelperDecl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_classHelperDecl.add(classHelperDecl267.getTree());
                    // AST REWRITE
                    // elements: classHelperDecl
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if (state.backtracking == 0) {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                        root_0 = (Object) adaptor.nil();
                        // 271:48: -> ^( TkClass classHelperDecl )
                        {
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:271:51: ^( TkClass classHelperDecl )
                            {
                                Object root_1 = (Object) adaptor.nil();
                                root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(TkClass, "TkClass"), root_1);
                                adaptor.addChild(root_1, stream_classHelperDecl.nextTree());
                                adaptor.addChild(root_0, root_1);
                            }

                        }


                        retval.tree = root_0;
                    }

                }
                break;
                case 4:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:272:32: interfaceTypeDecl
                {
                    pushFollow(FOLLOW_interfaceTypeDecl_in_classDecl5901);
                    interfaceTypeDecl268 = interfaceTypeDecl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_interfaceTypeDecl.add(interfaceTypeDecl268.getTree());
                    // AST REWRITE
                    // elements: interfaceTypeDecl
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if (state.backtracking == 0) {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                        root_0 = (Object) adaptor.nil();
                        // 272:50: -> ^( TkInterface interfaceTypeDecl )
                        {
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:272:53: ^( TkInterface interfaceTypeDecl )
                            {
                                Object root_1 = (Object) adaptor.nil();
                                root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(TkInterface, "TkInterface"), root_1);
                                adaptor.addChild(root_1, stream_interfaceTypeDecl.nextTree());
                                adaptor.addChild(root_0, root_1);
                            }

                        }


                        retval.tree = root_0;
                    }

                }
                break;
                case 5:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:273:32: objectDecl
                {
                    pushFollow(FOLLOW_objectDecl_in_classDecl5942);
                    objectDecl269 = objectDecl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_objectDecl.add(objectDecl269.getTree());
                    // AST REWRITE
                    // elements: objectDecl
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if (state.backtracking == 0) {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                        root_0 = (Object) adaptor.nil();
                        // 273:43: -> ^( TkObject objectDecl )
                        {
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:273:46: ^( TkObject objectDecl )
                            {
                                Object root_1 = (Object) adaptor.nil();
                                root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(TkObject, "TkObject"), root_1);
                                adaptor.addChild(root_1, stream_objectDecl.nextTree());
                                adaptor.addChild(root_0, root_1);
                            }

                        }


                        retval.tree = root_0;
                    }

                }
                break;
                case 6:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:274:32: recordDecl
                {
                    pushFollow(FOLLOW_recordDecl_in_classDecl5983);
                    recordDecl270 = recordDecl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_recordDecl.add(recordDecl270.getTree());
                    // AST REWRITE
                    // elements: recordDecl
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if (state.backtracking == 0) {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                        root_0 = (Object) adaptor.nil();
                        // 274:43: -> ^( TkRecord recordDecl )
                        {
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:274:46: ^( TkRecord recordDecl )
                            {
                                Object root_1 = (Object) adaptor.nil();
                                root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(TkRecord, "TkRecord"), root_1);
                                adaptor.addChild(root_1, stream_recordDecl.nextTree());
                                adaptor.addChild(root_0, root_1);
                            }

                        }


                        retval.tree = root_0;
                    }

                }
                break;
                case 7:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:275:32: recordHelperDecl
                {
                    pushFollow(FOLLOW_recordHelperDecl_in_classDecl6024);
                    recordHelperDecl271 = recordHelperDecl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_recordHelperDecl.add(recordHelperDecl271.getTree());
                    // AST REWRITE
                    // elements: recordHelperDecl
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if (state.backtracking == 0) {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                        root_0 = (Object) adaptor.nil();
                        // 275:49: -> ^( TkRecordHelper recordHelperDecl )
                        {
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:275:52: ^( TkRecordHelper recordHelperDecl )
                            {
                                Object root_1 = (Object) adaptor.nil();
                                root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(TkRecordHelper, "TkRecordHelper"), root_1);
                                adaptor.addChild(root_1, stream_recordHelperDecl.nextTree());
                                adaptor.addChild(root_0, root_1);
                            }

                        }


                        retval.tree = root_0;
                    }

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 67, classDecl_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "classTypeTypeDecl"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:277:1: classTypeTypeDecl : 'class' 'of' typeId -> ^( TkClassOfType typeId ) ;
    public final DelphiParser.classTypeTypeDecl_return classTypeTypeDecl() throws RecognitionException {
        DelphiParser.classTypeTypeDecl_return retval = new DelphiParser.classTypeTypeDecl_return();
        retval.start = input.LT(1);
        int classTypeTypeDecl_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal272 = null;
        Token string_literal273 = null;
        ParserRuleReturnScope typeId274 = null;

        Object string_literal272_tree = null;
        Object string_literal273_tree = null;
        RewriteRuleTokenStream stream_OF = new RewriteRuleTokenStream(adaptor, "token OF");
        RewriteRuleTokenStream stream_CLASS = new RewriteRuleTokenStream(adaptor, "token CLASS");
        RewriteRuleSubtreeStream stream_typeId = new RewriteRuleSubtreeStream(adaptor, "rule typeId");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 68)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:277:30: ( 'class' 'of' typeId -> ^( TkClassOfType typeId ) )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:277:32: 'class' 'of' typeId
            {
                string_literal272 = (Token) match(input, CLASS, FOLLOW_CLASS_in_classTypeTypeDecl6080);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_CLASS.add(string_literal272);

                string_literal273 = (Token) match(input, OF, FOLLOW_OF_in_classTypeTypeDecl6082);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_OF.add(string_literal273);

                pushFollow(FOLLOW_typeId_in_classTypeTypeDecl6084);
                typeId274 = typeId();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_typeId.add(typeId274.getTree());
                // AST REWRITE
                // elements: typeId
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 277:52: -> ^( TkClassOfType typeId )
                    {
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:277:55: ^( TkClassOfType typeId )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(TkClassOfType, "TkClassOfType"), root_1);
                            adaptor.addChild(root_1, stream_typeId.nextTree());
                            adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 68, classTypeTypeDecl_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "classTypeDecl"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:279:1: classTypeDecl : ( 'class' ( classState )? ( classParent )? ( classItem )* 'end' -> 'class' ^( TkClassParents ( classParent )? ) ( classItem )* | 'class' ( classParent )? -> 'class' ^( TkClassParents ( classParent )? ) );
    public final DelphiParser.classTypeDecl_return classTypeDecl() throws RecognitionException {
        DelphiParser.classTypeDecl_return retval = new DelphiParser.classTypeDecl_return();
        retval.start = input.LT(1);
        int classTypeDecl_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal275 = null;
        Token string_literal279 = null;
        Token string_literal280 = null;
        ParserRuleReturnScope classState276 = null;
        ParserRuleReturnScope classParent277 = null;
        ParserRuleReturnScope classItem278 = null;
        ParserRuleReturnScope classParent281 = null;

        Object string_literal275_tree = null;
        Object string_literal279_tree = null;
        Object string_literal280_tree = null;
        RewriteRuleTokenStream stream_END = new RewriteRuleTokenStream(adaptor, "token END");
        RewriteRuleTokenStream stream_CLASS = new RewriteRuleTokenStream(adaptor, "token CLASS");
        RewriteRuleSubtreeStream stream_classState = new RewriteRuleSubtreeStream(adaptor, "rule classState");
        RewriteRuleSubtreeStream stream_classParent = new RewriteRuleSubtreeStream(adaptor, "rule classParent");
        RewriteRuleSubtreeStream stream_classItem = new RewriteRuleSubtreeStream(adaptor, "rule classItem");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 69)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:279:30: ( 'class' ( classState )? ( classParent )? ( classItem )* 'end' -> 'class' ^( TkClassParents ( classParent )? ) ( classItem )* | 'class' ( classParent )? -> 'class' ^( TkClassParents ( classParent )? ) )
            int alt86 = 2;
            int LA86_0 = input.LA(1);
            if ((LA86_0 == CLASS)) {
                int LA86_1 = input.LA(2);
                if ((synpred118_Delphi())) {
                    alt86 = 1;
                } else if ((true)) {
                    alt86 = 2;
                }

            } else {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae =
                        new NoViableAltException("", 86, 0, input);
                throw nvae;
            }

            switch (alt86) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:279:32: 'class' ( classState )? ( classParent )? ( classItem )* 'end'
                {
                    string_literal275 = (Token) match(input, CLASS, FOLLOW_CLASS_in_classTypeDecl6144);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_CLASS.add(string_literal275);

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:279:40: ( classState )?
                    int alt82 = 2;
                    int LA82_0 = input.LA(1);
                    if ((LA82_0 == ABSTRACT || LA82_0 == SEALED)) {
                        alt82 = 1;
                    }
                    switch (alt82) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:279:41: classState
                        {
                            pushFollow(FOLLOW_classState_in_classTypeDecl6147);
                            classState276 = classState();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_classState.add(classState276.getTree());
                        }
                        break;

                    }

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:279:54: ( classParent )?
                    int alt83 = 2;
                    int LA83_0 = input.LA(1);
                    if ((LA83_0 == LPAREN)) {
                        alt83 = 1;
                    }
                    switch (alt83) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:279:55: classParent
                        {
                            pushFollow(FOLLOW_classParent_in_classTypeDecl6152);
                            classParent277 = classParent();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_classParent.add(classParent277.getTree());
                        }
                        break;

                    }

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:279:69: ( classItem )*
                    loop84:
                    while (true) {
                        int alt84 = 2;
                        int LA84_0 = input.LA(1);
                        if ((LA84_0 == ADD || LA84_0 == ANSISTRING || LA84_0 == AT || LA84_0 == AUTOMATED || LA84_0 == BREAK || LA84_0 == CLASS || (LA84_0 >= CONST && LA84_0 <= CONTINUE) || LA84_0 == DEFAULT || LA84_0 == DESTRUCTOR || LA84_0 == EXIT || LA84_0 == EXPORT || LA84_0 == FINAL || LA84_0 == FUNCTION || LA84_0 == IMPLEMENTS || LA84_0 == INDEX || LA84_0 == LBRACK || LA84_0 == LOCAL || LA84_0 == MESSAGE || LA84_0 == NAME || LA84_0 == OBJECT || LA84_0 == OPERATOR || LA84_0 == OUT || LA84_0 == POINTER || (LA84_0 >= PRIVATE && LA84_0 <= PROCEDURE) || (LA84_0 >= PROPERTY && LA84_0 <= PUBLISHED) || (LA84_0 >= READ && LA84_0 <= READONLY) || (LA84_0 >= REFERENCE && LA84_0 <= REGISTER) || LA84_0 == REMOVE || LA84_0 == RESOURCESTRING || (LA84_0 >= STORED && LA84_0 <= STRING) || LA84_0 == THREADVAR || LA84_0 == TYPE || LA84_0 == TkIdentifier || LA84_0 == VAR || LA84_0 == VARIANT || LA84_0 == WRITE || LA84_0 == 200)) {
                            alt84 = 1;
                        }

                        switch (alt84) {
                            case 1:
                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:279:70: classItem
                            {
                                pushFollow(FOLLOW_classItem_in_classTypeDecl6157);
                                classItem278 = classItem();
                                state._fsp--;
                                if (state.failed) return retval;
                                if (state.backtracking == 0) stream_classItem.add(classItem278.getTree());
                            }
                            break;

                            default:
                                break loop84;
                        }
                    }

                    string_literal279 = (Token) match(input, END, FOLLOW_END_in_classTypeDecl6161);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_END.add(string_literal279);

                    // AST REWRITE
                    // elements: CLASS, classItem, classParent
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if (state.backtracking == 0) {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                        root_0 = (Object) adaptor.nil();
                        // 279:88: -> 'class' ^( TkClassParents ( classParent )? ) ( classItem )*
                        {
                            adaptor.addChild(root_0, stream_CLASS.nextNode());
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:279:99: ^( TkClassParents ( classParent )? )
                            {
                                Object root_1 = (Object) adaptor.nil();
                                root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(TkClassParents, "TkClassParents"), root_1);
                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:279:116: ( classParent )?
                                if (stream_classParent.hasNext()) {
                                    adaptor.addChild(root_1, stream_classParent.nextTree());
                                }
                                stream_classParent.reset();

                                adaptor.addChild(root_0, root_1);
                            }

                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:279:132: ( classItem )*
                            while (stream_classItem.hasNext()) {
                                adaptor.addChild(root_0, stream_classItem.nextTree());
                            }
                            stream_classItem.reset();

                        }


                        retval.tree = root_0;
                    }

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:280:32: 'class' ( classParent )?
                {
                    string_literal280 = (Token) match(input, CLASS, FOLLOW_CLASS_in_classTypeDecl6212);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_CLASS.add(string_literal280);

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:280:40: ( classParent )?
                    int alt85 = 2;
                    alt85 = dfa85.predict(input);
                    switch (alt85) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:280:41: classParent
                        {
                            pushFollow(FOLLOW_classParent_in_classTypeDecl6215);
                            classParent281 = classParent();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_classParent.add(classParent281.getTree());
                        }
                        break;

                    }

                    // AST REWRITE
                    // elements: classParent, CLASS
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if (state.backtracking == 0) {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                        root_0 = (Object) adaptor.nil();
                        // 280:55: -> 'class' ^( TkClassParents ( classParent )? )
                        {
                            adaptor.addChild(root_0, stream_CLASS.nextNode());
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:280:66: ^( TkClassParents ( classParent )? )
                            {
                                Object root_1 = (Object) adaptor.nil();
                                root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(TkClassParents, "TkClassParents"), root_1);
                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:280:83: ( classParent )?
                                if (stream_classParent.hasNext()) {
                                    adaptor.addChild(root_1, stream_classParent.nextTree());
                                }
                                stream_classParent.reset();

                                adaptor.addChild(root_0, root_1);
                            }

                        }


                        retval.tree = root_0;
                    }

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 69, classTypeDecl_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "classState"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:282:1: classState : ( 'sealed' | 'abstract' );
    public final DelphiParser.classState_return classState() throws RecognitionException {
        DelphiParser.classState_return retval = new DelphiParser.classState_return();
        retval.start = input.LT(1);
        int classState_StartIndex = input.index();

        Object root_0 = null;

        Token set282 = null;

        Object set282_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 70)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:282:30: ( 'sealed' | 'abstract' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
            {
                root_0 = (Object) adaptor.nil();


                set282 = input.LT(1);
                if (input.LA(1) == ABSTRACT || input.LA(1) == SEALED) {
                    input.consume();
                    if (state.backtracking == 0) adaptor.addChild(root_0, (Object) adaptor.create(set282));
                    state.errorRecovery = false;
                    state.failed = false;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 70, classState_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "classParent"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:285:1: classParent : '(' genericTypeIdent ( ',' genericTypeIdent )* ')' -> genericTypeIdent ( genericTypeIdent )* ;
    public final DelphiParser.classParent_return classParent() throws RecognitionException {
        DelphiParser.classParent_return retval = new DelphiParser.classParent_return();
        retval.start = input.LT(1);
        int classParent_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal283 = null;
        Token char_literal285 = null;
        Token char_literal287 = null;
        ParserRuleReturnScope genericTypeIdent284 = null;
        ParserRuleReturnScope genericTypeIdent286 = null;

        Object char_literal283_tree = null;
        Object char_literal285_tree = null;
        Object char_literal287_tree = null;
        RewriteRuleTokenStream stream_COMMA = new RewriteRuleTokenStream(adaptor, "token COMMA");
        RewriteRuleTokenStream stream_LPAREN = new RewriteRuleTokenStream(adaptor, "token LPAREN");
        RewriteRuleTokenStream stream_RPAREN = new RewriteRuleTokenStream(adaptor, "token RPAREN");
        RewriteRuleSubtreeStream stream_genericTypeIdent = new RewriteRuleSubtreeStream(adaptor, "rule genericTypeIdent");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 71)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:285:30: ( '(' genericTypeIdent ( ',' genericTypeIdent )* ')' -> genericTypeIdent ( genericTypeIdent )* )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:285:32: '(' genericTypeIdent ( ',' genericTypeIdent )* ')'
            {
                char_literal283 = (Token) match(input, LPAREN, FOLLOW_LPAREN_in_classParent6372);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_LPAREN.add(char_literal283);

                pushFollow(FOLLOW_genericTypeIdent_in_classParent6374);
                genericTypeIdent284 = genericTypeIdent();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_genericTypeIdent.add(genericTypeIdent284.getTree());
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:285:53: ( ',' genericTypeIdent )*
                loop87:
                while (true) {
                    int alt87 = 2;
                    int LA87_0 = input.LA(1);
                    if ((LA87_0 == COMMA)) {
                        alt87 = 1;
                    }

                    switch (alt87) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:285:54: ',' genericTypeIdent
                        {
                            char_literal285 = (Token) match(input, COMMA, FOLLOW_COMMA_in_classParent6377);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_COMMA.add(char_literal285);

                            pushFollow(FOLLOW_genericTypeIdent_in_classParent6379);
                            genericTypeIdent286 = genericTypeIdent();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_genericTypeIdent.add(genericTypeIdent286.getTree());
                        }
                        break;

                        default:
                            break loop87;
                    }
                }

                char_literal287 = (Token) match(input, RPAREN, FOLLOW_RPAREN_in_classParent6383);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_RPAREN.add(char_literal287);

                // AST REWRITE
                // elements: genericTypeIdent, genericTypeIdent
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 285:81: -> genericTypeIdent ( genericTypeIdent )*
                    {
                        adaptor.addChild(root_0, stream_genericTypeIdent.nextTree());
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:285:101: ( genericTypeIdent )*
                        while (stream_genericTypeIdent.hasNext()) {
                            adaptor.addChild(root_0, stream_genericTypeIdent.nextTree());
                        }
                        stream_genericTypeIdent.reset();

                    }


                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 71, classParent_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "classItem"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:287:1: classItem : ( visibility | classMethod | classField | classProperty | constSection | typeSection | ( 'class' )? varSection );
    public final DelphiParser.classItem_return classItem() throws RecognitionException {
        DelphiParser.classItem_return retval = new DelphiParser.classItem_return();
        retval.start = input.LT(1);
        int classItem_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal294 = null;
        ParserRuleReturnScope visibility288 = null;
        ParserRuleReturnScope classMethod289 = null;
        ParserRuleReturnScope classField290 = null;
        ParserRuleReturnScope classProperty291 = null;
        ParserRuleReturnScope constSection292 = null;
        ParserRuleReturnScope typeSection293 = null;
        ParserRuleReturnScope varSection295 = null;

        Object string_literal294_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 72)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:287:30: ( visibility | classMethod | classField | classProperty | constSection | typeSection | ( 'class' )? varSection )
            int alt89 = 7;
            switch (input.LA(1)) {
                case STRICT: {
                    int LA89_1 = input.LA(2);
                    if ((synpred122_Delphi())) {
                        alt89 = 1;
                    } else if ((synpred124_Delphi())) {
                        alt89 = 3;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try {
                            input.consume();
                            NoViableAltException nvae =
                                    new NoViableAltException("", 89, 1, input);
                            throw nvae;
                        } finally {
                            input.rewind(nvaeMark);
                        }
                    }

                }
                break;
                case AUTOMATED:
                case PRIVATE:
                case PROTECTED:
                case PUBLIC:
                case PUBLISHED: {
                    alt89 = 1;
                }
                break;
                case LBRACK: {
                    int LA89_7 = input.LA(2);
                    if ((synpred123_Delphi())) {
                        alt89 = 2;
                    } else if ((synpred124_Delphi())) {
                        alt89 = 3;
                    } else if ((synpred125_Delphi())) {
                        alt89 = 4;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try {
                            input.consume();
                            NoViableAltException nvae =
                                    new NoViableAltException("", 89, 7, input);
                            throw nvae;
                        } finally {
                            input.rewind(nvaeMark);
                        }
                    }

                }
                break;
                case CLASS: {
                    int LA89_8 = input.LA(2);
                    if ((synpred123_Delphi())) {
                        alt89 = 2;
                    } else if ((synpred125_Delphi())) {
                        alt89 = 4;
                    } else if ((true)) {
                        alt89 = 7;
                    }

                }
                break;
                case CONSTRUCTOR:
                case DESTRUCTOR:
                case FUNCTION:
                case PROCEDURE: {
                    alt89 = 2;
                }
                break;
                case OPERATOR: {
                    int LA89_11 = input.LA(2);
                    if ((synpred123_Delphi())) {
                        alt89 = 2;
                    } else if ((synpred124_Delphi())) {
                        alt89 = 3;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try {
                            input.consume();
                            NoViableAltException nvae =
                                    new NoViableAltException("", 89, 11, input);
                            throw nvae;
                        } finally {
                            input.rewind(nvaeMark);
                        }
                    }

                }
                break;
                case ADD:
                case ANSISTRING:
                case AT:
                case BREAK:
                case CONTAINS:
                case CONTINUE:
                case DEFAULT:
                case EXIT:
                case EXPORT:
                case FINAL:
                case IMPLEMENTS:
                case INDEX:
                case LOCAL:
                case MESSAGE:
                case NAME:
                case OBJECT:
                case OUT:
                case POINTER:
                case READ:
                case READONLY:
                case REFERENCE:
                case REGISTER:
                case REMOVE:
                case STORED:
                case STRING:
                case TkIdentifier:
                case VARIANT:
                case WRITE:
                case 200: {
                    alt89 = 3;
                }
                break;
                case PROPERTY: {
                    alt89 = 4;
                }
                break;
                case CONST:
                case RESOURCESTRING: {
                    alt89 = 5;
                }
                break;
                case TYPE: {
                    alt89 = 6;
                }
                break;
                case THREADVAR:
                case VAR: {
                    alt89 = 7;
                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae =
                            new NoViableAltException("", 89, 0, input);
                    throw nvae;
            }
            switch (alt89) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:287:32: visibility
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_visibility_in_classItem6451);
                    visibility288 = visibility();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, visibility288.getTree());

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:288:32: classMethod
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_classMethod_in_classItem6484);
                    classMethod289 = classMethod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, classMethod289.getTree());

                }
                break;
                case 3:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:289:32: classField
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_classField_in_classItem6517);
                    classField290 = classField();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, classField290.getTree());

                }
                break;
                case 4:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:290:32: classProperty
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_classProperty_in_classItem6550);
                    classProperty291 = classProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, classProperty291.getTree());

                }
                break;
                case 5:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:291:32: constSection
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_constSection_in_classItem6583);
                    constSection292 = constSection();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, constSection292.getTree());

                }
                break;
                case 6:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:292:32: typeSection
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_typeSection_in_classItem6616);
                    typeSection293 = typeSection();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, typeSection293.getTree());

                }
                break;
                case 7:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:293:32: ( 'class' )? varSection
                {
                    root_0 = (Object) adaptor.nil();


                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:293:32: ( 'class' )?
                    int alt88 = 2;
                    int LA88_0 = input.LA(1);
                    if ((LA88_0 == CLASS)) {
                        alt88 = 1;
                    }
                    switch (alt88) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:293:33: 'class'
                        {
                            string_literal294 = (Token) match(input, CLASS, FOLLOW_CLASS_in_classItem6650);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) {
                                string_literal294_tree = (Object) adaptor.create(string_literal294);
                                adaptor.addChild(root_0, string_literal294_tree);
                            }

                        }
                        break;

                    }

                    pushFollow(FOLLOW_varSection_in_classItem6654);
                    varSection295 = varSection();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, varSection295.getTree());

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 72, classItem_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "classHelperDecl"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:295:1: classHelperDecl : 'class' 'helper' ( classParent )? 'for' typeId ( classHelperItem )* 'end' -> ^( 'class' typeId ) ( classHelperItem )* ;
    public final DelphiParser.classHelperDecl_return classHelperDecl() throws RecognitionException {
        DelphiParser.classHelperDecl_return retval = new DelphiParser.classHelperDecl_return();
        retval.start = input.LT(1);
        int classHelperDecl_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal296 = null;
        Token string_literal297 = null;
        Token string_literal299 = null;
        Token string_literal302 = null;
        ParserRuleReturnScope classParent298 = null;
        ParserRuleReturnScope typeId300 = null;
        ParserRuleReturnScope classHelperItem301 = null;

        Object string_literal296_tree = null;
        Object string_literal297_tree = null;
        Object string_literal299_tree = null;
        Object string_literal302_tree = null;
        RewriteRuleTokenStream stream_HELPER = new RewriteRuleTokenStream(adaptor, "token HELPER");
        RewriteRuleTokenStream stream_FOR = new RewriteRuleTokenStream(adaptor, "token FOR");
        RewriteRuleTokenStream stream_END = new RewriteRuleTokenStream(adaptor, "token END");
        RewriteRuleTokenStream stream_CLASS = new RewriteRuleTokenStream(adaptor, "token CLASS");
        RewriteRuleSubtreeStream stream_classHelperItem = new RewriteRuleSubtreeStream(adaptor, "rule classHelperItem");
        RewriteRuleSubtreeStream stream_typeId = new RewriteRuleSubtreeStream(adaptor, "rule typeId");
        RewriteRuleSubtreeStream stream_classParent = new RewriteRuleSubtreeStream(adaptor, "rule classParent");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 73)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:295:30: ( 'class' 'helper' ( classParent )? 'for' typeId ( classHelperItem )* 'end' -> ^( 'class' typeId ) ( classHelperItem )* )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:295:32: 'class' 'helper' ( classParent )? 'for' typeId ( classHelperItem )* 'end'
            {
                string_literal296 = (Token) match(input, CLASS, FOLLOW_CLASS_in_classHelperDecl6704);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_CLASS.add(string_literal296);

                string_literal297 = (Token) match(input, HELPER, FOLLOW_HELPER_in_classHelperDecl6706);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_HELPER.add(string_literal297);

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:295:49: ( classParent )?
                int alt90 = 2;
                int LA90_0 = input.LA(1);
                if ((LA90_0 == LPAREN)) {
                    alt90 = 1;
                }
                switch (alt90) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:295:50: classParent
                    {
                        pushFollow(FOLLOW_classParent_in_classHelperDecl6709);
                        classParent298 = classParent();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_classParent.add(classParent298.getTree());
                    }
                    break;

                }

                string_literal299 = (Token) match(input, FOR, FOLLOW_FOR_in_classHelperDecl6713);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_FOR.add(string_literal299);

                pushFollow(FOLLOW_typeId_in_classHelperDecl6715);
                typeId300 = typeId();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_typeId.add(typeId300.getTree());
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:295:77: ( classHelperItem )*
                loop91:
                while (true) {
                    int alt91 = 2;
                    int LA91_0 = input.LA(1);
                    if ((LA91_0 == AUTOMATED || LA91_0 == CLASS || LA91_0 == CONSTRUCTOR || LA91_0 == DESTRUCTOR || LA91_0 == FUNCTION || LA91_0 == LBRACK || LA91_0 == OPERATOR || (LA91_0 >= PRIVATE && LA91_0 <= PROCEDURE) || (LA91_0 >= PROPERTY && LA91_0 <= PUBLISHED) || LA91_0 == STRICT || LA91_0 == THREADVAR || LA91_0 == VAR)) {
                        alt91 = 1;
                    }

                    switch (alt91) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:295:78: classHelperItem
                        {
                            pushFollow(FOLLOW_classHelperItem_in_classHelperDecl6718);
                            classHelperItem301 = classHelperItem();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_classHelperItem.add(classHelperItem301.getTree());
                        }
                        break;

                        default:
                            break loop91;
                    }
                }

                string_literal302 = (Token) match(input, END, FOLLOW_END_in_classHelperDecl6722);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_END.add(string_literal302);

                // AST REWRITE
                // elements: typeId, classHelperItem, CLASS
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 295:102: -> ^( 'class' typeId ) ( classHelperItem )*
                    {
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:295:105: ^( 'class' typeId )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot(stream_CLASS.nextNode(), root_1);
                            adaptor.addChild(root_1, stream_typeId.nextTree());
                            adaptor.addChild(root_0, root_1);
                        }

                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:295:124: ( classHelperItem )*
                        while (stream_classHelperItem.hasNext()) {
                            adaptor.addChild(root_0, stream_classHelperItem.nextTree());
                        }
                        stream_classHelperItem.reset();

                    }


                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 73, classHelperDecl_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "classHelperItem"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:297:1: classHelperItem : ( visibility | classMethod | classProperty | ( 'class' )? varSection );
    public final DelphiParser.classHelperItem_return classHelperItem() throws RecognitionException {
        DelphiParser.classHelperItem_return retval = new DelphiParser.classHelperItem_return();
        retval.start = input.LT(1);
        int classHelperItem_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal306 = null;
        ParserRuleReturnScope visibility303 = null;
        ParserRuleReturnScope classMethod304 = null;
        ParserRuleReturnScope classProperty305 = null;
        ParserRuleReturnScope varSection307 = null;

        Object string_literal306_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 74)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:297:30: ( visibility | classMethod | classProperty | ( 'class' )? varSection )
            int alt93 = 4;
            switch (input.LA(1)) {
                case AUTOMATED:
                case PRIVATE:
                case PROTECTED:
                case PUBLIC:
                case PUBLISHED:
                case STRICT: {
                    alt93 = 1;
                }
                break;
                case LBRACK: {
                    int LA93_7 = input.LA(2);
                    if ((synpred132_Delphi())) {
                        alt93 = 2;
                    } else if ((synpred133_Delphi())) {
                        alt93 = 3;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try {
                            input.consume();
                            NoViableAltException nvae =
                                    new NoViableAltException("", 93, 7, input);
                            throw nvae;
                        } finally {
                            input.rewind(nvaeMark);
                        }
                    }

                }
                break;
                case CLASS: {
                    int LA93_8 = input.LA(2);
                    if ((synpred132_Delphi())) {
                        alt93 = 2;
                    } else if ((synpred133_Delphi())) {
                        alt93 = 3;
                    } else if ((true)) {
                        alt93 = 4;
                    }

                }
                break;
                case CONSTRUCTOR:
                case DESTRUCTOR:
                case FUNCTION:
                case OPERATOR:
                case PROCEDURE: {
                    alt93 = 2;
                }
                break;
                case PROPERTY: {
                    alt93 = 3;
                }
                break;
                case THREADVAR:
                case VAR: {
                    alt93 = 4;
                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae =
                            new NoViableAltException("", 93, 0, input);
                    throw nvae;
            }
            switch (alt93) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:297:32: visibility
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_visibility_in_classHelperItem6787);
                    visibility303 = visibility();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, visibility303.getTree());

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:298:32: classMethod
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_classMethod_in_classHelperItem6820);
                    classMethod304 = classMethod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, classMethod304.getTree());

                }
                break;
                case 3:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:299:32: classProperty
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_classProperty_in_classHelperItem6853);
                    classProperty305 = classProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, classProperty305.getTree());

                }
                break;
                case 4:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:300:32: ( 'class' )? varSection
                {
                    root_0 = (Object) adaptor.nil();


                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:300:32: ( 'class' )?
                    int alt92 = 2;
                    int LA92_0 = input.LA(1);
                    if ((LA92_0 == CLASS)) {
                        alt92 = 1;
                    }
                    switch (alt92) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:300:33: 'class'
                        {
                            string_literal306 = (Token) match(input, CLASS, FOLLOW_CLASS_in_classHelperItem6887);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) {
                                string_literal306_tree = (Object) adaptor.create(string_literal306);
                                adaptor.addChild(root_0, string_literal306_tree);
                            }

                        }
                        break;

                    }

                    pushFollow(FOLLOW_varSection_in_classHelperItem6891);
                    varSection307 = varSection();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, varSection307.getTree());

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 74, classHelperItem_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "interfaceTypeDecl"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:302:1: interfaceTypeDecl : ( interfaceKey ( classParent )? ( interfaceGuid )? ( interfaceItem )* 'end' -> interfaceKey ^( TkClassParents ( classParent )? ) ^( TkGuid ( interfaceGuid )? ) ( interfaceItem )* | interfaceKey ( classParent )? -> interfaceKey ^( TkClassParents ( classParent )? ) );
    public final DelphiParser.interfaceTypeDecl_return interfaceTypeDecl() throws RecognitionException {
        DelphiParser.interfaceTypeDecl_return retval = new DelphiParser.interfaceTypeDecl_return();
        retval.start = input.LT(1);
        int interfaceTypeDecl_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal312 = null;
        ParserRuleReturnScope interfaceKey308 = null;
        ParserRuleReturnScope classParent309 = null;
        ParserRuleReturnScope interfaceGuid310 = null;
        ParserRuleReturnScope interfaceItem311 = null;
        ParserRuleReturnScope interfaceKey313 = null;
        ParserRuleReturnScope classParent314 = null;

        Object string_literal312_tree = null;
        RewriteRuleTokenStream stream_END = new RewriteRuleTokenStream(adaptor, "token END");
        RewriteRuleSubtreeStream stream_interfaceItem = new RewriteRuleSubtreeStream(adaptor, "rule interfaceItem");
        RewriteRuleSubtreeStream stream_interfaceKey = new RewriteRuleSubtreeStream(adaptor, "rule interfaceKey");
        RewriteRuleSubtreeStream stream_classParent = new RewriteRuleSubtreeStream(adaptor, "rule classParent");
        RewriteRuleSubtreeStream stream_interfaceGuid = new RewriteRuleSubtreeStream(adaptor, "rule interfaceGuid");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 75)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:302:30: ( interfaceKey ( classParent )? ( interfaceGuid )? ( interfaceItem )* 'end' -> interfaceKey ^( TkClassParents ( classParent )? ) ^( TkGuid ( interfaceGuid )? ) ( interfaceItem )* | interfaceKey ( classParent )? -> interfaceKey ^( TkClassParents ( classParent )? ) )
            int alt98 = 2;
            int LA98_0 = input.LA(1);
            if ((LA98_0 == DISPINTERFACE || LA98_0 == INTERFACE)) {
                int LA98_1 = input.LA(2);
                if ((synpred138_Delphi())) {
                    alt98 = 1;
                } else if ((true)) {
                    alt98 = 2;
                }

            } else {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae =
                        new NoViableAltException("", 98, 0, input);
                throw nvae;
            }

            switch (alt98) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:302:32: interfaceKey ( classParent )? ( interfaceGuid )? ( interfaceItem )* 'end'
                {
                    pushFollow(FOLLOW_interfaceKey_in_interfaceTypeDecl6939);
                    interfaceKey308 = interfaceKey();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_interfaceKey.add(interfaceKey308.getTree());
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:302:45: ( classParent )?
                    int alt94 = 2;
                    int LA94_0 = input.LA(1);
                    if ((LA94_0 == LPAREN)) {
                        alt94 = 1;
                    }
                    switch (alt94) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:302:46: classParent
                        {
                            pushFollow(FOLLOW_classParent_in_interfaceTypeDecl6942);
                            classParent309 = classParent();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_classParent.add(classParent309.getTree());
                        }
                        break;

                    }

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:302:60: ( interfaceGuid )?
                    int alt95 = 2;
                    int LA95_0 = input.LA(1);
                    if ((LA95_0 == LBRACK)) {
                        int LA95_1 = input.LA(2);
                        if ((LA95_1 == QuotedString)) {
                            alt95 = 1;
                        }
                    }
                    switch (alt95) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:302:61: interfaceGuid
                        {
                            pushFollow(FOLLOW_interfaceGuid_in_interfaceTypeDecl6947);
                            interfaceGuid310 = interfaceGuid();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_interfaceGuid.add(interfaceGuid310.getTree());
                        }
                        break;

                    }

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:302:77: ( interfaceItem )*
                    loop96:
                    while (true) {
                        int alt96 = 2;
                        int LA96_0 = input.LA(1);
                        if ((LA96_0 == CLASS || LA96_0 == CONSTRUCTOR || LA96_0 == DESTRUCTOR || LA96_0 == FUNCTION || LA96_0 == LBRACK || LA96_0 == OPERATOR || LA96_0 == PROCEDURE || LA96_0 == PROPERTY)) {
                            alt96 = 1;
                        }

                        switch (alt96) {
                            case 1:
                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:302:78: interfaceItem
                            {
                                pushFollow(FOLLOW_interfaceItem_in_interfaceTypeDecl6952);
                                interfaceItem311 = interfaceItem();
                                state._fsp--;
                                if (state.failed) return retval;
                                if (state.backtracking == 0) stream_interfaceItem.add(interfaceItem311.getTree());
                            }
                            break;

                            default:
                                break loop96;
                        }
                    }

                    string_literal312 = (Token) match(input, END, FOLLOW_END_in_interfaceTypeDecl6956);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_END.add(string_literal312);

                    // AST REWRITE
                    // elements: interfaceItem, interfaceGuid, interfaceKey, classParent
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if (state.backtracking == 0) {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                        root_0 = (Object) adaptor.nil();
                        // 303:31: -> interfaceKey ^( TkClassParents ( classParent )? ) ^( TkGuid ( interfaceGuid )? ) ( interfaceItem )*
                        {
                            adaptor.addChild(root_0, stream_interfaceKey.nextTree());
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:303:47: ^( TkClassParents ( classParent )? )
                            {
                                Object root_1 = (Object) adaptor.nil();
                                root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(TkClassParents, "TkClassParents"), root_1);
                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:303:64: ( classParent )?
                                if (stream_classParent.hasNext()) {
                                    adaptor.addChild(root_1, stream_classParent.nextTree());
                                }
                                stream_classParent.reset();

                                adaptor.addChild(root_0, root_1);
                            }

                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:303:81: ^( TkGuid ( interfaceGuid )? )
                            {
                                Object root_1 = (Object) adaptor.nil();
                                root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(TkGuid, "TkGuid"), root_1);
                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:303:90: ( interfaceGuid )?
                                if (stream_interfaceGuid.hasNext()) {
                                    adaptor.addChild(root_1, stream_interfaceGuid.nextTree());
                                }
                                stream_interfaceGuid.reset();

                                adaptor.addChild(root_0, root_1);
                            }

                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:303:108: ( interfaceItem )*
                            while (stream_interfaceItem.hasNext()) {
                                adaptor.addChild(root_0, stream_interfaceItem.nextTree());
                            }
                            stream_interfaceItem.reset();

                        }


                        retval.tree = root_0;
                    }

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:304:32: interfaceKey ( classParent )?
                {
                    pushFollow(FOLLOW_interfaceKey_in_interfaceTypeDecl7048);
                    interfaceKey313 = interfaceKey();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_interfaceKey.add(interfaceKey313.getTree());
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:304:45: ( classParent )?
                    int alt97 = 2;
                    alt97 = dfa97.predict(input);
                    switch (alt97) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:304:46: classParent
                        {
                            pushFollow(FOLLOW_classParent_in_interfaceTypeDecl7051);
                            classParent314 = classParent();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_classParent.add(classParent314.getTree());
                        }
                        break;

                    }

                    // AST REWRITE
                    // elements: classParent, interfaceKey
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if (state.backtracking == 0) {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                        root_0 = (Object) adaptor.nil();
                        // 305:31: -> interfaceKey ^( TkClassParents ( classParent )? )
                        {
                            adaptor.addChild(root_0, stream_interfaceKey.nextTree());
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:305:47: ^( TkClassParents ( classParent )? )
                            {
                                Object root_1 = (Object) adaptor.nil();
                                root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(TkClassParents, "TkClassParents"), root_1);
                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:305:64: ( classParent )?
                                if (stream_classParent.hasNext()) {
                                    adaptor.addChild(root_1, stream_classParent.nextTree());
                                }
                                stream_classParent.reset();

                                adaptor.addChild(root_0, root_1);
                            }

                        }


                        retval.tree = root_0;
                    }

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 75, interfaceTypeDecl_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "interfaceKey"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:307:1: interfaceKey : ( 'interface' | 'dispinterface' );
    public final DelphiParser.interfaceKey_return interfaceKey() throws RecognitionException {
        DelphiParser.interfaceKey_return retval = new DelphiParser.interfaceKey_return();
        retval.start = input.LT(1);
        int interfaceKey_StartIndex = input.index();

        Object root_0 = null;

        Token set315 = null;

        Object set315_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 76)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:307:30: ( 'interface' | 'dispinterface' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
            {
                root_0 = (Object) adaptor.nil();


                set315 = input.LT(1);
                if (input.LA(1) == DISPINTERFACE || input.LA(1) == INTERFACE) {
                    input.consume();
                    if (state.backtracking == 0) adaptor.addChild(root_0, (Object) adaptor.create(set315));
                    state.errorRecovery = false;
                    state.failed = false;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 76, interfaceKey_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "interfaceGuid"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:310:1: interfaceGuid : '[' QuotedString ']' -> QuotedString ;
    public final DelphiParser.interfaceGuid_return interfaceGuid() throws RecognitionException {
        DelphiParser.interfaceGuid_return retval = new DelphiParser.interfaceGuid_return();
        retval.start = input.LT(1);
        int interfaceGuid_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal316 = null;
        Token QuotedString317 = null;
        Token char_literal318 = null;

        Object char_literal316_tree = null;
        Object QuotedString317_tree = null;
        Object char_literal318_tree = null;
        RewriteRuleTokenStream stream_RBRACK = new RewriteRuleTokenStream(adaptor, "token RBRACK");
        RewriteRuleTokenStream stream_LBRACK = new RewriteRuleTokenStream(adaptor, "token LBRACK");
        RewriteRuleTokenStream stream_QuotedString = new RewriteRuleTokenStream(adaptor, "token QuotedString");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 77)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:310:30: ( '[' QuotedString ']' -> QuotedString )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:310:32: '[' QuotedString ']'
            {
                char_literal316 = (Token) match(input, LBRACK, FOLLOW_LBRACK_in_interfaceGuid7235);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_LBRACK.add(char_literal316);

                QuotedString317 = (Token) match(input, QuotedString, FOLLOW_QuotedString_in_interfaceGuid7237);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_QuotedString.add(QuotedString317);

                char_literal318 = (Token) match(input, RBRACK, FOLLOW_RBRACK_in_interfaceGuid7239);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_RBRACK.add(char_literal318);

                // AST REWRITE
                // elements: QuotedString
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 310:53: -> QuotedString
                    {
                        adaptor.addChild(root_0, stream_QuotedString.nextNode());
                    }


                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 77, interfaceGuid_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "interfaceItem"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:312:1: interfaceItem : ( classMethod | ( 'class' )? classProperty );
    public final DelphiParser.interfaceItem_return interfaceItem() throws RecognitionException {
        DelphiParser.interfaceItem_return retval = new DelphiParser.interfaceItem_return();
        retval.start = input.LT(1);
        int interfaceItem_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal320 = null;
        ParserRuleReturnScope classMethod319 = null;
        ParserRuleReturnScope classProperty321 = null;

        Object string_literal320_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 78)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:312:30: ( classMethod | ( 'class' )? classProperty )
            int alt100 = 2;
            switch (input.LA(1)) {
                case LBRACK: {
                    int LA100_1 = input.LA(2);
                    if ((synpred141_Delphi())) {
                        alt100 = 1;
                    } else if ((true)) {
                        alt100 = 2;
                    }

                }
                break;
                case CLASS: {
                    int LA100_2 = input.LA(2);
                    if ((synpred141_Delphi())) {
                        alt100 = 1;
                    } else if ((true)) {
                        alt100 = 2;
                    }

                }
                break;
                case CONSTRUCTOR:
                case DESTRUCTOR:
                case FUNCTION:
                case OPERATOR:
                case PROCEDURE: {
                    alt100 = 1;
                }
                break;
                case PROPERTY: {
                    alt100 = 2;
                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae =
                            new NoViableAltException("", 100, 0, input);
                    throw nvae;
            }
            switch (alt100) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:312:32: classMethod
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_classMethod_in_interfaceItem7295);
                    classMethod319 = classMethod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, classMethod319.getTree());

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:313:32: ( 'class' )? classProperty
                {
                    root_0 = (Object) adaptor.nil();


                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:313:32: ( 'class' )?
                    int alt99 = 2;
                    int LA99_0 = input.LA(1);
                    if ((LA99_0 == CLASS)) {
                        int LA99_1 = input.LA(2);
                        if ((synpred142_Delphi())) {
                            alt99 = 1;
                        }
                    }
                    switch (alt99) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:313:33: 'class'
                        {
                            string_literal320 = (Token) match(input, CLASS, FOLLOW_CLASS_in_interfaceItem7329);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) {
                                string_literal320_tree = (Object) adaptor.create(string_literal320);
                                adaptor.addChild(root_0, string_literal320_tree);
                            }

                        }
                        break;

                    }

                    pushFollow(FOLLOW_classProperty_in_interfaceItem7333);
                    classProperty321 = classProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, classProperty321.getTree());

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 78, interfaceItem_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "objectDecl"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:315:1: objectDecl : 'object' ( classParent )? ( objectItem )* 'end' -> 'object' ( classParent )? ( objectItem )* ;
    public final DelphiParser.objectDecl_return objectDecl() throws RecognitionException {
        DelphiParser.objectDecl_return retval = new DelphiParser.objectDecl_return();
        retval.start = input.LT(1);
        int objectDecl_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal322 = null;
        Token string_literal325 = null;
        ParserRuleReturnScope classParent323 = null;
        ParserRuleReturnScope objectItem324 = null;

        Object string_literal322_tree = null;
        Object string_literal325_tree = null;
        RewriteRuleTokenStream stream_END = new RewriteRuleTokenStream(adaptor, "token END");
        RewriteRuleTokenStream stream_OBJECT = new RewriteRuleTokenStream(adaptor, "token OBJECT");
        RewriteRuleSubtreeStream stream_objectItem = new RewriteRuleSubtreeStream(adaptor, "rule objectItem");
        RewriteRuleSubtreeStream stream_classParent = new RewriteRuleSubtreeStream(adaptor, "rule classParent");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 79)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:315:30: ( 'object' ( classParent )? ( objectItem )* 'end' -> 'object' ( classParent )? ( objectItem )* )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:315:32: 'object' ( classParent )? ( objectItem )* 'end'
            {
                string_literal322 = (Token) match(input, OBJECT, FOLLOW_OBJECT_in_objectDecl7388);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_OBJECT.add(string_literal322);

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:315:41: ( classParent )?
                int alt101 = 2;
                int LA101_0 = input.LA(1);
                if ((LA101_0 == LPAREN)) {
                    alt101 = 1;
                }
                switch (alt101) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:315:42: classParent
                    {
                        pushFollow(FOLLOW_classParent_in_objectDecl7391);
                        classParent323 = classParent();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_classParent.add(classParent323.getTree());
                    }
                    break;

                }

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:315:56: ( objectItem )*
                loop102:
                while (true) {
                    int alt102 = 2;
                    int LA102_0 = input.LA(1);
                    if ((LA102_0 == ADD || LA102_0 == ANSISTRING || LA102_0 == AT || LA102_0 == AUTOMATED || LA102_0 == BREAK || LA102_0 == CLASS || (LA102_0 >= CONSTRUCTOR && LA102_0 <= CONTINUE) || LA102_0 == DEFAULT || LA102_0 == DESTRUCTOR || LA102_0 == EXIT || LA102_0 == EXPORT || LA102_0 == FINAL || LA102_0 == FUNCTION || LA102_0 == IMPLEMENTS || LA102_0 == INDEX || LA102_0 == LBRACK || LA102_0 == LOCAL || LA102_0 == MESSAGE || LA102_0 == NAME || LA102_0 == OBJECT || LA102_0 == OPERATOR || LA102_0 == OUT || LA102_0 == POINTER || (LA102_0 >= PRIVATE && LA102_0 <= PROCEDURE) || (LA102_0 >= PROTECTED && LA102_0 <= PUBLISHED) || (LA102_0 >= READ && LA102_0 <= READONLY) || (LA102_0 >= REFERENCE && LA102_0 <= REGISTER) || LA102_0 == REMOVE || (LA102_0 >= STORED && LA102_0 <= STRING) || LA102_0 == TkIdentifier || LA102_0 == VARIANT || LA102_0 == WRITE || LA102_0 == 200)) {
                        alt102 = 1;
                    }

                    switch (alt102) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:315:57: objectItem
                        {
                            pushFollow(FOLLOW_objectItem_in_objectDecl7396);
                            objectItem324 = objectItem();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_objectItem.add(objectItem324.getTree());
                        }
                        break;

                        default:
                            break loop102;
                    }
                }

                string_literal325 = (Token) match(input, END, FOLLOW_END_in_objectDecl7400);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_END.add(string_literal325);

                // AST REWRITE
                // elements: classParent, OBJECT, objectItem
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 315:76: -> 'object' ( classParent )? ( objectItem )*
                    {
                        adaptor.addChild(root_0, stream_OBJECT.nextNode());
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:315:88: ( classParent )?
                        if (stream_classParent.hasNext()) {
                            adaptor.addChild(root_0, stream_classParent.nextTree());
                        }
                        stream_classParent.reset();

                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:315:103: ( objectItem )*
                        while (stream_objectItem.hasNext()) {
                            adaptor.addChild(root_0, stream_objectItem.nextTree());
                        }
                        stream_objectItem.reset();

                    }


                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 79, objectDecl_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "objectItem"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:317:1: objectItem : ( visibility | classMethod | classField );
    public final DelphiParser.objectItem_return objectItem() throws RecognitionException {
        DelphiParser.objectItem_return retval = new DelphiParser.objectItem_return();
        retval.start = input.LT(1);
        int objectItem_StartIndex = input.index();

        Object root_0 = null;

        ParserRuleReturnScope visibility326 = null;
        ParserRuleReturnScope classMethod327 = null;
        ParserRuleReturnScope classField328 = null;


        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 80)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:317:30: ( visibility | classMethod | classField )
            int alt103 = 3;
            switch (input.LA(1)) {
                case STRICT: {
                    int LA103_1 = input.LA(2);
                    if ((synpred145_Delphi())) {
                        alt103 = 1;
                    } else if ((true)) {
                        alt103 = 3;
                    }

                }
                break;
                case AUTOMATED:
                case PRIVATE:
                case PROTECTED:
                case PUBLIC:
                case PUBLISHED: {
                    alt103 = 1;
                }
                break;
                case LBRACK: {
                    int LA103_7 = input.LA(2);
                    if ((synpred146_Delphi())) {
                        alt103 = 2;
                    } else if ((true)) {
                        alt103 = 3;
                    }

                }
                break;
                case CLASS:
                case CONSTRUCTOR:
                case DESTRUCTOR:
                case FUNCTION:
                case PROCEDURE: {
                    alt103 = 2;
                }
                break;
                case OPERATOR: {
                    int LA103_11 = input.LA(2);
                    if ((synpred146_Delphi())) {
                        alt103 = 2;
                    } else if ((true)) {
                        alt103 = 3;
                    }

                }
                break;
                case ADD:
                case ANSISTRING:
                case AT:
                case BREAK:
                case CONTAINS:
                case CONTINUE:
                case DEFAULT:
                case EXIT:
                case EXPORT:
                case FINAL:
                case IMPLEMENTS:
                case INDEX:
                case LOCAL:
                case MESSAGE:
                case NAME:
                case OBJECT:
                case OUT:
                case POINTER:
                case READ:
                case READONLY:
                case REFERENCE:
                case REGISTER:
                case REMOVE:
                case STORED:
                case STRING:
                case TkIdentifier:
                case VARIANT:
                case WRITE:
                case 200: {
                    alt103 = 3;
                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae =
                            new NoViableAltException("", 103, 0, input);
                    throw nvae;
            }
            switch (alt103) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:317:32: visibility
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_visibility_in_objectItem7469);
                    visibility326 = visibility();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, visibility326.getTree());

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:318:32: classMethod
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_classMethod_in_objectItem7502);
                    classMethod327 = classMethod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, classMethod327.getTree());

                }
                break;
                case 3:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:319:32: classField
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_classField_in_objectItem7535);
                    classField328 = classField();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, classField328.getTree());

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 80, objectItem_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "recordDecl"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:321:1: recordDecl : ( simpleRecord | variantRecord );
    public final DelphiParser.recordDecl_return recordDecl() throws RecognitionException {
        DelphiParser.recordDecl_return retval = new DelphiParser.recordDecl_return();
        retval.start = input.LT(1);
        int recordDecl_StartIndex = input.index();

        Object root_0 = null;

        ParserRuleReturnScope simpleRecord329 = null;
        ParserRuleReturnScope variantRecord330 = null;


        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 81)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:321:30: ( simpleRecord | variantRecord )
            int alt104 = 2;
            int LA104_0 = input.LA(1);
            if ((LA104_0 == RECORD)) {
                int LA104_1 = input.LA(2);
                if ((synpred147_Delphi())) {
                    alt104 = 1;
                } else if ((true)) {
                    alt104 = 2;
                }

            } else {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae =
                        new NoViableAltException("", 104, 0, input);
                throw nvae;
            }

            switch (alt104) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:321:32: simpleRecord
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_simpleRecord_in_recordDecl7590);
                    simpleRecord329 = simpleRecord();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, simpleRecord329.getTree());

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:322:32: variantRecord
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_variantRecord_in_recordDecl7623);
                    variantRecord330 = variantRecord();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, variantRecord330.getTree());

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 81, recordDecl_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "simpleRecord"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:324:1: simpleRecord : 'record' ( recordField )* ( recordItem )* 'end' -> 'record' ( recordField )* ( recordItem )* ;
    public final DelphiParser.simpleRecord_return simpleRecord() throws RecognitionException {
        DelphiParser.simpleRecord_return retval = new DelphiParser.simpleRecord_return();
        retval.start = input.LT(1);
        int simpleRecord_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal331 = null;
        Token string_literal334 = null;
        ParserRuleReturnScope recordField332 = null;
        ParserRuleReturnScope recordItem333 = null;

        Object string_literal331_tree = null;
        Object string_literal334_tree = null;
        RewriteRuleTokenStream stream_RECORD = new RewriteRuleTokenStream(adaptor, "token RECORD");
        RewriteRuleTokenStream stream_END = new RewriteRuleTokenStream(adaptor, "token END");
        RewriteRuleSubtreeStream stream_recordField = new RewriteRuleSubtreeStream(adaptor, "rule recordField");
        RewriteRuleSubtreeStream stream_recordItem = new RewriteRuleSubtreeStream(adaptor, "rule recordItem");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 82)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:324:30: ( 'record' ( recordField )* ( recordItem )* 'end' -> 'record' ( recordField )* ( recordItem )* )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:324:32: 'record' ( recordField )* ( recordItem )* 'end'
            {
                string_literal331 = (Token) match(input, RECORD, FOLLOW_RECORD_in_simpleRecord7676);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_RECORD.add(string_literal331);

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:324:41: ( recordField )*
                loop105:
                while (true) {
                    int alt105 = 2;
                    alt105 = dfa105.predict(input);
                    switch (alt105) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:324:42: recordField
                        {
                            pushFollow(FOLLOW_recordField_in_simpleRecord7679);
                            recordField332 = recordField();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_recordField.add(recordField332.getTree());
                        }
                        break;

                        default:
                            break loop105;
                    }
                }

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:324:56: ( recordItem )*
                loop106:
                while (true) {
                    int alt106 = 2;
                    int LA106_0 = input.LA(1);
                    if ((LA106_0 == ADD || LA106_0 == ANSISTRING || LA106_0 == AT || LA106_0 == AUTOMATED || LA106_0 == BREAK || LA106_0 == CLASS || (LA106_0 >= CONST && LA106_0 <= CONTINUE) || LA106_0 == DEFAULT || LA106_0 == DESTRUCTOR || LA106_0 == EXIT || LA106_0 == EXPORT || LA106_0 == FINAL || LA106_0 == FUNCTION || LA106_0 == IMPLEMENTS || LA106_0 == INDEX || LA106_0 == LBRACK || LA106_0 == LOCAL || LA106_0 == MESSAGE || LA106_0 == NAME || LA106_0 == OBJECT || LA106_0 == OPERATOR || LA106_0 == OUT || LA106_0 == POINTER || (LA106_0 >= PRIVATE && LA106_0 <= PROCEDURE) || (LA106_0 >= PROPERTY && LA106_0 <= PUBLISHED) || (LA106_0 >= READ && LA106_0 <= READONLY) || (LA106_0 >= REFERENCE && LA106_0 <= REGISTER) || LA106_0 == REMOVE || LA106_0 == RESOURCESTRING || (LA106_0 >= STORED && LA106_0 <= STRING) || LA106_0 == THREADVAR || LA106_0 == TYPE || LA106_0 == TkIdentifier || LA106_0 == VAR || LA106_0 == VARIANT || LA106_0 == WRITE || LA106_0 == 200)) {
                        alt106 = 1;
                    }

                    switch (alt106) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:324:57: recordItem
                        {
                            pushFollow(FOLLOW_recordItem_in_simpleRecord7684);
                            recordItem333 = recordItem();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_recordItem.add(recordItem333.getTree());
                        }
                        break;

                        default:
                            break loop106;
                    }
                }

                string_literal334 = (Token) match(input, END, FOLLOW_END_in_simpleRecord7688);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_END.add(string_literal334);

                // AST REWRITE
                // elements: recordField, RECORD, recordItem
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 324:76: -> 'record' ( recordField )* ( recordItem )*
                    {
                        adaptor.addChild(root_0, stream_RECORD.nextNode());
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:324:88: ( recordField )*
                        while (stream_recordField.hasNext()) {
                            adaptor.addChild(root_0, stream_recordField.nextTree());
                        }
                        stream_recordField.reset();

                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:324:103: ( recordItem )*
                        while (stream_recordItem.hasNext()) {
                            adaptor.addChild(root_0, stream_recordItem.nextTree());
                        }
                        stream_recordItem.reset();

                    }


                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 82, simpleRecord_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "variantRecord"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:326:1: variantRecord : 'record' ( recordField )* recordVariantSection 'end' -> 'record' ( recordField )* recordVariantSection ;
    public final DelphiParser.variantRecord_return variantRecord() throws RecognitionException {
        DelphiParser.variantRecord_return retval = new DelphiParser.variantRecord_return();
        retval.start = input.LT(1);
        int variantRecord_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal335 = null;
        Token string_literal338 = null;
        ParserRuleReturnScope recordField336 = null;
        ParserRuleReturnScope recordVariantSection337 = null;

        Object string_literal335_tree = null;
        Object string_literal338_tree = null;
        RewriteRuleTokenStream stream_RECORD = new RewriteRuleTokenStream(adaptor, "token RECORD");
        RewriteRuleTokenStream stream_END = new RewriteRuleTokenStream(adaptor, "token END");
        RewriteRuleSubtreeStream stream_recordVariantSection = new RewriteRuleSubtreeStream(adaptor, "rule recordVariantSection");
        RewriteRuleSubtreeStream stream_recordField = new RewriteRuleSubtreeStream(adaptor, "rule recordField");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 83)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:326:30: ( 'record' ( recordField )* recordVariantSection 'end' -> 'record' ( recordField )* recordVariantSection )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:326:32: 'record' ( recordField )* recordVariantSection 'end'
            {
                string_literal335 = (Token) match(input, RECORD, FOLLOW_RECORD_in_variantRecord7754);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_RECORD.add(string_literal335);

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:326:41: ( recordField )*
                loop107:
                while (true) {
                    int alt107 = 2;
                    int LA107_0 = input.LA(1);
                    if ((LA107_0 == ADD || LA107_0 == ANSISTRING || LA107_0 == AT || LA107_0 == BREAK || (LA107_0 >= CONTAINS && LA107_0 <= CONTINUE) || LA107_0 == DEFAULT || LA107_0 == EXIT || LA107_0 == EXPORT || LA107_0 == FINAL || LA107_0 == IMPLEMENTS || LA107_0 == INDEX || LA107_0 == LOCAL || LA107_0 == MESSAGE || LA107_0 == NAME || LA107_0 == OBJECT || LA107_0 == OPERATOR || LA107_0 == OUT || LA107_0 == POINTER || (LA107_0 >= READ && LA107_0 <= READONLY) || (LA107_0 >= REFERENCE && LA107_0 <= REGISTER) || LA107_0 == REMOVE || (LA107_0 >= STORED && LA107_0 <= STRING) || LA107_0 == TkIdentifier || LA107_0 == VARIANT || LA107_0 == WRITE || LA107_0 == 200)) {
                        alt107 = 1;
                    }

                    switch (alt107) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:326:42: recordField
                        {
                            pushFollow(FOLLOW_recordField_in_variantRecord7757);
                            recordField336 = recordField();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_recordField.add(recordField336.getTree());
                        }
                        break;

                        default:
                            break loop107;
                    }
                }

                pushFollow(FOLLOW_recordVariantSection_in_variantRecord7761);
                recordVariantSection337 = recordVariantSection();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_recordVariantSection.add(recordVariantSection337.getTree());
                string_literal338 = (Token) match(input, END, FOLLOW_END_in_variantRecord7763);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_END.add(string_literal338);

                // AST REWRITE
                // elements: recordVariantSection, recordField, RECORD
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 326:83: -> 'record' ( recordField )* recordVariantSection
                    {
                        adaptor.addChild(root_0, stream_RECORD.nextNode());
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:326:95: ( recordField )*
                        while (stream_recordField.hasNext()) {
                            adaptor.addChild(root_0, stream_recordField.nextTree());
                        }
                        stream_recordField.reset();

                        adaptor.addChild(root_0, stream_recordVariantSection.nextTree());
                    }


                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 83, variantRecord_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "recordItem"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:328:1: recordItem : ( visibility | classMethod | classProperty | constSection | typeSection | recordField | ( 'class' )? varSection );
    public final DelphiParser.recordItem_return recordItem() throws RecognitionException {
        DelphiParser.recordItem_return retval = new DelphiParser.recordItem_return();
        retval.start = input.LT(1);
        int recordItem_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal345 = null;
        ParserRuleReturnScope visibility339 = null;
        ParserRuleReturnScope classMethod340 = null;
        ParserRuleReturnScope classProperty341 = null;
        ParserRuleReturnScope constSection342 = null;
        ParserRuleReturnScope typeSection343 = null;
        ParserRuleReturnScope recordField344 = null;
        ParserRuleReturnScope varSection346 = null;

        Object string_literal345_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 84)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:328:30: ( visibility | classMethod | classProperty | constSection | typeSection | recordField | ( 'class' )? varSection )
            int alt109 = 7;
            switch (input.LA(1)) {
                case STRICT: {
                    int LA109_1 = input.LA(2);
                    if ((synpred151_Delphi())) {
                        alt109 = 1;
                    } else if ((synpred156_Delphi())) {
                        alt109 = 6;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try {
                            input.consume();
                            NoViableAltException nvae =
                                    new NoViableAltException("", 109, 1, input);
                            throw nvae;
                        } finally {
                            input.rewind(nvaeMark);
                        }
                    }

                }
                break;
                case AUTOMATED:
                case PRIVATE:
                case PROTECTED:
                case PUBLIC:
                case PUBLISHED: {
                    alt109 = 1;
                }
                break;
                case LBRACK: {
                    int LA109_7 = input.LA(2);
                    if ((synpred152_Delphi())) {
                        alt109 = 2;
                    } else if ((synpred153_Delphi())) {
                        alt109 = 3;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try {
                            input.consume();
                            NoViableAltException nvae =
                                    new NoViableAltException("", 109, 7, input);
                            throw nvae;
                        } finally {
                            input.rewind(nvaeMark);
                        }
                    }

                }
                break;
                case CLASS: {
                    int LA109_8 = input.LA(2);
                    if ((synpred152_Delphi())) {
                        alt109 = 2;
                    } else if ((synpred153_Delphi())) {
                        alt109 = 3;
                    } else if ((true)) {
                        alt109 = 7;
                    }

                }
                break;
                case CONSTRUCTOR:
                case DESTRUCTOR:
                case FUNCTION:
                case PROCEDURE: {
                    alt109 = 2;
                }
                break;
                case OPERATOR: {
                    int LA109_11 = input.LA(2);
                    if ((synpred152_Delphi())) {
                        alt109 = 2;
                    } else if ((synpred156_Delphi())) {
                        alt109 = 6;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try {
                            input.consume();
                            NoViableAltException nvae =
                                    new NoViableAltException("", 109, 11, input);
                            throw nvae;
                        } finally {
                            input.rewind(nvaeMark);
                        }
                    }

                }
                break;
                case PROPERTY: {
                    alt109 = 3;
                }
                break;
                case CONST:
                case RESOURCESTRING: {
                    alt109 = 4;
                }
                break;
                case TYPE: {
                    alt109 = 5;
                }
                break;
                case ADD:
                case ANSISTRING:
                case AT:
                case BREAK:
                case CONTAINS:
                case CONTINUE:
                case DEFAULT:
                case EXIT:
                case EXPORT:
                case FINAL:
                case IMPLEMENTS:
                case INDEX:
                case LOCAL:
                case MESSAGE:
                case NAME:
                case OBJECT:
                case OUT:
                case POINTER:
                case READ:
                case READONLY:
                case REFERENCE:
                case REGISTER:
                case REMOVE:
                case STORED:
                case STRING:
                case TkIdentifier:
                case VARIANT:
                case WRITE:
                case 200: {
                    alt109 = 6;
                }
                break;
                case THREADVAR:
                case VAR: {
                    alt109 = 7;
                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae =
                            new NoViableAltException("", 109, 0, input);
                    throw nvae;
            }
            switch (alt109) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:328:32: visibility
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_visibility_in_recordItem7829);
                    visibility339 = visibility();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, visibility339.getTree());

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:329:32: classMethod
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_classMethod_in_recordItem7867);
                    classMethod340 = classMethod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, classMethod340.getTree());

                }
                break;
                case 3:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:330:32: classProperty
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_classProperty_in_recordItem7900);
                    classProperty341 = classProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, classProperty341.getTree());

                }
                break;
                case 4:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:331:32: constSection
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_constSection_in_recordItem7933);
                    constSection342 = constSection();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, constSection342.getTree());

                }
                break;
                case 5:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:332:32: typeSection
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_typeSection_in_recordItem7966);
                    typeSection343 = typeSection();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, typeSection343.getTree());

                }
                break;
                case 6:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:333:32: recordField
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_recordField_in_recordItem7999);
                    recordField344 = recordField();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, recordField344.getTree());

                }
                break;
                case 7:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:334:32: ( 'class' )? varSection
                {
                    root_0 = (Object) adaptor.nil();


                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:334:32: ( 'class' )?
                    int alt108 = 2;
                    int LA108_0 = input.LA(1);
                    if ((LA108_0 == CLASS)) {
                        alt108 = 1;
                    }
                    switch (alt108) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:334:33: 'class'
                        {
                            string_literal345 = (Token) match(input, CLASS, FOLLOW_CLASS_in_recordItem8033);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) {
                                string_literal345_tree = (Object) adaptor.create(string_literal345);
                                adaptor.addChild(root_0, string_literal345_tree);
                            }

                        }
                        break;

                    }

                    pushFollow(FOLLOW_varSection_in_recordItem8037);
                    varSection346 = varSection();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, varSection346.getTree());

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 84, recordItem_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "recordField"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:336:1: recordField : identList ':' typeDecl ( hintingDirective )* ( ';' )? -> identList ^( TkVariableType typeDecl ) ;
    public final DelphiParser.recordField_return recordField() throws RecognitionException {
        DelphiParser.recordField_return retval = new DelphiParser.recordField_return();
        retval.start = input.LT(1);
        int recordField_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal348 = null;
        Token char_literal351 = null;
        ParserRuleReturnScope identList347 = null;
        ParserRuleReturnScope typeDecl349 = null;
        ParserRuleReturnScope hintingDirective350 = null;

        Object char_literal348_tree = null;
        Object char_literal351_tree = null;
        RewriteRuleTokenStream stream_SEMI = new RewriteRuleTokenStream(adaptor, "token SEMI");
        RewriteRuleTokenStream stream_COLON = new RewriteRuleTokenStream(adaptor, "token COLON");
        RewriteRuleSubtreeStream stream_identList = new RewriteRuleSubtreeStream(adaptor, "rule identList");
        RewriteRuleSubtreeStream stream_hintingDirective = new RewriteRuleSubtreeStream(adaptor, "rule hintingDirective");
        RewriteRuleSubtreeStream stream_typeDecl = new RewriteRuleSubtreeStream(adaptor, "rule typeDecl");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 85)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:336:30: ( identList ':' typeDecl ( hintingDirective )* ( ';' )? -> identList ^( TkVariableType typeDecl ) )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:336:32: identList ':' typeDecl ( hintingDirective )* ( ';' )?
            {
                pushFollow(FOLLOW_identList_in_recordField8091);
                identList347 = identList();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_identList.add(identList347.getTree());
                char_literal348 = (Token) match(input, COLON, FOLLOW_COLON_in_recordField8093);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_COLON.add(char_literal348);

                pushFollow(FOLLOW_typeDecl_in_recordField8095);
                typeDecl349 = typeDecl();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_typeDecl.add(typeDecl349.getTree());
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:336:55: ( hintingDirective )*
                loop110:
                while (true) {
                    int alt110 = 2;
                    int LA110_0 = input.LA(1);
                    if ((LA110_0 == DEPRECATED || LA110_0 == EXPERIMENTAL || LA110_0 == LIBRARY || LA110_0 == PLATFORM)) {
                        alt110 = 1;
                    }

                    switch (alt110) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:336:56: hintingDirective
                        {
                            pushFollow(FOLLOW_hintingDirective_in_recordField8098);
                            hintingDirective350 = hintingDirective();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_hintingDirective.add(hintingDirective350.getTree());
                        }
                        break;

                        default:
                            break loop110;
                    }
                }

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:336:75: ( ';' )?
                int alt111 = 2;
                int LA111_0 = input.LA(1);
                if ((LA111_0 == SEMI)) {
                    alt111 = 1;
                }
                switch (alt111) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:336:76: ';'
                    {
                        char_literal351 = (Token) match(input, SEMI, FOLLOW_SEMI_in_recordField8103);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_SEMI.add(char_literal351);

                    }
                    break;

                }

                // AST REWRITE
                // elements: identList, typeDecl
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 337:30: -> identList ^( TkVariableType typeDecl )
                    {
                        adaptor.addChild(root_0, stream_identList.nextTree());
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:337:43: ^( TkVariableType typeDecl )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(TkVariableType, "TkVariableType"), root_1);
                            adaptor.addChild(root_1, stream_typeDecl.nextTree());
                            adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 85, recordField_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "recordVariantField"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:339:1: recordVariantField : identList ':' typeDecl ( hintingDirective )* ( ';' )? -> identList ^( TkVariableType typeDecl ) ;
    public final DelphiParser.recordVariantField_return recordVariantField() throws RecognitionException {
        DelphiParser.recordVariantField_return retval = new DelphiParser.recordVariantField_return();
        retval.start = input.LT(1);
        int recordVariantField_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal353 = null;
        Token char_literal356 = null;
        ParserRuleReturnScope identList352 = null;
        ParserRuleReturnScope typeDecl354 = null;
        ParserRuleReturnScope hintingDirective355 = null;

        Object char_literal353_tree = null;
        Object char_literal356_tree = null;
        RewriteRuleTokenStream stream_SEMI = new RewriteRuleTokenStream(adaptor, "token SEMI");
        RewriteRuleTokenStream stream_COLON = new RewriteRuleTokenStream(adaptor, "token COLON");
        RewriteRuleSubtreeStream stream_identList = new RewriteRuleSubtreeStream(adaptor, "rule identList");
        RewriteRuleSubtreeStream stream_hintingDirective = new RewriteRuleSubtreeStream(adaptor, "rule hintingDirective");
        RewriteRuleSubtreeStream stream_typeDecl = new RewriteRuleSubtreeStream(adaptor, "rule typeDecl");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 86)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:339:30: ( identList ':' typeDecl ( hintingDirective )* ( ';' )? -> identList ^( TkVariableType typeDecl ) )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:339:32: identList ':' typeDecl ( hintingDirective )* ( ';' )?
            {
                pushFollow(FOLLOW_identList_in_recordVariantField8203);
                identList352 = identList();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_identList.add(identList352.getTree());
                char_literal353 = (Token) match(input, COLON, FOLLOW_COLON_in_recordVariantField8205);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_COLON.add(char_literal353);

                pushFollow(FOLLOW_typeDecl_in_recordVariantField8207);
                typeDecl354 = typeDecl();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_typeDecl.add(typeDecl354.getTree());
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:339:55: ( hintingDirective )*
                loop112:
                while (true) {
                    int alt112 = 2;
                    int LA112_0 = input.LA(1);
                    if ((LA112_0 == DEPRECATED || LA112_0 == EXPERIMENTAL || LA112_0 == LIBRARY || LA112_0 == PLATFORM)) {
                        alt112 = 1;
                    }

                    switch (alt112) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:339:56: hintingDirective
                        {
                            pushFollow(FOLLOW_hintingDirective_in_recordVariantField8210);
                            hintingDirective355 = hintingDirective();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_hintingDirective.add(hintingDirective355.getTree());
                        }
                        break;

                        default:
                            break loop112;
                    }
                }

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:339:75: ( ';' )?
                int alt113 = 2;
                int LA113_0 = input.LA(1);
                if ((LA113_0 == SEMI)) {
                    alt113 = 1;
                }
                switch (alt113) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:339:76: ';'
                    {
                        char_literal356 = (Token) match(input, SEMI, FOLLOW_SEMI_in_recordVariantField8215);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_SEMI.add(char_literal356);

                    }
                    break;

                }

                // AST REWRITE
                // elements: typeDecl, identList
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 340:30: -> identList ^( TkVariableType typeDecl )
                    {
                        adaptor.addChild(root_0, stream_identList.nextTree());
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:340:43: ^( TkVariableType typeDecl )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(TkVariableType, "TkVariableType"), root_1);
                            adaptor.addChild(root_1, stream_typeDecl.nextTree());
                            adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 86, recordVariantField_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "recordVariantSection"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:342:1: recordVariantSection : 'case' ( ident ':' )? typeDecl 'of' ( recordVariant | ';' ) ( recordVariant | ';' )* ;
    public final DelphiParser.recordVariantSection_return recordVariantSection() throws RecognitionException {
        DelphiParser.recordVariantSection_return retval = new DelphiParser.recordVariantSection_return();
        retval.start = input.LT(1);
        int recordVariantSection_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal357 = null;
        Token char_literal359 = null;
        Token string_literal361 = null;
        Token char_literal363 = null;
        Token char_literal365 = null;
        ParserRuleReturnScope ident358 = null;
        ParserRuleReturnScope typeDecl360 = null;
        ParserRuleReturnScope recordVariant362 = null;
        ParserRuleReturnScope recordVariant364 = null;

        Object string_literal357_tree = null;
        Object char_literal359_tree = null;
        Object string_literal361_tree = null;
        Object char_literal363_tree = null;
        Object char_literal365_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 87)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:342:30: ( 'case' ( ident ':' )? typeDecl 'of' ( recordVariant | ';' ) ( recordVariant | ';' )* )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:342:32: 'case' ( ident ':' )? typeDecl 'of' ( recordVariant | ';' ) ( recordVariant | ';' )*
            {
                root_0 = (Object) adaptor.nil();


                string_literal357 = (Token) match(input, CASE, FOLLOW_CASE_in_recordVariantSection8312);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    string_literal357_tree = (Object) adaptor.create(string_literal357);
                    adaptor.addChild(root_0, string_literal357_tree);
                }

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:342:39: ( ident ':' )?
                int alt114 = 2;
                switch (input.LA(1)) {
                    case TkIdentifier: {
                        int LA114_1 = input.LA(2);
                        if ((LA114_1 == COLON)) {
                            alt114 = 1;
                        }
                    }
                    break;
                    case 200: {
                        int LA114_2 = input.LA(2);
                        if ((LA114_2 == TkIdentifier)) {
                            int LA114_12 = input.LA(3);
                            if ((LA114_12 == COLON)) {
                                alt114 = 1;
                            }
                        }
                    }
                    break;
                    case OBJECT: {
                        int LA114_3 = input.LA(2);
                        if ((LA114_3 == COLON)) {
                            alt114 = 1;
                        }
                    }
                    break;
                    case POINTER: {
                        int LA114_5 = input.LA(2);
                        if ((LA114_5 == COLON)) {
                            alt114 = 1;
                        }
                    }
                    break;
                    case STRING: {
                        int LA114_6 = input.LA(2);
                        if ((LA114_6 == COLON)) {
                            alt114 = 1;
                        }
                    }
                    break;
                    case ANSISTRING: {
                        int LA114_7 = input.LA(2);
                        if ((LA114_7 == COLON)) {
                            alt114 = 1;
                        }
                    }
                    break;
                    case REFERENCE: {
                        int LA114_8 = input.LA(2);
                        if ((LA114_8 == COLON)) {
                            alt114 = 1;
                        }
                    }
                    break;
                    case VARIANT: {
                        int LA114_9 = input.LA(2);
                        if ((LA114_9 == COLON)) {
                            alt114 = 1;
                        }
                    }
                    break;
                    case ADD:
                    case AT:
                    case BREAK:
                    case CONTAINS:
                    case CONTINUE:
                    case DEFAULT:
                    case EXIT:
                    case EXPORT:
                    case FINAL:
                    case IMPLEMENTS:
                    case INDEX:
                    case LOCAL:
                    case MESSAGE:
                    case NAME:
                    case OPERATOR:
                    case OUT:
                    case READ:
                    case READONLY:
                    case REGISTER:
                    case REMOVE:
                    case STORED:
                    case STRICT:
                    case WRITE: {
                        int LA114_10 = input.LA(2);
                        if ((LA114_10 == COLON)) {
                            alt114 = 1;
                        }
                    }
                    break;
                }
                switch (alt114) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:342:40: ident ':'
                    {
                        pushFollow(FOLLOW_ident_in_recordVariantSection8315);
                        ident358 = ident();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) adaptor.addChild(root_0, ident358.getTree());

                        char_literal359 = (Token) match(input, COLON, FOLLOW_COLON_in_recordVariantSection8317);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) {
                            char_literal359_tree = (Object) adaptor.create(char_literal359);
                            adaptor.addChild(root_0, char_literal359_tree);
                        }

                    }
                    break;

                }

                pushFollow(FOLLOW_typeDecl_in_recordVariantSection8321);
                typeDecl360 = typeDecl();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, typeDecl360.getTree());

                string_literal361 = (Token) match(input, OF, FOLLOW_OF_in_recordVariantSection8323);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    string_literal361_tree = (Object) adaptor.create(string_literal361);
                    adaptor.addChild(root_0, string_literal361_tree);
                }

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:342:66: ( recordVariant | ';' )
                int alt115 = 2;
                int LA115_0 = input.LA(1);
                if (((LA115_0 >= ADD && LA115_0 <= ANSISTRING) || LA115_0 == AS || (LA115_0 >= AT && LA115_0 <= AT2) || LA115_0 == BREAK || (LA115_0 >= COLON && LA115_0 <= COMMA) || (LA115_0 >= CONTAINS && LA115_0 <= ControlString) || LA115_0 == DEFAULT || LA115_0 == DIV || LA115_0 == DOT || LA115_0 == EQUAL || LA115_0 == EXIT || LA115_0 == EXPORT || LA115_0 == FALSE || LA115_0 == FINAL || (LA115_0 >= FUNCTION && LA115_0 <= GE) || LA115_0 == GT || (LA115_0 >= IMPLEMENTS && LA115_0 <= INHERITED) || LA115_0 == IS || LA115_0 == LBRACK || LA115_0 == LE || (LA115_0 >= LOCAL && LA115_0 <= NAME) || LA115_0 == NIL || (LA115_0 >= NOT && LA115_0 <= OBJECT) || (LA115_0 >= OPERATOR && LA115_0 <= OUT) || (LA115_0 >= PLUS && LA115_0 <= POINTER2) || LA115_0 == PROCEDURE || LA115_0 == QuotedString || (LA115_0 >= READ && LA115_0 <= READONLY) || (LA115_0 >= REFERENCE && LA115_0 <= REGISTER) || LA115_0 == REMOVE || (LA115_0 >= SHL && LA115_0 <= STAR) || (LA115_0 >= STORED && LA115_0 <= STRING) || LA115_0 == TRUE || LA115_0 == TkAsmHexNum || (LA115_0 >= TkHexNum && LA115_0 <= TkIntNum) || LA115_0 == TkRealNum || LA115_0 == VARIANT || LA115_0 == WRITE || (LA115_0 >= XOR && LA115_0 <= 201))) {
                    alt115 = 1;
                } else if ((LA115_0 == SEMI)) {
                    alt115 = 2;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae =
                            new NoViableAltException("", 115, 0, input);
                    throw nvae;
                }

                switch (alt115) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:342:67: recordVariant
                    {
                        pushFollow(FOLLOW_recordVariant_in_recordVariantSection8326);
                        recordVariant362 = recordVariant();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) adaptor.addChild(root_0, recordVariant362.getTree());

                    }
                    break;
                    case 2:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:342:83: ';'
                    {
                        char_literal363 = (Token) match(input, SEMI, FOLLOW_SEMI_in_recordVariantSection8330);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) {
                            char_literal363_tree = (Object) adaptor.create(char_literal363);
                            adaptor.addChild(root_0, char_literal363_tree);
                        }

                    }
                    break;

                }

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:342:88: ( recordVariant | ';' )*
                loop116:
                while (true) {
                    int alt116 = 3;
                    int LA116_0 = input.LA(1);
                    if (((LA116_0 >= ADD && LA116_0 <= ANSISTRING) || LA116_0 == AS || (LA116_0 >= AT && LA116_0 <= AT2) || LA116_0 == BREAK || (LA116_0 >= COLON && LA116_0 <= COMMA) || (LA116_0 >= CONTAINS && LA116_0 <= ControlString) || LA116_0 == DEFAULT || LA116_0 == DIV || LA116_0 == DOT || LA116_0 == EQUAL || LA116_0 == EXIT || LA116_0 == EXPORT || LA116_0 == FALSE || LA116_0 == FINAL || (LA116_0 >= FUNCTION && LA116_0 <= GE) || LA116_0 == GT || (LA116_0 >= IMPLEMENTS && LA116_0 <= INHERITED) || LA116_0 == IS || LA116_0 == LBRACK || LA116_0 == LE || (LA116_0 >= LOCAL && LA116_0 <= NAME) || LA116_0 == NIL || (LA116_0 >= NOT && LA116_0 <= OBJECT) || (LA116_0 >= OPERATOR && LA116_0 <= OUT) || (LA116_0 >= PLUS && LA116_0 <= POINTER2) || LA116_0 == PROCEDURE || LA116_0 == QuotedString || (LA116_0 >= READ && LA116_0 <= READONLY) || (LA116_0 >= REFERENCE && LA116_0 <= REGISTER) || LA116_0 == REMOVE || (LA116_0 >= SHL && LA116_0 <= STAR) || (LA116_0 >= STORED && LA116_0 <= STRING) || LA116_0 == TRUE || LA116_0 == TkAsmHexNum || (LA116_0 >= TkHexNum && LA116_0 <= TkIntNum) || LA116_0 == TkRealNum || LA116_0 == VARIANT || LA116_0 == WRITE || (LA116_0 >= XOR && LA116_0 <= 201))) {
                        alt116 = 1;
                    } else if ((LA116_0 == SEMI)) {
                        alt116 = 2;
                    }

                    switch (alt116) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:342:89: recordVariant
                        {
                            pushFollow(FOLLOW_recordVariant_in_recordVariantSection8334);
                            recordVariant364 = recordVariant();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, recordVariant364.getTree());

                        }
                        break;
                        case 2:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:342:105: ';'
                        {
                            char_literal365 = (Token) match(input, SEMI, FOLLOW_SEMI_in_recordVariantSection8338);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) {
                                char_literal365_tree = (Object) adaptor.create(char_literal365);
                                adaptor.addChild(root_0, char_literal365_tree);
                            }

                        }
                        break;

                        default:
                            break loop116;
                    }
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 87, recordVariantSection_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "recordVariant"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:344:1: recordVariant : constExpression ( ',' constExpression )* ':' '(' ( recordVariantField )* ')' ;
    public final DelphiParser.recordVariant_return recordVariant() throws RecognitionException {
        DelphiParser.recordVariant_return retval = new DelphiParser.recordVariant_return();
        retval.start = input.LT(1);
        int recordVariant_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal367 = null;
        Token char_literal369 = null;
        Token char_literal370 = null;
        Token char_literal372 = null;
        ParserRuleReturnScope constExpression366 = null;
        ParserRuleReturnScope constExpression368 = null;
        ParserRuleReturnScope recordVariantField371 = null;

        Object char_literal367_tree = null;
        Object char_literal369_tree = null;
        Object char_literal370_tree = null;
        Object char_literal372_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 88)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:344:30: ( constExpression ( ',' constExpression )* ':' '(' ( recordVariantField )* ')' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:344:32: constExpression ( ',' constExpression )* ':' '(' ( recordVariantField )* ')'
            {
                root_0 = (Object) adaptor.nil();


                pushFollow(FOLLOW_constExpression_in_recordVariant8392);
                constExpression366 = constExpression();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, constExpression366.getTree());

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:344:48: ( ',' constExpression )*
                loop117:
                while (true) {
                    int alt117 = 2;
                    int LA117_0 = input.LA(1);
                    if ((LA117_0 == COMMA)) {
                        alt117 = 1;
                    }

                    switch (alt117) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:344:49: ',' constExpression
                        {
                            char_literal367 = (Token) match(input, COMMA, FOLLOW_COMMA_in_recordVariant8395);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) {
                                char_literal367_tree = (Object) adaptor.create(char_literal367);
                                adaptor.addChild(root_0, char_literal367_tree);
                            }

                            pushFollow(FOLLOW_constExpression_in_recordVariant8397);
                            constExpression368 = constExpression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, constExpression368.getTree());

                        }
                        break;

                        default:
                            break loop117;
                    }
                }

                char_literal369 = (Token) match(input, COLON, FOLLOW_COLON_in_recordVariant8401);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    char_literal369_tree = (Object) adaptor.create(char_literal369);
                    adaptor.addChild(root_0, char_literal369_tree);
                }

                char_literal370 = (Token) match(input, LPAREN, FOLLOW_LPAREN_in_recordVariant8403);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    char_literal370_tree = (Object) adaptor.create(char_literal370);
                    adaptor.addChild(root_0, char_literal370_tree);
                }

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:344:79: ( recordVariantField )*
                loop118:
                while (true) {
                    int alt118 = 2;
                    int LA118_0 = input.LA(1);
                    if ((LA118_0 == ADD || LA118_0 == ANSISTRING || LA118_0 == AT || LA118_0 == BREAK || (LA118_0 >= CONTAINS && LA118_0 <= CONTINUE) || LA118_0 == DEFAULT || LA118_0 == EXIT || LA118_0 == EXPORT || LA118_0 == FINAL || LA118_0 == IMPLEMENTS || LA118_0 == INDEX || LA118_0 == LOCAL || LA118_0 == MESSAGE || LA118_0 == NAME || LA118_0 == OBJECT || LA118_0 == OPERATOR || LA118_0 == OUT || LA118_0 == POINTER || (LA118_0 >= READ && LA118_0 <= READONLY) || (LA118_0 >= REFERENCE && LA118_0 <= REGISTER) || LA118_0 == REMOVE || (LA118_0 >= STORED && LA118_0 <= STRING) || LA118_0 == TkIdentifier || LA118_0 == VARIANT || LA118_0 == WRITE || LA118_0 == 200)) {
                        alt118 = 1;
                    }

                    switch (alt118) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:344:80: recordVariantField
                        {
                            pushFollow(FOLLOW_recordVariantField_in_recordVariant8406);
                            recordVariantField371 = recordVariantField();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, recordVariantField371.getTree());

                        }
                        break;

                        default:
                            break loop118;
                    }
                }

                char_literal372 = (Token) match(input, RPAREN, FOLLOW_RPAREN_in_recordVariant8410);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    char_literal372_tree = (Object) adaptor.create(char_literal372);
                    adaptor.addChild(root_0, char_literal372_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 88, recordVariant_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "recordHelperDecl"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:346:1: recordHelperDecl : 'record' 'helper' 'for' typeId ( recordHelperItem )* 'end' ;
    public final DelphiParser.recordHelperDecl_return recordHelperDecl() throws RecognitionException {
        DelphiParser.recordHelperDecl_return retval = new DelphiParser.recordHelperDecl_return();
        retval.start = input.LT(1);
        int recordHelperDecl_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal373 = null;
        Token string_literal374 = null;
        Token string_literal375 = null;
        Token string_literal378 = null;
        ParserRuleReturnScope typeId376 = null;
        ParserRuleReturnScope recordHelperItem377 = null;

        Object string_literal373_tree = null;
        Object string_literal374_tree = null;
        Object string_literal375_tree = null;
        Object string_literal378_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 89)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:346:30: ( 'record' 'helper' 'for' typeId ( recordHelperItem )* 'end' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:346:32: 'record' 'helper' 'for' typeId ( recordHelperItem )* 'end'
            {
                root_0 = (Object) adaptor.nil();


                string_literal373 = (Token) match(input, RECORD, FOLLOW_RECORD_in_recordHelperDecl8462);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    string_literal373_tree = (Object) adaptor.create(string_literal373);
                    adaptor.addChild(root_0, string_literal373_tree);
                }

                string_literal374 = (Token) match(input, HELPER, FOLLOW_HELPER_in_recordHelperDecl8464);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    string_literal374_tree = (Object) adaptor.create(string_literal374);
                    adaptor.addChild(root_0, string_literal374_tree);
                }

                string_literal375 = (Token) match(input, FOR, FOLLOW_FOR_in_recordHelperDecl8466);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    string_literal375_tree = (Object) adaptor.create(string_literal375);
                    adaptor.addChild(root_0, string_literal375_tree);
                }

                pushFollow(FOLLOW_typeId_in_recordHelperDecl8468);
                typeId376 = typeId();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, typeId376.getTree());

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:346:63: ( recordHelperItem )*
                loop119:
                while (true) {
                    int alt119 = 2;
                    int LA119_0 = input.LA(1);
                    if ((LA119_0 == AUTOMATED || LA119_0 == CLASS || LA119_0 == CONSTRUCTOR || LA119_0 == DESTRUCTOR || LA119_0 == FUNCTION || LA119_0 == LBRACK || LA119_0 == OPERATOR || (LA119_0 >= PRIVATE && LA119_0 <= PROCEDURE) || (LA119_0 >= PROPERTY && LA119_0 <= PUBLISHED) || LA119_0 == STRICT)) {
                        alt119 = 1;
                    }

                    switch (alt119) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:346:64: recordHelperItem
                        {
                            pushFollow(FOLLOW_recordHelperItem_in_recordHelperDecl8471);
                            recordHelperItem377 = recordHelperItem();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, recordHelperItem377.getTree());

                        }
                        break;

                        default:
                            break loop119;
                    }
                }

                string_literal378 = (Token) match(input, END, FOLLOW_END_in_recordHelperDecl8475);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    string_literal378_tree = (Object) adaptor.create(string_literal378);
                    adaptor.addChild(root_0, string_literal378_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 89, recordHelperDecl_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "recordHelperItem"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:348:1: recordHelperItem : ( visibility | classMethod | classProperty );
    public final DelphiParser.recordHelperItem_return recordHelperItem() throws RecognitionException {
        DelphiParser.recordHelperItem_return retval = new DelphiParser.recordHelperItem_return();
        retval.start = input.LT(1);
        int recordHelperItem_StartIndex = input.index();

        Object root_0 = null;

        ParserRuleReturnScope visibility379 = null;
        ParserRuleReturnScope classMethod380 = null;
        ParserRuleReturnScope classProperty381 = null;


        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 90)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:348:30: ( visibility | classMethod | classProperty )
            int alt120 = 3;
            switch (input.LA(1)) {
                case AUTOMATED:
                case PRIVATE:
                case PROTECTED:
                case PUBLIC:
                case PUBLISHED:
                case STRICT: {
                    alt120 = 1;
                }
                break;
                case LBRACK: {
                    int LA120_7 = input.LA(2);
                    if ((synpred170_Delphi())) {
                        alt120 = 2;
                    } else if ((true)) {
                        alt120 = 3;
                    }

                }
                break;
                case CLASS: {
                    int LA120_8 = input.LA(2);
                    if ((synpred170_Delphi())) {
                        alt120 = 2;
                    } else if ((true)) {
                        alt120 = 3;
                    }

                }
                break;
                case CONSTRUCTOR:
                case DESTRUCTOR:
                case FUNCTION:
                case OPERATOR:
                case PROCEDURE: {
                    alt120 = 2;
                }
                break;
                case PROPERTY: {
                    alt120 = 3;
                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae =
                            new NoViableAltException("", 120, 0, input);
                    throw nvae;
            }
            switch (alt120) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:348:32: visibility
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_visibility_in_recordHelperItem8524);
                    visibility379 = visibility();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, visibility379.getTree());

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:349:32: classMethod
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_classMethod_in_recordHelperItem8557);
                    classMethod380 = classMethod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, classMethod380.getTree());

                }
                break;
                case 3:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:350:32: classProperty
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_classProperty_in_recordHelperItem8590);
                    classProperty381 = classProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, classProperty381.getTree());

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 90, recordHelperItem_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "classMethod"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:1: classMethod : ( ( customAttribute )? ( 'class' )? methodKey ident ( genericDefinition )? ( formalParameterSection )? ';' ( methodDirective )* -> ( customAttribute )? ( 'class' )? ^( methodKey ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( methodDirective )* ) | ( customAttribute )? ( 'class' )? 'function' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' ( methodDirective )* -> ( customAttribute )? ( 'class' )? ^( 'function' ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( customAttribute )? ^( TkFunctionReturn typeDecl ) ( methodDirective )* ) | ( customAttribute )? ( 'class' )? 'operator' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' -> ( customAttribute )? ( 'class' )? ^( 'operator' ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( customAttribute )? typeDecl ) );
    public final DelphiParser.classMethod_return classMethod() throws RecognitionException {
        DelphiParser.classMethod_return retval = new DelphiParser.classMethod_return();
        retval.start = input.LT(1);
        int classMethod_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal383 = null;
        Token char_literal388 = null;
        Token string_literal391 = null;
        Token string_literal392 = null;
        Token char_literal396 = null;
        Token char_literal399 = null;
        Token string_literal402 = null;
        Token string_literal403 = null;
        Token char_literal407 = null;
        Token char_literal410 = null;
        ParserRuleReturnScope customAttribute382 = null;
        ParserRuleReturnScope methodKey384 = null;
        ParserRuleReturnScope ident385 = null;
        ParserRuleReturnScope genericDefinition386 = null;
        ParserRuleReturnScope formalParameterSection387 = null;
        ParserRuleReturnScope methodDirective389 = null;
        ParserRuleReturnScope customAttribute390 = null;
        ParserRuleReturnScope ident393 = null;
        ParserRuleReturnScope genericDefinition394 = null;
        ParserRuleReturnScope formalParameterSection395 = null;
        ParserRuleReturnScope customAttribute397 = null;
        ParserRuleReturnScope typeDecl398 = null;
        ParserRuleReturnScope methodDirective400 = null;
        ParserRuleReturnScope customAttribute401 = null;
        ParserRuleReturnScope ident404 = null;
        ParserRuleReturnScope genericDefinition405 = null;
        ParserRuleReturnScope formalParameterSection406 = null;
        ParserRuleReturnScope customAttribute408 = null;
        ParserRuleReturnScope typeDecl409 = null;

        Object string_literal383_tree = null;
        Object char_literal388_tree = null;
        Object string_literal391_tree = null;
        Object string_literal392_tree = null;
        Object char_literal396_tree = null;
        Object char_literal399_tree = null;
        Object string_literal402_tree = null;
        Object string_literal403_tree = null;
        Object char_literal407_tree = null;
        Object char_literal410_tree = null;
        RewriteRuleTokenStream stream_OPERATOR = new RewriteRuleTokenStream(adaptor, "token OPERATOR");
        RewriteRuleTokenStream stream_SEMI = new RewriteRuleTokenStream(adaptor, "token SEMI");
        RewriteRuleTokenStream stream_COLON = new RewriteRuleTokenStream(adaptor, "token COLON");
        RewriteRuleTokenStream stream_CLASS = new RewriteRuleTokenStream(adaptor, "token CLASS");
        RewriteRuleTokenStream stream_FUNCTION = new RewriteRuleTokenStream(adaptor, "token FUNCTION");
        RewriteRuleSubtreeStream stream_customAttribute = new RewriteRuleSubtreeStream(adaptor, "rule customAttribute");
        RewriteRuleSubtreeStream stream_methodKey = new RewriteRuleSubtreeStream(adaptor, "rule methodKey");
        RewriteRuleSubtreeStream stream_genericDefinition = new RewriteRuleSubtreeStream(adaptor, "rule genericDefinition");
        RewriteRuleSubtreeStream stream_ident = new RewriteRuleSubtreeStream(adaptor, "rule ident");
        RewriteRuleSubtreeStream stream_formalParameterSection = new RewriteRuleSubtreeStream(adaptor, "rule formalParameterSection");
        RewriteRuleSubtreeStream stream_methodDirective = new RewriteRuleSubtreeStream(adaptor, "rule methodDirective");
        RewriteRuleSubtreeStream stream_typeDecl = new RewriteRuleSubtreeStream(adaptor, "rule typeDecl");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 91)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:30: ( ( customAttribute )? ( 'class' )? methodKey ident ( genericDefinition )? ( formalParameterSection )? ';' ( methodDirective )* -> ( customAttribute )? ( 'class' )? ^( methodKey ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( methodDirective )* ) | ( customAttribute )? ( 'class' )? 'function' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' ( methodDirective )* -> ( customAttribute )? ( 'class' )? ^( 'function' ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( customAttribute )? ^( TkFunctionReturn typeDecl ) ( methodDirective )* ) | ( customAttribute )? ( 'class' )? 'operator' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' -> ( customAttribute )? ( 'class' )? ^( 'operator' ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( customAttribute )? typeDecl ) )
            int alt137 = 3;
            switch (input.LA(1)) {
                case LBRACK: {
                    int LA137_1 = input.LA(2);
                    if ((synpred176_Delphi())) {
                        alt137 = 1;
                    } else if ((synpred183_Delphi())) {
                        alt137 = 2;
                    } else if ((true)) {
                        alt137 = 3;
                    }

                }
                break;
                case CLASS: {
                    int LA137_2 = input.LA(2);
                    if ((synpred176_Delphi())) {
                        alt137 = 1;
                    } else if ((synpred183_Delphi())) {
                        alt137 = 2;
                    } else if ((true)) {
                        alt137 = 3;
                    }

                }
                break;
                case CONSTRUCTOR:
                case DESTRUCTOR:
                case PROCEDURE: {
                    alt137 = 1;
                }
                break;
                case FUNCTION: {
                    alt137 = 2;
                }
                break;
                case OPERATOR: {
                    alt137 = 3;
                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae =
                            new NoViableAltException("", 137, 0, input);
                    throw nvae;
            }
            switch (alt137) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:32: ( customAttribute )? ( 'class' )? methodKey ident ( genericDefinition )? ( formalParameterSection )? ';' ( methodDirective )*
                {
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:32: ( customAttribute )?
                    int alt121 = 2;
                    switch (input.LA(1)) {
                        case LBRACK: {
                            alt121 = 1;
                        }
                        break;
                        case CLASS: {
                            int LA121_2 = input.LA(2);
                            if ((synpred171_Delphi())) {
                                alt121 = 1;
                            }
                        }
                        break;
                        case CONSTRUCTOR:
                        case DESTRUCTOR:
                        case PROCEDURE: {
                            int LA121_3 = input.LA(2);
                            if ((synpred171_Delphi())) {
                                alt121 = 1;
                            }
                        }
                        break;
                    }
                    switch (alt121) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:33: customAttribute
                        {
                            pushFollow(FOLLOW_customAttribute_in_classMethod8645);
                            customAttribute382 = customAttribute();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_customAttribute.add(customAttribute382.getTree());
                        }
                        break;

                    }

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:51: ( 'class' )?
                    int alt122 = 2;
                    int LA122_0 = input.LA(1);
                    if ((LA122_0 == CLASS)) {
                        alt122 = 1;
                    }
                    switch (alt122) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:52: 'class'
                        {
                            string_literal383 = (Token) match(input, CLASS, FOLLOW_CLASS_in_classMethod8650);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_CLASS.add(string_literal383);

                        }
                        break;

                    }

                    pushFollow(FOLLOW_methodKey_in_classMethod8654);
                    methodKey384 = methodKey();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_methodKey.add(methodKey384.getTree());
                    pushFollow(FOLLOW_ident_in_classMethod8656);
                    ident385 = ident();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_ident.add(ident385.getTree());
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:78: ( genericDefinition )?
                    int alt123 = 2;
                    int LA123_0 = input.LA(1);
                    if ((LA123_0 == LT)) {
                        alt123 = 1;
                    }
                    switch (alt123) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:79: genericDefinition
                        {
                            pushFollow(FOLLOW_genericDefinition_in_classMethod8659);
                            genericDefinition386 = genericDefinition();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_genericDefinition.add(genericDefinition386.getTree());
                        }
                        break;

                    }

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:99: ( formalParameterSection )?
                    int alt124 = 2;
                    int LA124_0 = input.LA(1);
                    if ((LA124_0 == LPAREN)) {
                        alt124 = 1;
                    }
                    switch (alt124) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:100: formalParameterSection
                        {
                            pushFollow(FOLLOW_formalParameterSection_in_classMethod8664);
                            formalParameterSection387 = formalParameterSection();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0)
                                stream_formalParameterSection.add(formalParameterSection387.getTree());
                        }
                        break;

                    }

                    char_literal388 = (Token) match(input, SEMI, FOLLOW_SEMI_in_classMethod8668);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_SEMI.add(char_literal388);

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:129: ( methodDirective )*
                    loop125:
                    while (true) {
                        int alt125 = 2;
                        switch (input.LA(1)) {
                            case MESSAGE: {
                                int LA125_2 = input.LA(2);
                                if (((LA125_2 >= ADD && LA125_2 <= ANSISTRING) || LA125_2 == AS || (LA125_2 >= AT && LA125_2 <= AT2) || LA125_2 == BREAK || (LA125_2 >= CONTAINS && LA125_2 <= ControlString) || LA125_2 == DEFAULT || LA125_2 == DIV || LA125_2 == DOT || LA125_2 == EQUAL || LA125_2 == EXIT || LA125_2 == EXPORT || LA125_2 == FALSE || LA125_2 == FINAL || (LA125_2 >= FUNCTION && LA125_2 <= GE) || LA125_2 == GT || (LA125_2 >= IMPLEMENTS && LA125_2 <= INHERITED) || LA125_2 == IS || LA125_2 == LBRACK || LA125_2 == LE || (LA125_2 >= LOCAL && LA125_2 <= NAME) || LA125_2 == NIL || (LA125_2 >= NOT && LA125_2 <= OBJECT) || (LA125_2 >= OPERATOR && LA125_2 <= OUT) || (LA125_2 >= PLUS && LA125_2 <= POINTER2) || LA125_2 == PROCEDURE || LA125_2 == QuotedString || (LA125_2 >= READ && LA125_2 <= READONLY) || (LA125_2 >= REFERENCE && LA125_2 <= REGISTER) || LA125_2 == REMOVE || LA125_2 == SEMI || (LA125_2 >= SHL && LA125_2 <= STAR) || (LA125_2 >= STORED && LA125_2 <= STRING) || LA125_2 == TRUE || LA125_2 == TkAsmHexNum || (LA125_2 >= TkHexNum && LA125_2 <= TkIntNum) || LA125_2 == TkRealNum || LA125_2 == VARIANT || LA125_2 == WRITE || (LA125_2 >= XOR && LA125_2 <= 201))) {
                                    alt125 = 1;
                                }

                            }
                            break;
                            case ABSTRACT:
                            case ASSEMBLER:
                            case CDECL:
                            case DEPRECATED:
                            case DISPID:
                            case DYNAMIC:
                            case EXPERIMENTAL:
                            case FAR:
                            case INLINE:
                            case LIBRARY:
                            case NEAR:
                            case OVERLOAD:
                            case OVERRIDE:
                            case PASCAL:
                            case PLATFORM:
                            case REINTRODUCE:
                            case SAFECALL:
                            case STATIC:
                            case STDCALL:
                            case VIRTUAL: {
                                alt125 = 1;
                            }
                            break;
                            case FINAL: {
                                int LA125_4 = input.LA(2);
                                if ((LA125_4 == SEMI)) {
                                    alt125 = 1;
                                }

                            }
                            break;
                            case REGISTER: {
                                int LA125_5 = input.LA(2);
                                if ((LA125_5 == SEMI)) {
                                    alt125 = 1;
                                }

                            }
                            break;
                            case EXPORT: {
                                int LA125_6 = input.LA(2);
                                if ((LA125_6 == SEMI)) {
                                    alt125 = 1;
                                }

                            }
                            break;
                            case LOCAL: {
                                int LA125_7 = input.LA(2);
                                if ((LA125_7 == SEMI)) {
                                    alt125 = 1;
                                }

                            }
                            break;
                        }
                        switch (alt125) {
                            case 1:
                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:130: methodDirective
                            {
                                pushFollow(FOLLOW_methodDirective_in_classMethod8671);
                                methodDirective389 = methodDirective();
                                state._fsp--;
                                if (state.failed) return retval;
                                if (state.backtracking == 0) stream_methodDirective.add(methodDirective389.getTree());
                            }
                            break;

                            default:
                                break loop125;
                        }
                    }

                    // AST REWRITE
                    // elements: formalParameterSection, ident, genericDefinition, customAttribute, methodDirective, methodKey, CLASS
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if (state.backtracking == 0) {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                        root_0 = (Object) adaptor.nil();
                        // 353:30: -> ( customAttribute )? ( 'class' )? ^( methodKey ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( methodDirective )* )
                        {
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:353:34: ( customAttribute )?
                            if (stream_customAttribute.hasNext()) {
                                adaptor.addChild(root_0, stream_customAttribute.nextTree());
                            }
                            stream_customAttribute.reset();

                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:353:53: ( 'class' )?
                            if (stream_CLASS.hasNext()) {
                                adaptor.addChild(root_0, stream_CLASS.nextNode());
                            }
                            stream_CLASS.reset();

                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:353:64: ^( methodKey ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( methodDirective )* )
                            {
                                Object root_1 = (Object) adaptor.nil();
                                root_1 = (Object) adaptor.becomeRoot(stream_methodKey.nextNode(), root_1);
                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:353:76: ^( TkFunctionName ident )
                                {
                                    Object root_2 = (Object) adaptor.nil();
                                    root_2 = (Object) adaptor.becomeRoot((Object) adaptor.create(TkFunctionName, "TkFunctionName"), root_2);
                                    adaptor.addChild(root_2, stream_ident.nextTree());
                                    adaptor.addChild(root_1, root_2);
                                }

                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:353:100: ( genericDefinition )?
                                if (stream_genericDefinition.hasNext()) {
                                    adaptor.addChild(root_1, stream_genericDefinition.nextTree());
                                }
                                stream_genericDefinition.reset();

                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:353:121: ^( TkFunctionArgs ( formalParameterSection )? )
                                {
                                    Object root_2 = (Object) adaptor.nil();
                                    root_2 = (Object) adaptor.becomeRoot((Object) adaptor.create(TkFunctionArgs, "TkFunctionArgs"), root_2);
                                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:353:138: ( formalParameterSection )?
                                    if (stream_formalParameterSection.hasNext()) {
                                        adaptor.addChild(root_2, stream_formalParameterSection.nextTree());
                                    }
                                    stream_formalParameterSection.reset();

                                    adaptor.addChild(root_1, root_2);
                                }

                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:353:165: ( methodDirective )*
                                while (stream_methodDirective.hasNext()) {
                                    adaptor.addChild(root_1, stream_methodDirective.nextTree());
                                }
                                stream_methodDirective.reset();

                                adaptor.addChild(root_0, root_1);
                            }

                        }


                        retval.tree = root_0;
                    }

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:32: ( customAttribute )? ( 'class' )? 'function' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' ( methodDirective )*
                {
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:32: ( customAttribute )?
                    int alt126 = 2;
                    switch (input.LA(1)) {
                        case LBRACK: {
                            alt126 = 1;
                        }
                        break;
                        case CLASS: {
                            int LA126_2 = input.LA(2);
                            if ((synpred177_Delphi())) {
                                alt126 = 1;
                            }
                        }
                        break;
                        case FUNCTION: {
                            int LA126_3 = input.LA(2);
                            if ((synpred177_Delphi())) {
                                alt126 = 1;
                            }
                        }
                        break;
                    }
                    switch (alt126) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:33: customAttribute
                        {
                            pushFollow(FOLLOW_customAttribute_in_classMethod8779);
                            customAttribute390 = customAttribute();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_customAttribute.add(customAttribute390.getTree());
                        }
                        break;

                    }

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:51: ( 'class' )?
                    int alt127 = 2;
                    int LA127_0 = input.LA(1);
                    if ((LA127_0 == CLASS)) {
                        alt127 = 1;
                    }
                    switch (alt127) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:52: 'class'
                        {
                            string_literal391 = (Token) match(input, CLASS, FOLLOW_CLASS_in_classMethod8784);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_CLASS.add(string_literal391);

                        }
                        break;

                    }

                    string_literal392 = (Token) match(input, FUNCTION, FOLLOW_FUNCTION_in_classMethod8788);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_FUNCTION.add(string_literal392);

                    pushFollow(FOLLOW_ident_in_classMethod8790);
                    ident393 = ident();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_ident.add(ident393.getTree());
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:79: ( genericDefinition )?
                    int alt128 = 2;
                    int LA128_0 = input.LA(1);
                    if ((LA128_0 == LT)) {
                        alt128 = 1;
                    }
                    switch (alt128) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:80: genericDefinition
                        {
                            pushFollow(FOLLOW_genericDefinition_in_classMethod8793);
                            genericDefinition394 = genericDefinition();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_genericDefinition.add(genericDefinition394.getTree());
                        }
                        break;

                    }

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:100: ( formalParameterSection )?
                    int alt129 = 2;
                    int LA129_0 = input.LA(1);
                    if ((LA129_0 == LPAREN)) {
                        alt129 = 1;
                    }
                    switch (alt129) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:101: formalParameterSection
                        {
                            pushFollow(FOLLOW_formalParameterSection_in_classMethod8798);
                            formalParameterSection395 = formalParameterSection();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0)
                                stream_formalParameterSection.add(formalParameterSection395.getTree());
                        }
                        break;

                    }

                    char_literal396 = (Token) match(input, COLON, FOLLOW_COLON_in_classMethod8802);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_COLON.add(char_literal396);

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:130: ( customAttribute )?
                    int alt130 = 2;
                    switch (input.LA(1)) {
                        case LBRACK: {
                            int LA130_1 = input.LA(2);
                            if ((synpred181_Delphi())) {
                                alt130 = 1;
                            }
                        }
                        break;
                        case PACKED: {
                            int LA130_2 = input.LA(2);
                            if ((synpred181_Delphi())) {
                                alt130 = 1;
                            }
                        }
                        break;
                        case ARRAY: {
                            int LA130_3 = input.LA(2);
                            if ((synpred181_Delphi())) {
                                alt130 = 1;
                            }
                        }
                        break;
                        case SET: {
                            int LA130_4 = input.LA(2);
                            if ((synpred181_Delphi())) {
                                alt130 = 1;
                            }
                        }
                        break;
                        case FILE: {
                            int LA130_5 = input.LA(2);
                            if ((synpred181_Delphi())) {
                                alt130 = 1;
                            }
                        }
                        break;
                        case CLASS: {
                            int LA130_6 = input.LA(2);
                            if ((synpred181_Delphi())) {
                                alt130 = 1;
                            }
                        }
                        break;
                        case DISPINTERFACE:
                        case INTERFACE: {
                            int LA130_7 = input.LA(2);
                            if ((synpred181_Delphi())) {
                                alt130 = 1;
                            }
                        }
                        break;
                        case OBJECT: {
                            int LA130_8 = input.LA(2);
                            if ((synpred181_Delphi())) {
                                alt130 = 1;
                            }
                        }
                        break;
                        case RECORD: {
                            int LA130_9 = input.LA(2);
                            if ((synpred181_Delphi())) {
                                alt130 = 1;
                            }
                        }
                        break;
                        case POINTER2: {
                            int LA130_10 = input.LA(2);
                            if ((synpred181_Delphi())) {
                                alt130 = 1;
                            }
                        }
                        break;
                        case POINTER: {
                            int LA130_11 = input.LA(2);
                            if ((synpred181_Delphi())) {
                                alt130 = 1;
                            }
                        }
                        break;
                        case STRING: {
                            int LA130_12 = input.LA(2);
                            if ((synpred181_Delphi())) {
                                alt130 = 1;
                            }
                        }
                        break;
                        case TYPE: {
                            int LA130_13 = input.LA(2);
                            if ((synpred181_Delphi())) {
                                alt130 = 1;
                            }
                        }
                        break;
                        case ANSISTRING: {
                            int LA130_14 = input.LA(2);
                            if ((synpred181_Delphi())) {
                                alt130 = 1;
                            }
                        }
                        break;
                        case FUNCTION: {
                            int LA130_15 = input.LA(2);
                            if ((synpred181_Delphi())) {
                                alt130 = 1;
                            }
                        }
                        break;
                        case PROCEDURE: {
                            int LA130_16 = input.LA(2);
                            if ((synpred181_Delphi())) {
                                alt130 = 1;
                            }
                        }
                        break;
                        case REFERENCE: {
                            int LA130_17 = input.LA(2);
                            if ((synpred181_Delphi())) {
                                alt130 = 1;
                            }
                        }
                        break;
                        case VARIANT: {
                            int LA130_18 = input.LA(2);
                            if ((synpred181_Delphi())) {
                                alt130 = 1;
                            }
                        }
                        break;
                        case TkIdentifier: {
                            int LA130_19 = input.LA(2);
                            if ((synpred181_Delphi())) {
                                alt130 = 1;
                            }
                        }
                        break;
                        case 200: {
                            int LA130_20 = input.LA(2);
                            if ((synpred181_Delphi())) {
                                alt130 = 1;
                            }
                        }
                        break;
                        case ADD:
                        case AT:
                        case BREAK:
                        case CONTAINS:
                        case CONTINUE:
                        case DEFAULT:
                        case EXIT:
                        case EXPORT:
                        case FINAL:
                        case IMPLEMENTS:
                        case INDEX:
                        case LOCAL:
                        case MESSAGE:
                        case NAME:
                        case OPERATOR:
                        case OUT:
                        case READ:
                        case READONLY:
                        case REGISTER:
                        case REMOVE:
                        case STORED:
                        case STRICT:
                        case WRITE: {
                            int LA130_21 = input.LA(2);
                            if ((synpred181_Delphi())) {
                                alt130 = 1;
                            }
                        }
                        break;
                        case LPAREN: {
                            int LA130_22 = input.LA(2);
                            if ((synpred181_Delphi())) {
                                alt130 = 1;
                            }
                        }
                        break;
                        case AT2: {
                            int LA130_23 = input.LA(2);
                            if ((synpred181_Delphi())) {
                                alt130 = 1;
                            }
                        }
                        break;
                        case 201: {
                            int LA130_24 = input.LA(2);
                            if ((synpred181_Delphi())) {
                                alt130 = 1;
                            }
                        }
                        break;
                        case NOT: {
                            int LA130_25 = input.LA(2);
                            if ((synpred181_Delphi())) {
                                alt130 = 1;
                            }
                        }
                        break;
                        case PLUS: {
                            int LA130_26 = input.LA(2);
                            if ((synpred181_Delphi())) {
                                alt130 = 1;
                            }
                        }
                        break;
                        case MINUS: {
                            int LA130_27 = input.LA(2);
                            if ((synpred181_Delphi())) {
                                alt130 = 1;
                            }
                        }
                        break;
                        case TkHexNum:
                        case TkIntNum: {
                            int LA130_28 = input.LA(2);
                            if ((synpred181_Delphi())) {
                                alt130 = 1;
                            }
                        }
                        break;
                        case TkRealNum: {
                            int LA130_29 = input.LA(2);
                            if ((synpred181_Delphi())) {
                                alt130 = 1;
                            }
                        }
                        break;
                        case TkAsmHexNum: {
                            int LA130_30 = input.LA(2);
                            if ((synpred181_Delphi())) {
                                alt130 = 1;
                            }
                        }
                        break;
                        case TRUE: {
                            int LA130_31 = input.LA(2);
                            if ((synpred181_Delphi())) {
                                alt130 = 1;
                            }
                        }
                        break;
                        case FALSE: {
                            int LA130_32 = input.LA(2);
                            if ((synpred181_Delphi())) {
                                alt130 = 1;
                            }
                        }
                        break;
                        case NIL: {
                            int LA130_33 = input.LA(2);
                            if ((synpred181_Delphi())) {
                                alt130 = 1;
                            }
                        }
                        break;
                        case ControlString: {
                            int LA130_34 = input.LA(2);
                            if ((synpred181_Delphi())) {
                                alt130 = 1;
                            }
                        }
                        break;
                        case QuotedString: {
                            int LA130_35 = input.LA(2);
                            if ((synpred181_Delphi())) {
                                alt130 = 1;
                            }
                        }
                        break;
                        case INHERITED: {
                            int LA130_36 = input.LA(2);
                            if ((synpred181_Delphi())) {
                                alt130 = 1;
                            }
                        }
                        break;
                        case DOT: {
                            int LA130_37 = input.LA(2);
                            if ((synpred181_Delphi())) {
                                alt130 = 1;
                            }
                        }
                        break;
                        case LT: {
                            int LA130_38 = input.LA(2);
                            if ((synpred181_Delphi())) {
                                alt130 = 1;
                            }
                        }
                        break;
                        case AND:
                        case AS:
                        case DIV:
                        case MOD:
                        case OR:
                        case SHL:
                        case SHR:
                        case SLASH:
                        case STAR:
                        case XOR: {
                            int LA130_39 = input.LA(2);
                            if ((synpred181_Delphi())) {
                                alt130 = 1;
                            }
                        }
                        break;
                        case EQUAL: {
                            int LA130_40 = input.LA(2);
                            if ((synpred181_Delphi())) {
                                alt130 = 1;
                            }
                        }
                        break;
                        case GE:
                        case GT:
                        case IN:
                        case IS:
                        case LE:
                        case NOT_EQUAL: {
                            int LA130_41 = input.LA(2);
                            if ((synpred181_Delphi())) {
                                alt130 = 1;
                            }
                        }
                        break;
                        case DOTDOT: {
                            int LA130_42 = input.LA(2);
                            if ((synpred181_Delphi())) {
                                alt130 = 1;
                            }
                        }
                        break;
                        case SEMI: {
                            int LA130_43 = input.LA(2);
                            if ((synpred181_Delphi())) {
                                alt130 = 1;
                            }
                        }
                        break;
                    }
                    switch (alt130) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:131: customAttribute
                        {
                            pushFollow(FOLLOW_customAttribute_in_classMethod8805);
                            customAttribute397 = customAttribute();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_customAttribute.add(customAttribute397.getTree());
                        }
                        break;

                    }

                    pushFollow(FOLLOW_typeDecl_in_classMethod8809);
                    typeDecl398 = typeDecl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_typeDecl.add(typeDecl398.getTree());
                    char_literal399 = (Token) match(input, SEMI, FOLLOW_SEMI_in_classMethod8811);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_SEMI.add(char_literal399);

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:162: ( methodDirective )*
                    loop131:
                    while (true) {
                        int alt131 = 2;
                        switch (input.LA(1)) {
                            case MESSAGE: {
                                int LA131_2 = input.LA(2);
                                if (((LA131_2 >= ADD && LA131_2 <= ANSISTRING) || LA131_2 == AS || (LA131_2 >= AT && LA131_2 <= AT2) || LA131_2 == BREAK || (LA131_2 >= CONTAINS && LA131_2 <= ControlString) || LA131_2 == DEFAULT || LA131_2 == DIV || LA131_2 == DOT || LA131_2 == EQUAL || LA131_2 == EXIT || LA131_2 == EXPORT || LA131_2 == FALSE || LA131_2 == FINAL || (LA131_2 >= FUNCTION && LA131_2 <= GE) || LA131_2 == GT || (LA131_2 >= IMPLEMENTS && LA131_2 <= INHERITED) || LA131_2 == IS || LA131_2 == LBRACK || LA131_2 == LE || (LA131_2 >= LOCAL && LA131_2 <= NAME) || LA131_2 == NIL || (LA131_2 >= NOT && LA131_2 <= OBJECT) || (LA131_2 >= OPERATOR && LA131_2 <= OUT) || (LA131_2 >= PLUS && LA131_2 <= POINTER2) || LA131_2 == PROCEDURE || LA131_2 == QuotedString || (LA131_2 >= READ && LA131_2 <= READONLY) || (LA131_2 >= REFERENCE && LA131_2 <= REGISTER) || LA131_2 == REMOVE || LA131_2 == SEMI || (LA131_2 >= SHL && LA131_2 <= STAR) || (LA131_2 >= STORED && LA131_2 <= STRING) || LA131_2 == TRUE || LA131_2 == TkAsmHexNum || (LA131_2 >= TkHexNum && LA131_2 <= TkIntNum) || LA131_2 == TkRealNum || LA131_2 == VARIANT || LA131_2 == WRITE || (LA131_2 >= XOR && LA131_2 <= 201))) {
                                    alt131 = 1;
                                }

                            }
                            break;
                            case ABSTRACT:
                            case ASSEMBLER:
                            case CDECL:
                            case DEPRECATED:
                            case DISPID:
                            case DYNAMIC:
                            case EXPERIMENTAL:
                            case FAR:
                            case INLINE:
                            case LIBRARY:
                            case NEAR:
                            case OVERLOAD:
                            case OVERRIDE:
                            case PASCAL:
                            case PLATFORM:
                            case REINTRODUCE:
                            case SAFECALL:
                            case STATIC:
                            case STDCALL:
                            case VIRTUAL: {
                                alt131 = 1;
                            }
                            break;
                            case FINAL: {
                                int LA131_4 = input.LA(2);
                                if ((LA131_4 == SEMI)) {
                                    alt131 = 1;
                                }

                            }
                            break;
                            case REGISTER: {
                                int LA131_5 = input.LA(2);
                                if ((LA131_5 == SEMI)) {
                                    alt131 = 1;
                                }

                            }
                            break;
                            case EXPORT: {
                                int LA131_6 = input.LA(2);
                                if ((LA131_6 == SEMI)) {
                                    alt131 = 1;
                                }

                            }
                            break;
                            case LOCAL: {
                                int LA131_7 = input.LA(2);
                                if ((LA131_7 == SEMI)) {
                                    alt131 = 1;
                                }

                            }
                            break;
                        }
                        switch (alt131) {
                            case 1:
                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:163: methodDirective
                            {
                                pushFollow(FOLLOW_methodDirective_in_classMethod8814);
                                methodDirective400 = methodDirective();
                                state._fsp--;
                                if (state.failed) return retval;
                                if (state.backtracking == 0) stream_methodDirective.add(methodDirective400.getTree());
                            }
                            break;

                            default:
                                break loop131;
                        }
                    }

                    // AST REWRITE
                    // elements: methodDirective, ident, FUNCTION, typeDecl, customAttribute, genericDefinition, formalParameterSection, CLASS, customAttribute
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if (state.backtracking == 0) {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                        root_0 = (Object) adaptor.nil();
                        // 355:30: -> ( customAttribute )? ( 'class' )? ^( 'function' ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( customAttribute )? ^( TkFunctionReturn typeDecl ) ( methodDirective )* )
                        {
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:33: ( customAttribute )?
                            if (stream_customAttribute.hasNext()) {
                                adaptor.addChild(root_0, stream_customAttribute.nextTree());
                            }
                            stream_customAttribute.reset();

                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:52: ( 'class' )?
                            if (stream_CLASS.hasNext()) {
                                adaptor.addChild(root_0, stream_CLASS.nextNode());
                            }
                            stream_CLASS.reset();

                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:63: ^( 'function' ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( customAttribute )? ^( TkFunctionReturn typeDecl ) ( methodDirective )* )
                            {
                                Object root_1 = (Object) adaptor.nil();
                                root_1 = (Object) adaptor.becomeRoot(stream_FUNCTION.nextNode(), root_1);
                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:76: ^( TkFunctionName ident )
                                {
                                    Object root_2 = (Object) adaptor.nil();
                                    root_2 = (Object) adaptor.becomeRoot((Object) adaptor.create(TkFunctionName, "TkFunctionName"), root_2);
                                    adaptor.addChild(root_2, stream_ident.nextTree());
                                    adaptor.addChild(root_1, root_2);
                                }

                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:100: ( genericDefinition )?
                                if (stream_genericDefinition.hasNext()) {
                                    adaptor.addChild(root_1, stream_genericDefinition.nextTree());
                                }
                                stream_genericDefinition.reset();

                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:121: ^( TkFunctionArgs ( formalParameterSection )? )
                                {
                                    Object root_2 = (Object) adaptor.nil();
                                    root_2 = (Object) adaptor.becomeRoot((Object) adaptor.create(TkFunctionArgs, "TkFunctionArgs"), root_2);
                                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:138: ( formalParameterSection )?
                                    if (stream_formalParameterSection.hasNext()) {
                                        adaptor.addChild(root_2, stream_formalParameterSection.nextTree());
                                    }
                                    stream_formalParameterSection.reset();

                                    adaptor.addChild(root_1, root_2);
                                }

                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:165: ( customAttribute )?
                                if (stream_customAttribute.hasNext()) {
                                    adaptor.addChild(root_1, stream_customAttribute.nextTree());
                                }
                                stream_customAttribute.reset();

                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:184: ^( TkFunctionReturn typeDecl )
                                {
                                    Object root_2 = (Object) adaptor.nil();
                                    root_2 = (Object) adaptor.becomeRoot((Object) adaptor.create(TkFunctionReturn, "TkFunctionReturn"), root_2);
                                    adaptor.addChild(root_2, stream_typeDecl.nextTree());
                                    adaptor.addChild(root_1, root_2);
                                }

                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:213: ( methodDirective )*
                                while (stream_methodDirective.hasNext()) {
                                    adaptor.addChild(root_1, stream_methodDirective.nextTree());
                                }
                                stream_methodDirective.reset();

                                adaptor.addChild(root_0, root_1);
                            }

                        }


                        retval.tree = root_0;
                    }

                }
                break;
                case 3:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:32: ( customAttribute )? ( 'class' )? 'operator' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';'
                {
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:32: ( customAttribute )?
                    int alt132 = 2;
                    switch (input.LA(1)) {
                        case LBRACK: {
                            alt132 = 1;
                        }
                        break;
                        case CLASS: {
                            int LA132_2 = input.LA(2);
                            if ((synpred184_Delphi())) {
                                alt132 = 1;
                            }
                        }
                        break;
                        case OPERATOR: {
                            int LA132_3 = input.LA(2);
                            if ((synpred184_Delphi())) {
                                alt132 = 1;
                            }
                        }
                        break;
                    }
                    switch (alt132) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:33: customAttribute
                        {
                            pushFollow(FOLLOW_customAttribute_in_classMethod8931);
                            customAttribute401 = customAttribute();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_customAttribute.add(customAttribute401.getTree());
                        }
                        break;

                    }

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:51: ( 'class' )?
                    int alt133 = 2;
                    int LA133_0 = input.LA(1);
                    if ((LA133_0 == CLASS)) {
                        alt133 = 1;
                    }
                    switch (alt133) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:52: 'class'
                        {
                            string_literal402 = (Token) match(input, CLASS, FOLLOW_CLASS_in_classMethod8936);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_CLASS.add(string_literal402);

                        }
                        break;

                    }

                    string_literal403 = (Token) match(input, OPERATOR, FOLLOW_OPERATOR_in_classMethod8940);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_OPERATOR.add(string_literal403);

                    pushFollow(FOLLOW_ident_in_classMethod8942);
                    ident404 = ident();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_ident.add(ident404.getTree());
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:79: ( genericDefinition )?
                    int alt134 = 2;
                    int LA134_0 = input.LA(1);
                    if ((LA134_0 == LT)) {
                        alt134 = 1;
                    }
                    switch (alt134) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:80: genericDefinition
                        {
                            pushFollow(FOLLOW_genericDefinition_in_classMethod8945);
                            genericDefinition405 = genericDefinition();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_genericDefinition.add(genericDefinition405.getTree());
                        }
                        break;

                    }

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:100: ( formalParameterSection )?
                    int alt135 = 2;
                    int LA135_0 = input.LA(1);
                    if ((LA135_0 == LPAREN)) {
                        alt135 = 1;
                    }
                    switch (alt135) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:101: formalParameterSection
                        {
                            pushFollow(FOLLOW_formalParameterSection_in_classMethod8950);
                            formalParameterSection406 = formalParameterSection();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0)
                                stream_formalParameterSection.add(formalParameterSection406.getTree());
                        }
                        break;

                    }

                    char_literal407 = (Token) match(input, COLON, FOLLOW_COLON_in_classMethod8954);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_COLON.add(char_literal407);

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:130: ( customAttribute )?
                    int alt136 = 2;
                    switch (input.LA(1)) {
                        case LBRACK: {
                            int LA136_1 = input.LA(2);
                            if ((synpred188_Delphi())) {
                                alt136 = 1;
                            }
                        }
                        break;
                        case PACKED: {
                            int LA136_2 = input.LA(2);
                            if ((synpred188_Delphi())) {
                                alt136 = 1;
                            }
                        }
                        break;
                        case ARRAY: {
                            int LA136_3 = input.LA(2);
                            if ((synpred188_Delphi())) {
                                alt136 = 1;
                            }
                        }
                        break;
                        case SET: {
                            int LA136_4 = input.LA(2);
                            if ((synpred188_Delphi())) {
                                alt136 = 1;
                            }
                        }
                        break;
                        case FILE: {
                            int LA136_5 = input.LA(2);
                            if ((synpred188_Delphi())) {
                                alt136 = 1;
                            }
                        }
                        break;
                        case CLASS: {
                            int LA136_6 = input.LA(2);
                            if ((synpred188_Delphi())) {
                                alt136 = 1;
                            }
                        }
                        break;
                        case DISPINTERFACE:
                        case INTERFACE: {
                            int LA136_7 = input.LA(2);
                            if ((synpred188_Delphi())) {
                                alt136 = 1;
                            }
                        }
                        break;
                        case OBJECT: {
                            int LA136_8 = input.LA(2);
                            if ((synpred188_Delphi())) {
                                alt136 = 1;
                            }
                        }
                        break;
                        case RECORD: {
                            int LA136_9 = input.LA(2);
                            if ((synpred188_Delphi())) {
                                alt136 = 1;
                            }
                        }
                        break;
                        case POINTER2: {
                            int LA136_10 = input.LA(2);
                            if ((synpred188_Delphi())) {
                                alt136 = 1;
                            }
                        }
                        break;
                        case POINTER: {
                            int LA136_11 = input.LA(2);
                            if ((synpred188_Delphi())) {
                                alt136 = 1;
                            }
                        }
                        break;
                        case STRING: {
                            int LA136_12 = input.LA(2);
                            if ((synpred188_Delphi())) {
                                alt136 = 1;
                            }
                        }
                        break;
                        case TYPE: {
                            int LA136_13 = input.LA(2);
                            if ((synpred188_Delphi())) {
                                alt136 = 1;
                            }
                        }
                        break;
                        case ANSISTRING: {
                            int LA136_14 = input.LA(2);
                            if ((synpred188_Delphi())) {
                                alt136 = 1;
                            }
                        }
                        break;
                        case FUNCTION: {
                            int LA136_15 = input.LA(2);
                            if ((synpred188_Delphi())) {
                                alt136 = 1;
                            }
                        }
                        break;
                        case PROCEDURE: {
                            int LA136_16 = input.LA(2);
                            if ((synpred188_Delphi())) {
                                alt136 = 1;
                            }
                        }
                        break;
                        case REFERENCE: {
                            int LA136_17 = input.LA(2);
                            if ((synpred188_Delphi())) {
                                alt136 = 1;
                            }
                        }
                        break;
                        case VARIANT: {
                            int LA136_18 = input.LA(2);
                            if ((synpred188_Delphi())) {
                                alt136 = 1;
                            }
                        }
                        break;
                        case TkIdentifier: {
                            int LA136_19 = input.LA(2);
                            if ((synpred188_Delphi())) {
                                alt136 = 1;
                            }
                        }
                        break;
                        case 200: {
                            int LA136_20 = input.LA(2);
                            if ((synpred188_Delphi())) {
                                alt136 = 1;
                            }
                        }
                        break;
                        case ADD:
                        case AT:
                        case BREAK:
                        case CONTAINS:
                        case CONTINUE:
                        case DEFAULT:
                        case EXIT:
                        case EXPORT:
                        case FINAL:
                        case IMPLEMENTS:
                        case INDEX:
                        case LOCAL:
                        case MESSAGE:
                        case NAME:
                        case OPERATOR:
                        case OUT:
                        case READ:
                        case READONLY:
                        case REGISTER:
                        case REMOVE:
                        case STORED:
                        case STRICT:
                        case WRITE: {
                            int LA136_21 = input.LA(2);
                            if ((synpred188_Delphi())) {
                                alt136 = 1;
                            }
                        }
                        break;
                        case LPAREN: {
                            int LA136_22 = input.LA(2);
                            if ((synpred188_Delphi())) {
                                alt136 = 1;
                            }
                        }
                        break;
                        case AT2: {
                            int LA136_23 = input.LA(2);
                            if ((synpred188_Delphi())) {
                                alt136 = 1;
                            }
                        }
                        break;
                        case 201: {
                            int LA136_24 = input.LA(2);
                            if ((synpred188_Delphi())) {
                                alt136 = 1;
                            }
                        }
                        break;
                        case NOT: {
                            int LA136_25 = input.LA(2);
                            if ((synpred188_Delphi())) {
                                alt136 = 1;
                            }
                        }
                        break;
                        case PLUS: {
                            int LA136_26 = input.LA(2);
                            if ((synpred188_Delphi())) {
                                alt136 = 1;
                            }
                        }
                        break;
                        case MINUS: {
                            int LA136_27 = input.LA(2);
                            if ((synpred188_Delphi())) {
                                alt136 = 1;
                            }
                        }
                        break;
                        case TkHexNum:
                        case TkIntNum: {
                            int LA136_28 = input.LA(2);
                            if ((synpred188_Delphi())) {
                                alt136 = 1;
                            }
                        }
                        break;
                        case TkRealNum: {
                            int LA136_29 = input.LA(2);
                            if ((synpred188_Delphi())) {
                                alt136 = 1;
                            }
                        }
                        break;
                        case TkAsmHexNum: {
                            int LA136_30 = input.LA(2);
                            if ((synpred188_Delphi())) {
                                alt136 = 1;
                            }
                        }
                        break;
                        case TRUE: {
                            int LA136_31 = input.LA(2);
                            if ((synpred188_Delphi())) {
                                alt136 = 1;
                            }
                        }
                        break;
                        case FALSE: {
                            int LA136_32 = input.LA(2);
                            if ((synpred188_Delphi())) {
                                alt136 = 1;
                            }
                        }
                        break;
                        case NIL: {
                            int LA136_33 = input.LA(2);
                            if ((synpred188_Delphi())) {
                                alt136 = 1;
                            }
                        }
                        break;
                        case ControlString: {
                            int LA136_34 = input.LA(2);
                            if ((synpred188_Delphi())) {
                                alt136 = 1;
                            }
                        }
                        break;
                        case QuotedString: {
                            int LA136_35 = input.LA(2);
                            if ((synpred188_Delphi())) {
                                alt136 = 1;
                            }
                        }
                        break;
                        case INHERITED: {
                            int LA136_36 = input.LA(2);
                            if ((synpred188_Delphi())) {
                                alt136 = 1;
                            }
                        }
                        break;
                        case DOT: {
                            int LA136_37 = input.LA(2);
                            if ((synpred188_Delphi())) {
                                alt136 = 1;
                            }
                        }
                        break;
                        case LT: {
                            int LA136_38 = input.LA(2);
                            if ((synpred188_Delphi())) {
                                alt136 = 1;
                            }
                        }
                        break;
                        case AND:
                        case AS:
                        case DIV:
                        case MOD:
                        case OR:
                        case SHL:
                        case SHR:
                        case SLASH:
                        case STAR:
                        case XOR: {
                            int LA136_39 = input.LA(2);
                            if ((synpred188_Delphi())) {
                                alt136 = 1;
                            }
                        }
                        break;
                        case EQUAL: {
                            int LA136_40 = input.LA(2);
                            if ((synpred188_Delphi())) {
                                alt136 = 1;
                            }
                        }
                        break;
                        case GE:
                        case GT:
                        case IN:
                        case IS:
                        case LE:
                        case NOT_EQUAL: {
                            int LA136_41 = input.LA(2);
                            if ((synpred188_Delphi())) {
                                alt136 = 1;
                            }
                        }
                        break;
                        case DOTDOT: {
                            int LA136_42 = input.LA(2);
                            if ((synpred188_Delphi())) {
                                alt136 = 1;
                            }
                        }
                        break;
                        case SEMI: {
                            int LA136_43 = input.LA(2);
                            if ((synpred188_Delphi())) {
                                alt136 = 1;
                            }
                        }
                        break;
                    }
                    switch (alt136) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:131: customAttribute
                        {
                            pushFollow(FOLLOW_customAttribute_in_classMethod8957);
                            customAttribute408 = customAttribute();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_customAttribute.add(customAttribute408.getTree());
                        }
                        break;

                    }

                    pushFollow(FOLLOW_typeDecl_in_classMethod8961);
                    typeDecl409 = typeDecl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_typeDecl.add(typeDecl409.getTree());
                    char_literal410 = (Token) match(input, SEMI, FOLLOW_SEMI_in_classMethod8963);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_SEMI.add(char_literal410);

                    // AST REWRITE
                    // elements: OPERATOR, ident, typeDecl, formalParameterSection, customAttribute, CLASS, customAttribute, genericDefinition
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if (state.backtracking == 0) {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                        root_0 = (Object) adaptor.nil();
                        // 357:30: -> ( customAttribute )? ( 'class' )? ^( 'operator' ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( customAttribute )? typeDecl )
                        {
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:33: ( customAttribute )?
                            if (stream_customAttribute.hasNext()) {
                                adaptor.addChild(root_0, stream_customAttribute.nextTree());
                            }
                            stream_customAttribute.reset();

                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:52: ( 'class' )?
                            if (stream_CLASS.hasNext()) {
                                adaptor.addChild(root_0, stream_CLASS.nextNode());
                            }
                            stream_CLASS.reset();

                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:63: ^( 'operator' ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( customAttribute )? typeDecl )
                            {
                                Object root_1 = (Object) adaptor.nil();
                                root_1 = (Object) adaptor.becomeRoot(stream_OPERATOR.nextNode(), root_1);
                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:76: ^( TkFunctionName ident )
                                {
                                    Object root_2 = (Object) adaptor.nil();
                                    root_2 = (Object) adaptor.becomeRoot((Object) adaptor.create(TkFunctionName, "TkFunctionName"), root_2);
                                    adaptor.addChild(root_2, stream_ident.nextTree());
                                    adaptor.addChild(root_1, root_2);
                                }

                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:100: ( genericDefinition )?
                                if (stream_genericDefinition.hasNext()) {
                                    adaptor.addChild(root_1, stream_genericDefinition.nextTree());
                                }
                                stream_genericDefinition.reset();

                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:121: ^( TkFunctionArgs ( formalParameterSection )? )
                                {
                                    Object root_2 = (Object) adaptor.nil();
                                    root_2 = (Object) adaptor.becomeRoot((Object) adaptor.create(TkFunctionArgs, "TkFunctionArgs"), root_2);
                                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:138: ( formalParameterSection )?
                                    if (stream_formalParameterSection.hasNext()) {
                                        adaptor.addChild(root_2, stream_formalParameterSection.nextTree());
                                    }
                                    stream_formalParameterSection.reset();

                                    adaptor.addChild(root_1, root_2);
                                }

                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:165: ( customAttribute )?
                                if (stream_customAttribute.hasNext()) {
                                    adaptor.addChild(root_1, stream_customAttribute.nextTree());
                                }
                                stream_customAttribute.reset();

                                adaptor.addChild(root_1, stream_typeDecl.nextTree());
                                adaptor.addChild(root_0, root_1);
                            }

                        }


                        retval.tree = root_0;
                    }

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 91, classMethod_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "classField"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:1: classField : ( customAttribute )? identList ':' typeDecl ';' ( hintingDirective )* -> ( customAttribute )? ^( TkClassField ^( TkVariableIdents identList ) ^( TkVariableType typeDecl ) ) ;
    public final DelphiParser.classField_return classField() throws RecognitionException {
        DelphiParser.classField_return retval = new DelphiParser.classField_return();
        retval.start = input.LT(1);
        int classField_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal413 = null;
        Token char_literal415 = null;
        ParserRuleReturnScope customAttribute411 = null;
        ParserRuleReturnScope identList412 = null;
        ParserRuleReturnScope typeDecl414 = null;
        ParserRuleReturnScope hintingDirective416 = null;

        Object char_literal413_tree = null;
        Object char_literal415_tree = null;
        RewriteRuleTokenStream stream_SEMI = new RewriteRuleTokenStream(adaptor, "token SEMI");
        RewriteRuleTokenStream stream_COLON = new RewriteRuleTokenStream(adaptor, "token COLON");
        RewriteRuleSubtreeStream stream_customAttribute = new RewriteRuleSubtreeStream(adaptor, "rule customAttribute");
        RewriteRuleSubtreeStream stream_identList = new RewriteRuleSubtreeStream(adaptor, "rule identList");
        RewriteRuleSubtreeStream stream_hintingDirective = new RewriteRuleSubtreeStream(adaptor, "rule hintingDirective");
        RewriteRuleSubtreeStream stream_typeDecl = new RewriteRuleSubtreeStream(adaptor, "rule typeDecl");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 92)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:30: ( ( customAttribute )? identList ':' typeDecl ';' ( hintingDirective )* -> ( customAttribute )? ^( TkClassField ^( TkVariableIdents identList ) ^( TkVariableType typeDecl ) ) )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:32: ( customAttribute )? identList ':' typeDecl ';' ( hintingDirective )*
            {
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:32: ( customAttribute )?
                int alt138 = 2;
                switch (input.LA(1)) {
                    case LBRACK: {
                        alt138 = 1;
                    }
                    break;
                    case TkIdentifier: {
                        int LA138_2 = input.LA(2);
                        if ((synpred189_Delphi())) {
                            alt138 = 1;
                        }
                    }
                    break;
                    case 200: {
                        int LA138_3 = input.LA(2);
                        if ((synpred189_Delphi())) {
                            alt138 = 1;
                        }
                    }
                    break;
                    case ADD:
                    case ANSISTRING:
                    case AT:
                    case BREAK:
                    case CONTAINS:
                    case CONTINUE:
                    case DEFAULT:
                    case EXIT:
                    case EXPORT:
                    case FINAL:
                    case IMPLEMENTS:
                    case INDEX:
                    case LOCAL:
                    case MESSAGE:
                    case NAME:
                    case OBJECT:
                    case OPERATOR:
                    case OUT:
                    case POINTER:
                    case READ:
                    case READONLY:
                    case REFERENCE:
                    case REGISTER:
                    case REMOVE:
                    case STORED:
                    case STRICT:
                    case STRING:
                    case VARIANT:
                    case WRITE: {
                        int LA138_4 = input.LA(2);
                        if ((synpred189_Delphi())) {
                            alt138 = 1;
                        }
                    }
                    break;
                }
                switch (alt138) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:33: customAttribute
                    {
                        pushFollow(FOLLOW_customAttribute_in_classField9121);
                        customAttribute411 = customAttribute();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_customAttribute.add(customAttribute411.getTree());
                    }
                    break;

                }

                pushFollow(FOLLOW_identList_in_classField9125);
                identList412 = identList();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_identList.add(identList412.getTree());
                char_literal413 = (Token) match(input, COLON, FOLLOW_COLON_in_classField9127);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_COLON.add(char_literal413);

                pushFollow(FOLLOW_typeDecl_in_classField9129);
                typeDecl414 = typeDecl();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_typeDecl.add(typeDecl414.getTree());
                char_literal415 = (Token) match(input, SEMI, FOLLOW_SEMI_in_classField9131);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_SEMI.add(char_literal415);

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:78: ( hintingDirective )*
                loop139:
                while (true) {
                    int alt139 = 2;
                    int LA139_0 = input.LA(1);
                    if ((LA139_0 == DEPRECATED || LA139_0 == EXPERIMENTAL || LA139_0 == LIBRARY || LA139_0 == PLATFORM)) {
                        alt139 = 1;
                    }

                    switch (alt139) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:79: hintingDirective
                        {
                            pushFollow(FOLLOW_hintingDirective_in_classField9134);
                            hintingDirective416 = hintingDirective();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_hintingDirective.add(hintingDirective416.getTree());
                        }
                        break;

                        default:
                            break loop139;
                    }
                }

                // AST REWRITE
                // elements: identList, typeDecl, customAttribute
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 360:30: -> ( customAttribute )? ^( TkClassField ^( TkVariableIdents identList ) ^( TkVariableType typeDecl ) )
                    {
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:360:33: ( customAttribute )?
                        if (stream_customAttribute.hasNext()) {
                            adaptor.addChild(root_0, stream_customAttribute.nextTree());
                        }
                        stream_customAttribute.reset();

                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:360:52: ^( TkClassField ^( TkVariableIdents identList ) ^( TkVariableType typeDecl ) )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(TkClassField, "TkClassField"), root_1);
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:360:67: ^( TkVariableIdents identList )
                            {
                                Object root_2 = (Object) adaptor.nil();
                                root_2 = (Object) adaptor.becomeRoot((Object) adaptor.create(TkVariableIdents, "TkVariableIdents"), root_2);
                                adaptor.addChild(root_2, stream_identList.nextTree());
                                adaptor.addChild(root_1, root_2);
                            }

                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:360:97: ^( TkVariableType typeDecl )
                            {
                                Object root_2 = (Object) adaptor.nil();
                                root_2 = (Object) adaptor.becomeRoot((Object) adaptor.create(TkVariableType, "TkVariableType"), root_2);
                                adaptor.addChild(root_2, stream_typeDecl.nextTree());
                                adaptor.addChild(root_1, root_2);
                            }

                            adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 92, classField_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "classProperty"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:362:1: classProperty : ( customAttribute )? ( 'class' )? 'property' ident ( classPropertyArray )? ( ':' genericTypeIdent )? ( classPropertyIndex )? ( classPropertySpecifier )* ';' ( classPropertyEndSpecifier )* -> ^( 'property' ^( TkVariableIdents ident ) ^( TkVariableType ( genericTypeIdent )? ) ( classPropertySpecifier )* ) ;
    public final DelphiParser.classProperty_return classProperty() throws RecognitionException {
        DelphiParser.classProperty_return retval = new DelphiParser.classProperty_return();
        retval.start = input.LT(1);
        int classProperty_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal418 = null;
        Token string_literal419 = null;
        Token char_literal422 = null;
        Token char_literal426 = null;
        ParserRuleReturnScope customAttribute417 = null;
        ParserRuleReturnScope ident420 = null;
        ParserRuleReturnScope classPropertyArray421 = null;
        ParserRuleReturnScope genericTypeIdent423 = null;
        ParserRuleReturnScope classPropertyIndex424 = null;
        ParserRuleReturnScope classPropertySpecifier425 = null;
        ParserRuleReturnScope classPropertyEndSpecifier427 = null;

        Object string_literal418_tree = null;
        Object string_literal419_tree = null;
        Object char_literal422_tree = null;
        Object char_literal426_tree = null;
        RewriteRuleTokenStream stream_PROPERTY = new RewriteRuleTokenStream(adaptor, "token PROPERTY");
        RewriteRuleTokenStream stream_SEMI = new RewriteRuleTokenStream(adaptor, "token SEMI");
        RewriteRuleTokenStream stream_COLON = new RewriteRuleTokenStream(adaptor, "token COLON");
        RewriteRuleTokenStream stream_CLASS = new RewriteRuleTokenStream(adaptor, "token CLASS");
        RewriteRuleSubtreeStream stream_customAttribute = new RewriteRuleSubtreeStream(adaptor, "rule customAttribute");
        RewriteRuleSubtreeStream stream_classPropertyEndSpecifier = new RewriteRuleSubtreeStream(adaptor, "rule classPropertyEndSpecifier");
        RewriteRuleSubtreeStream stream_ident = new RewriteRuleSubtreeStream(adaptor, "rule ident");
        RewriteRuleSubtreeStream stream_genericTypeIdent = new RewriteRuleSubtreeStream(adaptor, "rule genericTypeIdent");
        RewriteRuleSubtreeStream stream_classPropertyIndex = new RewriteRuleSubtreeStream(adaptor, "rule classPropertyIndex");
        RewriteRuleSubtreeStream stream_classPropertyArray = new RewriteRuleSubtreeStream(adaptor, "rule classPropertyArray");
        RewriteRuleSubtreeStream stream_classPropertySpecifier = new RewriteRuleSubtreeStream(adaptor, "rule classPropertySpecifier");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 93)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:362:30: ( ( customAttribute )? ( 'class' )? 'property' ident ( classPropertyArray )? ( ':' genericTypeIdent )? ( classPropertyIndex )? ( classPropertySpecifier )* ';' ( classPropertyEndSpecifier )* -> ^( 'property' ^( TkVariableIdents ident ) ^( TkVariableType ( genericTypeIdent )? ) ( classPropertySpecifier )* ) )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:362:32: ( customAttribute )? ( 'class' )? 'property' ident ( classPropertyArray )? ( ':' genericTypeIdent )? ( classPropertyIndex )? ( classPropertySpecifier )* ';' ( classPropertyEndSpecifier )*
            {
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:362:32: ( customAttribute )?
                int alt140 = 2;
                switch (input.LA(1)) {
                    case LBRACK: {
                        alt140 = 1;
                    }
                    break;
                    case CLASS: {
                        int LA140_2 = input.LA(2);
                        if ((synpred191_Delphi())) {
                            alt140 = 1;
                        }
                    }
                    break;
                    case PROPERTY: {
                        int LA140_3 = input.LA(2);
                        if ((synpred191_Delphi())) {
                            alt140 = 1;
                        }
                    }
                    break;
                }
                switch (alt140) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:362:33: customAttribute
                    {
                        pushFollow(FOLLOW_customAttribute_in_classProperty9242);
                        customAttribute417 = customAttribute();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_customAttribute.add(customAttribute417.getTree());
                    }
                    break;

                }

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:362:51: ( 'class' )?
                int alt141 = 2;
                int LA141_0 = input.LA(1);
                if ((LA141_0 == CLASS)) {
                    alt141 = 1;
                }
                switch (alt141) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:362:52: 'class'
                    {
                        string_literal418 = (Token) match(input, CLASS, FOLLOW_CLASS_in_classProperty9247);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_CLASS.add(string_literal418);

                    }
                    break;

                }

                string_literal419 = (Token) match(input, PROPERTY, FOLLOW_PROPERTY_in_classProperty9251);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_PROPERTY.add(string_literal419);

                pushFollow(FOLLOW_ident_in_classProperty9253);
                ident420 = ident();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_ident.add(ident420.getTree());
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:362:79: ( classPropertyArray )?
                int alt142 = 2;
                int LA142_0 = input.LA(1);
                if ((LA142_0 == LBRACK)) {
                    alt142 = 1;
                }
                switch (alt142) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:362:80: classPropertyArray
                    {
                        pushFollow(FOLLOW_classPropertyArray_in_classProperty9256);
                        classPropertyArray421 = classPropertyArray();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_classPropertyArray.add(classPropertyArray421.getTree());
                    }
                    break;

                }

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:362:101: ( ':' genericTypeIdent )?
                int alt143 = 2;
                int LA143_0 = input.LA(1);
                if ((LA143_0 == COLON)) {
                    alt143 = 1;
                }
                switch (alt143) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:362:102: ':' genericTypeIdent
                    {
                        char_literal422 = (Token) match(input, COLON, FOLLOW_COLON_in_classProperty9261);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_COLON.add(char_literal422);

                        pushFollow(FOLLOW_genericTypeIdent_in_classProperty9263);
                        genericTypeIdent423 = genericTypeIdent();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_genericTypeIdent.add(genericTypeIdent423.getTree());
                    }
                    break;

                }

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:362:125: ( classPropertyIndex )?
                int alt144 = 2;
                int LA144_0 = input.LA(1);
                if ((LA144_0 == INDEX)) {
                    alt144 = 1;
                }
                switch (alt144) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:362:126: classPropertyIndex
                    {
                        pushFollow(FOLLOW_classPropertyIndex_in_classProperty9268);
                        classPropertyIndex424 = classPropertyIndex();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_classPropertyIndex.add(classPropertyIndex424.getTree());
                    }
                    break;

                }

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:362:147: ( classPropertySpecifier )*
                loop145:
                while (true) {
                    int alt145 = 2;
                    int LA145_0 = input.LA(1);
                    if ((LA145_0 == DEFAULT || LA145_0 == DISPID || LA145_0 == IMPLEMENTS || LA145_0 == NODEFAULT || (LA145_0 >= READ && LA145_0 <= READONLY) || LA145_0 == STORED || (LA145_0 >= WRITE && LA145_0 <= WRITEONLY))) {
                        alt145 = 1;
                    }

                    switch (alt145) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:362:148: classPropertySpecifier
                        {
                            pushFollow(FOLLOW_classPropertySpecifier_in_classProperty9273);
                            classPropertySpecifier425 = classPropertySpecifier();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0)
                                stream_classPropertySpecifier.add(classPropertySpecifier425.getTree());
                        }
                        break;

                        default:
                            break loop145;
                    }
                }

                char_literal426 = (Token) match(input, SEMI, FOLLOW_SEMI_in_classProperty9277);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_SEMI.add(char_literal426);

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:362:177: ( classPropertyEndSpecifier )*
                loop146:
                while (true) {
                    int alt146 = 2;
                    switch (input.LA(1)) {
                        case STORED: {
                            int LA146_2 = input.LA(2);
                            if (((LA146_2 >= ADD && LA146_2 <= ANSISTRING) || LA146_2 == AS || (LA146_2 >= AT && LA146_2 <= AT2) || LA146_2 == BREAK || (LA146_2 >= CONTAINS && LA146_2 <= ControlString) || LA146_2 == DEFAULT || LA146_2 == DIV || LA146_2 == DOT || LA146_2 == EQUAL || LA146_2 == EXIT || LA146_2 == EXPORT || LA146_2 == FALSE || LA146_2 == FINAL || (LA146_2 >= FUNCTION && LA146_2 <= GE) || LA146_2 == GT || (LA146_2 >= IMPLEMENTS && LA146_2 <= INHERITED) || LA146_2 == IS || LA146_2 == LBRACK || LA146_2 == LE || (LA146_2 >= LOCAL && LA146_2 <= NAME) || LA146_2 == NIL || (LA146_2 >= NOT && LA146_2 <= OBJECT) || (LA146_2 >= OPERATOR && LA146_2 <= OUT) || (LA146_2 >= PLUS && LA146_2 <= POINTER2) || LA146_2 == PROCEDURE || LA146_2 == QuotedString || (LA146_2 >= READ && LA146_2 <= READONLY) || (LA146_2 >= REFERENCE && LA146_2 <= REGISTER) || LA146_2 == REMOVE || LA146_2 == SEMI || (LA146_2 >= SHL && LA146_2 <= STAR) || (LA146_2 >= STORED && LA146_2 <= STRING) || LA146_2 == TRUE || LA146_2 == TkAsmHexNum || (LA146_2 >= TkHexNum && LA146_2 <= TkIntNum) || LA146_2 == TkRealNum || LA146_2 == VARIANT || LA146_2 == WRITE || (LA146_2 >= XOR && LA146_2 <= 201))) {
                                alt146 = 1;
                            }

                        }
                        break;
                        case DEFAULT: {
                            int LA146_3 = input.LA(2);
                            if (((LA146_3 >= ADD && LA146_3 <= ANSISTRING) || LA146_3 == AS || (LA146_3 >= AT && LA146_3 <= AT2) || LA146_3 == BREAK || (LA146_3 >= CONTAINS && LA146_3 <= ControlString) || LA146_3 == DEFAULT || LA146_3 == DIV || LA146_3 == DOT || LA146_3 == EQUAL || LA146_3 == EXIT || LA146_3 == EXPORT || LA146_3 == FALSE || LA146_3 == FINAL || (LA146_3 >= FUNCTION && LA146_3 <= GE) || LA146_3 == GT || (LA146_3 >= IMPLEMENTS && LA146_3 <= INHERITED) || LA146_3 == IS || LA146_3 == LBRACK || LA146_3 == LE || (LA146_3 >= LOCAL && LA146_3 <= NAME) || LA146_3 == NIL || (LA146_3 >= NOT && LA146_3 <= OBJECT) || (LA146_3 >= OPERATOR && LA146_3 <= OUT) || (LA146_3 >= PLUS && LA146_3 <= POINTER2) || LA146_3 == PROCEDURE || LA146_3 == QuotedString || (LA146_3 >= READ && LA146_3 <= READONLY) || (LA146_3 >= REFERENCE && LA146_3 <= REGISTER) || LA146_3 == REMOVE || LA146_3 == SEMI || (LA146_3 >= SHL && LA146_3 <= STAR) || (LA146_3 >= STORED && LA146_3 <= STRING) || LA146_3 == TRUE || LA146_3 == TkAsmHexNum || (LA146_3 >= TkHexNum && LA146_3 <= TkIntNum) || LA146_3 == TkRealNum || LA146_3 == VARIANT || LA146_3 == WRITE || (LA146_3 >= XOR && LA146_3 <= 201))) {
                                alt146 = 1;
                            }

                        }
                        break;
                        case NODEFAULT: {
                            alt146 = 1;
                        }
                        break;
                    }
                    switch (alt146) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:362:178: classPropertyEndSpecifier
                        {
                            pushFollow(FOLLOW_classPropertyEndSpecifier_in_classProperty9280);
                            classPropertyEndSpecifier427 = classPropertyEndSpecifier();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0)
                                stream_classPropertyEndSpecifier.add(classPropertyEndSpecifier427.getTree());
                        }
                        break;

                        default:
                            break loop146;
                    }
                }

                // AST REWRITE
                // elements: ident, classPropertySpecifier, genericTypeIdent, PROPERTY
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 363:31: -> ^( 'property' ^( TkVariableIdents ident ) ^( TkVariableType ( genericTypeIdent )? ) ( classPropertySpecifier )* )
                    {
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:34: ^( 'property' ^( TkVariableIdents ident ) ^( TkVariableType ( genericTypeIdent )? ) ( classPropertySpecifier )* )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot(stream_PROPERTY.nextNode(), root_1);
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:47: ^( TkVariableIdents ident )
                            {
                                Object root_2 = (Object) adaptor.nil();
                                root_2 = (Object) adaptor.becomeRoot((Object) adaptor.create(TkVariableIdents, "TkVariableIdents"), root_2);
                                adaptor.addChild(root_2, stream_ident.nextTree());
                                adaptor.addChild(root_1, root_2);
                            }

                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:73: ^( TkVariableType ( genericTypeIdent )? )
                            {
                                Object root_2 = (Object) adaptor.nil();
                                root_2 = (Object) adaptor.becomeRoot((Object) adaptor.create(TkVariableType, "TkVariableType"), root_2);
                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:90: ( genericTypeIdent )?
                                if (stream_genericTypeIdent.hasNext()) {
                                    adaptor.addChild(root_2, stream_genericTypeIdent.nextTree());
                                }
                                stream_genericTypeIdent.reset();

                                adaptor.addChild(root_1, root_2);
                            }

                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:109: ( classPropertySpecifier )*
                            while (stream_classPropertySpecifier.hasNext()) {
                                adaptor.addChild(root_1, stream_classPropertySpecifier.nextTree());
                            }
                            stream_classPropertySpecifier.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 93, classProperty_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "classPropertyArray"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:367:1: classPropertyArray : '[' formalParameterList ']' ;
    public final DelphiParser.classPropertyArray_return classPropertyArray() throws RecognitionException {
        DelphiParser.classPropertyArray_return retval = new DelphiParser.classPropertyArray_return();
        retval.start = input.LT(1);
        int classPropertyArray_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal428 = null;
        Token char_literal430 = null;
        ParserRuleReturnScope formalParameterList429 = null;

        Object char_literal428_tree = null;
        Object char_literal430_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 94)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:367:30: ( '[' formalParameterList ']' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:367:32: '[' formalParameterList ']'
            {
                root_0 = (Object) adaptor.nil();


                char_literal428 = (Token) match(input, LBRACK, FOLLOW_LBRACK_in_classPropertyArray9446);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    char_literal428_tree = (Object) adaptor.create(char_literal428);
                    adaptor.addChild(root_0, char_literal428_tree);
                }

                pushFollow(FOLLOW_formalParameterList_in_classPropertyArray9448);
                formalParameterList429 = formalParameterList();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, formalParameterList429.getTree());

                char_literal430 = (Token) match(input, RBRACK, FOLLOW_RBRACK_in_classPropertyArray9450);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    char_literal430_tree = (Object) adaptor.create(char_literal430);
                    adaptor.addChild(root_0, char_literal430_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 94, classPropertyArray_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "classPropertyIndex"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:369:1: classPropertyIndex : 'index' expression ( ';' )? ;
    public final DelphiParser.classPropertyIndex_return classPropertyIndex() throws RecognitionException {
        DelphiParser.classPropertyIndex_return retval = new DelphiParser.classPropertyIndex_return();
        retval.start = input.LT(1);
        int classPropertyIndex_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal431 = null;
        Token char_literal433 = null;
        ParserRuleReturnScope expression432 = null;

        Object string_literal431_tree = null;
        Object char_literal433_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 95)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:369:30: ( 'index' expression ( ';' )? )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:369:32: 'index' expression ( ';' )?
            {
                root_0 = (Object) adaptor.nil();


                string_literal431 = (Token) match(input, INDEX, FOLLOW_INDEX_in_classPropertyIndex9497);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    string_literal431_tree = (Object) adaptor.create(string_literal431);
                    adaptor.addChild(root_0, string_literal431_tree);
                }

                pushFollow(FOLLOW_expression_in_classPropertyIndex9499);
                expression432 = expression();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, expression432.getTree());

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:369:51: ( ';' )?
                int alt147 = 2;
                int LA147_0 = input.LA(1);
                if ((LA147_0 == SEMI)) {
                    int LA147_1 = input.LA(2);
                    if ((synpred198_Delphi())) {
                        alt147 = 1;
                    }
                }
                switch (alt147) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:369:52: ';'
                    {
                        char_literal433 = (Token) match(input, SEMI, FOLLOW_SEMI_in_classPropertyIndex9502);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) {
                            char_literal433_tree = (Object) adaptor.create(char_literal433);
                            adaptor.addChild(root_0, char_literal433_tree);
                        }

                    }
                    break;

                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 95, classPropertyIndex_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "classPropertySpecifier"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:371:1: classPropertySpecifier : ( classPropertyReadWrite | classPropertyDispInterface | STORED expression | 'default' expression | 'default' | 'nodefault' | IMPLEMENTS typeId );
    public final DelphiParser.classPropertySpecifier_return classPropertySpecifier() throws RecognitionException {
        DelphiParser.classPropertySpecifier_return retval = new DelphiParser.classPropertySpecifier_return();
        retval.start = input.LT(1);
        int classPropertySpecifier_StartIndex = input.index();

        Object root_0 = null;

        Token STORED436 = null;
        Token string_literal438 = null;
        Token string_literal440 = null;
        Token string_literal441 = null;
        Token IMPLEMENTS442 = null;
        ParserRuleReturnScope classPropertyReadWrite434 = null;
        ParserRuleReturnScope classPropertyDispInterface435 = null;
        ParserRuleReturnScope expression437 = null;
        ParserRuleReturnScope expression439 = null;
        ParserRuleReturnScope typeId443 = null;

        Object STORED436_tree = null;
        Object string_literal438_tree = null;
        Object string_literal440_tree = null;
        Object string_literal441_tree = null;
        Object IMPLEMENTS442_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 96)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:371:30: ( classPropertyReadWrite | classPropertyDispInterface | STORED expression | 'default' expression | 'default' | 'nodefault' | IMPLEMENTS typeId )
            int alt148 = 7;
            switch (input.LA(1)) {
                case READ:
                case WRITE: {
                    alt148 = 1;
                }
                break;
                case DISPID:
                case READONLY:
                case WRITEONLY: {
                    alt148 = 2;
                }
                break;
                case STORED: {
                    alt148 = 3;
                }
                break;
                case DEFAULT: {
                    int LA148_4 = input.LA(2);
                    if ((synpred202_Delphi())) {
                        alt148 = 4;
                    } else if ((synpred203_Delphi())) {
                        alt148 = 5;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try {
                            input.consume();
                            NoViableAltException nvae =
                                    new NoViableAltException("", 148, 4, input);
                            throw nvae;
                        } finally {
                            input.rewind(nvaeMark);
                        }
                    }

                }
                break;
                case NODEFAULT: {
                    alt148 = 6;
                }
                break;
                case IMPLEMENTS: {
                    alt148 = 7;
                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae =
                            new NoViableAltException("", 148, 0, input);
                    throw nvae;
            }
            switch (alt148) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:371:32: classPropertyReadWrite
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_classPropertyReadWrite_in_classPropertySpecifier9549);
                    classPropertyReadWrite434 = classPropertyReadWrite();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, classPropertyReadWrite434.getTree());

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:372:32: classPropertyDispInterface
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_classPropertyDispInterface_in_classPropertySpecifier9585);
                    classPropertyDispInterface435 = classPropertyDispInterface();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, classPropertyDispInterface435.getTree());

                }
                break;
                case 3:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:373:32: STORED expression
                {
                    root_0 = (Object) adaptor.nil();


                    STORED436 = (Token) match(input, STORED, FOLLOW_STORED_in_classPropertySpecifier9618);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        STORED436_tree = (Object) adaptor.create(STORED436);
                        adaptor.addChild(root_0, STORED436_tree);
                    }

                    pushFollow(FOLLOW_expression_in_classPropertySpecifier9620);
                    expression437 = expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, expression437.getTree());

                }
                break;
                case 4:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:374:32: 'default' expression
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal438 = (Token) match(input, DEFAULT, FOLLOW_DEFAULT_in_classPropertySpecifier9653);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal438_tree = (Object) adaptor.create(string_literal438);
                        adaptor.addChild(root_0, string_literal438_tree);
                    }

                    pushFollow(FOLLOW_expression_in_classPropertySpecifier9655);
                    expression439 = expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, expression439.getTree());

                }
                break;
                case 5:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:375:32: 'default'
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal440 = (Token) match(input, DEFAULT, FOLLOW_DEFAULT_in_classPropertySpecifier9688);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal440_tree = (Object) adaptor.create(string_literal440);
                        adaptor.addChild(root_0, string_literal440_tree);
                    }

                }
                break;
                case 6:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:376:32: 'nodefault'
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal441 = (Token) match(input, NODEFAULT, FOLLOW_NODEFAULT_in_classPropertySpecifier9737);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal441_tree = (Object) adaptor.create(string_literal441);
                        adaptor.addChild(root_0, string_literal441_tree);
                    }

                }
                break;
                case 7:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:377:32: IMPLEMENTS typeId
                {
                    root_0 = (Object) adaptor.nil();


                    IMPLEMENTS442 = (Token) match(input, IMPLEMENTS, FOLLOW_IMPLEMENTS_in_classPropertySpecifier9770);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        IMPLEMENTS442_tree = (Object) adaptor.create(IMPLEMENTS442);
                        adaptor.addChild(root_0, IMPLEMENTS442_tree);
                    }

                    pushFollow(FOLLOW_typeId_in_classPropertySpecifier9772);
                    typeId443 = typeId();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, typeId443.getTree());

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 96, classPropertySpecifier_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "classPropertyEndSpecifier"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:379:1: classPropertyEndSpecifier : ( STORED expression ';' | 'default' expression ';' | 'default' ';' | 'nodefault' ';' );
    public final DelphiParser.classPropertyEndSpecifier_return classPropertyEndSpecifier() throws RecognitionException {
        DelphiParser.classPropertyEndSpecifier_return retval = new DelphiParser.classPropertyEndSpecifier_return();
        retval.start = input.LT(1);
        int classPropertyEndSpecifier_StartIndex = input.index();

        Object root_0 = null;

        Token STORED444 = null;
        Token char_literal446 = null;
        Token string_literal447 = null;
        Token char_literal449 = null;
        Token string_literal450 = null;
        Token char_literal451 = null;
        Token string_literal452 = null;
        Token char_literal453 = null;
        ParserRuleReturnScope expression445 = null;
        ParserRuleReturnScope expression448 = null;

        Object STORED444_tree = null;
        Object char_literal446_tree = null;
        Object string_literal447_tree = null;
        Object char_literal449_tree = null;
        Object string_literal450_tree = null;
        Object char_literal451_tree = null;
        Object string_literal452_tree = null;
        Object char_literal453_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 97)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:379:30: ( STORED expression ';' | 'default' expression ';' | 'default' ';' | 'nodefault' ';' )
            int alt149 = 4;
            switch (input.LA(1)) {
                case STORED: {
                    alt149 = 1;
                }
                break;
                case DEFAULT: {
                    int LA149_2 = input.LA(2);
                    if ((LA149_2 == SEMI)) {
                        int LA149_4 = input.LA(3);
                        if ((synpred206_Delphi())) {
                            alt149 = 2;
                        } else if ((synpred207_Delphi())) {
                            alt149 = 3;
                        } else {
                            if (state.backtracking > 0) {
                                state.failed = true;
                                return retval;
                            }
                            int nvaeMark = input.mark();
                            try {
                                for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
                                    input.consume();
                                }
                                NoViableAltException nvae =
                                        new NoViableAltException("", 149, 4, input);
                                throw nvae;
                            } finally {
                                input.rewind(nvaeMark);
                            }
                        }

                    } else if (((LA149_2 >= ADD && LA149_2 <= ANSISTRING) || LA149_2 == AS || (LA149_2 >= AT && LA149_2 <= AT2) || LA149_2 == BREAK || (LA149_2 >= CONTAINS && LA149_2 <= ControlString) || LA149_2 == DEFAULT || LA149_2 == DIV || LA149_2 == DOT || LA149_2 == EQUAL || LA149_2 == EXIT || LA149_2 == EXPORT || LA149_2 == FALSE || LA149_2 == FINAL || (LA149_2 >= FUNCTION && LA149_2 <= GE) || LA149_2 == GT || (LA149_2 >= IMPLEMENTS && LA149_2 <= INHERITED) || LA149_2 == IS || LA149_2 == LBRACK || LA149_2 == LE || (LA149_2 >= LOCAL && LA149_2 <= NAME) || LA149_2 == NIL || (LA149_2 >= NOT && LA149_2 <= OBJECT) || (LA149_2 >= OPERATOR && LA149_2 <= OUT) || (LA149_2 >= PLUS && LA149_2 <= POINTER2) || LA149_2 == PROCEDURE || LA149_2 == QuotedString || (LA149_2 >= READ && LA149_2 <= READONLY) || (LA149_2 >= REFERENCE && LA149_2 <= REGISTER) || LA149_2 == REMOVE || (LA149_2 >= SHL && LA149_2 <= STAR) || (LA149_2 >= STORED && LA149_2 <= STRING) || LA149_2 == TRUE || LA149_2 == TkAsmHexNum || (LA149_2 >= TkHexNum && LA149_2 <= TkIntNum) || LA149_2 == TkRealNum || LA149_2 == VARIANT || LA149_2 == WRITE || (LA149_2 >= XOR && LA149_2 <= 201))) {
                        alt149 = 2;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try {
                            input.consume();
                            NoViableAltException nvae =
                                    new NoViableAltException("", 149, 2, input);
                            throw nvae;
                        } finally {
                            input.rewind(nvaeMark);
                        }
                    }

                }
                break;
                case NODEFAULT: {
                    alt149 = 4;
                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae =
                            new NoViableAltException("", 149, 0, input);
                    throw nvae;
            }
            switch (alt149) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:379:32: STORED expression ';'
                {
                    root_0 = (Object) adaptor.nil();


                    STORED444 = (Token) match(input, STORED, FOLLOW_STORED_in_classPropertyEndSpecifier9812);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        STORED444_tree = (Object) adaptor.create(STORED444);
                        adaptor.addChild(root_0, STORED444_tree);
                    }

                    pushFollow(FOLLOW_expression_in_classPropertyEndSpecifier9814);
                    expression445 = expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, expression445.getTree());

                    char_literal446 = (Token) match(input, SEMI, FOLLOW_SEMI_in_classPropertyEndSpecifier9816);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal446_tree = (Object) adaptor.create(char_literal446);
                        adaptor.addChild(root_0, char_literal446_tree);
                    }

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:380:32: 'default' expression ';'
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal447 = (Token) match(input, DEFAULT, FOLLOW_DEFAULT_in_classPropertyEndSpecifier9853);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal447_tree = (Object) adaptor.create(string_literal447);
                        adaptor.addChild(root_0, string_literal447_tree);
                    }

                    pushFollow(FOLLOW_expression_in_classPropertyEndSpecifier9855);
                    expression448 = expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, expression448.getTree());

                    char_literal449 = (Token) match(input, SEMI, FOLLOW_SEMI_in_classPropertyEndSpecifier9857);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal449_tree = (Object) adaptor.create(char_literal449);
                        adaptor.addChild(root_0, char_literal449_tree);
                    }

                }
                break;
                case 3:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:381:32: 'default' ';'
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal450 = (Token) match(input, DEFAULT, FOLLOW_DEFAULT_in_classPropertyEndSpecifier9890);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal450_tree = (Object) adaptor.create(string_literal450);
                        adaptor.addChild(root_0, string_literal450_tree);
                    }

                    char_literal451 = (Token) match(input, SEMI, FOLLOW_SEMI_in_classPropertyEndSpecifier9892);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal451_tree = (Object) adaptor.create(char_literal451);
                        adaptor.addChild(root_0, char_literal451_tree);
                    }

                }
                break;
                case 4:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:382:32: 'nodefault' ';'
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal452 = (Token) match(input, NODEFAULT, FOLLOW_NODEFAULT_in_classPropertyEndSpecifier9938);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal452_tree = (Object) adaptor.create(string_literal452);
                        adaptor.addChild(root_0, string_literal452_tree);
                    }

                    char_literal453 = (Token) match(input, SEMI, FOLLOW_SEMI_in_classPropertyEndSpecifier9940);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal453_tree = (Object) adaptor.create(char_literal453);
                        adaptor.addChild(root_0, char_literal453_tree);
                    }

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 97, classPropertyEndSpecifier_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "classPropertyReadWrite"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:385:1: classPropertyReadWrite : ( 'read' qualifiedIdent ( '[' expression ']' )? -> ^( 'read' qualifiedIdent ) | 'write' qualifiedIdent ( '[' expression ']' )? -> ^( 'write' qualifiedIdent ) );
    public final DelphiParser.classPropertyReadWrite_return classPropertyReadWrite() throws RecognitionException {
        DelphiParser.classPropertyReadWrite_return retval = new DelphiParser.classPropertyReadWrite_return();
        retval.start = input.LT(1);
        int classPropertyReadWrite_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal454 = null;
        Token char_literal456 = null;
        Token char_literal458 = null;
        Token string_literal459 = null;
        Token char_literal461 = null;
        Token char_literal463 = null;
        ParserRuleReturnScope qualifiedIdent455 = null;
        ParserRuleReturnScope expression457 = null;
        ParserRuleReturnScope qualifiedIdent460 = null;
        ParserRuleReturnScope expression462 = null;

        Object string_literal454_tree = null;
        Object char_literal456_tree = null;
        Object char_literal458_tree = null;
        Object string_literal459_tree = null;
        Object char_literal461_tree = null;
        Object char_literal463_tree = null;
        RewriteRuleTokenStream stream_READ = new RewriteRuleTokenStream(adaptor, "token READ");
        RewriteRuleTokenStream stream_RBRACK = new RewriteRuleTokenStream(adaptor, "token RBRACK");
        RewriteRuleTokenStream stream_LBRACK = new RewriteRuleTokenStream(adaptor, "token LBRACK");
        RewriteRuleTokenStream stream_WRITE = new RewriteRuleTokenStream(adaptor, "token WRITE");
        RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor, "rule expression");
        RewriteRuleSubtreeStream stream_qualifiedIdent = new RewriteRuleSubtreeStream(adaptor, "rule qualifiedIdent");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 98)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:385:30: ( 'read' qualifiedIdent ( '[' expression ']' )? -> ^( 'read' qualifiedIdent ) | 'write' qualifiedIdent ( '[' expression ']' )? -> ^( 'write' qualifiedIdent ) )
            int alt152 = 2;
            int LA152_0 = input.LA(1);
            if ((LA152_0 == READ)) {
                alt152 = 1;
            } else if ((LA152_0 == WRITE)) {
                alt152 = 2;
            } else {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae =
                        new NoViableAltException("", 152, 0, input);
                throw nvae;
            }

            switch (alt152) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:385:32: 'read' qualifiedIdent ( '[' expression ']' )?
                {
                    string_literal454 = (Token) match(input, READ, FOLLOW_READ_in_classPropertyReadWrite9984);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_READ.add(string_literal454);

                    pushFollow(FOLLOW_qualifiedIdent_in_classPropertyReadWrite9986);
                    qualifiedIdent455 = qualifiedIdent();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_qualifiedIdent.add(qualifiedIdent455.getTree());
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:385:54: ( '[' expression ']' )?
                    int alt150 = 2;
                    int LA150_0 = input.LA(1);
                    if ((LA150_0 == LBRACK)) {
                        alt150 = 1;
                    }
                    switch (alt150) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:385:55: '[' expression ']'
                        {
                            char_literal456 = (Token) match(input, LBRACK, FOLLOW_LBRACK_in_classPropertyReadWrite9989);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_LBRACK.add(char_literal456);

                            pushFollow(FOLLOW_expression_in_classPropertyReadWrite9991);
                            expression457 = expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_expression.add(expression457.getTree());
                            char_literal458 = (Token) match(input, RBRACK, FOLLOW_RBRACK_in_classPropertyReadWrite9993);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_RBRACK.add(char_literal458);

                        }
                        break;

                    }

                    // AST REWRITE
                    // elements: READ, qualifiedIdent
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if (state.backtracking == 0) {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                        root_0 = (Object) adaptor.nil();
                        // 386:30: -> ^( 'read' qualifiedIdent )
                        {
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:386:33: ^( 'read' qualifiedIdent )
                            {
                                Object root_1 = (Object) adaptor.nil();
                                root_1 = (Object) adaptor.becomeRoot(stream_READ.nextNode(), root_1);
                                adaptor.addChild(root_1, stream_qualifiedIdent.nextTree());
                                adaptor.addChild(root_0, root_1);
                            }

                        }


                        retval.tree = root_0;
                    }

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:387:32: 'write' qualifiedIdent ( '[' expression ']' )?
                {
                    string_literal459 = (Token) match(input, WRITE, FOLLOW_WRITE_in_classPropertyReadWrite10067);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_WRITE.add(string_literal459);

                    pushFollow(FOLLOW_qualifiedIdent_in_classPropertyReadWrite10069);
                    qualifiedIdent460 = qualifiedIdent();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_qualifiedIdent.add(qualifiedIdent460.getTree());
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:387:55: ( '[' expression ']' )?
                    int alt151 = 2;
                    int LA151_0 = input.LA(1);
                    if ((LA151_0 == LBRACK)) {
                        alt151 = 1;
                    }
                    switch (alt151) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:387:56: '[' expression ']'
                        {
                            char_literal461 = (Token) match(input, LBRACK, FOLLOW_LBRACK_in_classPropertyReadWrite10072);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_LBRACK.add(char_literal461);

                            pushFollow(FOLLOW_expression_in_classPropertyReadWrite10074);
                            expression462 = expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_expression.add(expression462.getTree());
                            char_literal463 = (Token) match(input, RBRACK, FOLLOW_RBRACK_in_classPropertyReadWrite10076);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_RBRACK.add(char_literal463);

                        }
                        break;

                    }

                    // AST REWRITE
                    // elements: qualifiedIdent, WRITE
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if (state.backtracking == 0) {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                        root_0 = (Object) adaptor.nil();
                        // 388:30: -> ^( 'write' qualifiedIdent )
                        {
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:388:33: ^( 'write' qualifiedIdent )
                            {
                                Object root_1 = (Object) adaptor.nil();
                                root_1 = (Object) adaptor.becomeRoot(stream_WRITE.nextNode(), root_1);
                                adaptor.addChild(root_1, stream_qualifiedIdent.nextTree());
                                adaptor.addChild(root_0, root_1);
                            }

                        }


                        retval.tree = root_0;
                    }

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 98, classPropertyReadWrite_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "classPropertyDispInterface"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:390:1: classPropertyDispInterface : ( 'readonly' ';' | 'writeonly' ';' | dispIDDirective );
    public final DelphiParser.classPropertyDispInterface_return classPropertyDispInterface() throws RecognitionException {
        DelphiParser.classPropertyDispInterface_return retval = new DelphiParser.classPropertyDispInterface_return();
        retval.start = input.LT(1);
        int classPropertyDispInterface_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal464 = null;
        Token char_literal465 = null;
        Token string_literal466 = null;
        Token char_literal467 = null;
        ParserRuleReturnScope dispIDDirective468 = null;

        Object string_literal464_tree = null;
        Object char_literal465_tree = null;
        Object string_literal466_tree = null;
        Object char_literal467_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 99)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:390:30: ( 'readonly' ';' | 'writeonly' ';' | dispIDDirective )
            int alt153 = 3;
            switch (input.LA(1)) {
                case READONLY: {
                    alt153 = 1;
                }
                break;
                case WRITEONLY: {
                    alt153 = 2;
                }
                break;
                case DISPID: {
                    alt153 = 3;
                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae =
                            new NoViableAltException("", 153, 0, input);
                    throw nvae;
            }
            switch (alt153) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:390:32: 'readonly' ';'
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal464 = (Token) match(input, READONLY, FOLLOW_READONLY_in_classPropertyDispInterface10155);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal464_tree = (Object) adaptor.create(string_literal464);
                        adaptor.addChild(root_0, string_literal464_tree);
                    }

                    char_literal465 = (Token) match(input, SEMI, FOLLOW_SEMI_in_classPropertyDispInterface10157);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal465_tree = (Object) adaptor.create(char_literal465);
                        adaptor.addChild(root_0, char_literal465_tree);
                    }

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:391:32: 'writeonly' ';'
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal466 = (Token) match(input, WRITEONLY, FOLLOW_WRITEONLY_in_classPropertyDispInterface10190);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal466_tree = (Object) adaptor.create(string_literal466);
                        adaptor.addChild(root_0, string_literal466_tree);
                    }

                    char_literal467 = (Token) match(input, SEMI, FOLLOW_SEMI_in_classPropertyDispInterface10192);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal467_tree = (Object) adaptor.create(char_literal467);
                        adaptor.addChild(root_0, char_literal467_tree);
                    }

                }
                break;
                case 3:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:392:32: dispIDDirective
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_dispIDDirective_in_classPropertyDispInterface10225);
                    dispIDDirective468 = dispIDDirective();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, dispIDDirective468.getTree());

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 99, classPropertyDispInterface_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "visibility"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:394:1: visibility : ( ( STRICT )? 'protected' | ( STRICT )? 'private' | 'public' | 'published' | 'automated' );
    public final DelphiParser.visibility_return visibility() throws RecognitionException {
        DelphiParser.visibility_return retval = new DelphiParser.visibility_return();
        retval.start = input.LT(1);
        int visibility_StartIndex = input.index();

        Object root_0 = null;

        Token STRICT469 = null;
        Token string_literal470 = null;
        Token STRICT471 = null;
        Token string_literal472 = null;
        Token string_literal473 = null;
        Token string_literal474 = null;
        Token string_literal475 = null;

        Object STRICT469_tree = null;
        Object string_literal470_tree = null;
        Object STRICT471_tree = null;
        Object string_literal472_tree = null;
        Object string_literal473_tree = null;
        Object string_literal474_tree = null;
        Object string_literal475_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 100)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:394:30: ( ( STRICT )? 'protected' | ( STRICT )? 'private' | 'public' | 'published' | 'automated' )
            int alt156 = 5;
            switch (input.LA(1)) {
                case STRICT: {
                    int LA156_1 = input.LA(2);
                    if ((LA156_1 == PROTECTED)) {
                        alt156 = 1;
                    } else if ((LA156_1 == PRIVATE)) {
                        alt156 = 2;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try {
                            input.consume();
                            NoViableAltException nvae =
                                    new NoViableAltException("", 156, 1, input);
                            throw nvae;
                        } finally {
                            input.rewind(nvaeMark);
                        }
                    }

                }
                break;
                case PROTECTED: {
                    alt156 = 1;
                }
                break;
                case PRIVATE: {
                    alt156 = 2;
                }
                break;
                case PUBLIC: {
                    alt156 = 3;
                }
                break;
                case PUBLISHED: {
                    alt156 = 4;
                }
                break;
                case AUTOMATED: {
                    alt156 = 5;
                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae =
                            new NoViableAltException("", 156, 0, input);
                    throw nvae;
            }
            switch (alt156) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:394:32: ( STRICT )? 'protected'
                {
                    root_0 = (Object) adaptor.nil();


                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:394:32: ( STRICT )?
                    int alt154 = 2;
                    int LA154_0 = input.LA(1);
                    if ((LA154_0 == STRICT)) {
                        alt154 = 1;
                    }
                    switch (alt154) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:394:33: STRICT
                        {
                            STRICT469 = (Token) match(input, STRICT, FOLLOW_STRICT_in_visibility10281);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) {
                                STRICT469_tree = (Object) adaptor.create(STRICT469);
                                adaptor.addChild(root_0, STRICT469_tree);
                            }

                        }
                        break;

                    }

                    string_literal470 = (Token) match(input, PROTECTED, FOLLOW_PROTECTED_in_visibility10285);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal470_tree = (Object) adaptor.create(string_literal470);
                        adaptor.addChild(root_0, string_literal470_tree);
                    }

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:395:32: ( STRICT )? 'private'
                {
                    root_0 = (Object) adaptor.nil();


                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:395:32: ( STRICT )?
                    int alt155 = 2;
                    int LA155_0 = input.LA(1);
                    if ((LA155_0 == STRICT)) {
                        alt155 = 1;
                    }
                    switch (alt155) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:395:33: STRICT
                        {
                            STRICT471 = (Token) match(input, STRICT, FOLLOW_STRICT_in_visibility10320);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) {
                                STRICT471_tree = (Object) adaptor.create(STRICT471);
                                adaptor.addChild(root_0, STRICT471_tree);
                            }

                        }
                        break;

                    }

                    string_literal472 = (Token) match(input, PRIVATE, FOLLOW_PRIVATE_in_visibility10324);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal472_tree = (Object) adaptor.create(string_literal472);
                        adaptor.addChild(root_0, string_literal472_tree);
                    }

                }
                break;
                case 3:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:396:32: 'public'
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal473 = (Token) match(input, PUBLIC, FOLLOW_PUBLIC_in_visibility10357);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal473_tree = (Object) adaptor.create(string_literal473);
                        adaptor.addChild(root_0, string_literal473_tree);
                    }

                }
                break;
                case 4:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:397:32: 'published'
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal474 = (Token) match(input, PUBLISHED, FOLLOW_PUBLISHED_in_visibility10390);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal474_tree = (Object) adaptor.create(string_literal474);
                        adaptor.addChild(root_0, string_literal474_tree);
                    }

                }
                break;
                case 5:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:398:32: 'automated'
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal475 = (Token) match(input, AUTOMATED, FOLLOW_AUTOMATED_in_visibility10424);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal475_tree = (Object) adaptor.create(string_literal475);
                        adaptor.addChild(root_0, string_literal475_tree);
                    }

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 100, visibility_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "exportedProcHeading"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:403:1: exportedProcHeading : ( 'procedure' ident ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' ( functionDirective )* | 'function' ident ( formalParameterSection )? ';' ( functionDirective )* );
    public final DelphiParser.exportedProcHeading_return exportedProcHeading() throws RecognitionException {
        DelphiParser.exportedProcHeading_return retval = new DelphiParser.exportedProcHeading_return();
        retval.start = input.LT(1);
        int exportedProcHeading_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal476 = null;
        Token char_literal479 = null;
        Token char_literal482 = null;
        Token string_literal484 = null;
        Token char_literal487 = null;
        ParserRuleReturnScope ident477 = null;
        ParserRuleReturnScope formalParameterSection478 = null;
        ParserRuleReturnScope customAttribute480 = null;
        ParserRuleReturnScope typeDecl481 = null;
        ParserRuleReturnScope functionDirective483 = null;
        ParserRuleReturnScope ident485 = null;
        ParserRuleReturnScope formalParameterSection486 = null;
        ParserRuleReturnScope functionDirective488 = null;

        Object string_literal476_tree = null;
        Object char_literal479_tree = null;
        Object char_literal482_tree = null;
        Object string_literal484_tree = null;
        Object char_literal487_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 101)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:403:30: ( 'procedure' ident ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' ( functionDirective )* | 'function' ident ( formalParameterSection )? ';' ( functionDirective )* )
            int alt162 = 2;
            int LA162_0 = input.LA(1);
            if ((LA162_0 == PROCEDURE)) {
                alt162 = 1;
            } else if ((LA162_0 == FUNCTION)) {
                alt162 = 2;
            } else {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae =
                        new NoViableAltException("", 162, 0, input);
                throw nvae;
            }

            switch (alt162) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:403:32: 'procedure' ident ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' ( functionDirective )*
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal476 = (Token) match(input, PROCEDURE, FOLLOW_PROCEDURE_in_exportedProcHeading10478);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal476_tree = (Object) adaptor.create(string_literal476);
                        adaptor.addChild(root_0, string_literal476_tree);
                    }

                    pushFollow(FOLLOW_ident_in_exportedProcHeading10480);
                    ident477 = ident();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, ident477.getTree());

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:403:50: ( formalParameterSection )?
                    int alt157 = 2;
                    int LA157_0 = input.LA(1);
                    if ((LA157_0 == LPAREN)) {
                        alt157 = 1;
                    }
                    switch (alt157) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:403:51: formalParameterSection
                        {
                            pushFollow(FOLLOW_formalParameterSection_in_exportedProcHeading10483);
                            formalParameterSection478 = formalParameterSection();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, formalParameterSection478.getTree());

                        }
                        break;

                    }

                    char_literal479 = (Token) match(input, COLON, FOLLOW_COLON_in_exportedProcHeading10487);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal479_tree = (Object) adaptor.create(char_literal479);
                        adaptor.addChild(root_0, char_literal479_tree);
                    }

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:403:80: ( customAttribute )?
                    int alt158 = 2;
                    switch (input.LA(1)) {
                        case LBRACK: {
                            int LA158_1 = input.LA(2);
                            if ((synpred220_Delphi())) {
                                alt158 = 1;
                            }
                        }
                        break;
                        case PACKED: {
                            int LA158_2 = input.LA(2);
                            if ((synpred220_Delphi())) {
                                alt158 = 1;
                            }
                        }
                        break;
                        case ARRAY: {
                            int LA158_3 = input.LA(2);
                            if ((synpred220_Delphi())) {
                                alt158 = 1;
                            }
                        }
                        break;
                        case SET: {
                            int LA158_4 = input.LA(2);
                            if ((synpred220_Delphi())) {
                                alt158 = 1;
                            }
                        }
                        break;
                        case FILE: {
                            int LA158_5 = input.LA(2);
                            if ((synpred220_Delphi())) {
                                alt158 = 1;
                            }
                        }
                        break;
                        case CLASS: {
                            int LA158_6 = input.LA(2);
                            if ((synpred220_Delphi())) {
                                alt158 = 1;
                            }
                        }
                        break;
                        case DISPINTERFACE:
                        case INTERFACE: {
                            int LA158_7 = input.LA(2);
                            if ((synpred220_Delphi())) {
                                alt158 = 1;
                            }
                        }
                        break;
                        case OBJECT: {
                            int LA158_8 = input.LA(2);
                            if ((synpred220_Delphi())) {
                                alt158 = 1;
                            }
                        }
                        break;
                        case RECORD: {
                            int LA158_9 = input.LA(2);
                            if ((synpred220_Delphi())) {
                                alt158 = 1;
                            }
                        }
                        break;
                        case POINTER2: {
                            int LA158_10 = input.LA(2);
                            if ((synpred220_Delphi())) {
                                alt158 = 1;
                            }
                        }
                        break;
                        case POINTER: {
                            int LA158_11 = input.LA(2);
                            if ((synpred220_Delphi())) {
                                alt158 = 1;
                            }
                        }
                        break;
                        case STRING: {
                            int LA158_12 = input.LA(2);
                            if ((synpred220_Delphi())) {
                                alt158 = 1;
                            }
                        }
                        break;
                        case TYPE: {
                            int LA158_13 = input.LA(2);
                            if ((synpred220_Delphi())) {
                                alt158 = 1;
                            }
                        }
                        break;
                        case ANSISTRING: {
                            int LA158_14 = input.LA(2);
                            if ((synpred220_Delphi())) {
                                alt158 = 1;
                            }
                        }
                        break;
                        case FUNCTION: {
                            int LA158_15 = input.LA(2);
                            if ((synpred220_Delphi())) {
                                alt158 = 1;
                            }
                        }
                        break;
                        case PROCEDURE: {
                            int LA158_16 = input.LA(2);
                            if ((synpred220_Delphi())) {
                                alt158 = 1;
                            }
                        }
                        break;
                        case REFERENCE: {
                            int LA158_17 = input.LA(2);
                            if ((synpred220_Delphi())) {
                                alt158 = 1;
                            }
                        }
                        break;
                        case VARIANT: {
                            int LA158_18 = input.LA(2);
                            if ((synpred220_Delphi())) {
                                alt158 = 1;
                            }
                        }
                        break;
                        case TkIdentifier: {
                            int LA158_19 = input.LA(2);
                            if ((synpred220_Delphi())) {
                                alt158 = 1;
                            }
                        }
                        break;
                        case 200: {
                            int LA158_20 = input.LA(2);
                            if ((synpred220_Delphi())) {
                                alt158 = 1;
                            }
                        }
                        break;
                        case ADD:
                        case AT:
                        case BREAK:
                        case CONTAINS:
                        case CONTINUE:
                        case DEFAULT:
                        case EXIT:
                        case EXPORT:
                        case FINAL:
                        case IMPLEMENTS:
                        case INDEX:
                        case LOCAL:
                        case MESSAGE:
                        case NAME:
                        case OPERATOR:
                        case OUT:
                        case READ:
                        case READONLY:
                        case REGISTER:
                        case REMOVE:
                        case STORED:
                        case STRICT:
                        case WRITE: {
                            int LA158_21 = input.LA(2);
                            if ((synpred220_Delphi())) {
                                alt158 = 1;
                            }
                        }
                        break;
                        case LPAREN: {
                            int LA158_22 = input.LA(2);
                            if ((synpred220_Delphi())) {
                                alt158 = 1;
                            }
                        }
                        break;
                        case AT2: {
                            int LA158_23 = input.LA(2);
                            if ((synpred220_Delphi())) {
                                alt158 = 1;
                            }
                        }
                        break;
                        case 201: {
                            int LA158_24 = input.LA(2);
                            if ((synpred220_Delphi())) {
                                alt158 = 1;
                            }
                        }
                        break;
                        case NOT: {
                            int LA158_25 = input.LA(2);
                            if ((synpred220_Delphi())) {
                                alt158 = 1;
                            }
                        }
                        break;
                        case PLUS: {
                            int LA158_26 = input.LA(2);
                            if ((synpred220_Delphi())) {
                                alt158 = 1;
                            }
                        }
                        break;
                        case MINUS: {
                            int LA158_27 = input.LA(2);
                            if ((synpred220_Delphi())) {
                                alt158 = 1;
                            }
                        }
                        break;
                        case TkHexNum:
                        case TkIntNum: {
                            int LA158_28 = input.LA(2);
                            if ((synpred220_Delphi())) {
                                alt158 = 1;
                            }
                        }
                        break;
                        case TkRealNum: {
                            int LA158_29 = input.LA(2);
                            if ((synpred220_Delphi())) {
                                alt158 = 1;
                            }
                        }
                        break;
                        case TkAsmHexNum: {
                            int LA158_30 = input.LA(2);
                            if ((synpred220_Delphi())) {
                                alt158 = 1;
                            }
                        }
                        break;
                        case TRUE: {
                            int LA158_31 = input.LA(2);
                            if ((synpred220_Delphi())) {
                                alt158 = 1;
                            }
                        }
                        break;
                        case FALSE: {
                            int LA158_32 = input.LA(2);
                            if ((synpred220_Delphi())) {
                                alt158 = 1;
                            }
                        }
                        break;
                        case NIL: {
                            int LA158_33 = input.LA(2);
                            if ((synpred220_Delphi())) {
                                alt158 = 1;
                            }
                        }
                        break;
                        case ControlString: {
                            int LA158_34 = input.LA(2);
                            if ((synpred220_Delphi())) {
                                alt158 = 1;
                            }
                        }
                        break;
                        case QuotedString: {
                            int LA158_35 = input.LA(2);
                            if ((synpred220_Delphi())) {
                                alt158 = 1;
                            }
                        }
                        break;
                        case INHERITED: {
                            int LA158_36 = input.LA(2);
                            if ((synpred220_Delphi())) {
                                alt158 = 1;
                            }
                        }
                        break;
                        case DOT: {
                            int LA158_37 = input.LA(2);
                            if ((synpred220_Delphi())) {
                                alt158 = 1;
                            }
                        }
                        break;
                        case LT: {
                            int LA158_38 = input.LA(2);
                            if ((synpred220_Delphi())) {
                                alt158 = 1;
                            }
                        }
                        break;
                        case AND:
                        case AS:
                        case DIV:
                        case MOD:
                        case OR:
                        case SHL:
                        case SHR:
                        case SLASH:
                        case STAR:
                        case XOR: {
                            int LA158_39 = input.LA(2);
                            if ((synpred220_Delphi())) {
                                alt158 = 1;
                            }
                        }
                        break;
                        case EQUAL: {
                            int LA158_40 = input.LA(2);
                            if ((synpred220_Delphi())) {
                                alt158 = 1;
                            }
                        }
                        break;
                        case GE:
                        case GT:
                        case IN:
                        case IS:
                        case LE:
                        case NOT_EQUAL: {
                            int LA158_41 = input.LA(2);
                            if ((synpred220_Delphi())) {
                                alt158 = 1;
                            }
                        }
                        break;
                        case DOTDOT: {
                            int LA158_42 = input.LA(2);
                            if ((synpred220_Delphi())) {
                                alt158 = 1;
                            }
                        }
                        break;
                        case SEMI: {
                            int LA158_43 = input.LA(2);
                            if ((synpred220_Delphi())) {
                                alt158 = 1;
                            }
                        }
                        break;
                    }
                    switch (alt158) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:403:81: customAttribute
                        {
                            pushFollow(FOLLOW_customAttribute_in_exportedProcHeading10490);
                            customAttribute480 = customAttribute();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, customAttribute480.getTree());

                        }
                        break;

                    }

                    pushFollow(FOLLOW_typeDecl_in_exportedProcHeading10494);
                    typeDecl481 = typeDecl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, typeDecl481.getTree());

                    char_literal482 = (Token) match(input, SEMI, FOLLOW_SEMI_in_exportedProcHeading10496);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal482_tree = (Object) adaptor.create(char_literal482);
                        adaptor.addChild(root_0, char_literal482_tree);
                    }

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:403:112: ( functionDirective )*
                    loop159:
                    while (true) {
                        int alt159 = 2;
                        alt159 = dfa159.predict(input);
                        switch (alt159) {
                            case 1:
                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:403:113: functionDirective
                            {
                                pushFollow(FOLLOW_functionDirective_in_exportedProcHeading10499);
                                functionDirective483 = functionDirective();
                                state._fsp--;
                                if (state.failed) return retval;
                                if (state.backtracking == 0) adaptor.addChild(root_0, functionDirective483.getTree());

                            }
                            break;

                            default:
                                break loop159;
                        }
                    }

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:404:32: 'function' ident ( formalParameterSection )? ';' ( functionDirective )*
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal484 = (Token) match(input, FUNCTION, FOLLOW_FUNCTION_in_exportedProcHeading10534);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal484_tree = (Object) adaptor.create(string_literal484);
                        adaptor.addChild(root_0, string_literal484_tree);
                    }

                    pushFollow(FOLLOW_ident_in_exportedProcHeading10536);
                    ident485 = ident();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, ident485.getTree());

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:404:49: ( formalParameterSection )?
                    int alt160 = 2;
                    int LA160_0 = input.LA(1);
                    if ((LA160_0 == LPAREN)) {
                        alt160 = 1;
                    }
                    switch (alt160) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:404:50: formalParameterSection
                        {
                            pushFollow(FOLLOW_formalParameterSection_in_exportedProcHeading10539);
                            formalParameterSection486 = formalParameterSection();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, formalParameterSection486.getTree());

                        }
                        break;

                    }

                    char_literal487 = (Token) match(input, SEMI, FOLLOW_SEMI_in_exportedProcHeading10543);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal487_tree = (Object) adaptor.create(char_literal487);
                        adaptor.addChild(root_0, char_literal487_tree);
                    }

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:404:79: ( functionDirective )*
                    loop161:
                    while (true) {
                        int alt161 = 2;
                        alt161 = dfa161.predict(input);
                        switch (alt161) {
                            case 1:
                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:404:80: functionDirective
                            {
                                pushFollow(FOLLOW_functionDirective_in_exportedProcHeading10546);
                                functionDirective488 = functionDirective();
                                state._fsp--;
                                if (state.failed) return retval;
                                if (state.backtracking == 0) adaptor.addChild(root_0, functionDirective488.getTree());

                            }
                            break;

                            default:
                                break loop161;
                        }
                    }

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 101, exportedProcHeading_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "methodDecl"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:406:1: methodDecl : methodDeclHeading ';' ( methodDirective )* ( methodBody )? -> methodDeclHeading ( methodBody )? ;
    public final DelphiParser.methodDecl_return methodDecl() throws RecognitionException {
        DelphiParser.methodDecl_return retval = new DelphiParser.methodDecl_return();
        retval.start = input.LT(1);
        int methodDecl_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal490 = null;
        ParserRuleReturnScope methodDeclHeading489 = null;
        ParserRuleReturnScope methodDirective491 = null;
        ParserRuleReturnScope methodBody492 = null;

        Object char_literal490_tree = null;
        RewriteRuleTokenStream stream_SEMI = new RewriteRuleTokenStream(adaptor, "token SEMI");
        RewriteRuleSubtreeStream stream_methodBody = new RewriteRuleSubtreeStream(adaptor, "rule methodBody");
        RewriteRuleSubtreeStream stream_methodDirective = new RewriteRuleSubtreeStream(adaptor, "rule methodDirective");
        RewriteRuleSubtreeStream stream_methodDeclHeading = new RewriteRuleSubtreeStream(adaptor, "rule methodDeclHeading");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 102)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:406:30: ( methodDeclHeading ';' ( methodDirective )* ( methodBody )? -> methodDeclHeading ( methodBody )? )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:406:32: methodDeclHeading ';' ( methodDirective )* ( methodBody )?
            {
                pushFollow(FOLLOW_methodDeclHeading_in_methodDecl10603);
                methodDeclHeading489 = methodDeclHeading();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_methodDeclHeading.add(methodDeclHeading489.getTree());
                char_literal490 = (Token) match(input, SEMI, FOLLOW_SEMI_in_methodDecl10605);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_SEMI.add(char_literal490);

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:406:54: ( methodDirective )*
                loop163:
                while (true) {
                    int alt163 = 2;
                    alt163 = dfa163.predict(input);
                    switch (alt163) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:406:55: methodDirective
                        {
                            pushFollow(FOLLOW_methodDirective_in_methodDecl10608);
                            methodDirective491 = methodDirective();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_methodDirective.add(methodDirective491.getTree());
                        }
                        break;

                        default:
                            break loop163;
                    }
                }

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:406:73: ( methodBody )?
                int alt164 = 2;
                switch (input.LA(1)) {
                    case LABEL: {
                        int LA164_1 = input.LA(2);
                        if ((synpred226_Delphi())) {
                            alt164 = 1;
                        }
                    }
                    break;
                    case CONST:
                    case RESOURCESTRING: {
                        int LA164_2 = input.LA(2);
                        if ((synpred226_Delphi())) {
                            alt164 = 1;
                        }
                    }
                    break;
                    case TYPE: {
                        int LA164_3 = input.LA(2);
                        if ((synpred226_Delphi())) {
                            alt164 = 1;
                        }
                    }
                    break;
                    case THREADVAR:
                    case VAR: {
                        int LA164_4 = input.LA(2);
                        if ((synpred226_Delphi())) {
                            alt164 = 1;
                        }
                    }
                    break;
                    case PROCEDURE: {
                        int LA164_5 = input.LA(2);
                        if ((synpred226_Delphi())) {
                            alt164 = 1;
                        }
                    }
                    break;
                    case FUNCTION: {
                        int LA164_6 = input.LA(2);
                        if ((synpred226_Delphi())) {
                            alt164 = 1;
                        }
                    }
                    break;
                    case LBRACK: {
                        int LA164_7 = input.LA(2);
                        if ((synpred226_Delphi())) {
                            alt164 = 1;
                        }
                    }
                    break;
                    case CLASS: {
                        int LA164_8 = input.LA(2);
                        if ((synpred226_Delphi())) {
                            alt164 = 1;
                        }
                    }
                    break;
                    case CONSTRUCTOR:
                    case DESTRUCTOR: {
                        int LA164_9 = input.LA(2);
                        if ((synpred226_Delphi())) {
                            alt164 = 1;
                        }
                    }
                    break;
                    case EXPORTS: {
                        int LA164_10 = input.LA(2);
                        if ((synpred226_Delphi())) {
                            alt164 = 1;
                        }
                    }
                    break;
                    case BEGIN: {
                        int LA164_11 = input.LA(2);
                        if ((synpred226_Delphi())) {
                            alt164 = 1;
                        }
                    }
                    break;
                    case ASM: {
                        int LA164_12 = input.LA(2);
                        if ((synpred226_Delphi())) {
                            alt164 = 1;
                        }
                    }
                    break;
                    case SEMI: {
                        int LA164_13 = input.LA(2);
                        if ((synpred226_Delphi())) {
                            alt164 = 1;
                        }
                    }
                    break;
                }
                switch (alt164) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:406:74: methodBody
                    {
                        pushFollow(FOLLOW_methodBody_in_methodDecl10613);
                        methodBody492 = methodBody();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_methodBody.add(methodBody492.getTree());
                    }
                    break;

                }

                // AST REWRITE
                // elements: methodBody, methodDeclHeading
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 406:87: -> methodDeclHeading ( methodBody )?
                    {
                        adaptor.addChild(root_0, stream_methodDeclHeading.nextTree());
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:406:108: ( methodBody )?
                        if (stream_methodBody.hasNext()) {
                            adaptor.addChild(root_0, stream_methodBody.nextTree());
                        }
                        stream_methodBody.reset();

                    }


                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 102, methodDecl_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "methodDeclHeading"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:408:1: methodDeclHeading : ( ( customAttribute )? ( 'class' )? methodKey methodName ( formalParameterSection )? -> ( customAttribute )? ( 'class' )? ^( methodKey ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ) | ( customAttribute )? ( 'class' )? 'function' methodName ( formalParameterSection )? ( ':' ( customAttribute )? typeDecl )? -> ( customAttribute )? ( 'class' )? ^( 'function' ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? ) ) | ( customAttribute )? 'class' 'operator' methodName ( formalParameterSection )? ( ':' ( customAttribute )? typeDecl )? -> ( customAttribute )? 'class' ^( 'operator' ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? ) ) );
    public final DelphiParser.methodDeclHeading_return methodDeclHeading() throws RecognitionException {
        DelphiParser.methodDeclHeading_return retval = new DelphiParser.methodDeclHeading_return();
        retval.start = input.LT(1);
        int methodDeclHeading_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal494 = null;
        Token string_literal499 = null;
        Token string_literal500 = null;
        Token char_literal503 = null;
        Token string_literal507 = null;
        Token string_literal508 = null;
        Token char_literal511 = null;
        ParserRuleReturnScope customAttribute493 = null;
        ParserRuleReturnScope methodKey495 = null;
        ParserRuleReturnScope methodName496 = null;
        ParserRuleReturnScope formalParameterSection497 = null;
        ParserRuleReturnScope customAttribute498 = null;
        ParserRuleReturnScope methodName501 = null;
        ParserRuleReturnScope formalParameterSection502 = null;
        ParserRuleReturnScope customAttribute504 = null;
        ParserRuleReturnScope typeDecl505 = null;
        ParserRuleReturnScope customAttribute506 = null;
        ParserRuleReturnScope methodName509 = null;
        ParserRuleReturnScope formalParameterSection510 = null;
        ParserRuleReturnScope customAttribute512 = null;
        ParserRuleReturnScope typeDecl513 = null;

        Object string_literal494_tree = null;
        Object string_literal499_tree = null;
        Object string_literal500_tree = null;
        Object char_literal503_tree = null;
        Object string_literal507_tree = null;
        Object string_literal508_tree = null;
        Object char_literal511_tree = null;
        RewriteRuleTokenStream stream_OPERATOR = new RewriteRuleTokenStream(adaptor, "token OPERATOR");
        RewriteRuleTokenStream stream_COLON = new RewriteRuleTokenStream(adaptor, "token COLON");
        RewriteRuleTokenStream stream_CLASS = new RewriteRuleTokenStream(adaptor, "token CLASS");
        RewriteRuleTokenStream stream_FUNCTION = new RewriteRuleTokenStream(adaptor, "token FUNCTION");
        RewriteRuleSubtreeStream stream_customAttribute = new RewriteRuleSubtreeStream(adaptor, "rule customAttribute");
        RewriteRuleSubtreeStream stream_methodKey = new RewriteRuleSubtreeStream(adaptor, "rule methodKey");
        RewriteRuleSubtreeStream stream_formalParameterSection = new RewriteRuleSubtreeStream(adaptor, "rule formalParameterSection");
        RewriteRuleSubtreeStream stream_methodName = new RewriteRuleSubtreeStream(adaptor, "rule methodName");
        RewriteRuleSubtreeStream stream_typeDecl = new RewriteRuleSubtreeStream(adaptor, "rule typeDecl");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 103)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:408:30: ( ( customAttribute )? ( 'class' )? methodKey methodName ( formalParameterSection )? -> ( customAttribute )? ( 'class' )? ^( methodKey ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ) | ( customAttribute )? ( 'class' )? 'function' methodName ( formalParameterSection )? ( ':' ( customAttribute )? typeDecl )? -> ( customAttribute )? ( 'class' )? ^( 'function' ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? ) ) | ( customAttribute )? 'class' 'operator' methodName ( formalParameterSection )? ( ':' ( customAttribute )? typeDecl )? -> ( customAttribute )? 'class' ^( 'operator' ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? ) ) )
            int alt177 = 3;
            switch (input.LA(1)) {
                case LBRACK: {
                    int LA177_1 = input.LA(2);
                    if ((synpred230_Delphi())) {
                        alt177 = 1;
                    } else if ((synpred236_Delphi())) {
                        alt177 = 2;
                    } else if ((true)) {
                        alt177 = 3;
                    }

                }
                break;
                case CLASS: {
                    int LA177_2 = input.LA(2);
                    if ((synpred230_Delphi())) {
                        alt177 = 1;
                    } else if ((synpred236_Delphi())) {
                        alt177 = 2;
                    } else if ((true)) {
                        alt177 = 3;
                    }

                }
                break;
                case CONSTRUCTOR:
                case DESTRUCTOR:
                case PROCEDURE: {
                    alt177 = 1;
                }
                break;
                case FUNCTION: {
                    alt177 = 2;
                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae =
                            new NoViableAltException("", 177, 0, input);
                    throw nvae;
            }
            switch (alt177) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:408:32: ( customAttribute )? ( 'class' )? methodKey methodName ( formalParameterSection )?
                {
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:408:32: ( customAttribute )?
                    int alt165 = 2;
                    switch (input.LA(1)) {
                        case LBRACK: {
                            alt165 = 1;
                        }
                        break;
                        case CLASS: {
                            int LA165_2 = input.LA(2);
                            if ((synpred227_Delphi())) {
                                alt165 = 1;
                            }
                        }
                        break;
                        case CONSTRUCTOR:
                        case DESTRUCTOR:
                        case PROCEDURE: {
                            int LA165_3 = input.LA(2);
                            if ((synpred227_Delphi())) {
                                alt165 = 1;
                            }
                        }
                        break;
                    }
                    switch (alt165) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:408:33: customAttribute
                        {
                            pushFollow(FOLLOW_customAttribute_in_methodDeclHeading10673);
                            customAttribute493 = customAttribute();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_customAttribute.add(customAttribute493.getTree());
                        }
                        break;

                    }

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:408:51: ( 'class' )?
                    int alt166 = 2;
                    int LA166_0 = input.LA(1);
                    if ((LA166_0 == CLASS)) {
                        alt166 = 1;
                    }
                    switch (alt166) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:408:52: 'class'
                        {
                            string_literal494 = (Token) match(input, CLASS, FOLLOW_CLASS_in_methodDeclHeading10678);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_CLASS.add(string_literal494);

                        }
                        break;

                    }

                    pushFollow(FOLLOW_methodKey_in_methodDeclHeading10683);
                    methodKey495 = methodKey();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_methodKey.add(methodKey495.getTree());
                    pushFollow(FOLLOW_methodName_in_methodDeclHeading10685);
                    methodName496 = methodName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_methodName.add(methodName496.getTree());
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:408:84: ( formalParameterSection )?
                    int alt167 = 2;
                    int LA167_0 = input.LA(1);
                    if ((LA167_0 == LPAREN)) {
                        alt167 = 1;
                    }
                    switch (alt167) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:408:85: formalParameterSection
                        {
                            pushFollow(FOLLOW_formalParameterSection_in_methodDeclHeading10688);
                            formalParameterSection497 = formalParameterSection();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0)
                                stream_formalParameterSection.add(formalParameterSection497.getTree());
                        }
                        break;

                    }

                    // AST REWRITE
                    // elements: customAttribute, methodKey, CLASS, formalParameterSection, methodName
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if (state.backtracking == 0) {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                        root_0 = (Object) adaptor.nil();
                        // 409:30: -> ( customAttribute )? ( 'class' )? ^( methodKey ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) )
                        {
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:409:33: ( customAttribute )?
                            if (stream_customAttribute.hasNext()) {
                                adaptor.addChild(root_0, stream_customAttribute.nextTree());
                            }
                            stream_customAttribute.reset();

                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:409:52: ( 'class' )?
                            if (stream_CLASS.hasNext()) {
                                adaptor.addChild(root_0, stream_CLASS.nextNode());
                            }
                            stream_CLASS.reset();

                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:409:64: ^( methodKey ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) )
                            {
                                Object root_1 = (Object) adaptor.nil();
                                root_1 = (Object) adaptor.becomeRoot(stream_methodKey.nextNode(), root_1);
                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:409:76: ^( TkFunctionName methodName )
                                {
                                    Object root_2 = (Object) adaptor.nil();
                                    root_2 = (Object) adaptor.becomeRoot((Object) adaptor.create(TkFunctionName, "TkFunctionName"), root_2);
                                    adaptor.addChild(root_2, stream_methodName.nextTree());
                                    adaptor.addChild(root_1, root_2);
                                }

                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:409:105: ^( TkFunctionArgs ( formalParameterSection )? )
                                {
                                    Object root_2 = (Object) adaptor.nil();
                                    root_2 = (Object) adaptor.becomeRoot((Object) adaptor.create(TkFunctionArgs, "TkFunctionArgs"), root_2);
                                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:409:122: ( formalParameterSection )?
                                    if (stream_formalParameterSection.hasNext()) {
                                        adaptor.addChild(root_2, stream_formalParameterSection.nextTree());
                                    }
                                    stream_formalParameterSection.reset();

                                    adaptor.addChild(root_1, root_2);
                                }

                                adaptor.addChild(root_0, root_1);
                            }

                        }


                        retval.tree = root_0;
                    }

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:32: ( customAttribute )? ( 'class' )? 'function' methodName ( formalParameterSection )? ( ':' ( customAttribute )? typeDecl )?
                {
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:32: ( customAttribute )?
                    int alt168 = 2;
                    switch (input.LA(1)) {
                        case LBRACK: {
                            alt168 = 1;
                        }
                        break;
                        case CLASS: {
                            int LA168_2 = input.LA(2);
                            if ((synpred231_Delphi())) {
                                alt168 = 1;
                            }
                        }
                        break;
                        case FUNCTION: {
                            int LA168_3 = input.LA(2);
                            if ((synpred231_Delphi())) {
                                alt168 = 1;
                            }
                        }
                        break;
                    }
                    switch (alt168) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:33: customAttribute
                        {
                            pushFollow(FOLLOW_customAttribute_in_methodDeclHeading10786);
                            customAttribute498 = customAttribute();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_customAttribute.add(customAttribute498.getTree());
                        }
                        break;

                    }

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:51: ( 'class' )?
                    int alt169 = 2;
                    int LA169_0 = input.LA(1);
                    if ((LA169_0 == CLASS)) {
                        alt169 = 1;
                    }
                    switch (alt169) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:52: 'class'
                        {
                            string_literal499 = (Token) match(input, CLASS, FOLLOW_CLASS_in_methodDeclHeading10791);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_CLASS.add(string_literal499);

                        }
                        break;

                    }

                    string_literal500 = (Token) match(input, FUNCTION, FOLLOW_FUNCTION_in_methodDeclHeading10795);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_FUNCTION.add(string_literal500);

                    pushFollow(FOLLOW_methodName_in_methodDeclHeading10797);
                    methodName501 = methodName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_methodName.add(methodName501.getTree());
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:84: ( formalParameterSection )?
                    int alt170 = 2;
                    int LA170_0 = input.LA(1);
                    if ((LA170_0 == LPAREN)) {
                        alt170 = 1;
                    }
                    switch (alt170) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:85: formalParameterSection
                        {
                            pushFollow(FOLLOW_formalParameterSection_in_methodDeclHeading10800);
                            formalParameterSection502 = formalParameterSection();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0)
                                stream_formalParameterSection.add(formalParameterSection502.getTree());
                        }
                        break;

                    }

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:110: ( ':' ( customAttribute )? typeDecl )?
                    int alt172 = 2;
                    int LA172_0 = input.LA(1);
                    if ((LA172_0 == COLON)) {
                        alt172 = 1;
                    }
                    switch (alt172) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:111: ':' ( customAttribute )? typeDecl
                        {
                            char_literal503 = (Token) match(input, COLON, FOLLOW_COLON_in_methodDeclHeading10805);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_COLON.add(char_literal503);

                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:115: ( customAttribute )?
                            int alt171 = 2;
                            switch (input.LA(1)) {
                                case LBRACK: {
                                    int LA171_1 = input.LA(2);
                                    if ((synpred234_Delphi())) {
                                        alt171 = 1;
                                    }
                                }
                                break;
                                case PACKED: {
                                    int LA171_2 = input.LA(2);
                                    if ((synpred234_Delphi())) {
                                        alt171 = 1;
                                    }
                                }
                                break;
                                case ARRAY: {
                                    int LA171_3 = input.LA(2);
                                    if ((synpred234_Delphi())) {
                                        alt171 = 1;
                                    }
                                }
                                break;
                                case SET: {
                                    int LA171_4 = input.LA(2);
                                    if ((synpred234_Delphi())) {
                                        alt171 = 1;
                                    }
                                }
                                break;
                                case FILE: {
                                    int LA171_5 = input.LA(2);
                                    if ((synpred234_Delphi())) {
                                        alt171 = 1;
                                    }
                                }
                                break;
                                case CLASS: {
                                    int LA171_6 = input.LA(2);
                                    if ((synpred234_Delphi())) {
                                        alt171 = 1;
                                    }
                                }
                                break;
                                case DISPINTERFACE:
                                case INTERFACE: {
                                    int LA171_7 = input.LA(2);
                                    if ((synpred234_Delphi())) {
                                        alt171 = 1;
                                    }
                                }
                                break;
                                case OBJECT: {
                                    int LA171_8 = input.LA(2);
                                    if ((synpred234_Delphi())) {
                                        alt171 = 1;
                                    }
                                }
                                break;
                                case RECORD: {
                                    int LA171_9 = input.LA(2);
                                    if ((synpred234_Delphi())) {
                                        alt171 = 1;
                                    }
                                }
                                break;
                                case POINTER2: {
                                    int LA171_10 = input.LA(2);
                                    if ((synpred234_Delphi())) {
                                        alt171 = 1;
                                    }
                                }
                                break;
                                case POINTER: {
                                    int LA171_11 = input.LA(2);
                                    if ((synpred234_Delphi())) {
                                        alt171 = 1;
                                    }
                                }
                                break;
                                case STRING: {
                                    int LA171_12 = input.LA(2);
                                    if ((synpred234_Delphi())) {
                                        alt171 = 1;
                                    }
                                }
                                break;
                                case TYPE: {
                                    int LA171_13 = input.LA(2);
                                    if ((synpred234_Delphi())) {
                                        alt171 = 1;
                                    }
                                }
                                break;
                                case ANSISTRING: {
                                    int LA171_14 = input.LA(2);
                                    if ((synpred234_Delphi())) {
                                        alt171 = 1;
                                    }
                                }
                                break;
                                case FUNCTION: {
                                    int LA171_15 = input.LA(2);
                                    if ((synpred234_Delphi())) {
                                        alt171 = 1;
                                    }
                                }
                                break;
                                case PROCEDURE: {
                                    int LA171_16 = input.LA(2);
                                    if ((synpred234_Delphi())) {
                                        alt171 = 1;
                                    }
                                }
                                break;
                                case REFERENCE: {
                                    int LA171_17 = input.LA(2);
                                    if ((synpred234_Delphi())) {
                                        alt171 = 1;
                                    }
                                }
                                break;
                                case VARIANT: {
                                    int LA171_18 = input.LA(2);
                                    if ((synpred234_Delphi())) {
                                        alt171 = 1;
                                    }
                                }
                                break;
                                case TkIdentifier: {
                                    int LA171_19 = input.LA(2);
                                    if ((synpred234_Delphi())) {
                                        alt171 = 1;
                                    }
                                }
                                break;
                                case 200: {
                                    int LA171_20 = input.LA(2);
                                    if ((synpred234_Delphi())) {
                                        alt171 = 1;
                                    }
                                }
                                break;
                                case ADD:
                                case AT:
                                case BREAK:
                                case CONTAINS:
                                case CONTINUE:
                                case DEFAULT:
                                case EXIT:
                                case EXPORT:
                                case FINAL:
                                case IMPLEMENTS:
                                case INDEX:
                                case LOCAL:
                                case MESSAGE:
                                case NAME:
                                case OPERATOR:
                                case OUT:
                                case READ:
                                case READONLY:
                                case REGISTER:
                                case REMOVE:
                                case STORED:
                                case STRICT:
                                case WRITE: {
                                    int LA171_21 = input.LA(2);
                                    if ((synpred234_Delphi())) {
                                        alt171 = 1;
                                    }
                                }
                                break;
                                case LPAREN: {
                                    int LA171_22 = input.LA(2);
                                    if ((synpred234_Delphi())) {
                                        alt171 = 1;
                                    }
                                }
                                break;
                                case AT2: {
                                    int LA171_23 = input.LA(2);
                                    if ((synpred234_Delphi())) {
                                        alt171 = 1;
                                    }
                                }
                                break;
                                case 201: {
                                    int LA171_24 = input.LA(2);
                                    if ((synpred234_Delphi())) {
                                        alt171 = 1;
                                    }
                                }
                                break;
                                case NOT: {
                                    int LA171_25 = input.LA(2);
                                    if ((synpred234_Delphi())) {
                                        alt171 = 1;
                                    }
                                }
                                break;
                                case PLUS: {
                                    int LA171_26 = input.LA(2);
                                    if ((synpred234_Delphi())) {
                                        alt171 = 1;
                                    }
                                }
                                break;
                                case MINUS: {
                                    int LA171_27 = input.LA(2);
                                    if ((synpred234_Delphi())) {
                                        alt171 = 1;
                                    }
                                }
                                break;
                                case TkHexNum:
                                case TkIntNum: {
                                    int LA171_28 = input.LA(2);
                                    if ((synpred234_Delphi())) {
                                        alt171 = 1;
                                    }
                                }
                                break;
                                case TkRealNum: {
                                    int LA171_29 = input.LA(2);
                                    if ((synpred234_Delphi())) {
                                        alt171 = 1;
                                    }
                                }
                                break;
                                case TkAsmHexNum: {
                                    int LA171_30 = input.LA(2);
                                    if ((synpred234_Delphi())) {
                                        alt171 = 1;
                                    }
                                }
                                break;
                                case TRUE: {
                                    int LA171_31 = input.LA(2);
                                    if ((synpred234_Delphi())) {
                                        alt171 = 1;
                                    }
                                }
                                break;
                                case FALSE: {
                                    int LA171_32 = input.LA(2);
                                    if ((synpred234_Delphi())) {
                                        alt171 = 1;
                                    }
                                }
                                break;
                                case NIL: {
                                    int LA171_33 = input.LA(2);
                                    if ((synpred234_Delphi())) {
                                        alt171 = 1;
                                    }
                                }
                                break;
                                case ControlString: {
                                    int LA171_34 = input.LA(2);
                                    if ((synpred234_Delphi())) {
                                        alt171 = 1;
                                    }
                                }
                                break;
                                case QuotedString: {
                                    int LA171_35 = input.LA(2);
                                    if ((synpred234_Delphi())) {
                                        alt171 = 1;
                                    }
                                }
                                break;
                                case INHERITED: {
                                    int LA171_36 = input.LA(2);
                                    if ((synpred234_Delphi())) {
                                        alt171 = 1;
                                    }
                                }
                                break;
                                case DOT: {
                                    int LA171_37 = input.LA(2);
                                    if ((synpred234_Delphi())) {
                                        alt171 = 1;
                                    }
                                }
                                break;
                                case LT: {
                                    int LA171_38 = input.LA(2);
                                    if ((synpred234_Delphi())) {
                                        alt171 = 1;
                                    }
                                }
                                break;
                                case AND:
                                case AS:
                                case DIV:
                                case MOD:
                                case OR:
                                case SHL:
                                case SHR:
                                case SLASH:
                                case STAR:
                                case XOR: {
                                    int LA171_39 = input.LA(2);
                                    if ((synpred234_Delphi())) {
                                        alt171 = 1;
                                    }
                                }
                                break;
                                case EQUAL: {
                                    int LA171_40 = input.LA(2);
                                    if ((synpred234_Delphi())) {
                                        alt171 = 1;
                                    }
                                }
                                break;
                                case GE:
                                case GT:
                                case IN:
                                case IS:
                                case LE:
                                case NOT_EQUAL: {
                                    int LA171_41 = input.LA(2);
                                    if ((synpred234_Delphi())) {
                                        alt171 = 1;
                                    }
                                }
                                break;
                                case DOTDOT: {
                                    int LA171_42 = input.LA(2);
                                    if ((synpred234_Delphi())) {
                                        alt171 = 1;
                                    }
                                }
                                break;
                                case SEMI: {
                                    int LA171_43 = input.LA(2);
                                    if ((synpred234_Delphi())) {
                                        alt171 = 1;
                                    }
                                }
                                break;
                            }
                            switch (alt171) {
                                case 1:
                                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:116: customAttribute
                                {
                                    pushFollow(FOLLOW_customAttribute_in_methodDeclHeading10808);
                                    customAttribute504 = customAttribute();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if (state.backtracking == 0)
                                        stream_customAttribute.add(customAttribute504.getTree());
                                }
                                break;

                            }

                            pushFollow(FOLLOW_typeDecl_in_methodDeclHeading10812);
                            typeDecl505 = typeDecl();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_typeDecl.add(typeDecl505.getTree());
                        }
                        break;

                    }

                    // AST REWRITE
                    // elements: customAttribute, methodName, typeDecl, FUNCTION, customAttribute, CLASS, formalParameterSection
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if (state.backtracking == 0) {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                        root_0 = (Object) adaptor.nil();
                        // 411:30: -> ( customAttribute )? ( 'class' )? ^( 'function' ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? ) )
                        {
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:33: ( customAttribute )?
                            if (stream_customAttribute.hasNext()) {
                                adaptor.addChild(root_0, stream_customAttribute.nextTree());
                            }
                            stream_customAttribute.reset();

                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:52: ( 'class' )?
                            if (stream_CLASS.hasNext()) {
                                adaptor.addChild(root_0, stream_CLASS.nextNode());
                            }
                            stream_CLASS.reset();

                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:63: ^( 'function' ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? ) )
                            {
                                Object root_1 = (Object) adaptor.nil();
                                root_1 = (Object) adaptor.becomeRoot(stream_FUNCTION.nextNode(), root_1);
                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:76: ^( TkFunctionName methodName )
                                {
                                    Object root_2 = (Object) adaptor.nil();
                                    root_2 = (Object) adaptor.becomeRoot((Object) adaptor.create(TkFunctionName, "TkFunctionName"), root_2);
                                    adaptor.addChild(root_2, stream_methodName.nextTree());
                                    adaptor.addChild(root_1, root_2);
                                }

                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:105: ^( TkFunctionArgs ( formalParameterSection )? )
                                {
                                    Object root_2 = (Object) adaptor.nil();
                                    root_2 = (Object) adaptor.becomeRoot((Object) adaptor.create(TkFunctionArgs, "TkFunctionArgs"), root_2);
                                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:122: ( formalParameterSection )?
                                    if (stream_formalParameterSection.hasNext()) {
                                        adaptor.addChild(root_2, stream_formalParameterSection.nextTree());
                                    }
                                    stream_formalParameterSection.reset();

                                    adaptor.addChild(root_1, root_2);
                                }

                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:149: ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? )
                                {
                                    Object root_2 = (Object) adaptor.nil();
                                    root_2 = (Object) adaptor.becomeRoot((Object) adaptor.create(TkFunctionReturn, "TkFunctionReturn"), root_2);
                                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:168: ( customAttribute )?
                                    if (stream_customAttribute.hasNext()) {
                                        adaptor.addChild(root_2, stream_customAttribute.nextTree());
                                    }
                                    stream_customAttribute.reset();

                                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:187: ( typeDecl )?
                                    if (stream_typeDecl.hasNext()) {
                                        adaptor.addChild(root_2, stream_typeDecl.nextTree());
                                    }
                                    stream_typeDecl.reset();

                                    adaptor.addChild(root_1, root_2);
                                }

                                adaptor.addChild(root_0, root_1);
                            }

                        }


                        retval.tree = root_0;
                    }

                }
                break;
                case 3:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:32: ( customAttribute )? 'class' 'operator' methodName ( formalParameterSection )? ( ':' ( customAttribute )? typeDecl )?
                {
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:32: ( customAttribute )?
                    int alt173 = 2;
                    int LA173_0 = input.LA(1);
                    if ((LA173_0 == LBRACK)) {
                        alt173 = 1;
                    } else if ((LA173_0 == CLASS)) {
                        int LA173_2 = input.LA(2);
                        if ((synpred237_Delphi())) {
                            alt173 = 1;
                        }
                    }
                    switch (alt173) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:33: customAttribute
                        {
                            pushFollow(FOLLOW_customAttribute_in_methodDeclHeading10921);
                            customAttribute506 = customAttribute();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_customAttribute.add(customAttribute506.getTree());
                        }
                        break;

                    }

                    string_literal507 = (Token) match(input, CLASS, FOLLOW_CLASS_in_methodDeclHeading10925);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_CLASS.add(string_literal507);

                    string_literal508 = (Token) match(input, OPERATOR, FOLLOW_OPERATOR_in_methodDeclHeading10927);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_OPERATOR.add(string_literal508);

                    pushFollow(FOLLOW_methodName_in_methodDeclHeading10929);
                    methodName509 = methodName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_methodName.add(methodName509.getTree());
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:81: ( formalParameterSection )?
                    int alt174 = 2;
                    int LA174_0 = input.LA(1);
                    if ((LA174_0 == LPAREN)) {
                        alt174 = 1;
                    }
                    switch (alt174) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:82: formalParameterSection
                        {
                            pushFollow(FOLLOW_formalParameterSection_in_methodDeclHeading10932);
                            formalParameterSection510 = formalParameterSection();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0)
                                stream_formalParameterSection.add(formalParameterSection510.getTree());
                        }
                        break;

                    }

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:107: ( ':' ( customAttribute )? typeDecl )?
                    int alt176 = 2;
                    int LA176_0 = input.LA(1);
                    if ((LA176_0 == COLON)) {
                        alt176 = 1;
                    }
                    switch (alt176) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:108: ':' ( customAttribute )? typeDecl
                        {
                            char_literal511 = (Token) match(input, COLON, FOLLOW_COLON_in_methodDeclHeading10937);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_COLON.add(char_literal511);

                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:112: ( customAttribute )?
                            int alt175 = 2;
                            switch (input.LA(1)) {
                                case LBRACK: {
                                    int LA175_1 = input.LA(2);
                                    if ((synpred239_Delphi())) {
                                        alt175 = 1;
                                    }
                                }
                                break;
                                case PACKED: {
                                    int LA175_2 = input.LA(2);
                                    if ((synpred239_Delphi())) {
                                        alt175 = 1;
                                    }
                                }
                                break;
                                case ARRAY: {
                                    int LA175_3 = input.LA(2);
                                    if ((synpred239_Delphi())) {
                                        alt175 = 1;
                                    }
                                }
                                break;
                                case SET: {
                                    int LA175_4 = input.LA(2);
                                    if ((synpred239_Delphi())) {
                                        alt175 = 1;
                                    }
                                }
                                break;
                                case FILE: {
                                    int LA175_5 = input.LA(2);
                                    if ((synpred239_Delphi())) {
                                        alt175 = 1;
                                    }
                                }
                                break;
                                case CLASS: {
                                    int LA175_6 = input.LA(2);
                                    if ((synpred239_Delphi())) {
                                        alt175 = 1;
                                    }
                                }
                                break;
                                case DISPINTERFACE:
                                case INTERFACE: {
                                    int LA175_7 = input.LA(2);
                                    if ((synpred239_Delphi())) {
                                        alt175 = 1;
                                    }
                                }
                                break;
                                case OBJECT: {
                                    int LA175_8 = input.LA(2);
                                    if ((synpred239_Delphi())) {
                                        alt175 = 1;
                                    }
                                }
                                break;
                                case RECORD: {
                                    int LA175_9 = input.LA(2);
                                    if ((synpred239_Delphi())) {
                                        alt175 = 1;
                                    }
                                }
                                break;
                                case POINTER2: {
                                    int LA175_10 = input.LA(2);
                                    if ((synpred239_Delphi())) {
                                        alt175 = 1;
                                    }
                                }
                                break;
                                case POINTER: {
                                    int LA175_11 = input.LA(2);
                                    if ((synpred239_Delphi())) {
                                        alt175 = 1;
                                    }
                                }
                                break;
                                case STRING: {
                                    int LA175_12 = input.LA(2);
                                    if ((synpred239_Delphi())) {
                                        alt175 = 1;
                                    }
                                }
                                break;
                                case TYPE: {
                                    int LA175_13 = input.LA(2);
                                    if ((synpred239_Delphi())) {
                                        alt175 = 1;
                                    }
                                }
                                break;
                                case ANSISTRING: {
                                    int LA175_14 = input.LA(2);
                                    if ((synpred239_Delphi())) {
                                        alt175 = 1;
                                    }
                                }
                                break;
                                case FUNCTION: {
                                    int LA175_15 = input.LA(2);
                                    if ((synpred239_Delphi())) {
                                        alt175 = 1;
                                    }
                                }
                                break;
                                case PROCEDURE: {
                                    int LA175_16 = input.LA(2);
                                    if ((synpred239_Delphi())) {
                                        alt175 = 1;
                                    }
                                }
                                break;
                                case REFERENCE: {
                                    int LA175_17 = input.LA(2);
                                    if ((synpred239_Delphi())) {
                                        alt175 = 1;
                                    }
                                }
                                break;
                                case VARIANT: {
                                    int LA175_18 = input.LA(2);
                                    if ((synpred239_Delphi())) {
                                        alt175 = 1;
                                    }
                                }
                                break;
                                case TkIdentifier: {
                                    int LA175_19 = input.LA(2);
                                    if ((synpred239_Delphi())) {
                                        alt175 = 1;
                                    }
                                }
                                break;
                                case 200: {
                                    int LA175_20 = input.LA(2);
                                    if ((synpred239_Delphi())) {
                                        alt175 = 1;
                                    }
                                }
                                break;
                                case ADD:
                                case AT:
                                case BREAK:
                                case CONTAINS:
                                case CONTINUE:
                                case DEFAULT:
                                case EXIT:
                                case EXPORT:
                                case FINAL:
                                case IMPLEMENTS:
                                case INDEX:
                                case LOCAL:
                                case MESSAGE:
                                case NAME:
                                case OPERATOR:
                                case OUT:
                                case READ:
                                case READONLY:
                                case REGISTER:
                                case REMOVE:
                                case STORED:
                                case STRICT:
                                case WRITE: {
                                    int LA175_21 = input.LA(2);
                                    if ((synpred239_Delphi())) {
                                        alt175 = 1;
                                    }
                                }
                                break;
                                case LPAREN: {
                                    int LA175_22 = input.LA(2);
                                    if ((synpred239_Delphi())) {
                                        alt175 = 1;
                                    }
                                }
                                break;
                                case AT2: {
                                    int LA175_23 = input.LA(2);
                                    if ((synpred239_Delphi())) {
                                        alt175 = 1;
                                    }
                                }
                                break;
                                case 201: {
                                    int LA175_24 = input.LA(2);
                                    if ((synpred239_Delphi())) {
                                        alt175 = 1;
                                    }
                                }
                                break;
                                case NOT: {
                                    int LA175_25 = input.LA(2);
                                    if ((synpred239_Delphi())) {
                                        alt175 = 1;
                                    }
                                }
                                break;
                                case PLUS: {
                                    int LA175_26 = input.LA(2);
                                    if ((synpred239_Delphi())) {
                                        alt175 = 1;
                                    }
                                }
                                break;
                                case MINUS: {
                                    int LA175_27 = input.LA(2);
                                    if ((synpred239_Delphi())) {
                                        alt175 = 1;
                                    }
                                }
                                break;
                                case TkHexNum:
                                case TkIntNum: {
                                    int LA175_28 = input.LA(2);
                                    if ((synpred239_Delphi())) {
                                        alt175 = 1;
                                    }
                                }
                                break;
                                case TkRealNum: {
                                    int LA175_29 = input.LA(2);
                                    if ((synpred239_Delphi())) {
                                        alt175 = 1;
                                    }
                                }
                                break;
                                case TkAsmHexNum: {
                                    int LA175_30 = input.LA(2);
                                    if ((synpred239_Delphi())) {
                                        alt175 = 1;
                                    }
                                }
                                break;
                                case TRUE: {
                                    int LA175_31 = input.LA(2);
                                    if ((synpred239_Delphi())) {
                                        alt175 = 1;
                                    }
                                }
                                break;
                                case FALSE: {
                                    int LA175_32 = input.LA(2);
                                    if ((synpred239_Delphi())) {
                                        alt175 = 1;
                                    }
                                }
                                break;
                                case NIL: {
                                    int LA175_33 = input.LA(2);
                                    if ((synpred239_Delphi())) {
                                        alt175 = 1;
                                    }
                                }
                                break;
                                case ControlString: {
                                    int LA175_34 = input.LA(2);
                                    if ((synpred239_Delphi())) {
                                        alt175 = 1;
                                    }
                                }
                                break;
                                case QuotedString: {
                                    int LA175_35 = input.LA(2);
                                    if ((synpred239_Delphi())) {
                                        alt175 = 1;
                                    }
                                }
                                break;
                                case INHERITED: {
                                    int LA175_36 = input.LA(2);
                                    if ((synpred239_Delphi())) {
                                        alt175 = 1;
                                    }
                                }
                                break;
                                case DOT: {
                                    int LA175_37 = input.LA(2);
                                    if ((synpred239_Delphi())) {
                                        alt175 = 1;
                                    }
                                }
                                break;
                                case LT: {
                                    int LA175_38 = input.LA(2);
                                    if ((synpred239_Delphi())) {
                                        alt175 = 1;
                                    }
                                }
                                break;
                                case AND:
                                case AS:
                                case DIV:
                                case MOD:
                                case OR:
                                case SHL:
                                case SHR:
                                case SLASH:
                                case STAR:
                                case XOR: {
                                    int LA175_39 = input.LA(2);
                                    if ((synpred239_Delphi())) {
                                        alt175 = 1;
                                    }
                                }
                                break;
                                case EQUAL: {
                                    int LA175_40 = input.LA(2);
                                    if ((synpred239_Delphi())) {
                                        alt175 = 1;
                                    }
                                }
                                break;
                                case GE:
                                case GT:
                                case IN:
                                case IS:
                                case LE:
                                case NOT_EQUAL: {
                                    int LA175_41 = input.LA(2);
                                    if ((synpred239_Delphi())) {
                                        alt175 = 1;
                                    }
                                }
                                break;
                                case DOTDOT: {
                                    int LA175_42 = input.LA(2);
                                    if ((synpred239_Delphi())) {
                                        alt175 = 1;
                                    }
                                }
                                break;
                                case SEMI: {
                                    int LA175_43 = input.LA(2);
                                    if ((synpred239_Delphi())) {
                                        alt175 = 1;
                                    }
                                }
                                break;
                            }
                            switch (alt175) {
                                case 1:
                                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:113: customAttribute
                                {
                                    pushFollow(FOLLOW_customAttribute_in_methodDeclHeading10940);
                                    customAttribute512 = customAttribute();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if (state.backtracking == 0)
                                        stream_customAttribute.add(customAttribute512.getTree());
                                }
                                break;

                            }

                            pushFollow(FOLLOW_typeDecl_in_methodDeclHeading10944);
                            typeDecl513 = typeDecl();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_typeDecl.add(typeDecl513.getTree());
                        }
                        break;

                    }

                    // AST REWRITE
                    // elements: CLASS, methodName, customAttribute, customAttribute, OPERATOR, formalParameterSection, typeDecl
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if (state.backtracking == 0) {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                        root_0 = (Object) adaptor.nil();
                        // 413:30: -> ( customAttribute )? 'class' ^( 'operator' ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? ) )
                        {
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:33: ( customAttribute )?
                            if (stream_customAttribute.hasNext()) {
                                adaptor.addChild(root_0, stream_customAttribute.nextTree());
                            }
                            stream_customAttribute.reset();

                            adaptor.addChild(root_0, stream_CLASS.nextNode());
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:60: ^( 'operator' ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? ) )
                            {
                                Object root_1 = (Object) adaptor.nil();
                                root_1 = (Object) adaptor.becomeRoot(stream_OPERATOR.nextNode(), root_1);
                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:73: ^( TkFunctionName methodName )
                                {
                                    Object root_2 = (Object) adaptor.nil();
                                    root_2 = (Object) adaptor.becomeRoot((Object) adaptor.create(TkFunctionName, "TkFunctionName"), root_2);
                                    adaptor.addChild(root_2, stream_methodName.nextTree());
                                    adaptor.addChild(root_1, root_2);
                                }

                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:102: ^( TkFunctionArgs ( formalParameterSection )? )
                                {
                                    Object root_2 = (Object) adaptor.nil();
                                    root_2 = (Object) adaptor.becomeRoot((Object) adaptor.create(TkFunctionArgs, "TkFunctionArgs"), root_2);
                                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:119: ( formalParameterSection )?
                                    if (stream_formalParameterSection.hasNext()) {
                                        adaptor.addChild(root_2, stream_formalParameterSection.nextTree());
                                    }
                                    stream_formalParameterSection.reset();

                                    adaptor.addChild(root_1, root_2);
                                }

                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:146: ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? )
                                {
                                    Object root_2 = (Object) adaptor.nil();
                                    root_2 = (Object) adaptor.becomeRoot((Object) adaptor.create(TkFunctionReturn, "TkFunctionReturn"), root_2);
                                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:165: ( customAttribute )?
                                    if (stream_customAttribute.hasNext()) {
                                        adaptor.addChild(root_2, stream_customAttribute.nextTree());
                                    }
                                    stream_customAttribute.reset();

                                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:184: ( typeDecl )?
                                    if (stream_typeDecl.hasNext()) {
                                        adaptor.addChild(root_2, stream_typeDecl.nextTree());
                                    }
                                    stream_typeDecl.reset();

                                    adaptor.addChild(root_1, root_2);
                                }

                                adaptor.addChild(root_0, root_1);
                            }

                        }


                        retval.tree = root_0;
                    }

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 103, methodDeclHeading_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "methodKey"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:415:1: methodKey : ( 'procedure' | 'constructor' | 'destructor' );
    public final DelphiParser.methodKey_return methodKey() throws RecognitionException {
        DelphiParser.methodKey_return retval = new DelphiParser.methodKey_return();
        retval.start = input.LT(1);
        int methodKey_StartIndex = input.index();

        Object root_0 = null;

        Token set514 = null;

        Object set514_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 104)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:415:30: ( 'procedure' | 'constructor' | 'destructor' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
            {
                root_0 = (Object) adaptor.nil();


                set514 = input.LT(1);
                if (input.LA(1) == CONSTRUCTOR || input.LA(1) == DESTRUCTOR || input.LA(1) == PROCEDURE) {
                    input.consume();
                    if (state.backtracking == 0) adaptor.addChild(root_0, (Object) adaptor.create(set514));
                    state.errorRecovery = false;
                    state.failed = false;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 104, methodKey_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "methodName"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:1: methodName : ident ( genericDefinition )? ( '.' ident ( genericDefinition )? )? '.' ident ( genericDefinition )? ;
    public final DelphiParser.methodName_return methodName() throws RecognitionException {
        DelphiParser.methodName_return retval = new DelphiParser.methodName_return();
        retval.start = input.LT(1);
        int methodName_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal517 = null;
        Token char_literal520 = null;
        ParserRuleReturnScope ident515 = null;
        ParserRuleReturnScope genericDefinition516 = null;
        ParserRuleReturnScope ident518 = null;
        ParserRuleReturnScope genericDefinition519 = null;
        ParserRuleReturnScope ident521 = null;
        ParserRuleReturnScope genericDefinition522 = null;

        Object char_literal517_tree = null;
        Object char_literal520_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 105)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:30: ( ident ( genericDefinition )? ( '.' ident ( genericDefinition )? )? '.' ident ( genericDefinition )? )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:32: ident ( genericDefinition )? ( '.' ident ( genericDefinition )? )? '.' ident ( genericDefinition )?
            {
                root_0 = (Object) adaptor.nil();


                pushFollow(FOLLOW_ident_in_methodName11207);
                ident515 = ident();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, ident515.getTree());

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:38: ( genericDefinition )?
                int alt178 = 2;
                int LA178_0 = input.LA(1);
                if ((LA178_0 == LT)) {
                    alt178 = 1;
                }
                switch (alt178) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:39: genericDefinition
                    {
                        pushFollow(FOLLOW_genericDefinition_in_methodName11210);
                        genericDefinition516 = genericDefinition();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) adaptor.addChild(root_0, genericDefinition516.getTree());

                    }
                    break;

                }

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:59: ( '.' ident ( genericDefinition )? )?
                int alt180 = 2;
                alt180 = dfa180.predict(input);
                switch (alt180) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:60: '.' ident ( genericDefinition )?
                    {
                        char_literal517 = (Token) match(input, DOT, FOLLOW_DOT_in_methodName11215);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) {
                            char_literal517_tree = (Object) adaptor.create(char_literal517);
                            adaptor.addChild(root_0, char_literal517_tree);
                        }

                        pushFollow(FOLLOW_ident_in_methodName11217);
                        ident518 = ident();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) adaptor.addChild(root_0, ident518.getTree());

                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:70: ( genericDefinition )?
                        int alt179 = 2;
                        int LA179_0 = input.LA(1);
                        if ((LA179_0 == LT)) {
                            alt179 = 1;
                        }
                        switch (alt179) {
                            case 1:
                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:71: genericDefinition
                            {
                                pushFollow(FOLLOW_genericDefinition_in_methodName11220);
                                genericDefinition519 = genericDefinition();
                                state._fsp--;
                                if (state.failed) return retval;
                                if (state.backtracking == 0) adaptor.addChild(root_0, genericDefinition519.getTree());

                            }
                            break;

                        }

                    }
                    break;

                }

                char_literal520 = (Token) match(input, DOT, FOLLOW_DOT_in_methodName11226);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    char_literal520_tree = (Object) adaptor.create(char_literal520);
                    adaptor.addChild(root_0, char_literal520_tree);
                }

                pushFollow(FOLLOW_ident_in_methodName11228);
                ident521 = ident();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, ident521.getTree());

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:103: ( genericDefinition )?
                int alt181 = 2;
                int LA181_0 = input.LA(1);
                if ((LA181_0 == LT)) {
                    alt181 = 1;
                }
                switch (alt181) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:104: genericDefinition
                    {
                        pushFollow(FOLLOW_genericDefinition_in_methodName11231);
                        genericDefinition522 = genericDefinition();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) adaptor.addChild(root_0, genericDefinition522.getTree());

                    }
                    break;

                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 105, methodName_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "procDecl"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:1: procDecl : procDeclHeading ';' ( functionDirective )* ( procBody )? -> procDeclHeading ( procBody )? ;
    public final DelphiParser.procDecl_return procDecl() throws RecognitionException {
        DelphiParser.procDecl_return retval = new DelphiParser.procDecl_return();
        retval.start = input.LT(1);
        int procDecl_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal524 = null;
        ParserRuleReturnScope procDeclHeading523 = null;
        ParserRuleReturnScope functionDirective525 = null;
        ParserRuleReturnScope procBody526 = null;

        Object char_literal524_tree = null;
        RewriteRuleTokenStream stream_SEMI = new RewriteRuleTokenStream(adaptor, "token SEMI");
        RewriteRuleSubtreeStream stream_procDeclHeading = new RewriteRuleSubtreeStream(adaptor, "rule procDeclHeading");
        RewriteRuleSubtreeStream stream_functionDirective = new RewriteRuleSubtreeStream(adaptor, "rule functionDirective");
        RewriteRuleSubtreeStream stream_procBody = new RewriteRuleSubtreeStream(adaptor, "rule procBody");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 106)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:30: ( procDeclHeading ';' ( functionDirective )* ( procBody )? -> procDeclHeading ( procBody )? )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:32: procDeclHeading ';' ( functionDirective )* ( procBody )?
            {
                pushFollow(FOLLOW_procDeclHeading_in_procDecl11319);
                procDeclHeading523 = procDeclHeading();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_procDeclHeading.add(procDeclHeading523.getTree());
                char_literal524 = (Token) match(input, SEMI, FOLLOW_SEMI_in_procDecl11321);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_SEMI.add(char_literal524);

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:52: ( functionDirective )*
                loop182:
                while (true) {
                    int alt182 = 2;
                    alt182 = dfa182.predict(input);
                    switch (alt182) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:53: functionDirective
                        {
                            pushFollow(FOLLOW_functionDirective_in_procDecl11324);
                            functionDirective525 = functionDirective();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_functionDirective.add(functionDirective525.getTree());
                        }
                        break;

                        default:
                            break loop182;
                    }
                }

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:73: ( procBody )?
                int alt183 = 2;
                switch (input.LA(1)) {
                    case FORWARD: {
                        alt183 = 1;
                    }
                    break;
                    case EXTERNAL: {
                        int LA183_2 = input.LA(2);
                        if ((synpred248_Delphi())) {
                            alt183 = 1;
                        }
                    }
                    break;
                    case LABEL: {
                        int LA183_3 = input.LA(2);
                        if ((synpred248_Delphi())) {
                            alt183 = 1;
                        }
                    }
                    break;
                    case CONST:
                    case RESOURCESTRING: {
                        int LA183_4 = input.LA(2);
                        if ((synpred248_Delphi())) {
                            alt183 = 1;
                        }
                    }
                    break;
                    case TYPE: {
                        int LA183_5 = input.LA(2);
                        if ((synpred248_Delphi())) {
                            alt183 = 1;
                        }
                    }
                    break;
                    case THREADVAR:
                    case VAR: {
                        int LA183_6 = input.LA(2);
                        if ((synpred248_Delphi())) {
                            alt183 = 1;
                        }
                    }
                    break;
                    case PROCEDURE: {
                        int LA183_7 = input.LA(2);
                        if ((synpred248_Delphi())) {
                            alt183 = 1;
                        }
                    }
                    break;
                    case FUNCTION: {
                        int LA183_8 = input.LA(2);
                        if ((synpred248_Delphi())) {
                            alt183 = 1;
                        }
                    }
                    break;
                    case LBRACK: {
                        int LA183_9 = input.LA(2);
                        if ((synpred248_Delphi())) {
                            alt183 = 1;
                        }
                    }
                    break;
                    case CLASS: {
                        int LA183_10 = input.LA(2);
                        if ((synpred248_Delphi())) {
                            alt183 = 1;
                        }
                    }
                    break;
                    case CONSTRUCTOR:
                    case DESTRUCTOR: {
                        int LA183_11 = input.LA(2);
                        if ((synpred248_Delphi())) {
                            alt183 = 1;
                        }
                    }
                    break;
                    case EXPORTS: {
                        int LA183_12 = input.LA(2);
                        if ((synpred248_Delphi())) {
                            alt183 = 1;
                        }
                    }
                    break;
                    case BEGIN: {
                        int LA183_13 = input.LA(2);
                        if ((synpred248_Delphi())) {
                            alt183 = 1;
                        }
                    }
                    break;
                    case ASM: {
                        int LA183_14 = input.LA(2);
                        if ((synpred248_Delphi())) {
                            alt183 = 1;
                        }
                    }
                    break;
                    case SEMI: {
                        int LA183_15 = input.LA(2);
                        if ((synpred248_Delphi())) {
                            alt183 = 1;
                        }
                    }
                    break;
                }
                switch (alt183) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:74: procBody
                    {
                        pushFollow(FOLLOW_procBody_in_procDecl11329);
                        procBody526 = procBody();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_procBody.add(procBody526.getTree());
                    }
                    break;

                }

                // AST REWRITE
                // elements: procDeclHeading, procBody
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 421:85: -> procDeclHeading ( procBody )?
                    {
                        adaptor.addChild(root_0, stream_procDeclHeading.nextTree());
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:104: ( procBody )?
                        if (stream_procBody.hasNext()) {
                            adaptor.addChild(root_0, stream_procBody.nextTree());
                        }
                        stream_procBody.reset();

                    }


                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 106, procDecl_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "procDeclHeading"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:1: procDeclHeading : ( ( customAttribute )? 'procedure' ident ( formalParameterSection )? -> ^( 'procedure' ^( TkFunctionName ident ) ^( TkFunctionArgs ( formalParameterSection )? ) ) | ( customAttribute )? 'function' ident ( formalParameterSection )? ':' typeDecl -> ^( 'function' ^( TkFunctionName ident ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn typeDecl ) ) );
    public final DelphiParser.procDeclHeading_return procDeclHeading() throws RecognitionException {
        DelphiParser.procDeclHeading_return retval = new DelphiParser.procDeclHeading_return();
        retval.start = input.LT(1);
        int procDeclHeading_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal528 = null;
        Token string_literal532 = null;
        Token char_literal535 = null;
        ParserRuleReturnScope customAttribute527 = null;
        ParserRuleReturnScope ident529 = null;
        ParserRuleReturnScope formalParameterSection530 = null;
        ParserRuleReturnScope customAttribute531 = null;
        ParserRuleReturnScope ident533 = null;
        ParserRuleReturnScope formalParameterSection534 = null;
        ParserRuleReturnScope typeDecl536 = null;

        Object string_literal528_tree = null;
        Object string_literal532_tree = null;
        Object char_literal535_tree = null;
        RewriteRuleTokenStream stream_PROCEDURE = new RewriteRuleTokenStream(adaptor, "token PROCEDURE");
        RewriteRuleTokenStream stream_COLON = new RewriteRuleTokenStream(adaptor, "token COLON");
        RewriteRuleTokenStream stream_FUNCTION = new RewriteRuleTokenStream(adaptor, "token FUNCTION");
        RewriteRuleSubtreeStream stream_customAttribute = new RewriteRuleSubtreeStream(adaptor, "rule customAttribute");
        RewriteRuleSubtreeStream stream_ident = new RewriteRuleSubtreeStream(adaptor, "rule ident");
        RewriteRuleSubtreeStream stream_formalParameterSection = new RewriteRuleSubtreeStream(adaptor, "rule formalParameterSection");
        RewriteRuleSubtreeStream stream_typeDecl = new RewriteRuleSubtreeStream(adaptor, "rule typeDecl");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 107)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:30: ( ( customAttribute )? 'procedure' ident ( formalParameterSection )? -> ^( 'procedure' ^( TkFunctionName ident ) ^( TkFunctionArgs ( formalParameterSection )? ) ) | ( customAttribute )? 'function' ident ( formalParameterSection )? ':' typeDecl -> ^( 'function' ^( TkFunctionName ident ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn typeDecl ) ) )
            int alt188 = 2;
            switch (input.LA(1)) {
                case LBRACK: {
                    int LA188_1 = input.LA(2);
                    if ((synpred251_Delphi())) {
                        alt188 = 1;
                    } else if ((true)) {
                        alt188 = 2;
                    }

                }
                break;
                case PROCEDURE: {
                    alt188 = 1;
                }
                break;
                case FUNCTION: {
                    alt188 = 2;
                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae =
                            new NoViableAltException("", 188, 0, input);
                    throw nvae;
            }
            switch (alt188) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:32: ( customAttribute )? 'procedure' ident ( formalParameterSection )?
                {
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:32: ( customAttribute )?
                    int alt184 = 2;
                    int LA184_0 = input.LA(1);
                    if ((LA184_0 == LBRACK)) {
                        alt184 = 1;
                    } else if ((LA184_0 == PROCEDURE)) {
                        int LA184_2 = input.LA(2);
                        if ((synpred249_Delphi())) {
                            alt184 = 1;
                        }
                    }
                    switch (alt184) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:33: customAttribute
                        {
                            pushFollow(FOLLOW_customAttribute_in_procDeclHeading11395);
                            customAttribute527 = customAttribute();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_customAttribute.add(customAttribute527.getTree());
                        }
                        break;

                    }

                    string_literal528 = (Token) match(input, PROCEDURE, FOLLOW_PROCEDURE_in_procDeclHeading11399);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_PROCEDURE.add(string_literal528);

                    pushFollow(FOLLOW_ident_in_procDeclHeading11401);
                    ident529 = ident();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_ident.add(ident529.getTree());
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:69: ( formalParameterSection )?
                    int alt185 = 2;
                    int LA185_0 = input.LA(1);
                    if ((LA185_0 == LPAREN)) {
                        alt185 = 1;
                    }
                    switch (alt185) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:70: formalParameterSection
                        {
                            pushFollow(FOLLOW_formalParameterSection_in_procDeclHeading11404);
                            formalParameterSection530 = formalParameterSection();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0)
                                stream_formalParameterSection.add(formalParameterSection530.getTree());
                        }
                        break;

                    }

                    // AST REWRITE
                    // elements: ident, PROCEDURE, formalParameterSection
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if (state.backtracking == 0) {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                        root_0 = (Object) adaptor.nil();
                        // 424:30: -> ^( 'procedure' ^( TkFunctionName ident ) ^( TkFunctionArgs ( formalParameterSection )? ) )
                        {
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:424:33: ^( 'procedure' ^( TkFunctionName ident ) ^( TkFunctionArgs ( formalParameterSection )? ) )
                            {
                                Object root_1 = (Object) adaptor.nil();
                                root_1 = (Object) adaptor.becomeRoot(stream_PROCEDURE.nextNode(), root_1);
                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:424:47: ^( TkFunctionName ident )
                                {
                                    Object root_2 = (Object) adaptor.nil();
                                    root_2 = (Object) adaptor.becomeRoot((Object) adaptor.create(TkFunctionName, "TkFunctionName"), root_2);
                                    adaptor.addChild(root_2, stream_ident.nextTree());
                                    adaptor.addChild(root_1, root_2);
                                }

                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:424:71: ^( TkFunctionArgs ( formalParameterSection )? )
                                {
                                    Object root_2 = (Object) adaptor.nil();
                                    root_2 = (Object) adaptor.becomeRoot((Object) adaptor.create(TkFunctionArgs, "TkFunctionArgs"), root_2);
                                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:424:88: ( formalParameterSection )?
                                    if (stream_formalParameterSection.hasNext()) {
                                        adaptor.addChild(root_2, stream_formalParameterSection.nextTree());
                                    }
                                    stream_formalParameterSection.reset();

                                    adaptor.addChild(root_1, root_2);
                                }

                                adaptor.addChild(root_0, root_1);
                            }

                        }


                        retval.tree = root_0;
                    }

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:425:32: ( customAttribute )? 'function' ident ( formalParameterSection )? ':' typeDecl
                {
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:425:32: ( customAttribute )?
                    int alt186 = 2;
                    int LA186_0 = input.LA(1);
                    if ((LA186_0 == LBRACK)) {
                        alt186 = 1;
                    } else if ((LA186_0 == FUNCTION)) {
                        int LA186_2 = input.LA(2);
                        if ((synpred252_Delphi())) {
                            alt186 = 1;
                        }
                    }
                    switch (alt186) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:425:33: customAttribute
                        {
                            pushFollow(FOLLOW_customAttribute_in_procDeclHeading11504);
                            customAttribute531 = customAttribute();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_customAttribute.add(customAttribute531.getTree());
                        }
                        break;

                    }

                    string_literal532 = (Token) match(input, FUNCTION, FOLLOW_FUNCTION_in_procDeclHeading11508);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_FUNCTION.add(string_literal532);

                    pushFollow(FOLLOW_ident_in_procDeclHeading11510);
                    ident533 = ident();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_ident.add(ident533.getTree());
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:425:68: ( formalParameterSection )?
                    int alt187 = 2;
                    int LA187_0 = input.LA(1);
                    if ((LA187_0 == LPAREN)) {
                        alt187 = 1;
                    }
                    switch (alt187) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:425:69: formalParameterSection
                        {
                            pushFollow(FOLLOW_formalParameterSection_in_procDeclHeading11513);
                            formalParameterSection534 = formalParameterSection();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0)
                                stream_formalParameterSection.add(formalParameterSection534.getTree());
                        }
                        break;

                    }

                    char_literal535 = (Token) match(input, COLON, FOLLOW_COLON_in_procDeclHeading11517);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_COLON.add(char_literal535);

                    pushFollow(FOLLOW_typeDecl_in_procDeclHeading11519);
                    typeDecl536 = typeDecl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_typeDecl.add(typeDecl536.getTree());
                    // AST REWRITE
                    // elements: formalParameterSection, FUNCTION, typeDecl, ident
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if (state.backtracking == 0) {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                        root_0 = (Object) adaptor.nil();
                        // 426:30: -> ^( 'function' ^( TkFunctionName ident ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn typeDecl ) )
                        {
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:426:33: ^( 'function' ^( TkFunctionName ident ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn typeDecl ) )
                            {
                                Object root_1 = (Object) adaptor.nil();
                                root_1 = (Object) adaptor.becomeRoot(stream_FUNCTION.nextNode(), root_1);
                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:426:46: ^( TkFunctionName ident )
                                {
                                    Object root_2 = (Object) adaptor.nil();
                                    root_2 = (Object) adaptor.becomeRoot((Object) adaptor.create(TkFunctionName, "TkFunctionName"), root_2);
                                    adaptor.addChild(root_2, stream_ident.nextTree());
                                    adaptor.addChild(root_1, root_2);
                                }

                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:426:70: ^( TkFunctionArgs ( formalParameterSection )? )
                                {
                                    Object root_2 = (Object) adaptor.nil();
                                    root_2 = (Object) adaptor.becomeRoot((Object) adaptor.create(TkFunctionArgs, "TkFunctionArgs"), root_2);
                                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:426:87: ( formalParameterSection )?
                                    if (stream_formalParameterSection.hasNext()) {
                                        adaptor.addChild(root_2, stream_formalParameterSection.nextTree());
                                    }
                                    stream_formalParameterSection.reset();

                                    adaptor.addChild(root_1, root_2);
                                }

                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:426:114: ^( TkFunctionReturn typeDecl )
                                {
                                    Object root_2 = (Object) adaptor.nil();
                                    root_2 = (Object) adaptor.becomeRoot((Object) adaptor.create(TkFunctionReturn, "TkFunctionReturn"), root_2);
                                    adaptor.addChild(root_2, stream_typeDecl.nextTree());
                                    adaptor.addChild(root_1, root_2);
                                }

                                adaptor.addChild(root_0, root_1);
                            }

                        }


                        retval.tree = root_0;
                    }

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 107, procDeclHeading_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "formalParameterSection"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:428:1: formalParameterSection : '(' ( formalParameterList )? ')' -> ( formalParameterList )? ;
    public final DelphiParser.formalParameterSection_return formalParameterSection() throws RecognitionException {
        DelphiParser.formalParameterSection_return retval = new DelphiParser.formalParameterSection_return();
        retval.start = input.LT(1);
        int formalParameterSection_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal537 = null;
        Token char_literal539 = null;
        ParserRuleReturnScope formalParameterList538 = null;

        Object char_literal537_tree = null;
        Object char_literal539_tree = null;
        RewriteRuleTokenStream stream_LPAREN = new RewriteRuleTokenStream(adaptor, "token LPAREN");
        RewriteRuleTokenStream stream_RPAREN = new RewriteRuleTokenStream(adaptor, "token RPAREN");
        RewriteRuleSubtreeStream stream_formalParameterList = new RewriteRuleSubtreeStream(adaptor, "rule formalParameterList");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 108)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:428:30: ( '(' ( formalParameterList )? ')' -> ( formalParameterList )? )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:428:32: '(' ( formalParameterList )? ')'
            {
                char_literal537 = (Token) match(input, LPAREN, FOLLOW_LPAREN_in_formalParameterSection11619);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_LPAREN.add(char_literal537);

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:428:36: ( formalParameterList )?
                int alt189 = 2;
                int LA189_0 = input.LA(1);
                if ((LA189_0 == ADD || LA189_0 == ANSISTRING || LA189_0 == AT || LA189_0 == BREAK || LA189_0 == CONST || (LA189_0 >= CONTAINS && LA189_0 <= CONTINUE) || LA189_0 == DEFAULT || LA189_0 == EXIT || LA189_0 == EXPORT || LA189_0 == FINAL || LA189_0 == IMPLEMENTS || LA189_0 == INDEX || LA189_0 == LBRACK || LA189_0 == LOCAL || LA189_0 == MESSAGE || LA189_0 == NAME || LA189_0 == OBJECT || LA189_0 == OPERATOR || LA189_0 == OUT || LA189_0 == POINTER || (LA189_0 >= READ && LA189_0 <= READONLY) || (LA189_0 >= REFERENCE && LA189_0 <= REGISTER) || LA189_0 == REMOVE || (LA189_0 >= STORED && LA189_0 <= STRING) || LA189_0 == TkIdentifier || LA189_0 == VAR || LA189_0 == VARIANT || LA189_0 == WRITE || LA189_0 == 200)) {
                    alt189 = 1;
                }
                switch (alt189) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:428:37: formalParameterList
                    {
                        pushFollow(FOLLOW_formalParameterList_in_formalParameterSection11622);
                        formalParameterList538 = formalParameterList();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_formalParameterList.add(formalParameterList538.getTree());
                    }
                    break;

                }

                char_literal539 = (Token) match(input, RPAREN, FOLLOW_RPAREN_in_formalParameterSection11626);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_RPAREN.add(char_literal539);

                // AST REWRITE
                // elements: formalParameterList
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 428:63: -> ( formalParameterList )?
                    {
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:428:66: ( formalParameterList )?
                        if (stream_formalParameterList.hasNext()) {
                            adaptor.addChild(root_0, stream_formalParameterList.nextTree());
                        }
                        stream_formalParameterList.reset();

                    }


                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 108, formalParameterSection_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "formalParameterList"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:430:1: formalParameterList : formalParameter ( ';' formalParameter )* -> formalParameter ( formalParameter )* ;
    public final DelphiParser.formalParameterList_return formalParameterList() throws RecognitionException {
        DelphiParser.formalParameterList_return retval = new DelphiParser.formalParameterList_return();
        retval.start = input.LT(1);
        int formalParameterList_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal541 = null;
        ParserRuleReturnScope formalParameter540 = null;
        ParserRuleReturnScope formalParameter542 = null;

        Object char_literal541_tree = null;
        RewriteRuleTokenStream stream_SEMI = new RewriteRuleTokenStream(adaptor, "token SEMI");
        RewriteRuleSubtreeStream stream_formalParameter = new RewriteRuleSubtreeStream(adaptor, "rule formalParameter");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 109)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:430:30: ( formalParameter ( ';' formalParameter )* -> formalParameter ( formalParameter )* )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:430:32: formalParameter ( ';' formalParameter )*
            {
                pushFollow(FOLLOW_formalParameter_in_formalParameterList11679);
                formalParameter540 = formalParameter();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_formalParameter.add(formalParameter540.getTree());
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:430:48: ( ';' formalParameter )*
                loop190:
                while (true) {
                    int alt190 = 2;
                    int LA190_0 = input.LA(1);
                    if ((LA190_0 == SEMI)) {
                        alt190 = 1;
                    }

                    switch (alt190) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:430:49: ';' formalParameter
                        {
                            char_literal541 = (Token) match(input, SEMI, FOLLOW_SEMI_in_formalParameterList11682);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_SEMI.add(char_literal541);

                            pushFollow(FOLLOW_formalParameter_in_formalParameterList11684);
                            formalParameter542 = formalParameter();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_formalParameter.add(formalParameter542.getTree());
                        }
                        break;

                        default:
                            break loop190;
                    }
                }

                // AST REWRITE
                // elements: formalParameter, formalParameter
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 430:71: -> formalParameter ( formalParameter )*
                    {
                        adaptor.addChild(root_0, stream_formalParameter.nextTree());
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:430:90: ( formalParameter )*
                        while (stream_formalParameter.hasNext()) {
                            adaptor.addChild(root_0, stream_formalParameter.nextTree());
                        }
                        stream_formalParameter.reset();

                    }


                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 109, formalParameterList_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "formalParameter"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:432:1: formalParameter : ( customAttribute )? ( parmType )? identListFlat ( ':' typeDecl )? ( '=' expression )? -> ( customAttribute )? ^( TkVariableIdents identListFlat ) ^( TkVariableType ( typeDecl )? ) ( ^( TkVariableParam parmType ) )? ;
    public final DelphiParser.formalParameter_return formalParameter() throws RecognitionException {
        DelphiParser.formalParameter_return retval = new DelphiParser.formalParameter_return();
        retval.start = input.LT(1);
        int formalParameter_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal546 = null;
        Token char_literal548 = null;
        ParserRuleReturnScope customAttribute543 = null;
        ParserRuleReturnScope parmType544 = null;
        ParserRuleReturnScope identListFlat545 = null;
        ParserRuleReturnScope typeDecl547 = null;
        ParserRuleReturnScope expression549 = null;

        Object char_literal546_tree = null;
        Object char_literal548_tree = null;
        RewriteRuleTokenStream stream_EQUAL = new RewriteRuleTokenStream(adaptor, "token EQUAL");
        RewriteRuleTokenStream stream_COLON = new RewriteRuleTokenStream(adaptor, "token COLON");
        RewriteRuleSubtreeStream stream_customAttribute = new RewriteRuleSubtreeStream(adaptor, "rule customAttribute");
        RewriteRuleSubtreeStream stream_identListFlat = new RewriteRuleSubtreeStream(adaptor, "rule identListFlat");
        RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor, "rule expression");
        RewriteRuleSubtreeStream stream_parmType = new RewriteRuleSubtreeStream(adaptor, "rule parmType");
        RewriteRuleSubtreeStream stream_typeDecl = new RewriteRuleSubtreeStream(adaptor, "rule typeDecl");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 110)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:432:30: ( ( customAttribute )? ( parmType )? identListFlat ( ':' typeDecl )? ( '=' expression )? -> ( customAttribute )? ^( TkVariableIdents identListFlat ) ^( TkVariableType ( typeDecl )? ) ( ^( TkVariableParam parmType ) )? )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:432:32: ( customAttribute )? ( parmType )? identListFlat ( ':' typeDecl )? ( '=' expression )?
            {
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:432:32: ( customAttribute )?
                int alt191 = 2;
                switch (input.LA(1)) {
                    case LBRACK: {
                        alt191 = 1;
                    }
                    break;
                    case OUT: {
                        int LA191_2 = input.LA(2);
                        if ((synpred256_Delphi())) {
                            alt191 = 1;
                        }
                    }
                    break;
                    case TkIdentifier: {
                        int LA191_3 = input.LA(2);
                        if ((synpred256_Delphi())) {
                            alt191 = 1;
                        }
                    }
                    break;
                    case 200: {
                        int LA191_4 = input.LA(2);
                        if ((synpred256_Delphi())) {
                            alt191 = 1;
                        }
                    }
                    break;
                    case CONST:
                    case VAR: {
                        int LA191_5 = input.LA(2);
                        if ((synpred256_Delphi())) {
                            alt191 = 1;
                        }
                    }
                    break;
                    case ADD:
                    case ANSISTRING:
                    case AT:
                    case BREAK:
                    case CONTAINS:
                    case CONTINUE:
                    case DEFAULT:
                    case EXIT:
                    case EXPORT:
                    case FINAL:
                    case IMPLEMENTS:
                    case INDEX:
                    case LOCAL:
                    case MESSAGE:
                    case NAME:
                    case OBJECT:
                    case OPERATOR:
                    case POINTER:
                    case READ:
                    case READONLY:
                    case REFERENCE:
                    case REGISTER:
                    case REMOVE:
                    case STORED:
                    case STRICT:
                    case STRING:
                    case VARIANT:
                    case WRITE: {
                        int LA191_6 = input.LA(2);
                        if ((synpred256_Delphi())) {
                            alt191 = 1;
                        }
                    }
                    break;
                }
                switch (alt191) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:432:33: customAttribute
                    {
                        pushFollow(FOLLOW_customAttribute_in_formalParameter11746);
                        customAttribute543 = customAttribute();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_customAttribute.add(customAttribute543.getTree());
                    }
                    break;

                }

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:432:51: ( parmType )?
                int alt192 = 2;
                int LA192_0 = input.LA(1);
                if ((LA192_0 == OUT)) {
                    int LA192_1 = input.LA(2);
                    if ((LA192_1 == ADD || LA192_1 == ANSISTRING || LA192_1 == AT || LA192_1 == BREAK || (LA192_1 >= CONTAINS && LA192_1 <= CONTINUE) || LA192_1 == DEFAULT || LA192_1 == EXIT || LA192_1 == EXPORT || LA192_1 == FINAL || LA192_1 == IMPLEMENTS || LA192_1 == INDEX || LA192_1 == LOCAL || LA192_1 == MESSAGE || LA192_1 == NAME || LA192_1 == OBJECT || LA192_1 == OPERATOR || LA192_1 == OUT || LA192_1 == POINTER || (LA192_1 >= READ && LA192_1 <= READONLY) || (LA192_1 >= REFERENCE && LA192_1 <= REGISTER) || LA192_1 == REMOVE || (LA192_1 >= STORED && LA192_1 <= STRING) || LA192_1 == TkIdentifier || LA192_1 == VARIANT || LA192_1 == WRITE || LA192_1 == 200)) {
                        alt192 = 1;
                    }
                } else if ((LA192_0 == CONST || LA192_0 == VAR)) {
                    alt192 = 1;
                }
                switch (alt192) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:432:52: parmType
                    {
                        pushFollow(FOLLOW_parmType_in_formalParameter11751);
                        parmType544 = parmType();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_parmType.add(parmType544.getTree());
                    }
                    break;

                }

                pushFollow(FOLLOW_identListFlat_in_formalParameter11755);
                identListFlat545 = identListFlat();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_identListFlat.add(identListFlat545.getTree());
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:432:77: ( ':' typeDecl )?
                int alt193 = 2;
                int LA193_0 = input.LA(1);
                if ((LA193_0 == COLON)) {
                    alt193 = 1;
                }
                switch (alt193) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:432:78: ':' typeDecl
                    {
                        char_literal546 = (Token) match(input, COLON, FOLLOW_COLON_in_formalParameter11758);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_COLON.add(char_literal546);

                        pushFollow(FOLLOW_typeDecl_in_formalParameter11760);
                        typeDecl547 = typeDecl();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_typeDecl.add(typeDecl547.getTree());
                    }
                    break;

                }

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:432:93: ( '=' expression )?
                int alt194 = 2;
                int LA194_0 = input.LA(1);
                if ((LA194_0 == EQUAL)) {
                    alt194 = 1;
                }
                switch (alt194) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:432:94: '=' expression
                    {
                        char_literal548 = (Token) match(input, EQUAL, FOLLOW_EQUAL_in_formalParameter11765);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_EQUAL.add(char_literal548);

                        pushFollow(FOLLOW_expression_in_formalParameter11767);
                        expression549 = expression();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_expression.add(expression549.getTree());
                    }
                    break;

                }

                // AST REWRITE
                // elements: parmType, customAttribute, identListFlat, typeDecl
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 432:111: -> ( customAttribute )? ^( TkVariableIdents identListFlat ) ^( TkVariableType ( typeDecl )? ) ( ^( TkVariableParam parmType ) )?
                    {
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:432:114: ( customAttribute )?
                        if (stream_customAttribute.hasNext()) {
                            adaptor.addChild(root_0, stream_customAttribute.nextTree());
                        }
                        stream_customAttribute.reset();

                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:432:133: ^( TkVariableIdents identListFlat )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(TkVariableIdents, "TkVariableIdents"), root_1);
                            adaptor.addChild(root_1, stream_identListFlat.nextTree());
                            adaptor.addChild(root_0, root_1);
                        }

                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:432:167: ^( TkVariableType ( typeDecl )? )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(TkVariableType, "TkVariableType"), root_1);
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:432:184: ( typeDecl )?
                            if (stream_typeDecl.hasNext()) {
                                adaptor.addChild(root_1, stream_typeDecl.nextTree());
                            }
                            stream_typeDecl.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:432:195: ( ^( TkVariableParam parmType ) )?
                        if (stream_parmType.hasNext()) {
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:432:195: ^( TkVariableParam parmType )
                            {
                                Object root_1 = (Object) adaptor.nil();
                                root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(TkVariableParam, "TkVariableParam"), root_1);
                                adaptor.addChild(root_1, stream_parmType.nextTree());
                                adaptor.addChild(root_0, root_1);
                            }

                        }
                        stream_parmType.reset();

                    }


                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 110, formalParameter_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "parmType"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:435:1: parmType : ( 'const' | 'var' | 'out' );
    public final DelphiParser.parmType_return parmType() throws RecognitionException {
        DelphiParser.parmType_return retval = new DelphiParser.parmType_return();
        retval.start = input.LT(1);
        int parmType_StartIndex = input.index();

        Object root_0 = null;

        Token set550 = null;

        Object set550_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 111)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:435:30: ( 'const' | 'var' | 'out' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
            {
                root_0 = (Object) adaptor.nil();


                set550 = input.LT(1);
                if (input.LA(1) == CONST || input.LA(1) == OUT || input.LA(1) == VAR) {
                    input.consume();
                    if (state.backtracking == 0) adaptor.addChild(root_0, (Object) adaptor.create(set550));
                    state.errorRecovery = false;
                    state.failed = false;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 111, parmType_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "methodBody"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:439:1: methodBody : block ';' -> block ;
    public final DelphiParser.methodBody_return methodBody() throws RecognitionException {
        DelphiParser.methodBody_return retval = new DelphiParser.methodBody_return();
        retval.start = input.LT(1);
        int methodBody_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal552 = null;
        ParserRuleReturnScope block551 = null;

        Object char_literal552_tree = null;
        RewriteRuleTokenStream stream_SEMI = new RewriteRuleTokenStream(adaptor, "token SEMI");
        RewriteRuleSubtreeStream stream_block = new RewriteRuleSubtreeStream(adaptor, "rule block");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 112)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:439:30: ( block ';' -> block )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:439:32: block ';'
            {
                pushFollow(FOLLOW_block_in_methodBody11990);
                block551 = block();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_block.add(block551.getTree());
                char_literal552 = (Token) match(input, SEMI, FOLLOW_SEMI_in_methodBody11992);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_SEMI.add(char_literal552);

                // AST REWRITE
                // elements: block
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 439:42: -> block
                    {
                        adaptor.addChild(root_0, stream_block.nextTree());
                    }


                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 112, methodBody_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "procBody"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:441:1: procBody : ( 'forward' ';' ( functionDirective )* | 'external' ( 'name' expression | 'index' expression )* ( functionDirective )* | block ';' );
    public final DelphiParser.procBody_return procBody() throws RecognitionException {
        DelphiParser.procBody_return retval = new DelphiParser.procBody_return();
        retval.start = input.LT(1);
        int procBody_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal553 = null;
        Token char_literal554 = null;
        Token string_literal556 = null;
        Token string_literal557 = null;
        Token string_literal559 = null;
        Token char_literal563 = null;
        ParserRuleReturnScope functionDirective555 = null;
        ParserRuleReturnScope expression558 = null;
        ParserRuleReturnScope expression560 = null;
        ParserRuleReturnScope functionDirective561 = null;
        ParserRuleReturnScope block562 = null;

        Object string_literal553_tree = null;
        Object char_literal554_tree = null;
        Object string_literal556_tree = null;
        Object string_literal557_tree = null;
        Object string_literal559_tree = null;
        Object char_literal563_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 113)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:441:30: ( 'forward' ';' ( functionDirective )* | 'external' ( 'name' expression | 'index' expression )* ( functionDirective )* | block ';' )
            int alt198 = 3;
            switch (input.LA(1)) {
                case FORWARD: {
                    alt198 = 1;
                }
                break;
                case EXTERNAL: {
                    alt198 = 2;
                }
                break;
                case ASM:
                case BEGIN:
                case CLASS:
                case CONST:
                case CONSTRUCTOR:
                case DESTRUCTOR:
                case EXPORTS:
                case FUNCTION:
                case LABEL:
                case LBRACK:
                case PROCEDURE:
                case RESOURCESTRING:
                case SEMI:
                case THREADVAR:
                case TYPE:
                case VAR: {
                    alt198 = 3;
                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae =
                            new NoViableAltException("", 198, 0, input);
                    throw nvae;
            }
            switch (alt198) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:441:32: 'forward' ';' ( functionDirective )*
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal553 = (Token) match(input, FORWARD, FOLLOW_FORWARD_in_procBody12053);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal553_tree = (Object) adaptor.create(string_literal553);
                        adaptor.addChild(root_0, string_literal553_tree);
                    }

                    char_literal554 = (Token) match(input, SEMI, FOLLOW_SEMI_in_procBody12055);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal554_tree = (Object) adaptor.create(char_literal554);
                        adaptor.addChild(root_0, char_literal554_tree);
                    }

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:441:46: ( functionDirective )*
                    loop195:
                    while (true) {
                        int alt195 = 2;
                        alt195 = dfa195.predict(input);
                        switch (alt195) {
                            case 1:
                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:441:47: functionDirective
                            {
                                pushFollow(FOLLOW_functionDirective_in_procBody12058);
                                functionDirective555 = functionDirective();
                                state._fsp--;
                                if (state.failed) return retval;
                                if (state.backtracking == 0) adaptor.addChild(root_0, functionDirective555.getTree());

                            }
                            break;

                            default:
                                break loop195;
                        }
                    }

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:442:32: 'external' ( 'name' expression | 'index' expression )* ( functionDirective )*
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal556 = (Token) match(input, EXTERNAL, FOLLOW_EXTERNAL_in_procBody12096);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal556_tree = (Object) adaptor.create(string_literal556);
                        adaptor.addChild(root_0, string_literal556_tree);
                    }

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:442:43: ( 'name' expression | 'index' expression )*
                    loop196:
                    while (true) {
                        int alt196 = 3;
                        int LA196_0 = input.LA(1);
                        if ((LA196_0 == NAME)) {
                            int LA196_2 = input.LA(2);
                            if ((synpred264_Delphi())) {
                                alt196 = 1;
                            }

                        } else if ((LA196_0 == INDEX)) {
                            int LA196_3 = input.LA(2);
                            if ((synpred265_Delphi())) {
                                alt196 = 2;
                            }

                        }

                        switch (alt196) {
                            case 1:
                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:442:44: 'name' expression
                            {
                                string_literal557 = (Token) match(input, NAME, FOLLOW_NAME_in_procBody12099);
                                if (state.failed) return retval;
                                if (state.backtracking == 0) {
                                    string_literal557_tree = (Object) adaptor.create(string_literal557);
                                    adaptor.addChild(root_0, string_literal557_tree);
                                }

                                pushFollow(FOLLOW_expression_in_procBody12101);
                                expression558 = expression();
                                state._fsp--;
                                if (state.failed) return retval;
                                if (state.backtracking == 0) adaptor.addChild(root_0, expression558.getTree());

                            }
                            break;
                            case 2:
                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:442:64: 'index' expression
                            {
                                string_literal559 = (Token) match(input, INDEX, FOLLOW_INDEX_in_procBody12105);
                                if (state.failed) return retval;
                                if (state.backtracking == 0) {
                                    string_literal559_tree = (Object) adaptor.create(string_literal559);
                                    adaptor.addChild(root_0, string_literal559_tree);
                                }

                                pushFollow(FOLLOW_expression_in_procBody12107);
                                expression560 = expression();
                                state._fsp--;
                                if (state.failed) return retval;
                                if (state.backtracking == 0) adaptor.addChild(root_0, expression560.getTree());

                            }
                            break;

                            default:
                                break loop196;
                        }
                    }

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:442:85: ( functionDirective )*
                    loop197:
                    while (true) {
                        int alt197 = 2;
                        switch (input.LA(1)) {
                            case OVERLOAD: {
                                int LA197_2 = input.LA(2);
                                if ((synpred266_Delphi())) {
                                    alt197 = 1;
                                }

                            }
                            break;
                            case INLINE: {
                                int LA197_3 = input.LA(2);
                                if ((synpred266_Delphi())) {
                                    alt197 = 1;
                                }

                            }
                            break;
                            case ASSEMBLER: {
                                int LA197_4 = input.LA(2);
                                if ((synpred266_Delphi())) {
                                    alt197 = 1;
                                }

                            }
                            break;
                            case CDECL: {
                                int LA197_5 = input.LA(2);
                                if ((synpred266_Delphi())) {
                                    alt197 = 1;
                                }

                            }
                            break;
                            case PASCAL: {
                                int LA197_6 = input.LA(2);
                                if ((synpred266_Delphi())) {
                                    alt197 = 1;
                                }

                            }
                            break;
                            case REGISTER: {
                                int LA197_7 = input.LA(2);
                                if ((synpred266_Delphi())) {
                                    alt197 = 1;
                                }

                            }
                            break;
                            case SAFECALL: {
                                int LA197_8 = input.LA(2);
                                if ((synpred266_Delphi())) {
                                    alt197 = 1;
                                }

                            }
                            break;
                            case STDCALL: {
                                int LA197_9 = input.LA(2);
                                if ((synpred266_Delphi())) {
                                    alt197 = 1;
                                }

                            }
                            break;
                            case EXPORT: {
                                int LA197_10 = input.LA(2);
                                if ((synpred266_Delphi())) {
                                    alt197 = 1;
                                }

                            }
                            break;
                            case FAR: {
                                int LA197_11 = input.LA(2);
                                if ((synpred266_Delphi())) {
                                    alt197 = 1;
                                }

                            }
                            break;
                            case LOCAL: {
                                int LA197_12 = input.LA(2);
                                if ((synpred266_Delphi())) {
                                    alt197 = 1;
                                }

                            }
                            break;
                            case NEAR: {
                                int LA197_13 = input.LA(2);
                                if ((synpred266_Delphi())) {
                                    alt197 = 1;
                                }

                            }
                            break;
                            case DEPRECATED: {
                                int LA197_14 = input.LA(2);
                                if ((synpred266_Delphi())) {
                                    alt197 = 1;
                                }

                            }
                            break;
                            case EXPERIMENTAL: {
                                int LA197_15 = input.LA(2);
                                if ((synpred266_Delphi())) {
                                    alt197 = 1;
                                }

                            }
                            break;
                            case PLATFORM: {
                                int LA197_16 = input.LA(2);
                                if ((synpred266_Delphi())) {
                                    alt197 = 1;
                                }

                            }
                            break;
                            case LIBRARY: {
                                int LA197_17 = input.LA(2);
                                if ((synpred266_Delphi())) {
                                    alt197 = 1;
                                }

                            }
                            break;
                            case VARARGS: {
                                int LA197_18 = input.LA(2);
                                if ((synpred266_Delphi())) {
                                    alt197 = 1;
                                }

                            }
                            break;
                            case EXTERNAL: {
                                int LA197_19 = input.LA(2);
                                if ((synpred266_Delphi())) {
                                    alt197 = 1;
                                }

                            }
                            break;
                            case UNSAFE: {
                                int LA197_20 = input.LA(2);
                                if ((synpred266_Delphi())) {
                                    alt197 = 1;
                                }

                            }
                            break;
                        }
                        switch (alt197) {
                            case 1:
                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:442:86: functionDirective
                            {
                                pushFollow(FOLLOW_functionDirective_in_procBody12112);
                                functionDirective561 = functionDirective();
                                state._fsp--;
                                if (state.failed) return retval;
                                if (state.backtracking == 0) adaptor.addChild(root_0, functionDirective561.getTree());

                            }
                            break;

                            default:
                                break loop197;
                        }
                    }

                }
                break;
                case 3:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:443:32: block ';'
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_block_in_procBody12148);
                    block562 = block();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, block562.getTree());

                    char_literal563 = (Token) match(input, SEMI, FOLLOW_SEMI_in_procBody12150);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal563_tree = (Object) adaptor.create(char_literal563);
                        adaptor.addChild(root_0, char_literal563_tree);
                    }

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 113, procBody_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "customAttribute"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:448:1: customAttribute : customAttributeList ;
    public final DelphiParser.customAttribute_return customAttribute() throws RecognitionException {
        DelphiParser.customAttribute_return retval = new DelphiParser.customAttribute_return();
        retval.start = input.LT(1);
        int customAttribute_StartIndex = input.index();

        Object root_0 = null;

        ParserRuleReturnScope customAttributeList564 = null;


        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 114)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:448:30: ( customAttributeList )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:448:32: customAttributeList
            {
                root_0 = (Object) adaptor.nil();


                pushFollow(FOLLOW_customAttributeList_in_customAttribute12203);
                customAttributeList564 = customAttributeList();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, customAttributeList564.getTree());

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 114, customAttribute_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "customAttributeList"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:450:1: customAttributeList : ( customAttributeDecl )* ;
    public final DelphiParser.customAttributeList_return customAttributeList() throws RecognitionException {
        DelphiParser.customAttributeList_return retval = new DelphiParser.customAttributeList_return();
        retval.start = input.LT(1);
        int customAttributeList_StartIndex = input.index();

        Object root_0 = null;

        ParserRuleReturnScope customAttributeDecl565 = null;


        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 115)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:450:30: ( ( customAttributeDecl )* )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:450:32: ( customAttributeDecl )*
            {
                root_0 = (Object) adaptor.nil();


                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:450:32: ( customAttributeDecl )*
                loop199:
                while (true) {
                    int alt199 = 2;
                    int LA199_0 = input.LA(1);
                    if ((LA199_0 == LBRACK)) {
                        int LA199_2 = input.LA(2);
                        if ((synpred268_Delphi())) {
                            alt199 = 1;
                        }

                    }

                    switch (alt199) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:450:33: customAttributeDecl
                        {
                            pushFollow(FOLLOW_customAttributeDecl_in_customAttributeList12250);
                            customAttributeDecl565 = customAttributeDecl();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, customAttributeDecl565.getTree());

                        }
                        break;

                        default:
                            break loop199;
                    }
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 115, customAttributeList_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "customAttributeDecl"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:452:1: customAttributeDecl : '[' namespacedQualifiedIdent ( '(' ( expressionList )? ')' )? ']' -> ^( TkCustomAttribute '[' namespacedQualifiedIdent ( '(' ( expressionList )? ')' )? ']' ) ;
    public final DelphiParser.customAttributeDecl_return customAttributeDecl() throws RecognitionException {
        DelphiParser.customAttributeDecl_return retval = new DelphiParser.customAttributeDecl_return();
        retval.start = input.LT(1);
        int customAttributeDecl_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal566 = null;
        Token char_literal568 = null;
        Token char_literal570 = null;
        Token char_literal571 = null;
        ParserRuleReturnScope namespacedQualifiedIdent567 = null;
        ParserRuleReturnScope expressionList569 = null;

        Object char_literal566_tree = null;
        Object char_literal568_tree = null;
        Object char_literal570_tree = null;
        Object char_literal571_tree = null;
        RewriteRuleTokenStream stream_RBRACK = new RewriteRuleTokenStream(adaptor, "token RBRACK");
        RewriteRuleTokenStream stream_LBRACK = new RewriteRuleTokenStream(adaptor, "token LBRACK");
        RewriteRuleTokenStream stream_LPAREN = new RewriteRuleTokenStream(adaptor, "token LPAREN");
        RewriteRuleTokenStream stream_RPAREN = new RewriteRuleTokenStream(adaptor, "token RPAREN");
        RewriteRuleSubtreeStream stream_namespacedQualifiedIdent = new RewriteRuleSubtreeStream(adaptor, "rule namespacedQualifiedIdent");
        RewriteRuleSubtreeStream stream_expressionList = new RewriteRuleSubtreeStream(adaptor, "rule expressionList");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 116)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:452:30: ( '[' namespacedQualifiedIdent ( '(' ( expressionList )? ')' )? ']' -> ^( TkCustomAttribute '[' namespacedQualifiedIdent ( '(' ( expressionList )? ')' )? ']' ) )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:452:32: '[' namespacedQualifiedIdent ( '(' ( expressionList )? ')' )? ']'
            {
                char_literal566 = (Token) match(input, LBRACK, FOLLOW_LBRACK_in_customAttributeDecl12298);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_LBRACK.add(char_literal566);

                pushFollow(FOLLOW_namespacedQualifiedIdent_in_customAttributeDecl12300);
                namespacedQualifiedIdent567 = namespacedQualifiedIdent();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_namespacedQualifiedIdent.add(namespacedQualifiedIdent567.getTree());
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:452:61: ( '(' ( expressionList )? ')' )?
                int alt201 = 2;
                int LA201_0 = input.LA(1);
                if ((LA201_0 == LPAREN)) {
                    alt201 = 1;
                }
                switch (alt201) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:452:62: '(' ( expressionList )? ')'
                    {
                        char_literal568 = (Token) match(input, LPAREN, FOLLOW_LPAREN_in_customAttributeDecl12303);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_LPAREN.add(char_literal568);

                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:452:66: ( expressionList )?
                        int alt200 = 2;
                        int LA200_0 = input.LA(1);
                        if (((LA200_0 >= ADD && LA200_0 <= ANSISTRING) || LA200_0 == AS || (LA200_0 >= AT && LA200_0 <= AT2) || LA200_0 == BREAK || LA200_0 == COMMA || (LA200_0 >= CONTAINS && LA200_0 <= ControlString) || LA200_0 == DEFAULT || LA200_0 == DIV || LA200_0 == DOT || LA200_0 == EQUAL || LA200_0 == EXIT || LA200_0 == EXPORT || LA200_0 == FALSE || LA200_0 == FINAL || (LA200_0 >= FUNCTION && LA200_0 <= GE) || LA200_0 == GT || (LA200_0 >= IMPLEMENTS && LA200_0 <= INHERITED) || LA200_0 == IS || LA200_0 == LBRACK || LA200_0 == LE || (LA200_0 >= LOCAL && LA200_0 <= NAME) || LA200_0 == NIL || (LA200_0 >= NOT && LA200_0 <= OBJECT) || (LA200_0 >= OPERATOR && LA200_0 <= OUT) || (LA200_0 >= PLUS && LA200_0 <= POINTER2) || LA200_0 == PROCEDURE || LA200_0 == QuotedString || (LA200_0 >= READ && LA200_0 <= READONLY) || (LA200_0 >= REFERENCE && LA200_0 <= REGISTER) || LA200_0 == REMOVE || (LA200_0 >= SHL && LA200_0 <= STAR) || (LA200_0 >= STORED && LA200_0 <= STRING) || LA200_0 == TRUE || LA200_0 == TkAsmHexNum || (LA200_0 >= TkHexNum && LA200_0 <= TkIntNum) || LA200_0 == TkRealNum || LA200_0 == VARIANT || LA200_0 == WRITE || (LA200_0 >= XOR && LA200_0 <= 201))) {
                            alt200 = 1;
                        } else if ((LA200_0 == RPAREN)) {
                            int LA200_2 = input.LA(2);
                            if ((synpred269_Delphi())) {
                                alt200 = 1;
                            }
                        }
                        switch (alt200) {
                            case 1:
                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:452:67: expressionList
                            {
                                pushFollow(FOLLOW_expressionList_in_customAttributeDecl12306);
                                expressionList569 = expressionList();
                                state._fsp--;
                                if (state.failed) return retval;
                                if (state.backtracking == 0) stream_expressionList.add(expressionList569.getTree());
                            }
                            break;

                        }

                        char_literal570 = (Token) match(input, RPAREN, FOLLOW_RPAREN_in_customAttributeDecl12310);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_RPAREN.add(char_literal570);

                    }
                    break;

                }

                char_literal571 = (Token) match(input, RBRACK, FOLLOW_RBRACK_in_customAttributeDecl12314);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_RBRACK.add(char_literal571);

                // AST REWRITE
                // elements: LBRACK, LPAREN, RPAREN, RBRACK, expressionList, namespacedQualifiedIdent
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 452:95: -> ^( TkCustomAttribute '[' namespacedQualifiedIdent ( '(' ( expressionList )? ')' )? ']' )
                    {
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:452:98: ^( TkCustomAttribute '[' namespacedQualifiedIdent ( '(' ( expressionList )? ')' )? ']' )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(TkCustomAttribute, "TkCustomAttribute"), root_1);
                            adaptor.addChild(root_1, stream_LBRACK.nextNode());
                            adaptor.addChild(root_1, stream_namespacedQualifiedIdent.nextTree());
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:452:147: ( '(' ( expressionList )? ')' )?
                            if (stream_LPAREN.hasNext() || stream_RPAREN.hasNext() || stream_expressionList.hasNext()) {
                                adaptor.addChild(root_1, stream_LPAREN.nextNode());
                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:452:152: ( expressionList )?
                                if (stream_expressionList.hasNext()) {
                                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                                }
                                stream_expressionList.reset();

                                adaptor.addChild(root_1, stream_RPAREN.nextNode());
                            }
                            stream_LPAREN.reset();
                            stream_RPAREN.reset();
                            stream_expressionList.reset();

                            adaptor.addChild(root_1, stream_RBRACK.nextNode());
                            adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 116, customAttributeDecl_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "expression"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:458:1: expression : ( anonymousExpression -> ^( TkAnonymousExpression anonymousExpression ) | simpleExpression ( relOp simpleExpression )? ( '=' expression )? );
    public final DelphiParser.expression_return expression() throws RecognitionException {
        DelphiParser.expression_return retval = new DelphiParser.expression_return();
        retval.start = input.LT(1);
        int expression_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal576 = null;
        ParserRuleReturnScope anonymousExpression572 = null;
        ParserRuleReturnScope simpleExpression573 = null;
        ParserRuleReturnScope relOp574 = null;
        ParserRuleReturnScope simpleExpression575 = null;
        ParserRuleReturnScope expression577 = null;

        Object char_literal576_tree = null;
        RewriteRuleSubtreeStream stream_anonymousExpression = new RewriteRuleSubtreeStream(adaptor, "rule anonymousExpression");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 117)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:458:30: ( anonymousExpression -> ^( TkAnonymousExpression anonymousExpression ) | simpleExpression ( relOp simpleExpression )? ( '=' expression )? )
            int alt204 = 2;
            switch (input.LA(1)) {
                case PROCEDURE: {
                    int LA204_1 = input.LA(2);
                    if ((synpred271_Delphi())) {
                        alt204 = 1;
                    } else if ((true)) {
                        alt204 = 2;
                    }

                }
                break;
                case FUNCTION: {
                    int LA204_2 = input.LA(2);
                    if ((synpred271_Delphi())) {
                        alt204 = 1;
                    } else if ((true)) {
                        alt204 = 2;
                    }

                }
                break;
                case EOF:
                case ABSOLUTE:
                case ADD:
                case AND:
                case ANSISTRING:
                case AS:
                case ASM:
                case ASSEMBLER:
                case AT:
                case AT2:
                case AUTOMATED:
                case BEGIN:
                case BREAK:
                case CASE:
                case CDECL:
                case CLASS:
                case COLON:
                case COMMA:
                case CONST:
                case CONSTRUCTOR:
                case CONTAINS:
                case CONTINUE:
                case ControlString:
                case DEFAULT:
                case DEPRECATED:
                case DESTRUCTOR:
                case DISPID:
                case DIV:
                case DO:
                case DOT:
                case DOTDOT:
                case DOWNTO:
                case ELSE:
                case END:
                case EQUAL:
                case EXCEPT:
                case EXIT:
                case EXPERIMENTAL:
                case EXPORT:
                case EXPORTS:
                case EXTERNAL:
                case FALSE:
                case FAR:
                case FINAL:
                case FINALIZATION:
                case FINALLY:
                case GE:
                case GT:
                case IMPLEMENTATION:
                case IMPLEMENTS:
                case IN:
                case INDEX:
                case INHERITED:
                case INITIALIZATION:
                case INLINE:
                case IS:
                case LABEL:
                case LBRACK:
                case LE:
                case LIBRARY:
                case LOCAL:
                case LPAREN:
                case LT:
                case MESSAGE:
                case MINUS:
                case MOD:
                case NAME:
                case NEAR:
                case NIL:
                case NODEFAULT:
                case NOT:
                case NOT_EQUAL:
                case OBJECT:
                case OF:
                case ON:
                case OPERATOR:
                case OR:
                case OUT:
                case OVERLOAD:
                case PASCAL:
                case PLATFORM:
                case PLUS:
                case POINTER:
                case POINTER2:
                case PRIVATE:
                case PROPERTY:
                case PROTECTED:
                case PUBLIC:
                case PUBLISHED:
                case QuotedString:
                case RBRACK:
                case READ:
                case READONLY:
                case REFERENCE:
                case REGISTER:
                case REMOVE:
                case RESIDENT:
                case RESOURCESTRING:
                case RPAREN:
                case SAFECALL:
                case SEMI:
                case SHL:
                case SHR:
                case SLASH:
                case STAR:
                case STDCALL:
                case STORED:
                case STRICT:
                case STRING:
                case THEN:
                case THREADVAR:
                case TO:
                case TRUE:
                case TYPE:
                case TkAsmHexNum:
                case TkHexNum:
                case TkIdentifier:
                case TkIntNum:
                case TkRealNum:
                case UNSAFE:
                case UNTIL:
                case VAR:
                case VARARGS:
                case VARIANT:
                case WRITE:
                case WRITEONLY:
                case XOR:
                case 200:
                case 201: {
                    alt204 = 2;
                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae =
                            new NoViableAltException("", 204, 0, input);
                    throw nvae;
            }
            switch (alt204) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:458:32: anonymousExpression
                {
                    pushFollow(FOLLOW_anonymousExpression_in_expression12427);
                    anonymousExpression572 = anonymousExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_anonymousExpression.add(anonymousExpression572.getTree());
                    // AST REWRITE
                    // elements: anonymousExpression
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if (state.backtracking == 0) {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                        root_0 = (Object) adaptor.nil();
                        // 458:52: -> ^( TkAnonymousExpression anonymousExpression )
                        {
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:458:55: ^( TkAnonymousExpression anonymousExpression )
                            {
                                Object root_1 = (Object) adaptor.nil();
                                root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(TkAnonymousExpression, "TkAnonymousExpression"), root_1);
                                adaptor.addChild(root_1, stream_anonymousExpression.nextTree());
                                adaptor.addChild(root_0, root_1);
                            }

                        }


                        retval.tree = root_0;
                    }

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:459:32: simpleExpression ( relOp simpleExpression )? ( '=' expression )?
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_simpleExpression_in_expression12468);
                    simpleExpression573 = simpleExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, simpleExpression573.getTree());

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:459:49: ( relOp simpleExpression )?
                    int alt202 = 2;
                    switch (input.LA(1)) {
                        case EQUAL: {
                            int LA202_1 = input.LA(2);
                            if ((synpred272_Delphi())) {
                                alt202 = 1;
                            }
                        }
                        break;
                        case LT: {
                            int LA202_2 = input.LA(2);
                            if ((synpred272_Delphi())) {
                                alt202 = 1;
                            }
                        }
                        break;
                        case GT: {
                            int LA202_4 = input.LA(2);
                            if ((synpred272_Delphi())) {
                                alt202 = 1;
                            }
                        }
                        break;
                        case GE:
                        case IN:
                        case IS:
                        case LE:
                        case NOT_EQUAL: {
                            int LA202_5 = input.LA(2);
                            if ((synpred272_Delphi())) {
                                alt202 = 1;
                            }
                        }
                        break;
                    }
                    switch (alt202) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:459:50: relOp simpleExpression
                        {
                            pushFollow(FOLLOW_relOp_in_expression12471);
                            relOp574 = relOp();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, relOp574.getTree());

                            pushFollow(FOLLOW_simpleExpression_in_expression12473);
                            simpleExpression575 = simpleExpression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, simpleExpression575.getTree());

                        }
                        break;

                    }

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:459:75: ( '=' expression )?
                    int alt203 = 2;
                    int LA203_0 = input.LA(1);
                    if ((LA203_0 == EQUAL)) {
                        int LA203_1 = input.LA(2);
                        if ((synpred273_Delphi())) {
                            alt203 = 1;
                        }
                    }
                    switch (alt203) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:459:76: '=' expression
                        {
                            char_literal576 = (Token) match(input, EQUAL, FOLLOW_EQUAL_in_expression12478);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) {
                                char_literal576_tree = (Object) adaptor.create(char_literal576);
                                adaptor.addChild(root_0, char_literal576_tree);
                            }

                            pushFollow(FOLLOW_expression_in_expression12480);
                            expression577 = expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, expression577.getTree());

                        }
                        break;

                    }

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 117, expression_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "anonymousExpression"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:461:1: anonymousExpression : ( 'procedure' ( formalParameterSection )? block | 'function' ( formalParameterSection )? ':' typeDecl block );
    public final DelphiParser.anonymousExpression_return anonymousExpression() throws RecognitionException {
        DelphiParser.anonymousExpression_return retval = new DelphiParser.anonymousExpression_return();
        retval.start = input.LT(1);
        int anonymousExpression_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal578 = null;
        Token string_literal581 = null;
        Token char_literal583 = null;
        ParserRuleReturnScope formalParameterSection579 = null;
        ParserRuleReturnScope block580 = null;
        ParserRuleReturnScope formalParameterSection582 = null;
        ParserRuleReturnScope typeDecl584 = null;
        ParserRuleReturnScope block585 = null;

        Object string_literal578_tree = null;
        Object string_literal581_tree = null;
        Object char_literal583_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 118)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:461:30: ( 'procedure' ( formalParameterSection )? block | 'function' ( formalParameterSection )? ':' typeDecl block )
            int alt207 = 2;
            int LA207_0 = input.LA(1);
            if ((LA207_0 == PROCEDURE)) {
                alt207 = 1;
            } else if ((LA207_0 == FUNCTION)) {
                alt207 = 2;
            } else {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae =
                        new NoViableAltException("", 207, 0, input);
                throw nvae;
            }

            switch (alt207) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:461:32: 'procedure' ( formalParameterSection )? block
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal578 = (Token) match(input, PROCEDURE, FOLLOW_PROCEDURE_in_anonymousExpression12558);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal578_tree = (Object) adaptor.create(string_literal578);
                        adaptor.addChild(root_0, string_literal578_tree);
                    }

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:461:44: ( formalParameterSection )?
                    int alt205 = 2;
                    alt205 = dfa205.predict(input);
                    switch (alt205) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:461:45: formalParameterSection
                        {
                            pushFollow(FOLLOW_formalParameterSection_in_anonymousExpression12561);
                            formalParameterSection579 = formalParameterSection();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, formalParameterSection579.getTree());

                        }
                        break;

                    }

                    pushFollow(FOLLOW_block_in_anonymousExpression12565);
                    block580 = block();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, block580.getTree());

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:462:32: 'function' ( formalParameterSection )? ':' typeDecl block
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal581 = (Token) match(input, FUNCTION, FOLLOW_FUNCTION_in_anonymousExpression12598);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal581_tree = (Object) adaptor.create(string_literal581);
                        adaptor.addChild(root_0, string_literal581_tree);
                    }

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:462:43: ( formalParameterSection )?
                    int alt206 = 2;
                    int LA206_0 = input.LA(1);
                    if ((LA206_0 == LPAREN)) {
                        alt206 = 1;
                    }
                    switch (alt206) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:462:44: formalParameterSection
                        {
                            pushFollow(FOLLOW_formalParameterSection_in_anonymousExpression12601);
                            formalParameterSection582 = formalParameterSection();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, formalParameterSection582.getTree());

                        }
                        break;

                    }

                    char_literal583 = (Token) match(input, COLON, FOLLOW_COLON_in_anonymousExpression12605);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal583_tree = (Object) adaptor.create(char_literal583);
                        adaptor.addChild(root_0, char_literal583_tree);
                    }

                    pushFollow(FOLLOW_typeDecl_in_anonymousExpression12607);
                    typeDecl584 = typeDecl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, typeDecl584.getTree());

                    pushFollow(FOLLOW_block_in_anonymousExpression12609);
                    block585 = block();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, block585.getTree());

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 118, anonymousExpression_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "simpleExpression"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:464:1: simpleExpression : factor ( operator factor )* ;
    public final DelphiParser.simpleExpression_return simpleExpression() throws RecognitionException {
        DelphiParser.simpleExpression_return retval = new DelphiParser.simpleExpression_return();
        retval.start = input.LT(1);
        int simpleExpression_StartIndex = input.index();

        Object root_0 = null;

        ParserRuleReturnScope factor586 = null;
        ParserRuleReturnScope operator587 = null;
        ParserRuleReturnScope factor588 = null;


        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 119)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:464:30: ( factor ( operator factor )* )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:464:32: factor ( operator factor )*
            {
                root_0 = (Object) adaptor.nil();


                pushFollow(FOLLOW_factor_in_simpleExpression12658);
                factor586 = factor();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, factor586.getTree());

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:464:39: ( operator factor )*
                loop208:
                while (true) {
                    int alt208 = 2;
                    switch (input.LA(1)) {
                        case PLUS: {
                            int LA208_2 = input.LA(2);
                            if ((synpred277_Delphi())) {
                                alt208 = 1;
                            }

                        }
                        break;
                        case MINUS: {
                            int LA208_3 = input.LA(2);
                            if ((synpred277_Delphi())) {
                                alt208 = 1;
                            }

                        }
                        break;
                        case AND:
                        case AS:
                        case DIV:
                        case MOD:
                        case OR:
                        case SHL:
                        case SHR:
                        case SLASH:
                        case STAR:
                        case XOR: {
                            int LA208_4 = input.LA(2);
                            if ((synpred277_Delphi())) {
                                alt208 = 1;
                            }

                        }
                        break;
                    }
                    switch (alt208) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:464:40: operator factor
                        {
                            pushFollow(FOLLOW_operator_in_simpleExpression12661);
                            operator587 = operator();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, operator587.getTree());

                            pushFollow(FOLLOW_factor_in_simpleExpression12663);
                            factor588 = factor();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, factor588.getTree());

                        }
                        break;

                        default:
                            break loop208;
                    }
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 119, simpleExpression_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "factor"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:466:1: factor : ( '@' factor | '@@' factor | 'not' factor | '+' factor | '-' factor | '^' ident | intNum | realNum | TkAsmHexNum | 'true' | 'false' | 'nil' | '(' expression ')' ( '^' )? ( '.' expression )? | stringFactor | setSection | designator | typeId '(' expression ')' );
    public final DelphiParser.factor_return factor() throws RecognitionException {
        DelphiParser.factor_return retval = new DelphiParser.factor_return();
        retval.start = input.LT(1);
        int factor_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal589 = null;
        Token string_literal591 = null;
        Token string_literal593 = null;
        Token char_literal595 = null;
        Token char_literal597 = null;
        Token char_literal599 = null;
        Token TkAsmHexNum603 = null;
        Token string_literal604 = null;
        Token string_literal605 = null;
        Token string_literal606 = null;
        Token char_literal607 = null;
        Token char_literal609 = null;
        Token char_literal610 = null;
        Token char_literal611 = null;
        Token char_literal617 = null;
        Token char_literal619 = null;
        ParserRuleReturnScope factor590 = null;
        ParserRuleReturnScope factor592 = null;
        ParserRuleReturnScope factor594 = null;
        ParserRuleReturnScope factor596 = null;
        ParserRuleReturnScope factor598 = null;
        ParserRuleReturnScope ident600 = null;
        ParserRuleReturnScope intNum601 = null;
        ParserRuleReturnScope realNum602 = null;
        ParserRuleReturnScope expression608 = null;
        ParserRuleReturnScope expression612 = null;
        ParserRuleReturnScope stringFactor613 = null;
        ParserRuleReturnScope setSection614 = null;
        ParserRuleReturnScope designator615 = null;
        ParserRuleReturnScope typeId616 = null;
        ParserRuleReturnScope expression618 = null;

        Object char_literal589_tree = null;
        Object string_literal591_tree = null;
        Object string_literal593_tree = null;
        Object char_literal595_tree = null;
        Object char_literal597_tree = null;
        Object char_literal599_tree = null;
        Object TkAsmHexNum603_tree = null;
        Object string_literal604_tree = null;
        Object string_literal605_tree = null;
        Object string_literal606_tree = null;
        Object char_literal607_tree = null;
        Object char_literal609_tree = null;
        Object char_literal610_tree = null;
        Object char_literal611_tree = null;
        Object char_literal617_tree = null;
        Object char_literal619_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 120)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:466:30: ( '@' factor | '@@' factor | 'not' factor | '+' factor | '-' factor | '^' ident | intNum | realNum | TkAsmHexNum | 'true' | 'false' | 'nil' | '(' expression ')' ( '^' )? ( '.' expression )? | stringFactor | setSection | designator | typeId '(' expression ')' )
            int alt211 = 17;
            alt211 = dfa211.predict(input);
            switch (alt211) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:466:32: '@' factor
                {
                    root_0 = (Object) adaptor.nil();


                    char_literal589 = (Token) match(input, AT2, FOLLOW_AT2_in_factor12724);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal589_tree = (Object) adaptor.create(char_literal589);
                        adaptor.addChild(root_0, char_literal589_tree);
                    }

                    pushFollow(FOLLOW_factor_in_factor12726);
                    factor590 = factor();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, factor590.getTree());

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:467:32: '@@' factor
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal591 = (Token) match(input, 201, FOLLOW_201_in_factor12759);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal591_tree = (Object) adaptor.create(string_literal591);
                        adaptor.addChild(root_0, string_literal591_tree);
                    }

                    pushFollow(FOLLOW_factor_in_factor12761);
                    factor592 = factor();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, factor592.getTree());

                }
                break;
                case 3:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:468:32: 'not' factor
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal593 = (Token) match(input, NOT, FOLLOW_NOT_in_factor12801);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal593_tree = (Object) adaptor.create(string_literal593);
                        adaptor.addChild(root_0, string_literal593_tree);
                    }

                    pushFollow(FOLLOW_factor_in_factor12803);
                    factor594 = factor();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, factor594.getTree());

                }
                break;
                case 4:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:469:32: '+' factor
                {
                    root_0 = (Object) adaptor.nil();


                    char_literal595 = (Token) match(input, PLUS, FOLLOW_PLUS_in_factor12836);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal595_tree = (Object) adaptor.create(char_literal595);
                        adaptor.addChild(root_0, char_literal595_tree);
                    }

                    pushFollow(FOLLOW_factor_in_factor12838);
                    factor596 = factor();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, factor596.getTree());

                }
                break;
                case 5:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:470:32: '-' factor
                {
                    root_0 = (Object) adaptor.nil();


                    char_literal597 = (Token) match(input, MINUS, FOLLOW_MINUS_in_factor12871);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal597_tree = (Object) adaptor.create(char_literal597);
                        adaptor.addChild(root_0, char_literal597_tree);
                    }

                    pushFollow(FOLLOW_factor_in_factor12873);
                    factor598 = factor();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, factor598.getTree());

                }
                break;
                case 6:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:471:32: '^' ident
                {
                    root_0 = (Object) adaptor.nil();


                    char_literal599 = (Token) match(input, POINTER2, FOLLOW_POINTER2_in_factor12906);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal599_tree = (Object) adaptor.create(char_literal599);
                        adaptor.addChild(root_0, char_literal599_tree);
                    }

                    pushFollow(FOLLOW_ident_in_factor12908);
                    ident600 = ident();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, ident600.getTree());

                }
                break;
                case 7:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:472:32: intNum
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_intNum_in_factor12952);
                    intNum601 = intNum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, intNum601.getTree());

                }
                break;
                case 8:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:473:32: realNum
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_realNum_in_factor12985);
                    realNum602 = realNum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, realNum602.getTree());

                }
                break;
                case 9:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:474:32: TkAsmHexNum
                {
                    root_0 = (Object) adaptor.nil();


                    TkAsmHexNum603 = (Token) match(input, TkAsmHexNum, FOLLOW_TkAsmHexNum_in_factor13018);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        TkAsmHexNum603_tree = (Object) adaptor.create(TkAsmHexNum603);
                        adaptor.addChild(root_0, TkAsmHexNum603_tree);
                    }

                }
                break;
                case 10:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:475:32: 'true'
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal604 = (Token) match(input, TRUE, FOLLOW_TRUE_in_factor13061);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal604_tree = (Object) adaptor.create(string_literal604);
                        adaptor.addChild(root_0, string_literal604_tree);
                    }

                }
                break;
                case 11:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:476:32: 'false'
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal605 = (Token) match(input, FALSE, FOLLOW_FALSE_in_factor13094);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal605_tree = (Object) adaptor.create(string_literal605);
                        adaptor.addChild(root_0, string_literal605_tree);
                    }

                }
                break;
                case 12:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:477:32: 'nil'
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal606 = (Token) match(input, NIL, FOLLOW_NIL_in_factor13127);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal606_tree = (Object) adaptor.create(string_literal606);
                        adaptor.addChild(root_0, string_literal606_tree);
                    }

                }
                break;
                case 13:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:478:32: '(' expression ')' ( '^' )? ( '.' expression )?
                {
                    root_0 = (Object) adaptor.nil();


                    char_literal607 = (Token) match(input, LPAREN, FOLLOW_LPAREN_in_factor13160);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal607_tree = (Object) adaptor.create(char_literal607);
                        adaptor.addChild(root_0, char_literal607_tree);
                    }

                    pushFollow(FOLLOW_expression_in_factor13162);
                    expression608 = expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, expression608.getTree());

                    char_literal609 = (Token) match(input, RPAREN, FOLLOW_RPAREN_in_factor13164);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal609_tree = (Object) adaptor.create(char_literal609);
                        adaptor.addChild(root_0, char_literal609_tree);
                    }

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:478:51: ( '^' )?
                    int alt209 = 2;
                    int LA209_0 = input.LA(1);
                    if ((LA209_0 == POINTER2)) {
                        int LA209_1 = input.LA(2);
                        if ((synpred290_Delphi())) {
                            alt209 = 1;
                        }
                    }
                    switch (alt209) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:478:52: '^'
                        {
                            char_literal610 = (Token) match(input, POINTER2, FOLLOW_POINTER2_in_factor13167);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) {
                                char_literal610_tree = (Object) adaptor.create(char_literal610);
                                adaptor.addChild(root_0, char_literal610_tree);
                            }

                        }
                        break;

                    }

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:478:58: ( '.' expression )?
                    int alt210 = 2;
                    int LA210_0 = input.LA(1);
                    if ((LA210_0 == DOT)) {
                        switch (input.LA(2)) {
                            case ABSOLUTE:
                            case AND:
                            case AS:
                            case ASM:
                            case ASSEMBLER:
                            case AT2:
                            case AUTOMATED:
                            case BEGIN:
                            case CASE:
                            case CDECL:
                            case CLASS:
                            case COLON:
                            case COMMA:
                            case CONST:
                            case CONSTRUCTOR:
                            case ControlString:
                            case DEPRECATED:
                            case DESTRUCTOR:
                            case DISPID:
                            case DIV:
                            case DO:
                            case DOT:
                            case DOTDOT:
                            case DOWNTO:
                            case ELSE:
                            case END:
                            case EQUAL:
                            case EXCEPT:
                            case EXPERIMENTAL:
                            case EXPORTS:
                            case EXTERNAL:
                            case FALSE:
                            case FAR:
                            case FINALIZATION:
                            case FINALLY:
                            case FUNCTION:
                            case GE:
                            case GT:
                            case IMPLEMENTATION:
                            case IN:
                            case INHERITED:
                            case INITIALIZATION:
                            case INLINE:
                            case IS:
                            case LABEL:
                            case LBRACK:
                            case LE:
                            case LIBRARY:
                            case LPAREN:
                            case LT:
                            case MINUS:
                            case MOD:
                            case NEAR:
                            case NIL:
                            case NODEFAULT:
                            case NOT:
                            case NOT_EQUAL:
                            case OF:
                            case ON:
                            case OR:
                            case OVERLOAD:
                            case PASCAL:
                            case PLATFORM:
                            case PLUS:
                            case POINTER2:
                            case PRIVATE:
                            case PROCEDURE:
                            case PROPERTY:
                            case PROTECTED:
                            case PUBLIC:
                            case PUBLISHED:
                            case QuotedString:
                            case RBRACK:
                            case RESIDENT:
                            case RESOURCESTRING:
                            case RPAREN:
                            case SAFECALL:
                            case SEMI:
                            case SHL:
                            case SHR:
                            case SLASH:
                            case STAR:
                            case STDCALL:
                            case THEN:
                            case THREADVAR:
                            case TO:
                            case TRUE:
                            case TYPE:
                            case TkAsmHexNum:
                            case TkHexNum:
                            case TkIntNum:
                            case TkRealNum:
                            case UNSAFE:
                            case UNTIL:
                            case VAR:
                            case VARARGS:
                            case WRITEONLY:
                            case XOR:
                            case 201: {
                                alt210 = 1;
                            }
                            break;
                            case TkIdentifier: {
                                int LA210_4 = input.LA(3);
                                if ((synpred291_Delphi())) {
                                    alt210 = 1;
                                }
                            }
                            break;
                            case 200: {
                                int LA210_5 = input.LA(3);
                                if ((LA210_5 == TkIdentifier)) {
                                    int LA210_21 = input.LA(4);
                                    if ((synpred291_Delphi())) {
                                        alt210 = 1;
                                    }
                                }
                            }
                            break;
                            case NAME: {
                                int LA210_6 = input.LA(3);
                                if ((synpred291_Delphi())) {
                                    alt210 = 1;
                                }
                            }
                            break;
                            case READ: {
                                int LA210_7 = input.LA(3);
                                if ((synpred291_Delphi())) {
                                    alt210 = 1;
                                }
                            }
                            break;
                            case EOF: {
                                alt210 = 1;
                            }
                            break;
                            case WRITE: {
                                int LA210_9 = input.LA(3);
                                if ((synpred291_Delphi())) {
                                    alt210 = 1;
                                }
                            }
                            break;
                            case READONLY: {
                                int LA210_10 = input.LA(3);
                                if ((synpred291_Delphi())) {
                                    alt210 = 1;
                                }
                            }
                            break;
                            case STORED: {
                                int LA210_11 = input.LA(3);
                                if ((synpred291_Delphi())) {
                                    alt210 = 1;
                                }
                            }
                            break;
                            case DEFAULT: {
                                int LA210_12 = input.LA(3);
                                if ((synpred291_Delphi())) {
                                    alt210 = 1;
                                }
                            }
                            break;
                            case IMPLEMENTS: {
                                int LA210_13 = input.LA(3);
                                if ((synpred291_Delphi())) {
                                    alt210 = 1;
                                }
                            }
                            break;
                            case REGISTER: {
                                int LA210_14 = input.LA(3);
                                if ((synpred291_Delphi())) {
                                    alt210 = 1;
                                }
                            }
                            break;
                            case EXPORT: {
                                int LA210_15 = input.LA(3);
                                if ((synpred291_Delphi())) {
                                    alt210 = 1;
                                }
                            }
                            break;
                            case LOCAL: {
                                int LA210_16 = input.LA(3);
                                if ((synpred291_Delphi())) {
                                    alt210 = 1;
                                }
                            }
                            break;
                            case INDEX: {
                                int LA210_17 = input.LA(3);
                                if ((synpred291_Delphi())) {
                                    alt210 = 1;
                                }
                            }
                            break;
                            case STRICT: {
                                int LA210_18 = input.LA(3);
                                if ((synpred291_Delphi())) {
                                    alt210 = 1;
                                }
                            }
                            break;
                            case OPERATOR: {
                                int LA210_19 = input.LA(3);
                                if ((synpred291_Delphi())) {
                                    alt210 = 1;
                                }
                            }
                            break;
                            case ADD:
                            case ANSISTRING:
                            case AT:
                            case BREAK:
                            case CONTAINS:
                            case CONTINUE:
                            case EXIT:
                            case FINAL:
                            case MESSAGE:
                            case OBJECT:
                            case OUT:
                            case POINTER:
                            case REFERENCE:
                            case REMOVE:
                            case STRING:
                            case VARIANT: {
                                int LA210_20 = input.LA(3);
                                if ((synpred291_Delphi())) {
                                    alt210 = 1;
                                }
                            }
                            break;
                        }
                    }
                    switch (alt210) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:478:59: '.' expression
                        {
                            char_literal611 = (Token) match(input, DOT, FOLLOW_DOT_in_factor13172);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) {
                                char_literal611_tree = (Object) adaptor.create(char_literal611);
                                adaptor.addChild(root_0, char_literal611_tree);
                            }

                            pushFollow(FOLLOW_expression_in_factor13174);
                            expression612 = expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, expression612.getTree());

                        }
                        break;

                    }

                }
                break;
                case 14:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:479:32: stringFactor
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_stringFactor_in_factor13217);
                    stringFactor613 = stringFactor();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, stringFactor613.getTree());

                }
                break;
                case 15:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:480:32: setSection
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_setSection_in_factor13250);
                    setSection614 = setSection();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, setSection614.getTree());

                }
                break;
                case 16:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:481:32: designator
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_designator_in_factor13283);
                    designator615 = designator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, designator615.getTree());

                }
                break;
                case 17:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:482:32: typeId '(' expression ')'
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_typeId_in_factor13316);
                    typeId616 = typeId();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, typeId616.getTree());

                    char_literal617 = (Token) match(input, LPAREN, FOLLOW_LPAREN_in_factor13318);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal617_tree = (Object) adaptor.create(char_literal617);
                        adaptor.addChild(root_0, char_literal617_tree);
                    }

                    pushFollow(FOLLOW_expression_in_factor13320);
                    expression618 = expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, expression618.getTree());

                    char_literal619 = (Token) match(input, RPAREN, FOLLOW_RPAREN_in_factor13322);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal619_tree = (Object) adaptor.create(char_literal619);
                        adaptor.addChild(root_0, char_literal619_tree);
                    }

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 120, factor_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "stringFactor"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:484:1: stringFactor : ( ControlString ( QuotedString ControlString )* ( QuotedString )? | QuotedString ( ControlString QuotedString )* ( ControlString )? );
    public final DelphiParser.stringFactor_return stringFactor() throws RecognitionException {
        DelphiParser.stringFactor_return retval = new DelphiParser.stringFactor_return();
        retval.start = input.LT(1);
        int stringFactor_StartIndex = input.index();

        Object root_0 = null;

        Token ControlString620 = null;
        Token QuotedString621 = null;
        Token ControlString622 = null;
        Token QuotedString623 = null;
        Token QuotedString624 = null;
        Token ControlString625 = null;
        Token QuotedString626 = null;
        Token ControlString627 = null;

        Object ControlString620_tree = null;
        Object QuotedString621_tree = null;
        Object ControlString622_tree = null;
        Object QuotedString623_tree = null;
        Object QuotedString624_tree = null;
        Object ControlString625_tree = null;
        Object QuotedString626_tree = null;
        Object ControlString627_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 121)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:484:30: ( ControlString ( QuotedString ControlString )* ( QuotedString )? | QuotedString ( ControlString QuotedString )* ( ControlString )? )
            int alt216 = 2;
            int LA216_0 = input.LA(1);
            if ((LA216_0 == ControlString)) {
                alt216 = 1;
            } else if ((LA216_0 == QuotedString)) {
                alt216 = 2;
            } else {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae =
                        new NoViableAltException("", 216, 0, input);
                throw nvae;
            }

            switch (alt216) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:484:32: ControlString ( QuotedString ControlString )* ( QuotedString )?
                {
                    root_0 = (Object) adaptor.nil();


                    ControlString620 = (Token) match(input, ControlString, FOLLOW_ControlString_in_stringFactor13375);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        ControlString620_tree = (Object) adaptor.create(ControlString620);
                        adaptor.addChild(root_0, ControlString620_tree);
                    }

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:484:46: ( QuotedString ControlString )*
                    loop212:
                    while (true) {
                        int alt212 = 2;
                        int LA212_0 = input.LA(1);
                        if ((LA212_0 == QuotedString)) {
                            int LA212_1 = input.LA(2);
                            if ((LA212_1 == ControlString)) {
                                int LA212_3 = input.LA(3);
                                if ((synpred296_Delphi())) {
                                    alt212 = 1;
                                }

                            }

                        }

                        switch (alt212) {
                            case 1:
                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:484:47: QuotedString ControlString
                            {
                                QuotedString621 = (Token) match(input, QuotedString, FOLLOW_QuotedString_in_stringFactor13378);
                                if (state.failed) return retval;
                                if (state.backtracking == 0) {
                                    QuotedString621_tree = (Object) adaptor.create(QuotedString621);
                                    adaptor.addChild(root_0, QuotedString621_tree);
                                }

                                ControlString622 = (Token) match(input, ControlString, FOLLOW_ControlString_in_stringFactor13380);
                                if (state.failed) return retval;
                                if (state.backtracking == 0) {
                                    ControlString622_tree = (Object) adaptor.create(ControlString622);
                                    adaptor.addChild(root_0, ControlString622_tree);
                                }

                            }
                            break;

                            default:
                                break loop212;
                        }
                    }

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:484:76: ( QuotedString )?
                    int alt213 = 2;
                    int LA213_0 = input.LA(1);
                    if ((LA213_0 == QuotedString)) {
                        int LA213_1 = input.LA(2);
                        if ((synpred297_Delphi())) {
                            alt213 = 1;
                        }
                    }
                    switch (alt213) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:484:77: QuotedString
                        {
                            QuotedString623 = (Token) match(input, QuotedString, FOLLOW_QuotedString_in_stringFactor13385);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) {
                                QuotedString623_tree = (Object) adaptor.create(QuotedString623);
                                adaptor.addChild(root_0, QuotedString623_tree);
                            }

                        }
                        break;

                    }

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:485:32: QuotedString ( ControlString QuotedString )* ( ControlString )?
                {
                    root_0 = (Object) adaptor.nil();


                    QuotedString624 = (Token) match(input, QuotedString, FOLLOW_QuotedString_in_stringFactor13420);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        QuotedString624_tree = (Object) adaptor.create(QuotedString624);
                        adaptor.addChild(root_0, QuotedString624_tree);
                    }

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:485:45: ( ControlString QuotedString )*
                    loop214:
                    while (true) {
                        int alt214 = 2;
                        int LA214_0 = input.LA(1);
                        if ((LA214_0 == ControlString)) {
                            int LA214_1 = input.LA(2);
                            if ((LA214_1 == QuotedString)) {
                                int LA214_3 = input.LA(3);
                                if ((synpred299_Delphi())) {
                                    alt214 = 1;
                                }

                            }

                        }

                        switch (alt214) {
                            case 1:
                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:485:46: ControlString QuotedString
                            {
                                ControlString625 = (Token) match(input, ControlString, FOLLOW_ControlString_in_stringFactor13423);
                                if (state.failed) return retval;
                                if (state.backtracking == 0) {
                                    ControlString625_tree = (Object) adaptor.create(ControlString625);
                                    adaptor.addChild(root_0, ControlString625_tree);
                                }

                                QuotedString626 = (Token) match(input, QuotedString, FOLLOW_QuotedString_in_stringFactor13425);
                                if (state.failed) return retval;
                                if (state.backtracking == 0) {
                                    QuotedString626_tree = (Object) adaptor.create(QuotedString626);
                                    adaptor.addChild(root_0, QuotedString626_tree);
                                }

                            }
                            break;

                            default:
                                break loop214;
                        }
                    }

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:485:75: ( ControlString )?
                    int alt215 = 2;
                    int LA215_0 = input.LA(1);
                    if ((LA215_0 == ControlString)) {
                        int LA215_1 = input.LA(2);
                        if ((synpred300_Delphi())) {
                            alt215 = 1;
                        }
                    }
                    switch (alt215) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:485:76: ControlString
                        {
                            ControlString627 = (Token) match(input, ControlString, FOLLOW_ControlString_in_stringFactor13430);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) {
                                ControlString627_tree = (Object) adaptor.create(ControlString627);
                                adaptor.addChild(root_0, ControlString627_tree);
                            }

                        }
                        break;

                    }

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 121, stringFactor_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "setSection"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:487:1: setSection : '[' ( expression ( ( ',' | '..' ) expression )* )? ']' ;
    public final DelphiParser.setSection_return setSection() throws RecognitionException {
        DelphiParser.setSection_return retval = new DelphiParser.setSection_return();
        retval.start = input.LT(1);
        int setSection_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal628 = null;
        Token set630 = null;
        Token char_literal632 = null;
        ParserRuleReturnScope expression629 = null;
        ParserRuleReturnScope expression631 = null;

        Object char_literal628_tree = null;
        Object set630_tree = null;
        Object char_literal632_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 122)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:487:30: ( '[' ( expression ( ( ',' | '..' ) expression )* )? ']' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:487:32: '[' ( expression ( ( ',' | '..' ) expression )* )? ']'
            {
                root_0 = (Object) adaptor.nil();


                char_literal628 = (Token) match(input, LBRACK, FOLLOW_LBRACK_in_setSection13487);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    char_literal628_tree = (Object) adaptor.create(char_literal628);
                    adaptor.addChild(root_0, char_literal628_tree);
                }

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:487:36: ( expression ( ( ',' | '..' ) expression )* )?
                int alt218 = 2;
                int LA218_0 = input.LA(1);
                if (((LA218_0 >= ADD && LA218_0 <= ANSISTRING) || LA218_0 == AS || (LA218_0 >= AT && LA218_0 <= AT2) || LA218_0 == BREAK || LA218_0 == COMMA || (LA218_0 >= CONTAINS && LA218_0 <= ControlString) || LA218_0 == DEFAULT || LA218_0 == DIV || (LA218_0 >= DOT && LA218_0 <= DOTDOT) || LA218_0 == EQUAL || LA218_0 == EXIT || LA218_0 == EXPORT || LA218_0 == FALSE || LA218_0 == FINAL || (LA218_0 >= FUNCTION && LA218_0 <= GE) || LA218_0 == GT || (LA218_0 >= IMPLEMENTS && LA218_0 <= INHERITED) || LA218_0 == IS || LA218_0 == LBRACK || LA218_0 == LE || (LA218_0 >= LOCAL && LA218_0 <= NAME) || LA218_0 == NIL || (LA218_0 >= NOT && LA218_0 <= OBJECT) || (LA218_0 >= OPERATOR && LA218_0 <= OUT) || (LA218_0 >= PLUS && LA218_0 <= POINTER2) || LA218_0 == PROCEDURE || LA218_0 == QuotedString || (LA218_0 >= READ && LA218_0 <= READONLY) || (LA218_0 >= REFERENCE && LA218_0 <= REGISTER) || LA218_0 == REMOVE || (LA218_0 >= SHL && LA218_0 <= STAR) || (LA218_0 >= STORED && LA218_0 <= STRING) || LA218_0 == TRUE || LA218_0 == TkAsmHexNum || (LA218_0 >= TkHexNum && LA218_0 <= TkIntNum) || LA218_0 == TkRealNum || LA218_0 == VARIANT || LA218_0 == WRITE || (LA218_0 >= XOR && LA218_0 <= 201))) {
                    alt218 = 1;
                } else if ((LA218_0 == RBRACK)) {
                    int LA218_2 = input.LA(2);
                    if ((synpred303_Delphi())) {
                        alt218 = 1;
                    }
                }
                switch (alt218) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:487:37: expression ( ( ',' | '..' ) expression )*
                    {
                        pushFollow(FOLLOW_expression_in_setSection13490);
                        expression629 = expression();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) adaptor.addChild(root_0, expression629.getTree());

                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:487:48: ( ( ',' | '..' ) expression )*
                        loop217:
                        while (true) {
                            int alt217 = 2;
                            int LA217_0 = input.LA(1);
                            if ((LA217_0 == COMMA || LA217_0 == DOTDOT)) {
                                alt217 = 1;
                            }

                            switch (alt217) {
                                case 1:
                                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:487:49: ( ',' | '..' ) expression
                                {
                                    set630 = input.LT(1);
                                    if (input.LA(1) == COMMA || input.LA(1) == DOTDOT) {
                                        input.consume();
                                        if (state.backtracking == 0)
                                            adaptor.addChild(root_0, (Object) adaptor.create(set630));
                                        state.errorRecovery = false;
                                        state.failed = false;
                                    } else {
                                        if (state.backtracking > 0) {
                                            state.failed = true;
                                            return retval;
                                        }
                                        MismatchedSetException mse = new MismatchedSetException(null, input);
                                        throw mse;
                                    }
                                    pushFollow(FOLLOW_expression_in_setSection13501);
                                    expression631 = expression();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if (state.backtracking == 0) adaptor.addChild(root_0, expression631.getTree());

                                }
                                break;

                                default:
                                    break loop217;
                            }
                        }

                    }
                    break;

                }

                char_literal632 = (Token) match(input, RBRACK, FOLLOW_RBRACK_in_setSection13507);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    char_literal632_tree = (Object) adaptor.create(char_literal632);
                    adaptor.addChild(root_0, char_literal632_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 122, setSection_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "designator"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:1: designator : ( 'inherited' )? ( ( namespacedQualifiedIdent | typeId ) )? ( designatorItem )* ;
    public final DelphiParser.designator_return designator() throws RecognitionException {
        DelphiParser.designator_return retval = new DelphiParser.designator_return();
        retval.start = input.LT(1);
        int designator_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal633 = null;
        ParserRuleReturnScope namespacedQualifiedIdent634 = null;
        ParserRuleReturnScope typeId635 = null;
        ParserRuleReturnScope designatorItem636 = null;

        Object string_literal633_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 123)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:30: ( ( 'inherited' )? ( ( namespacedQualifiedIdent | typeId ) )? ( designatorItem )* )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:32: ( 'inherited' )? ( ( namespacedQualifiedIdent | typeId ) )? ( designatorItem )*
            {
                root_0 = (Object) adaptor.nil();


                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:32: ( 'inherited' )?
                int alt219 = 2;
                int LA219_0 = input.LA(1);
                if ((LA219_0 == INHERITED)) {
                    int LA219_1 = input.LA(2);
                    if ((synpred304_Delphi())) {
                        alt219 = 1;
                    }
                }
                switch (alt219) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:33: 'inherited'
                    {
                        string_literal633 = (Token) match(input, INHERITED, FOLLOW_INHERITED_in_designator13564);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) {
                            string_literal633_tree = (Object) adaptor.create(string_literal633);
                            adaptor.addChild(root_0, string_literal633_tree);
                        }

                    }
                    break;

                }

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:47: ( ( namespacedQualifiedIdent | typeId ) )?
                int alt221 = 2;
                switch (input.LA(1)) {
                    case TkIdentifier: {
                        int LA221_1 = input.LA(2);
                        if ((synpred306_Delphi())) {
                            alt221 = 1;
                        }
                    }
                    break;
                    case 200: {
                        int LA221_2 = input.LA(2);
                        if ((synpred306_Delphi())) {
                            alt221 = 1;
                        }
                    }
                    break;
                    case NAME: {
                        int LA221_3 = input.LA(2);
                        if ((synpred306_Delphi())) {
                            alt221 = 1;
                        }
                    }
                    break;
                    case READ: {
                        int LA221_5 = input.LA(2);
                        if ((synpred306_Delphi())) {
                            alt221 = 1;
                        }
                    }
                    break;
                    case WRITE: {
                        int LA221_6 = input.LA(2);
                        if ((synpred306_Delphi())) {
                            alt221 = 1;
                        }
                    }
                    break;
                    case READONLY: {
                        int LA221_7 = input.LA(2);
                        if ((synpred306_Delphi())) {
                            alt221 = 1;
                        }
                    }
                    break;
                    case STORED: {
                        int LA221_8 = input.LA(2);
                        if ((synpred306_Delphi())) {
                            alt221 = 1;
                        }
                    }
                    break;
                    case DEFAULT: {
                        int LA221_9 = input.LA(2);
                        if ((synpred306_Delphi())) {
                            alt221 = 1;
                        }
                    }
                    break;
                    case IMPLEMENTS: {
                        int LA221_10 = input.LA(2);
                        if ((synpred306_Delphi())) {
                            alt221 = 1;
                        }
                    }
                    break;
                    case REGISTER: {
                        int LA221_11 = input.LA(2);
                        if ((synpred306_Delphi())) {
                            alt221 = 1;
                        }
                    }
                    break;
                    case EXPORT: {
                        int LA221_12 = input.LA(2);
                        if ((synpred306_Delphi())) {
                            alt221 = 1;
                        }
                    }
                    break;
                    case LOCAL: {
                        int LA221_13 = input.LA(2);
                        if ((synpred306_Delphi())) {
                            alt221 = 1;
                        }
                    }
                    break;
                    case INDEX: {
                        int LA221_14 = input.LA(2);
                        if ((synpred306_Delphi())) {
                            alt221 = 1;
                        }
                    }
                    break;
                    case STRICT: {
                        int LA221_15 = input.LA(2);
                        if ((synpred306_Delphi())) {
                            alt221 = 1;
                        }
                    }
                    break;
                    case OPERATOR: {
                        int LA221_16 = input.LA(2);
                        if ((synpred306_Delphi())) {
                            alt221 = 1;
                        }
                    }
                    break;
                    case AT: {
                        int LA221_17 = input.LA(2);
                        if ((synpred306_Delphi())) {
                            alt221 = 1;
                        }
                    }
                    break;
                    case ADD:
                    case ANSISTRING:
                    case BREAK:
                    case CONTAINS:
                    case CONTINUE:
                    case EXIT:
                    case FINAL:
                    case MESSAGE:
                    case OBJECT:
                    case OUT:
                    case POINTER:
                    case REFERENCE:
                    case REMOVE:
                    case STRING:
                    case VARIANT: {
                        int LA221_18 = input.LA(2);
                        if ((synpred306_Delphi())) {
                            alt221 = 1;
                        }
                    }
                    break;
                }
                switch (alt221) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:49: ( namespacedQualifiedIdent | typeId )
                    {
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:49: ( namespacedQualifiedIdent | typeId )
                        int alt220 = 2;
                        switch (input.LA(1)) {
                            case TkIdentifier: {
                                int LA220_1 = input.LA(2);
                                if ((synpred305_Delphi())) {
                                    alt220 = 1;
                                } else if ((true)) {
                                    alt220 = 2;
                                }

                            }
                            break;
                            case 200: {
                                int LA220_2 = input.LA(2);
                                if ((LA220_2 == TkIdentifier)) {
                                    int LA220_6 = input.LA(3);
                                    if ((synpred305_Delphi())) {
                                        alt220 = 1;
                                    } else if ((true)) {
                                        alt220 = 2;
                                    }

                                } else {
                                    if (state.backtracking > 0) {
                                        state.failed = true;
                                        return retval;
                                    }
                                    int nvaeMark = input.mark();
                                    try {
                                        input.consume();
                                        NoViableAltException nvae =
                                                new NoViableAltException("", 220, 2, input);
                                        throw nvae;
                                    } finally {
                                        input.rewind(nvaeMark);
                                    }
                                }

                            }
                            break;
                            case ADD:
                            case ANSISTRING:
                            case AT:
                            case BREAK:
                            case CONTAINS:
                            case CONTINUE:
                            case DEFAULT:
                            case EXIT:
                            case EXPORT:
                            case FINAL:
                            case IMPLEMENTS:
                            case INDEX:
                            case LOCAL:
                            case MESSAGE:
                            case NAME:
                            case OBJECT:
                            case OPERATOR:
                            case OUT:
                            case POINTER:
                            case READ:
                            case READONLY:
                            case REFERENCE:
                            case REGISTER:
                            case REMOVE:
                            case STORED:
                            case STRICT:
                            case STRING:
                            case VARIANT:
                            case WRITE: {
                                int LA220_3 = input.LA(2);
                                if ((synpred305_Delphi())) {
                                    alt220 = 1;
                                } else if ((true)) {
                                    alt220 = 2;
                                }

                            }
                            break;
                            default:
                                if (state.backtracking > 0) {
                                    state.failed = true;
                                    return retval;
                                }
                                NoViableAltException nvae =
                                        new NoViableAltException("", 220, 0, input);
                                throw nvae;
                        }
                        switch (alt220) {
                            case 1:
                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:50: namespacedQualifiedIdent
                            {
                                pushFollow(FOLLOW_namespacedQualifiedIdent_in_designator13571);
                                namespacedQualifiedIdent634 = namespacedQualifiedIdent();
                                state._fsp--;
                                if (state.failed) return retval;
                                if (state.backtracking == 0)
                                    adaptor.addChild(root_0, namespacedQualifiedIdent634.getTree());

                            }
                            break;
                            case 2:
                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:77: typeId
                            {
                                pushFollow(FOLLOW_typeId_in_designator13575);
                                typeId635 = typeId();
                                state._fsp--;
                                if (state.failed) return retval;
                                if (state.backtracking == 0) adaptor.addChild(root_0, typeId635.getTree());

                            }
                            break;

                        }

                    }
                    break;

                }

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:88: ( designatorItem )*
                loop222:
                while (true) {
                    int alt222 = 2;
                    alt222 = dfa222.predict(input);
                    switch (alt222) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:89: designatorItem
                        {
                            pushFollow(FOLLOW_designatorItem_in_designator13582);
                            designatorItem636 = designatorItem();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, designatorItem636.getTree());

                        }
                        break;

                        default:
                            break loop222;
                    }
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 123, designator_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "designatorItem"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:492:1: designatorItem : ( '^' | ( '.' | '@' ) ident | ( '<' genericTypeIdent ( ',' genericTypeIdent )* '>' ) | '[' expressionList ']' | '(' ( expression ( colonConstruct )? ( ',' expression ( colonConstruct )? )* )? ')' -> '(' ( expression ( colonConstruct )? ( expression ( colonConstruct )? )* )? ')' );
    public final DelphiParser.designatorItem_return designatorItem() throws RecognitionException {
        DelphiParser.designatorItem_return retval = new DelphiParser.designatorItem_return();
        retval.start = input.LT(1);
        int designatorItem_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal637 = null;
        Token set638 = null;
        Token char_literal640 = null;
        Token char_literal642 = null;
        Token char_literal644 = null;
        Token char_literal645 = null;
        Token char_literal647 = null;
        Token char_literal648 = null;
        Token char_literal651 = null;
        Token char_literal654 = null;
        ParserRuleReturnScope ident639 = null;
        ParserRuleReturnScope genericTypeIdent641 = null;
        ParserRuleReturnScope genericTypeIdent643 = null;
        ParserRuleReturnScope expressionList646 = null;
        ParserRuleReturnScope expression649 = null;
        ParserRuleReturnScope colonConstruct650 = null;
        ParserRuleReturnScope expression652 = null;
        ParserRuleReturnScope colonConstruct653 = null;

        Object char_literal637_tree = null;
        Object set638_tree = null;
        Object char_literal640_tree = null;
        Object char_literal642_tree = null;
        Object char_literal644_tree = null;
        Object char_literal645_tree = null;
        Object char_literal647_tree = null;
        Object char_literal648_tree = null;
        Object char_literal651_tree = null;
        Object char_literal654_tree = null;
        RewriteRuleTokenStream stream_COMMA = new RewriteRuleTokenStream(adaptor, "token COMMA");
        RewriteRuleTokenStream stream_LPAREN = new RewriteRuleTokenStream(adaptor, "token LPAREN");
        RewriteRuleTokenStream stream_RPAREN = new RewriteRuleTokenStream(adaptor, "token RPAREN");
        RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor, "rule expression");
        RewriteRuleSubtreeStream stream_colonConstruct = new RewriteRuleSubtreeStream(adaptor, "rule colonConstruct");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 124)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:492:30: ( '^' | ( '.' | '@' ) ident | ( '<' genericTypeIdent ( ',' genericTypeIdent )* '>' ) | '[' expressionList ']' | '(' ( expression ( colonConstruct )? ( ',' expression ( colonConstruct )? )* )? ')' -> '(' ( expression ( colonConstruct )? ( expression ( colonConstruct )? )* )? ')' )
            int alt228 = 5;
            switch (input.LA(1)) {
                case POINTER2: {
                    alt228 = 1;
                }
                break;
                case AT2:
                case DOT: {
                    alt228 = 2;
                }
                break;
                case LT: {
                    alt228 = 3;
                }
                break;
                case LBRACK: {
                    alt228 = 4;
                }
                break;
                case LPAREN: {
                    alt228 = 5;
                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae =
                            new NoViableAltException("", 228, 0, input);
                    throw nvae;
            }
            switch (alt228) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:492:32: '^'
                {
                    root_0 = (Object) adaptor.nil();


                    char_literal637 = (Token) match(input, POINTER2, FOLLOW_POINTER2_in_designatorItem13635);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal637_tree = (Object) adaptor.create(char_literal637);
                        adaptor.addChild(root_0, char_literal637_tree);
                    }

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:493:32: ( '.' | '@' ) ident
                {
                    root_0 = (Object) adaptor.nil();


                    set638 = input.LT(1);
                    if (input.LA(1) == AT2 || input.LA(1) == DOT) {
                        input.consume();
                        if (state.backtracking == 0) adaptor.addChild(root_0, (Object) adaptor.create(set638));
                        state.errorRecovery = false;
                        state.failed = false;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        MismatchedSetException mse = new MismatchedSetException(null, input);
                        throw mse;
                    }
                    pushFollow(FOLLOW_ident_in_designatorItem13676);
                    ident639 = ident();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, ident639.getTree());

                }
                break;
                case 3:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:494:32: ( '<' genericTypeIdent ( ',' genericTypeIdent )* '>' )
                {
                    root_0 = (Object) adaptor.nil();


                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:494:32: ( '<' genericTypeIdent ( ',' genericTypeIdent )* '>' )
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:494:33: '<' genericTypeIdent ( ',' genericTypeIdent )* '>'
                    {
                        char_literal640 = (Token) match(input, LT, FOLLOW_LT_in_designatorItem13724);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) {
                            char_literal640_tree = (Object) adaptor.create(char_literal640);
                            adaptor.addChild(root_0, char_literal640_tree);
                        }

                        pushFollow(FOLLOW_genericTypeIdent_in_designatorItem13726);
                        genericTypeIdent641 = genericTypeIdent();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) adaptor.addChild(root_0, genericTypeIdent641.getTree());

                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:494:54: ( ',' genericTypeIdent )*
                        loop223:
                        while (true) {
                            int alt223 = 2;
                            int LA223_0 = input.LA(1);
                            if ((LA223_0 == COMMA)) {
                                alt223 = 1;
                            }

                            switch (alt223) {
                                case 1:
                                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:494:55: ',' genericTypeIdent
                                {
                                    char_literal642 = (Token) match(input, COMMA, FOLLOW_COMMA_in_designatorItem13729);
                                    if (state.failed) return retval;
                                    if (state.backtracking == 0) {
                                        char_literal642_tree = (Object) adaptor.create(char_literal642);
                                        adaptor.addChild(root_0, char_literal642_tree);
                                    }

                                    pushFollow(FOLLOW_genericTypeIdent_in_designatorItem13731);
                                    genericTypeIdent643 = genericTypeIdent();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if (state.backtracking == 0)
                                        adaptor.addChild(root_0, genericTypeIdent643.getTree());

                                }
                                break;

                                default:
                                    break loop223;
                            }
                        }

                        char_literal644 = (Token) match(input, GT, FOLLOW_GT_in_designatorItem13735);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) {
                            char_literal644_tree = (Object) adaptor.create(char_literal644);
                            adaptor.addChild(root_0, char_literal644_tree);
                        }

                    }

                }
                break;
                case 4:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:495:32: '[' expressionList ']'
                {
                    root_0 = (Object) adaptor.nil();


                    char_literal645 = (Token) match(input, LBRACK, FOLLOW_LBRACK_in_designatorItem13776);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal645_tree = (Object) adaptor.create(char_literal645);
                        adaptor.addChild(root_0, char_literal645_tree);
                    }

                    pushFollow(FOLLOW_expressionList_in_designatorItem13778);
                    expressionList646 = expressionList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, expressionList646.getTree());

                    char_literal647 = (Token) match(input, RBRACK, FOLLOW_RBRACK_in_designatorItem13780);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal647_tree = (Object) adaptor.create(char_literal647);
                        adaptor.addChild(root_0, char_literal647_tree);
                    }

                }
                break;
                case 5:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:496:32: '(' ( expression ( colonConstruct )? ( ',' expression ( colonConstruct )? )* )? ')'
                {
                    char_literal648 = (Token) match(input, LPAREN, FOLLOW_LPAREN_in_designatorItem13813);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_LPAREN.add(char_literal648);

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:496:36: ( expression ( colonConstruct )? ( ',' expression ( colonConstruct )? )* )?
                    int alt227 = 2;
                    int LA227_0 = input.LA(1);
                    if (((LA227_0 >= ADD && LA227_0 <= ANSISTRING) || LA227_0 == AS || (LA227_0 >= AT && LA227_0 <= AT2) || LA227_0 == BREAK || (LA227_0 >= COLON && LA227_0 <= COMMA) || (LA227_0 >= CONTAINS && LA227_0 <= ControlString) || LA227_0 == DEFAULT || LA227_0 == DIV || LA227_0 == DOT || LA227_0 == EQUAL || LA227_0 == EXIT || LA227_0 == EXPORT || LA227_0 == FALSE || LA227_0 == FINAL || (LA227_0 >= FUNCTION && LA227_0 <= GE) || LA227_0 == GT || (LA227_0 >= IMPLEMENTS && LA227_0 <= INHERITED) || LA227_0 == IS || LA227_0 == LBRACK || LA227_0 == LE || (LA227_0 >= LOCAL && LA227_0 <= NAME) || LA227_0 == NIL || (LA227_0 >= NOT && LA227_0 <= OBJECT) || (LA227_0 >= OPERATOR && LA227_0 <= OUT) || (LA227_0 >= PLUS && LA227_0 <= POINTER2) || LA227_0 == PROCEDURE || LA227_0 == QuotedString || (LA227_0 >= READ && LA227_0 <= READONLY) || (LA227_0 >= REFERENCE && LA227_0 <= REGISTER) || LA227_0 == REMOVE || (LA227_0 >= SHL && LA227_0 <= STAR) || (LA227_0 >= STORED && LA227_0 <= STRING) || LA227_0 == TRUE || LA227_0 == TkAsmHexNum || (LA227_0 >= TkHexNum && LA227_0 <= TkIntNum) || LA227_0 == TkRealNum || LA227_0 == VARIANT || LA227_0 == WRITE || (LA227_0 >= XOR && LA227_0 <= 201))) {
                        alt227 = 1;
                    } else if ((LA227_0 == RPAREN)) {
                        int LA227_2 = input.LA(2);
                        if ((synpred317_Delphi())) {
                            alt227 = 1;
                        }
                    }
                    switch (alt227) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:496:37: expression ( colonConstruct )? ( ',' expression ( colonConstruct )? )*
                        {
                            pushFollow(FOLLOW_expression_in_designatorItem13816);
                            expression649 = expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_expression.add(expression649.getTree());
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:496:48: ( colonConstruct )?
                            int alt224 = 2;
                            int LA224_0 = input.LA(1);
                            if ((LA224_0 == COLON)) {
                                alt224 = 1;
                            }
                            switch (alt224) {
                                case 1:
                                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:496:49: colonConstruct
                                {
                                    pushFollow(FOLLOW_colonConstruct_in_designatorItem13819);
                                    colonConstruct650 = colonConstruct();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if (state.backtracking == 0) stream_colonConstruct.add(colonConstruct650.getTree());
                                }
                                break;

                            }

                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:496:66: ( ',' expression ( colonConstruct )? )*
                            loop226:
                            while (true) {
                                int alt226 = 2;
                                int LA226_0 = input.LA(1);
                                if ((LA226_0 == COMMA)) {
                                    alt226 = 1;
                                }

                                switch (alt226) {
                                    case 1:
                                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:496:67: ',' expression ( colonConstruct )?
                                    {
                                        char_literal651 = (Token) match(input, COMMA, FOLLOW_COMMA_in_designatorItem13824);
                                        if (state.failed) return retval;
                                        if (state.backtracking == 0) stream_COMMA.add(char_literal651);

                                        pushFollow(FOLLOW_expression_in_designatorItem13826);
                                        expression652 = expression();
                                        state._fsp--;
                                        if (state.failed) return retval;
                                        if (state.backtracking == 0) stream_expression.add(expression652.getTree());
                                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:496:82: ( colonConstruct )?
                                        int alt225 = 2;
                                        int LA225_0 = input.LA(1);
                                        if ((LA225_0 == COLON)) {
                                            alt225 = 1;
                                        }
                                        switch (alt225) {
                                            case 1:
                                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:496:83: colonConstruct
                                            {
                                                pushFollow(FOLLOW_colonConstruct_in_designatorItem13829);
                                                colonConstruct653 = colonConstruct();
                                                state._fsp--;
                                                if (state.failed) return retval;
                                                if (state.backtracking == 0)
                                                    stream_colonConstruct.add(colonConstruct653.getTree());
                                            }
                                            break;

                                        }

                                    }
                                    break;

                                    default:
                                        break loop226;
                                }
                            }

                        }
                        break;

                    }

                    char_literal654 = (Token) match(input, RPAREN, FOLLOW_RPAREN_in_designatorItem13837);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_RPAREN.add(char_literal654);

                    // AST REWRITE
                    // elements: colonConstruct, colonConstruct, expression, LPAREN, expression, RPAREN
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if (state.backtracking == 0) {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                        root_0 = (Object) adaptor.nil();
                        // 496:108: -> '(' ( expression ( colonConstruct )? ( expression ( colonConstruct )? )* )? ')'
                        {
                            adaptor.addChild(root_0, stream_LPAREN.nextNode());
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:496:115: ( expression ( colonConstruct )? ( expression ( colonConstruct )? )* )?
                            if (stream_colonConstruct.hasNext() || stream_expression.hasNext() || stream_expression.hasNext()) {
                                adaptor.addChild(root_0, stream_expression.nextTree());
                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:496:127: ( colonConstruct )?
                                if (stream_colonConstruct.hasNext()) {
                                    adaptor.addChild(root_0, stream_colonConstruct.nextTree());
                                }
                                stream_colonConstruct.reset();

                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:496:145: ( expression ( colonConstruct )? )*
                                while (stream_expression.hasNext()) {
                                    adaptor.addChild(root_0, stream_expression.nextTree());
                                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:496:157: ( colonConstruct )?
                                    if (stream_colonConstruct.hasNext()) {
                                        adaptor.addChild(root_0, stream_colonConstruct.nextTree());
                                    }
                                    stream_colonConstruct.reset();

                                }
                                stream_expression.reset();

                            }
                            stream_colonConstruct.reset();
                            stream_expression.reset();
                            stream_expression.reset();

                            adaptor.addChild(root_0, stream_RPAREN.nextNode());
                        }


                        retval.tree = root_0;
                    }

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 124, designatorItem_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "expressionList"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:1: expressionList : expression ( ',' expression )* ;
    public final DelphiParser.expressionList_return expressionList() throws RecognitionException {
        DelphiParser.expressionList_return retval = new DelphiParser.expressionList_return();
        retval.start = input.LT(1);
        int expressionList_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal656 = null;
        ParserRuleReturnScope expression655 = null;
        ParserRuleReturnScope expression657 = null;

        Object char_literal656_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 125)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:30: ( expression ( ',' expression )* )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:32: expression ( ',' expression )*
            {
                root_0 = (Object) adaptor.nil();


                pushFollow(FOLLOW_expression_in_expressionList13914);
                expression655 = expression();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, expression655.getTree());

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:43: ( ',' expression )*
                loop229:
                while (true) {
                    int alt229 = 2;
                    int LA229_0 = input.LA(1);
                    if ((LA229_0 == COMMA)) {
                        alt229 = 1;
                    }

                    switch (alt229) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:44: ',' expression
                        {
                            char_literal656 = (Token) match(input, COMMA, FOLLOW_COMMA_in_expressionList13917);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) {
                                char_literal656_tree = (Object) adaptor.create(char_literal656);
                                adaptor.addChild(root_0, char_literal656_tree);
                            }

                            pushFollow(FOLLOW_expression_in_expressionList13919);
                            expression657 = expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, expression657.getTree());

                        }
                        break;

                        default:
                            break loop229;
                    }
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 125, expressionList_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "colonConstruct"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:500:1: colonConstruct : ':' expression ( ':' expression )? ;
    public final DelphiParser.colonConstruct_return colonConstruct() throws RecognitionException {
        DelphiParser.colonConstruct_return retval = new DelphiParser.colonConstruct_return();
        retval.start = input.LT(1);
        int colonConstruct_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal658 = null;
        Token char_literal660 = null;
        ParserRuleReturnScope expression659 = null;
        ParserRuleReturnScope expression661 = null;

        Object char_literal658_tree = null;
        Object char_literal660_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 126)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:500:30: ( ':' expression ( ':' expression )? )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:500:32: ':' expression ( ':' expression )?
            {
                root_0 = (Object) adaptor.nil();


                char_literal658 = (Token) match(input, COLON, FOLLOW_COLON_in_colonConstruct13972);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    char_literal658_tree = (Object) adaptor.create(char_literal658);
                    adaptor.addChild(root_0, char_literal658_tree);
                }

                pushFollow(FOLLOW_expression_in_colonConstruct13974);
                expression659 = expression();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, expression659.getTree());

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:500:47: ( ':' expression )?
                int alt230 = 2;
                int LA230_0 = input.LA(1);
                if ((LA230_0 == COLON)) {
                    alt230 = 1;
                }
                switch (alt230) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:500:48: ':' expression
                    {
                        char_literal660 = (Token) match(input, COLON, FOLLOW_COLON_in_colonConstruct13977);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) {
                            char_literal660_tree = (Object) adaptor.create(char_literal660);
                            adaptor.addChild(root_0, char_literal660_tree);
                        }

                        pushFollow(FOLLOW_expression_in_colonConstruct13979);
                        expression661 = expression();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) adaptor.addChild(root_0, expression661.getTree());

                    }
                    break;

                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 126, colonConstruct_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "operator"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:503:1: operator : ( '+' | '-' | 'or' | 'xor' | '*' | '/' | 'div' | 'mod' | 'and' | 'shl' | 'shr' | 'as' );
    public final DelphiParser.operator_return operator() throws RecognitionException {
        DelphiParser.operator_return retval = new DelphiParser.operator_return();
        retval.start = input.LT(1);
        int operator_StartIndex = input.index();

        Object root_0 = null;

        Token set662 = null;

        Object set662_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 127)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:503:30: ( '+' | '-' | 'or' | 'xor' | '*' | '/' | 'div' | 'mod' | 'and' | 'shl' | 'shr' | 'as' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
            {
                root_0 = (Object) adaptor.nil();


                set662 = input.LT(1);
                if (input.LA(1) == AND || input.LA(1) == AS || input.LA(1) == DIV || (input.LA(1) >= MINUS && input.LA(1) <= MOD) || input.LA(1) == OR || input.LA(1) == PLUS || (input.LA(1) >= SHL && input.LA(1) <= STAR) || input.LA(1) == XOR) {
                    input.consume();
                    if (state.backtracking == 0) adaptor.addChild(root_0, (Object) adaptor.create(set662));
                    state.errorRecovery = false;
                    state.failed = false;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 127, operator_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "relOp"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:516:1: relOp : ( '<' | '>' | '<=' | '>=' | '<>' | '=' | 'in' | 'is' );
    public final DelphiParser.relOp_return relOp() throws RecognitionException {
        DelphiParser.relOp_return retval = new DelphiParser.relOp_return();
        retval.start = input.LT(1);
        int relOp_StartIndex = input.index();

        Object root_0 = null;

        Token set663 = null;

        Object set663_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 128)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:516:30: ( '<' | '>' | '<=' | '>=' | '<>' | '=' | 'in' | 'is' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
            {
                root_0 = (Object) adaptor.nil();


                set663 = input.LT(1);
                if (input.LA(1) == EQUAL || input.LA(1) == GE || input.LA(1) == GT || input.LA(1) == IN || input.LA(1) == IS || input.LA(1) == LE || input.LA(1) == LT || input.LA(1) == NOT_EQUAL) {
                    input.consume();
                    if (state.backtracking == 0) adaptor.addChild(root_0, (Object) adaptor.create(set663));
                    state.errorRecovery = false;
                    state.failed = false;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 128, relOp_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "statement"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:529:1: statement : ( ifStatement | caseStatement | repeatStatement | whileStatement | forStatement | withStatement | tryStatement | raiseStatement | assemblerStatement | compoundStatement | label ':' statement | simpleStatement );
    public final DelphiParser.statement_return statement() throws RecognitionException {
        DelphiParser.statement_return retval = new DelphiParser.statement_return();
        retval.start = input.LT(1);
        int statement_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal675 = null;
        ParserRuleReturnScope ifStatement664 = null;
        ParserRuleReturnScope caseStatement665 = null;
        ParserRuleReturnScope repeatStatement666 = null;
        ParserRuleReturnScope whileStatement667 = null;
        ParserRuleReturnScope forStatement668 = null;
        ParserRuleReturnScope withStatement669 = null;
        ParserRuleReturnScope tryStatement670 = null;
        ParserRuleReturnScope raiseStatement671 = null;
        ParserRuleReturnScope assemblerStatement672 = null;
        ParserRuleReturnScope compoundStatement673 = null;
        ParserRuleReturnScope label674 = null;
        ParserRuleReturnScope statement676 = null;
        ParserRuleReturnScope simpleStatement677 = null;

        Object char_literal675_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 129)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:529:30: ( ifStatement | caseStatement | repeatStatement | whileStatement | forStatement | withStatement | tryStatement | raiseStatement | assemblerStatement | compoundStatement | label ':' statement | simpleStatement )
            int alt231 = 12;
            switch (input.LA(1)) {
                case IF: {
                    alt231 = 1;
                }
                break;
                case CASE: {
                    alt231 = 2;
                }
                break;
                case REPEAT: {
                    alt231 = 3;
                }
                break;
                case WHILE: {
                    alt231 = 4;
                }
                break;
                case FOR: {
                    alt231 = 5;
                }
                break;
                case WITH: {
                    alt231 = 6;
                }
                break;
                case TRY: {
                    alt231 = 7;
                }
                break;
                case RAISE: {
                    alt231 = 8;
                }
                break;
                case ASM: {
                    alt231 = 9;
                }
                break;
                case BEGIN: {
                    alt231 = 10;
                }
                break;
                case TkIdentifier: {
                    int LA231_11 = input.LA(2);
                    if ((LA231_11 == COLON)) {
                        int LA231_19 = input.LA(3);
                        if ((synpred348_Delphi())) {
                            alt231 = 11;
                        } else if ((true)) {
                            alt231 = 12;
                        }

                    } else if ((LA231_11 == EOF || (LA231_11 >= ADD && LA231_11 <= ANSISTRING) || LA231_11 == AS || (LA231_11 >= ASSIGN && LA231_11 <= AT2) || LA231_11 == BREAK || LA231_11 == COMMA || (LA231_11 >= CONTAINS && LA231_11 <= ControlString) || LA231_11 == DEFAULT || LA231_11 == DIV || (LA231_11 >= DOT && LA231_11 <= DOTDOT) || (LA231_11 >= ELSE && LA231_11 <= EXIT) || LA231_11 == EXPORT || LA231_11 == FALSE || (LA231_11 >= FINAL && LA231_11 <= FINALLY) || (LA231_11 >= FUNCTION && LA231_11 <= GE) || LA231_11 == GT || (LA231_11 >= IMPLEMENTS && LA231_11 <= INHERITED) || LA231_11 == IS || LA231_11 == LBRACK || LA231_11 == LE || (LA231_11 >= LOCAL && LA231_11 <= NAME) || LA231_11 == NIL || (LA231_11 >= NOT && LA231_11 <= OBJECT) || (LA231_11 >= ON && LA231_11 <= OUT) || (LA231_11 >= PLUS && LA231_11 <= POINTER2) || LA231_11 == PROCEDURE || LA231_11 == QuotedString || (LA231_11 >= READ && LA231_11 <= READONLY) || (LA231_11 >= REFERENCE && LA231_11 <= REGISTER) || LA231_11 == REMOVE || LA231_11 == SEMI || (LA231_11 >= SHL && LA231_11 <= STAR) || (LA231_11 >= STORED && LA231_11 <= STRING) || LA231_11 == TRUE || LA231_11 == TkAsmHexNum || (LA231_11 >= TkHexNum && LA231_11 <= TkIntNum) || LA231_11 == TkRealNum || LA231_11 == UNTIL || LA231_11 == VARIANT || LA231_11 == WRITE || (LA231_11 >= XOR && LA231_11 <= 201))) {
                        alt231 = 12;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try {
                            input.consume();
                            NoViableAltException nvae =
                                    new NoViableAltException("", 231, 11, input);
                            throw nvae;
                        } finally {
                            input.rewind(nvaeMark);
                        }
                    }

                }
                break;
                case TkIntNum: {
                    int LA231_12 = input.LA(2);
                    if ((LA231_12 == COLON)) {
                        int LA231_20 = input.LA(3);
                        if ((synpred348_Delphi())) {
                            alt231 = 11;
                        } else if ((true)) {
                            alt231 = 12;
                        }

                    } else if ((LA231_12 == AND || LA231_12 == AS || LA231_12 == COMMA || LA231_12 == DIV || LA231_12 == DOTDOT || LA231_12 == EQUAL || LA231_12 == GE || LA231_12 == GT || LA231_12 == IN || LA231_12 == IS || LA231_12 == LE || LA231_12 == LT || (LA231_12 >= MINUS && LA231_12 <= MOD) || LA231_12 == NOT_EQUAL || LA231_12 == OR || LA231_12 == PLUS || (LA231_12 >= SHL && LA231_12 <= STAR) || LA231_12 == XOR)) {
                        alt231 = 12;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try {
                            input.consume();
                            NoViableAltException nvae =
                                    new NoViableAltException("", 231, 12, input);
                            throw nvae;
                        } finally {
                            input.rewind(nvaeMark);
                        }
                    }

                }
                break;
                case TkHexNum: {
                    int LA231_13 = input.LA(2);
                    if ((LA231_13 == COLON)) {
                        int LA231_21 = input.LA(3);
                        if ((synpred348_Delphi())) {
                            alt231 = 11;
                        } else if ((true)) {
                            alt231 = 12;
                        }

                    } else if ((LA231_13 == AND || LA231_13 == AS || LA231_13 == COMMA || LA231_13 == DIV || LA231_13 == DOTDOT || LA231_13 == EQUAL || LA231_13 == GE || LA231_13 == GT || LA231_13 == IN || LA231_13 == IS || LA231_13 == LE || LA231_13 == LT || (LA231_13 >= MINUS && LA231_13 <= MOD) || LA231_13 == NOT_EQUAL || LA231_13 == OR || LA231_13 == PLUS || (LA231_13 >= SHL && LA231_13 <= STAR) || LA231_13 == XOR)) {
                        alt231 = 12;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try {
                            input.consume();
                            NoViableAltException nvae =
                                    new NoViableAltException("", 231, 13, input);
                            throw nvae;
                        } finally {
                            input.rewind(nvaeMark);
                        }
                    }

                }
                break;
                case EXIT: {
                    int LA231_14 = input.LA(2);
                    if ((LA231_14 == COLON)) {
                        int LA231_22 = input.LA(3);
                        if ((synpred348_Delphi())) {
                            alt231 = 11;
                        } else if ((true)) {
                            alt231 = 12;
                        }

                    } else if ((LA231_14 == EOF || (LA231_14 >= ADD && LA231_14 <= ANSISTRING) || LA231_14 == AS || (LA231_14 >= ASSIGN && LA231_14 <= AT2) || LA231_14 == BREAK || LA231_14 == COMMA || (LA231_14 >= CONTAINS && LA231_14 <= ControlString) || LA231_14 == DEFAULT || LA231_14 == DIV || (LA231_14 >= DOT && LA231_14 <= DOTDOT) || (LA231_14 >= ELSE && LA231_14 <= EXIT) || LA231_14 == EXPORT || LA231_14 == FALSE || (LA231_14 >= FINAL && LA231_14 <= FINALLY) || (LA231_14 >= FUNCTION && LA231_14 <= GE) || LA231_14 == GT || (LA231_14 >= IMPLEMENTS && LA231_14 <= INHERITED) || LA231_14 == IS || LA231_14 == LBRACK || LA231_14 == LE || (LA231_14 >= LOCAL && LA231_14 <= NAME) || LA231_14 == NIL || (LA231_14 >= NOT && LA231_14 <= OBJECT) || (LA231_14 >= ON && LA231_14 <= OUT) || (LA231_14 >= PLUS && LA231_14 <= POINTER2) || LA231_14 == PROCEDURE || LA231_14 == QuotedString || (LA231_14 >= READ && LA231_14 <= READONLY) || (LA231_14 >= REFERENCE && LA231_14 <= REGISTER) || LA231_14 == REMOVE || LA231_14 == SEMI || (LA231_14 >= SHL && LA231_14 <= STAR) || (LA231_14 >= STORED && LA231_14 <= STRING) || LA231_14 == TRUE || LA231_14 == TkAsmHexNum || (LA231_14 >= TkHexNum && LA231_14 <= TkIntNum) || LA231_14 == TkRealNum || LA231_14 == UNTIL || LA231_14 == VARIANT || LA231_14 == WRITE || (LA231_14 >= XOR && LA231_14 <= 201))) {
                        alt231 = 12;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try {
                            input.consume();
                            NoViableAltException nvae =
                                    new NoViableAltException("", 231, 14, input);
                            throw nvae;
                        } finally {
                            input.rewind(nvaeMark);
                        }
                    }

                }
                break;
                case EOF:
                case AND:
                case AS:
                case ASSIGN:
                case AT2:
                case COLON:
                case COMMA:
                case ControlString:
                case DIV:
                case DOT:
                case DOTDOT:
                case ELSE:
                case END:
                case EQUAL:
                case EXCEPT:
                case FALSE:
                case FINALIZATION:
                case FINALLY:
                case FUNCTION:
                case GE:
                case GOTO:
                case GT:
                case IN:
                case INHERITED:
                case IS:
                case LBRACK:
                case LE:
                case LPAREN:
                case LT:
                case MINUS:
                case MOD:
                case NIL:
                case NOT:
                case NOT_EQUAL:
                case ON:
                case OR:
                case PLUS:
                case POINTER2:
                case PROCEDURE:
                case QuotedString:
                case SEMI:
                case SHL:
                case SHR:
                case SLASH:
                case STAR:
                case TRUE:
                case TkAsmHexNum:
                case TkRealNum:
                case UNTIL:
                case XOR:
                case 200:
                case 201: {
                    alt231 = 12;
                }
                break;
                case BREAK: {
                    int LA231_16 = input.LA(2);
                    if ((LA231_16 == COLON)) {
                        int LA231_23 = input.LA(3);
                        if ((synpred348_Delphi())) {
                            alt231 = 11;
                        } else if ((true)) {
                            alt231 = 12;
                        }

                    } else if ((LA231_16 == EOF || (LA231_16 >= ADD && LA231_16 <= ANSISTRING) || LA231_16 == AS || (LA231_16 >= ASSIGN && LA231_16 <= AT2) || LA231_16 == BREAK || LA231_16 == COMMA || (LA231_16 >= CONTAINS && LA231_16 <= ControlString) || LA231_16 == DEFAULT || LA231_16 == DIV || (LA231_16 >= DOT && LA231_16 <= DOTDOT) || (LA231_16 >= ELSE && LA231_16 <= EXIT) || LA231_16 == EXPORT || LA231_16 == FALSE || (LA231_16 >= FINAL && LA231_16 <= FINALLY) || (LA231_16 >= FUNCTION && LA231_16 <= GE) || LA231_16 == GT || (LA231_16 >= IMPLEMENTS && LA231_16 <= INHERITED) || LA231_16 == IS || LA231_16 == LBRACK || LA231_16 == LE || (LA231_16 >= LOCAL && LA231_16 <= NAME) || LA231_16 == NIL || (LA231_16 >= NOT && LA231_16 <= OBJECT) || (LA231_16 >= ON && LA231_16 <= OUT) || (LA231_16 >= PLUS && LA231_16 <= POINTER2) || LA231_16 == PROCEDURE || LA231_16 == QuotedString || (LA231_16 >= READ && LA231_16 <= READONLY) || (LA231_16 >= REFERENCE && LA231_16 <= REGISTER) || LA231_16 == REMOVE || LA231_16 == SEMI || (LA231_16 >= SHL && LA231_16 <= STAR) || (LA231_16 >= STORED && LA231_16 <= STRING) || LA231_16 == TRUE || LA231_16 == TkAsmHexNum || (LA231_16 >= TkHexNum && LA231_16 <= TkIntNum) || LA231_16 == TkRealNum || LA231_16 == UNTIL || LA231_16 == VARIANT || LA231_16 == WRITE || (LA231_16 >= XOR && LA231_16 <= 201))) {
                        alt231 = 12;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try {
                            input.consume();
                            NoViableAltException nvae =
                                    new NoViableAltException("", 231, 16, input);
                            throw nvae;
                        } finally {
                            input.rewind(nvaeMark);
                        }
                    }

                }
                break;
                case CONTINUE: {
                    int LA231_17 = input.LA(2);
                    if ((LA231_17 == COLON)) {
                        int LA231_24 = input.LA(3);
                        if ((synpred348_Delphi())) {
                            alt231 = 11;
                        } else if ((true)) {
                            alt231 = 12;
                        }

                    } else if ((LA231_17 == EOF || (LA231_17 >= ADD && LA231_17 <= ANSISTRING) || LA231_17 == AS || (LA231_17 >= ASSIGN && LA231_17 <= AT2) || LA231_17 == BREAK || LA231_17 == COMMA || (LA231_17 >= CONTAINS && LA231_17 <= ControlString) || LA231_17 == DEFAULT || LA231_17 == DIV || (LA231_17 >= DOT && LA231_17 <= DOTDOT) || (LA231_17 >= ELSE && LA231_17 <= EXIT) || LA231_17 == EXPORT || LA231_17 == FALSE || (LA231_17 >= FINAL && LA231_17 <= FINALLY) || (LA231_17 >= FUNCTION && LA231_17 <= GE) || LA231_17 == GT || (LA231_17 >= IMPLEMENTS && LA231_17 <= INHERITED) || LA231_17 == IS || LA231_17 == LBRACK || LA231_17 == LE || (LA231_17 >= LOCAL && LA231_17 <= NAME) || LA231_17 == NIL || (LA231_17 >= NOT && LA231_17 <= OBJECT) || (LA231_17 >= ON && LA231_17 <= OUT) || (LA231_17 >= PLUS && LA231_17 <= POINTER2) || LA231_17 == PROCEDURE || LA231_17 == QuotedString || (LA231_17 >= READ && LA231_17 <= READONLY) || (LA231_17 >= REFERENCE && LA231_17 <= REGISTER) || LA231_17 == REMOVE || LA231_17 == SEMI || (LA231_17 >= SHL && LA231_17 <= STAR) || (LA231_17 >= STORED && LA231_17 <= STRING) || LA231_17 == TRUE || LA231_17 == TkAsmHexNum || (LA231_17 >= TkHexNum && LA231_17 <= TkIntNum) || LA231_17 == TkRealNum || LA231_17 == UNTIL || LA231_17 == VARIANT || LA231_17 == WRITE || (LA231_17 >= XOR && LA231_17 <= 201))) {
                        alt231 = 12;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try {
                            input.consume();
                            NoViableAltException nvae =
                                    new NoViableAltException("", 231, 17, input);
                            throw nvae;
                        } finally {
                            input.rewind(nvaeMark);
                        }
                    }

                }
                break;
                case ADD:
                case ANSISTRING:
                case AT:
                case CONTAINS:
                case DEFAULT:
                case EXPORT:
                case FINAL:
                case IMPLEMENTS:
                case INDEX:
                case LOCAL:
                case MESSAGE:
                case NAME:
                case OBJECT:
                case OPERATOR:
                case OUT:
                case POINTER:
                case READ:
                case READONLY:
                case REFERENCE:
                case REGISTER:
                case REMOVE:
                case STORED:
                case STRICT:
                case STRING:
                case VARIANT:
                case WRITE: {
                    int LA231_18 = input.LA(2);
                    if ((LA231_18 == COLON)) {
                        int LA231_25 = input.LA(3);
                        if ((synpred348_Delphi())) {
                            alt231 = 11;
                        } else if ((true)) {
                            alt231 = 12;
                        }

                    } else if ((LA231_18 == EOF || (LA231_18 >= ADD && LA231_18 <= ANSISTRING) || LA231_18 == AS || (LA231_18 >= ASSIGN && LA231_18 <= AT2) || LA231_18 == BREAK || LA231_18 == COMMA || (LA231_18 >= CONTAINS && LA231_18 <= ControlString) || LA231_18 == DEFAULT || LA231_18 == DIV || (LA231_18 >= DOT && LA231_18 <= DOTDOT) || (LA231_18 >= ELSE && LA231_18 <= EXIT) || LA231_18 == EXPORT || LA231_18 == FALSE || (LA231_18 >= FINAL && LA231_18 <= FINALLY) || (LA231_18 >= FUNCTION && LA231_18 <= GE) || LA231_18 == GT || (LA231_18 >= IMPLEMENTS && LA231_18 <= INHERITED) || LA231_18 == IS || LA231_18 == LBRACK || LA231_18 == LE || (LA231_18 >= LOCAL && LA231_18 <= NAME) || LA231_18 == NIL || (LA231_18 >= NOT && LA231_18 <= OBJECT) || (LA231_18 >= ON && LA231_18 <= OUT) || (LA231_18 >= PLUS && LA231_18 <= POINTER2) || LA231_18 == PROCEDURE || LA231_18 == QuotedString || (LA231_18 >= READ && LA231_18 <= READONLY) || (LA231_18 >= REFERENCE && LA231_18 <= REGISTER) || LA231_18 == REMOVE || LA231_18 == SEMI || (LA231_18 >= SHL && LA231_18 <= STAR) || (LA231_18 >= STORED && LA231_18 <= STRING) || LA231_18 == TRUE || LA231_18 == TkAsmHexNum || (LA231_18 >= TkHexNum && LA231_18 <= TkIntNum) || LA231_18 == TkRealNum || LA231_18 == UNTIL || LA231_18 == VARIANT || LA231_18 == WRITE || (LA231_18 >= XOR && LA231_18 <= 201))) {
                        alt231 = 12;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try {
                            input.consume();
                            NoViableAltException nvae =
                                    new NoViableAltException("", 231, 18, input);
                            throw nvae;
                        } finally {
                            input.rewind(nvaeMark);
                        }
                    }

                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae =
                            new NoViableAltException("", 231, 0, input);
                    throw nvae;
            }
            switch (alt231) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:529:32: ifStatement
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_ifStatement_in_statement14753);
                    ifStatement664 = ifStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, ifStatement664.getTree());

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:530:32: caseStatement
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_caseStatement_in_statement14786);
                    caseStatement665 = caseStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, caseStatement665.getTree());

                }
                break;
                case 3:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:531:32: repeatStatement
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_repeatStatement_in_statement14819);
                    repeatStatement666 = repeatStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, repeatStatement666.getTree());

                }
                break;
                case 4:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:532:32: whileStatement
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_whileStatement_in_statement14852);
                    whileStatement667 = whileStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, whileStatement667.getTree());

                }
                break;
                case 5:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:533:32: forStatement
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_forStatement_in_statement14885);
                    forStatement668 = forStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, forStatement668.getTree());

                }
                break;
                case 6:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:534:32: withStatement
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_withStatement_in_statement14918);
                    withStatement669 = withStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, withStatement669.getTree());

                }
                break;
                case 7:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:535:32: tryStatement
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_tryStatement_in_statement14951);
                    tryStatement670 = tryStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, tryStatement670.getTree());

                }
                break;
                case 8:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:536:32: raiseStatement
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_raiseStatement_in_statement14984);
                    raiseStatement671 = raiseStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, raiseStatement671.getTree());

                }
                break;
                case 9:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:537:32: assemblerStatement
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_assemblerStatement_in_statement15017);
                    assemblerStatement672 = assemblerStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, assemblerStatement672.getTree());

                }
                break;
                case 10:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:538:32: compoundStatement
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_compoundStatement_in_statement15050);
                    compoundStatement673 = compoundStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, compoundStatement673.getTree());

                }
                break;
                case 11:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:539:32: label ':' statement
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_label_in_statement15083);
                    label674 = label();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, label674.getTree());

                    char_literal675 = (Token) match(input, COLON, FOLLOW_COLON_in_statement15085);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal675_tree = (Object) adaptor.create(char_literal675);
                        adaptor.addChild(root_0, char_literal675_tree);
                    }

                    pushFollow(FOLLOW_statement_in_statement15087);
                    statement676 = statement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, statement676.getTree());

                }
                break;
                case 12:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:540:32: simpleStatement
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_simpleStatement_in_statement15120);
                    simpleStatement677 = simpleStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, simpleStatement677.getTree());

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 129, statement_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "ifStatement"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:542:1: ifStatement : 'if' expression 'then' statement ( 'else' statement )? ;
    public final DelphiParser.ifStatement_return ifStatement() throws RecognitionException {
        DelphiParser.ifStatement_return retval = new DelphiParser.ifStatement_return();
        retval.start = input.LT(1);
        int ifStatement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal678 = null;
        Token string_literal680 = null;
        Token string_literal682 = null;
        ParserRuleReturnScope expression679 = null;
        ParserRuleReturnScope statement681 = null;
        ParserRuleReturnScope statement683 = null;

        Object string_literal678_tree = null;
        Object string_literal680_tree = null;
        Object string_literal682_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 130)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:542:30: ( 'if' expression 'then' statement ( 'else' statement )? )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:542:32: 'if' expression 'then' statement ( 'else' statement )?
            {
                root_0 = (Object) adaptor.nil();


                string_literal678 = (Token) match(input, IF, FOLLOW_IF_in_ifStatement15174);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    string_literal678_tree = (Object) adaptor.create(string_literal678);
                    adaptor.addChild(root_0, string_literal678_tree);
                }

                pushFollow(FOLLOW_expression_in_ifStatement15176);
                expression679 = expression();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, expression679.getTree());

                string_literal680 = (Token) match(input, THEN, FOLLOW_THEN_in_ifStatement15178);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    string_literal680_tree = (Object) adaptor.create(string_literal680);
                    adaptor.addChild(root_0, string_literal680_tree);
                }

                pushFollow(FOLLOW_statement_in_ifStatement15180);
                statement681 = statement();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, statement681.getTree());

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:542:65: ( 'else' statement )?
                int alt232 = 2;
                int LA232_0 = input.LA(1);
                if ((LA232_0 == ELSE)) {
                    int LA232_1 = input.LA(2);
                    if ((synpred349_Delphi())) {
                        alt232 = 1;
                    }
                }
                switch (alt232) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:542:66: 'else' statement
                    {
                        string_literal682 = (Token) match(input, ELSE, FOLLOW_ELSE_in_ifStatement15183);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) {
                            string_literal682_tree = (Object) adaptor.create(string_literal682);
                            adaptor.addChild(root_0, string_literal682_tree);
                        }

                        pushFollow(FOLLOW_statement_in_ifStatement15185);
                        statement683 = statement();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) adaptor.addChild(root_0, statement683.getTree());

                    }
                    break;

                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 130, ifStatement_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "caseStatement"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:544:1: caseStatement : 'case' expression 'of' ( caseItem )* ( 'else' statementList ( ';' )? )? 'end' ;
    public final DelphiParser.caseStatement_return caseStatement() throws RecognitionException {
        DelphiParser.caseStatement_return retval = new DelphiParser.caseStatement_return();
        retval.start = input.LT(1);
        int caseStatement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal684 = null;
        Token string_literal686 = null;
        Token string_literal688 = null;
        Token char_literal690 = null;
        Token string_literal691 = null;
        ParserRuleReturnScope expression685 = null;
        ParserRuleReturnScope caseItem687 = null;
        ParserRuleReturnScope statementList689 = null;

        Object string_literal684_tree = null;
        Object string_literal686_tree = null;
        Object string_literal688_tree = null;
        Object char_literal690_tree = null;
        Object string_literal691_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 131)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:544:30: ( 'case' expression 'of' ( caseItem )* ( 'else' statementList ( ';' )? )? 'end' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:544:32: 'case' expression 'of' ( caseItem )* ( 'else' statementList ( ';' )? )? 'end'
            {
                root_0 = (Object) adaptor.nil();


                string_literal684 = (Token) match(input, CASE, FOLLOW_CASE_in_caseStatement15240);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    string_literal684_tree = (Object) adaptor.create(string_literal684);
                    adaptor.addChild(root_0, string_literal684_tree);
                }

                pushFollow(FOLLOW_expression_in_caseStatement15242);
                expression685 = expression();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, expression685.getTree());

                string_literal686 = (Token) match(input, OF, FOLLOW_OF_in_caseStatement15244);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    string_literal686_tree = (Object) adaptor.create(string_literal686);
                    adaptor.addChild(root_0, string_literal686_tree);
                }

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:544:55: ( caseItem )*
                loop233:
                while (true) {
                    int alt233 = 2;
                    int LA233_0 = input.LA(1);
                    if (((LA233_0 >= ADD && LA233_0 <= ANSISTRING) || LA233_0 == AS || (LA233_0 >= AT && LA233_0 <= AT2) || LA233_0 == BREAK || (LA233_0 >= COLON && LA233_0 <= COMMA) || (LA233_0 >= CONTAINS && LA233_0 <= ControlString) || LA233_0 == DEFAULT || LA233_0 == DIV || (LA233_0 >= DOT && LA233_0 <= DOTDOT) || LA233_0 == EQUAL || LA233_0 == EXIT || LA233_0 == EXPORT || LA233_0 == FALSE || LA233_0 == FINAL || (LA233_0 >= FUNCTION && LA233_0 <= GE) || LA233_0 == GT || (LA233_0 >= IMPLEMENTS && LA233_0 <= INHERITED) || LA233_0 == IS || LA233_0 == LBRACK || LA233_0 == LE || (LA233_0 >= LOCAL && LA233_0 <= NAME) || LA233_0 == NIL || (LA233_0 >= NOT && LA233_0 <= OBJECT) || (LA233_0 >= OPERATOR && LA233_0 <= OUT) || (LA233_0 >= PLUS && LA233_0 <= POINTER2) || LA233_0 == PROCEDURE || LA233_0 == QuotedString || (LA233_0 >= READ && LA233_0 <= READONLY) || (LA233_0 >= REFERENCE && LA233_0 <= REGISTER) || LA233_0 == REMOVE || (LA233_0 >= SHL && LA233_0 <= STAR) || (LA233_0 >= STORED && LA233_0 <= STRING) || LA233_0 == TRUE || LA233_0 == TkAsmHexNum || (LA233_0 >= TkHexNum && LA233_0 <= TkIntNum) || LA233_0 == TkRealNum || LA233_0 == VARIANT || LA233_0 == WRITE || (LA233_0 >= XOR && LA233_0 <= 201))) {
                        alt233 = 1;
                    }

                    switch (alt233) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:544:56: caseItem
                        {
                            pushFollow(FOLLOW_caseItem_in_caseStatement15247);
                            caseItem687 = caseItem();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, caseItem687.getTree());

                        }
                        break;

                        default:
                            break loop233;
                    }
                }

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:544:67: ( 'else' statementList ( ';' )? )?
                int alt235 = 2;
                int LA235_0 = input.LA(1);
                if ((LA235_0 == ELSE)) {
                    alt235 = 1;
                }
                switch (alt235) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:544:68: 'else' statementList ( ';' )?
                    {
                        string_literal688 = (Token) match(input, ELSE, FOLLOW_ELSE_in_caseStatement15252);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) {
                            string_literal688_tree = (Object) adaptor.create(string_literal688);
                            adaptor.addChild(root_0, string_literal688_tree);
                        }

                        pushFollow(FOLLOW_statementList_in_caseStatement15254);
                        statementList689 = statementList();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) adaptor.addChild(root_0, statementList689.getTree());

                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:544:89: ( ';' )?
                        int alt234 = 2;
                        int LA234_0 = input.LA(1);
                        if ((LA234_0 == SEMI)) {
                            alt234 = 1;
                        }
                        switch (alt234) {
                            case 1:
                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:544:90: ';'
                            {
                                char_literal690 = (Token) match(input, SEMI, FOLLOW_SEMI_in_caseStatement15257);
                                if (state.failed) return retval;
                                if (state.backtracking == 0) {
                                    char_literal690_tree = (Object) adaptor.create(char_literal690);
                                    adaptor.addChild(root_0, char_literal690_tree);
                                }

                            }
                            break;

                        }

                    }
                    break;

                }

                string_literal691 = (Token) match(input, END, FOLLOW_END_in_caseStatement15263);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    string_literal691_tree = (Object) adaptor.create(string_literal691);
                    adaptor.addChild(root_0, string_literal691_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 131, caseStatement_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "caseItem"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:546:1: caseItem : caseLabel ( ',' caseLabel )* ':' statement ( ';' )? ;
    public final DelphiParser.caseItem_return caseItem() throws RecognitionException {
        DelphiParser.caseItem_return retval = new DelphiParser.caseItem_return();
        retval.start = input.LT(1);
        int caseItem_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal693 = null;
        Token char_literal695 = null;
        Token char_literal697 = null;
        ParserRuleReturnScope caseLabel692 = null;
        ParserRuleReturnScope caseLabel694 = null;
        ParserRuleReturnScope statement696 = null;

        Object char_literal693_tree = null;
        Object char_literal695_tree = null;
        Object char_literal697_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 132)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:546:30: ( caseLabel ( ',' caseLabel )* ':' statement ( ';' )? )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:546:32: caseLabel ( ',' caseLabel )* ':' statement ( ';' )?
            {
                root_0 = (Object) adaptor.nil();


                pushFollow(FOLLOW_caseLabel_in_caseItem15320);
                caseLabel692 = caseLabel();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, caseLabel692.getTree());

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:546:42: ( ',' caseLabel )*
                loop236:
                while (true) {
                    int alt236 = 2;
                    int LA236_0 = input.LA(1);
                    if ((LA236_0 == COMMA)) {
                        alt236 = 1;
                    }

                    switch (alt236) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:546:43: ',' caseLabel
                        {
                            char_literal693 = (Token) match(input, COMMA, FOLLOW_COMMA_in_caseItem15323);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) {
                                char_literal693_tree = (Object) adaptor.create(char_literal693);
                                adaptor.addChild(root_0, char_literal693_tree);
                            }

                            pushFollow(FOLLOW_caseLabel_in_caseItem15325);
                            caseLabel694 = caseLabel();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, caseLabel694.getTree());

                        }
                        break;

                        default:
                            break loop236;
                    }
                }

                char_literal695 = (Token) match(input, COLON, FOLLOW_COLON_in_caseItem15329);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    char_literal695_tree = (Object) adaptor.create(char_literal695);
                    adaptor.addChild(root_0, char_literal695_tree);
                }

                pushFollow(FOLLOW_statement_in_caseItem15331);
                statement696 = statement();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, statement696.getTree());

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:546:73: ( ';' )?
                int alt237 = 2;
                int LA237_0 = input.LA(1);
                if ((LA237_0 == SEMI)) {
                    alt237 = 1;
                }
                switch (alt237) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:546:74: ';'
                    {
                        char_literal697 = (Token) match(input, SEMI, FOLLOW_SEMI_in_caseItem15334);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) {
                            char_literal697_tree = (Object) adaptor.create(char_literal697);
                            adaptor.addChild(root_0, char_literal697_tree);
                        }

                    }
                    break;

                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 132, caseItem_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "caseLabel"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:548:1: caseLabel : expression ( '..' expression )? ;
    public final DelphiParser.caseLabel_return caseLabel() throws RecognitionException {
        DelphiParser.caseLabel_return retval = new DelphiParser.caseLabel_return();
        retval.start = input.LT(1);
        int caseLabel_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal699 = null;
        ParserRuleReturnScope expression698 = null;
        ParserRuleReturnScope expression700 = null;

        Object string_literal699_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 133)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:548:30: ( expression ( '..' expression )? )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:548:32: expression ( '..' expression )?
            {
                root_0 = (Object) adaptor.nil();


                pushFollow(FOLLOW_expression_in_caseLabel15393);
                expression698 = expression();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, expression698.getTree());

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:548:43: ( '..' expression )?
                int alt238 = 2;
                int LA238_0 = input.LA(1);
                if ((LA238_0 == DOTDOT)) {
                    alt238 = 1;
                }
                switch (alt238) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:548:44: '..' expression
                    {
                        string_literal699 = (Token) match(input, DOTDOT, FOLLOW_DOTDOT_in_caseLabel15396);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) {
                            string_literal699_tree = (Object) adaptor.create(string_literal699);
                            adaptor.addChild(root_0, string_literal699_tree);
                        }

                        pushFollow(FOLLOW_expression_in_caseLabel15398);
                        expression700 = expression();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) adaptor.addChild(root_0, expression700.getTree());

                    }
                    break;

                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 133, caseLabel_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "repeatStatement"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:550:1: repeatStatement : 'repeat' ( statementList )? 'until' expression ;
    public final DelphiParser.repeatStatement_return repeatStatement() throws RecognitionException {
        DelphiParser.repeatStatement_return retval = new DelphiParser.repeatStatement_return();
        retval.start = input.LT(1);
        int repeatStatement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal701 = null;
        Token string_literal703 = null;
        ParserRuleReturnScope statementList702 = null;
        ParserRuleReturnScope expression704 = null;

        Object string_literal701_tree = null;
        Object string_literal703_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 134)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:550:30: ( 'repeat' ( statementList )? 'until' expression )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:550:32: 'repeat' ( statementList )? 'until' expression
            {
                root_0 = (Object) adaptor.nil();


                string_literal701 = (Token) match(input, REPEAT, FOLLOW_REPEAT_in_repeatStatement15450);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    string_literal701_tree = (Object) adaptor.create(string_literal701);
                    adaptor.addChild(root_0, string_literal701_tree);
                }

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:550:41: ( statementList )?
                int alt239 = 2;
                int LA239_0 = input.LA(1);
                if ((LA239_0 == ADD || LA239_0 == ANSISTRING || LA239_0 == ASM || (LA239_0 >= ASSIGN && LA239_0 <= AT2) || (LA239_0 >= BEGIN && LA239_0 <= CASE) || (LA239_0 >= CONTAINS && LA239_0 <= CONTINUE) || LA239_0 == DEFAULT || LA239_0 == DOT || LA239_0 == EXIT || LA239_0 == EXPORT || LA239_0 == FINAL || LA239_0 == FOR || LA239_0 == GOTO || LA239_0 == IF || LA239_0 == IMPLEMENTS || (LA239_0 >= INDEX && LA239_0 <= INHERITED) || LA239_0 == LBRACK || (LA239_0 >= LOCAL && LA239_0 <= MESSAGE) || LA239_0 == NAME || LA239_0 == OBJECT || LA239_0 == OPERATOR || LA239_0 == OUT || (LA239_0 >= POINTER && LA239_0 <= POINTER2) || LA239_0 == RAISE || (LA239_0 >= READ && LA239_0 <= READONLY) || (LA239_0 >= REFERENCE && LA239_0 <= REGISTER) || (LA239_0 >= REMOVE && LA239_0 <= REPEAT) || LA239_0 == SEMI || (LA239_0 >= STORED && LA239_0 <= STRING) || LA239_0 == TRY || (LA239_0 >= TkHexNum && LA239_0 <= TkIntNum) || LA239_0 == VARIANT || (LA239_0 >= WHILE && LA239_0 <= WRITE) || LA239_0 == 200)) {
                    alt239 = 1;
                } else if ((LA239_0 == UNTIL)) {
                    int LA239_2 = input.LA(2);
                    if ((synpred356_Delphi())) {
                        alt239 = 1;
                    }
                }
                switch (alt239) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:550:42: statementList
                    {
                        pushFollow(FOLLOW_statementList_in_repeatStatement15453);
                        statementList702 = statementList();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) adaptor.addChild(root_0, statementList702.getTree());

                    }
                    break;

                }

                string_literal703 = (Token) match(input, UNTIL, FOLLOW_UNTIL_in_repeatStatement15457);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    string_literal703_tree = (Object) adaptor.create(string_literal703);
                    adaptor.addChild(root_0, string_literal703_tree);
                }

                pushFollow(FOLLOW_expression_in_repeatStatement15459);
                expression704 = expression();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, expression704.getTree());

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 134, repeatStatement_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "whileStatement"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:552:1: whileStatement : 'while' expression 'do' statement ;
    public final DelphiParser.whileStatement_return whileStatement() throws RecognitionException {
        DelphiParser.whileStatement_return retval = new DelphiParser.whileStatement_return();
        retval.start = input.LT(1);
        int whileStatement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal705 = null;
        Token string_literal707 = null;
        ParserRuleReturnScope expression706 = null;
        ParserRuleReturnScope statement708 = null;

        Object string_literal705_tree = null;
        Object string_literal707_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 135)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:552:30: ( 'while' expression 'do' statement )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:552:32: 'while' expression 'do' statement
            {
                root_0 = (Object) adaptor.nil();


                string_literal705 = (Token) match(input, WHILE, FOLLOW_WHILE_in_whileStatement15510);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    string_literal705_tree = (Object) adaptor.create(string_literal705);
                    adaptor.addChild(root_0, string_literal705_tree);
                }

                pushFollow(FOLLOW_expression_in_whileStatement15512);
                expression706 = expression();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, expression706.getTree());

                string_literal707 = (Token) match(input, DO, FOLLOW_DO_in_whileStatement15514);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    string_literal707_tree = (Object) adaptor.create(string_literal707);
                    adaptor.addChild(root_0, string_literal707_tree);
                }

                pushFollow(FOLLOW_statement_in_whileStatement15516);
                statement708 = statement();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, statement708.getTree());

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 135, whileStatement_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "forStatement"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:554:1: forStatement : ( 'for' designator ':=' expression 'to' expression 'do' statement | 'for' designator ':=' expression 'downto' expression 'do' statement | 'for' designator 'in' expression 'do' statement );
    public final DelphiParser.forStatement_return forStatement() throws RecognitionException {
        DelphiParser.forStatement_return retval = new DelphiParser.forStatement_return();
        retval.start = input.LT(1);
        int forStatement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal709 = null;
        Token string_literal711 = null;
        Token string_literal713 = null;
        Token string_literal715 = null;
        Token string_literal717 = null;
        Token string_literal719 = null;
        Token string_literal721 = null;
        Token string_literal723 = null;
        Token string_literal725 = null;
        Token string_literal727 = null;
        Token string_literal729 = null;
        ParserRuleReturnScope designator710 = null;
        ParserRuleReturnScope expression712 = null;
        ParserRuleReturnScope expression714 = null;
        ParserRuleReturnScope statement716 = null;
        ParserRuleReturnScope designator718 = null;
        ParserRuleReturnScope expression720 = null;
        ParserRuleReturnScope expression722 = null;
        ParserRuleReturnScope statement724 = null;
        ParserRuleReturnScope designator726 = null;
        ParserRuleReturnScope expression728 = null;
        ParserRuleReturnScope statement730 = null;

        Object string_literal709_tree = null;
        Object string_literal711_tree = null;
        Object string_literal713_tree = null;
        Object string_literal715_tree = null;
        Object string_literal717_tree = null;
        Object string_literal719_tree = null;
        Object string_literal721_tree = null;
        Object string_literal723_tree = null;
        Object string_literal725_tree = null;
        Object string_literal727_tree = null;
        Object string_literal729_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 136)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:554:30: ( 'for' designator ':=' expression 'to' expression 'do' statement | 'for' designator ':=' expression 'downto' expression 'do' statement | 'for' designator 'in' expression 'do' statement )
            int alt240 = 3;
            int LA240_0 = input.LA(1);
            if ((LA240_0 == FOR)) {
                int LA240_1 = input.LA(2);
                if ((synpred357_Delphi())) {
                    alt240 = 1;
                } else if ((synpred358_Delphi())) {
                    alt240 = 2;
                } else if ((true)) {
                    alt240 = 3;
                }

            } else {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae =
                        new NoViableAltException("", 240, 0, input);
                throw nvae;
            }

            switch (alt240) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:554:32: 'for' designator ':=' expression 'to' expression 'do' statement
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal709 = (Token) match(input, FOR, FOLLOW_FOR_in_forStatement15569);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal709_tree = (Object) adaptor.create(string_literal709);
                        adaptor.addChild(root_0, string_literal709_tree);
                    }

                    pushFollow(FOLLOW_designator_in_forStatement15571);
                    designator710 = designator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, designator710.getTree());

                    string_literal711 = (Token) match(input, ASSIGN, FOLLOW_ASSIGN_in_forStatement15573);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal711_tree = (Object) adaptor.create(string_literal711);
                        adaptor.addChild(root_0, string_literal711_tree);
                    }

                    pushFollow(FOLLOW_expression_in_forStatement15575);
                    expression712 = expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, expression712.getTree());

                    string_literal713 = (Token) match(input, TO, FOLLOW_TO_in_forStatement15577);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal713_tree = (Object) adaptor.create(string_literal713);
                        adaptor.addChild(root_0, string_literal713_tree);
                    }

                    pushFollow(FOLLOW_expression_in_forStatement15579);
                    expression714 = expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, expression714.getTree());

                    string_literal715 = (Token) match(input, DO, FOLLOW_DO_in_forStatement15581);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal715_tree = (Object) adaptor.create(string_literal715);
                        adaptor.addChild(root_0, string_literal715_tree);
                    }

                    pushFollow(FOLLOW_statement_in_forStatement15583);
                    statement716 = statement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, statement716.getTree());

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:555:32: 'for' designator ':=' expression 'downto' expression 'do' statement
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal717 = (Token) match(input, FOR, FOLLOW_FOR_in_forStatement15616);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal717_tree = (Object) adaptor.create(string_literal717);
                        adaptor.addChild(root_0, string_literal717_tree);
                    }

                    pushFollow(FOLLOW_designator_in_forStatement15618);
                    designator718 = designator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, designator718.getTree());

                    string_literal719 = (Token) match(input, ASSIGN, FOLLOW_ASSIGN_in_forStatement15620);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal719_tree = (Object) adaptor.create(string_literal719);
                        adaptor.addChild(root_0, string_literal719_tree);
                    }

                    pushFollow(FOLLOW_expression_in_forStatement15622);
                    expression720 = expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, expression720.getTree());

                    string_literal721 = (Token) match(input, DOWNTO, FOLLOW_DOWNTO_in_forStatement15624);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal721_tree = (Object) adaptor.create(string_literal721);
                        adaptor.addChild(root_0, string_literal721_tree);
                    }

                    pushFollow(FOLLOW_expression_in_forStatement15626);
                    expression722 = expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, expression722.getTree());

                    string_literal723 = (Token) match(input, DO, FOLLOW_DO_in_forStatement15628);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal723_tree = (Object) adaptor.create(string_literal723);
                        adaptor.addChild(root_0, string_literal723_tree);
                    }

                    pushFollow(FOLLOW_statement_in_forStatement15630);
                    statement724 = statement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, statement724.getTree());

                }
                break;
                case 3:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:556:32: 'for' designator 'in' expression 'do' statement
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal725 = (Token) match(input, FOR, FOLLOW_FOR_in_forStatement15663);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal725_tree = (Object) adaptor.create(string_literal725);
                        adaptor.addChild(root_0, string_literal725_tree);
                    }

                    pushFollow(FOLLOW_designator_in_forStatement15665);
                    designator726 = designator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, designator726.getTree());

                    string_literal727 = (Token) match(input, IN, FOLLOW_IN_in_forStatement15667);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal727_tree = (Object) adaptor.create(string_literal727);
                        adaptor.addChild(root_0, string_literal727_tree);
                    }

                    pushFollow(FOLLOW_expression_in_forStatement15669);
                    expression728 = expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, expression728.getTree());

                    string_literal729 = (Token) match(input, DO, FOLLOW_DO_in_forStatement15671);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal729_tree = (Object) adaptor.create(string_literal729);
                        adaptor.addChild(root_0, string_literal729_tree);
                    }

                    pushFollow(FOLLOW_statement_in_forStatement15673);
                    statement730 = statement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, statement730.getTree());

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 136, forStatement_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "withStatement"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:558:1: withStatement : 'with' withItem 'do' statement ;
    public final DelphiParser.withStatement_return withStatement() throws RecognitionException {
        DelphiParser.withStatement_return retval = new DelphiParser.withStatement_return();
        retval.start = input.LT(1);
        int withStatement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal731 = null;
        Token string_literal733 = null;
        ParserRuleReturnScope withItem732 = null;
        ParserRuleReturnScope statement734 = null;

        Object string_literal731_tree = null;
        Object string_literal733_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 137)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:558:30: ( 'with' withItem 'do' statement )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:558:32: 'with' withItem 'do' statement
            {
                root_0 = (Object) adaptor.nil();


                string_literal731 = (Token) match(input, WITH, FOLLOW_WITH_in_withStatement15725);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    string_literal731_tree = (Object) adaptor.create(string_literal731);
                    adaptor.addChild(root_0, string_literal731_tree);
                }

                pushFollow(FOLLOW_withItem_in_withStatement15727);
                withItem732 = withItem();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, withItem732.getTree());

                string_literal733 = (Token) match(input, DO, FOLLOW_DO_in_withStatement15729);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    string_literal733_tree = (Object) adaptor.create(string_literal733);
                    adaptor.addChild(root_0, string_literal733_tree);
                }

                pushFollow(FOLLOW_statement_in_withStatement15731);
                statement734 = statement();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, statement734.getTree());

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 137, withStatement_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "withItem"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:560:1: withItem : ( designator 'as' designator | designator ( ',' designator )* );
    public final DelphiParser.withItem_return withItem() throws RecognitionException {
        DelphiParser.withItem_return retval = new DelphiParser.withItem_return();
        retval.start = input.LT(1);
        int withItem_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal736 = null;
        Token char_literal739 = null;
        ParserRuleReturnScope designator735 = null;
        ParserRuleReturnScope designator737 = null;
        ParserRuleReturnScope designator738 = null;
        ParserRuleReturnScope designator740 = null;

        Object string_literal736_tree = null;
        Object char_literal739_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 138)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:560:30: ( designator 'as' designator | designator ( ',' designator )* )
            int alt242 = 2;
            switch (input.LA(1)) {
                case INHERITED: {
                    int LA242_1 = input.LA(2);
                    if ((synpred359_Delphi())) {
                        alt242 = 1;
                    } else if ((true)) {
                        alt242 = 2;
                    }

                }
                break;
                case TkIdentifier: {
                    int LA242_2 = input.LA(2);
                    if ((synpred359_Delphi())) {
                        alt242 = 1;
                    } else if ((true)) {
                        alt242 = 2;
                    }

                }
                break;
                case 200: {
                    int LA242_3 = input.LA(2);
                    if ((synpred359_Delphi())) {
                        alt242 = 1;
                    } else if ((true)) {
                        alt242 = 2;
                    }

                }
                break;
                case ADD:
                case ANSISTRING:
                case AT:
                case BREAK:
                case CONTAINS:
                case CONTINUE:
                case DEFAULT:
                case EXIT:
                case EXPORT:
                case FINAL:
                case IMPLEMENTS:
                case INDEX:
                case LOCAL:
                case MESSAGE:
                case NAME:
                case OBJECT:
                case OPERATOR:
                case OUT:
                case POINTER:
                case READ:
                case READONLY:
                case REFERENCE:
                case REGISTER:
                case REMOVE:
                case STORED:
                case STRICT:
                case STRING:
                case VARIANT:
                case WRITE: {
                    int LA242_4 = input.LA(2);
                    if ((synpred359_Delphi())) {
                        alt242 = 1;
                    } else if ((true)) {
                        alt242 = 2;
                    }

                }
                break;
                case POINTER2: {
                    int LA242_5 = input.LA(2);
                    if ((synpred359_Delphi())) {
                        alt242 = 1;
                    } else if ((true)) {
                        alt242 = 2;
                    }

                }
                break;
                case AT2:
                case DOT: {
                    int LA242_6 = input.LA(2);
                    if ((synpred359_Delphi())) {
                        alt242 = 1;
                    } else if ((true)) {
                        alt242 = 2;
                    }

                }
                break;
                case LT: {
                    int LA242_7 = input.LA(2);
                    if ((synpred359_Delphi())) {
                        alt242 = 1;
                    } else if ((true)) {
                        alt242 = 2;
                    }

                }
                break;
                case LBRACK: {
                    int LA242_8 = input.LA(2);
                    if ((synpred359_Delphi())) {
                        alt242 = 1;
                    } else if ((true)) {
                        alt242 = 2;
                    }

                }
                break;
                case LPAREN: {
                    int LA242_9 = input.LA(2);
                    if ((synpred359_Delphi())) {
                        alt242 = 1;
                    } else if ((true)) {
                        alt242 = 2;
                    }

                }
                break;
                case AS: {
                    alt242 = 1;
                }
                break;
                case COMMA:
                case DO: {
                    alt242 = 2;
                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae =
                            new NoViableAltException("", 242, 0, input);
                    throw nvae;
            }
            switch (alt242) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:560:32: designator 'as' designator
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_designator_in_withItem15788);
                    designator735 = designator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, designator735.getTree());

                    string_literal736 = (Token) match(input, AS, FOLLOW_AS_in_withItem15790);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal736_tree = (Object) adaptor.create(string_literal736);
                        adaptor.addChild(root_0, string_literal736_tree);
                    }

                    pushFollow(FOLLOW_designator_in_withItem15792);
                    designator737 = designator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, designator737.getTree());

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:561:32: designator ( ',' designator )*
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_designator_in_withItem15832);
                    designator738 = designator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, designator738.getTree());

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:561:43: ( ',' designator )*
                    loop241:
                    while (true) {
                        int alt241 = 2;
                        int LA241_0 = input.LA(1);
                        if ((LA241_0 == COMMA)) {
                            alt241 = 1;
                        }

                        switch (alt241) {
                            case 1:
                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:561:44: ',' designator
                            {
                                char_literal739 = (Token) match(input, COMMA, FOLLOW_COMMA_in_withItem15835);
                                if (state.failed) return retval;
                                if (state.backtracking == 0) {
                                    char_literal739_tree = (Object) adaptor.create(char_literal739);
                                    adaptor.addChild(root_0, char_literal739_tree);
                                }

                                pushFollow(FOLLOW_designator_in_withItem15837);
                                designator740 = designator();
                                state._fsp--;
                                if (state.failed) return retval;
                                if (state.backtracking == 0) adaptor.addChild(root_0, designator740.getTree());

                            }
                            break;

                            default:
                                break loop241;
                        }
                    }

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 138, withItem_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "compoundStatement"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:563:1: compoundStatement : 'begin' ( statementList )? 'end' -> ^( 'begin' ( statementList )? 'end' ) ;
    public final DelphiParser.compoundStatement_return compoundStatement() throws RecognitionException {
        DelphiParser.compoundStatement_return retval = new DelphiParser.compoundStatement_return();
        retval.start = input.LT(1);
        int compoundStatement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal741 = null;
        Token string_literal743 = null;
        ParserRuleReturnScope statementList742 = null;

        Object string_literal741_tree = null;
        Object string_literal743_tree = null;
        RewriteRuleTokenStream stream_END = new RewriteRuleTokenStream(adaptor, "token END");
        RewriteRuleTokenStream stream_BEGIN = new RewriteRuleTokenStream(adaptor, "token BEGIN");
        RewriteRuleSubtreeStream stream_statementList = new RewriteRuleSubtreeStream(adaptor, "rule statementList");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 139)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:563:30: ( 'begin' ( statementList )? 'end' -> ^( 'begin' ( statementList )? 'end' ) )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:563:32: 'begin' ( statementList )? 'end'
            {
                string_literal741 = (Token) match(input, BEGIN, FOLLOW_BEGIN_in_compoundStatement15887);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_BEGIN.add(string_literal741);

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:563:40: ( statementList )?
                int alt243 = 2;
                int LA243_0 = input.LA(1);
                if ((LA243_0 == ADD || LA243_0 == ANSISTRING || LA243_0 == ASM || (LA243_0 >= ASSIGN && LA243_0 <= AT2) || (LA243_0 >= BEGIN && LA243_0 <= CASE) || (LA243_0 >= CONTAINS && LA243_0 <= CONTINUE) || LA243_0 == DEFAULT || LA243_0 == DOT || LA243_0 == EXIT || LA243_0 == EXPORT || LA243_0 == FINAL || LA243_0 == FOR || LA243_0 == GOTO || LA243_0 == IF || LA243_0 == IMPLEMENTS || (LA243_0 >= INDEX && LA243_0 <= INHERITED) || LA243_0 == LBRACK || (LA243_0 >= LOCAL && LA243_0 <= MESSAGE) || LA243_0 == NAME || LA243_0 == OBJECT || LA243_0 == OPERATOR || LA243_0 == OUT || (LA243_0 >= POINTER && LA243_0 <= POINTER2) || LA243_0 == RAISE || (LA243_0 >= READ && LA243_0 <= READONLY) || (LA243_0 >= REFERENCE && LA243_0 <= REGISTER) || (LA243_0 >= REMOVE && LA243_0 <= REPEAT) || LA243_0 == SEMI || (LA243_0 >= STORED && LA243_0 <= STRING) || LA243_0 == TRY || (LA243_0 >= TkHexNum && LA243_0 <= TkIntNum) || LA243_0 == VARIANT || (LA243_0 >= WHILE && LA243_0 <= WRITE) || LA243_0 == 200)) {
                    alt243 = 1;
                } else if ((LA243_0 == END)) {
                    int LA243_2 = input.LA(2);
                    if ((synpred361_Delphi())) {
                        alt243 = 1;
                    }
                }
                switch (alt243) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:563:41: statementList
                    {
                        pushFollow(FOLLOW_statementList_in_compoundStatement15890);
                        statementList742 = statementList();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_statementList.add(statementList742.getTree());
                    }
                    break;

                }

                string_literal743 = (Token) match(input, END, FOLLOW_END_in_compoundStatement15894);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_END.add(string_literal743);

                // AST REWRITE
                // elements: statementList, END, BEGIN
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 563:63: -> ^( 'begin' ( statementList )? 'end' )
                    {
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:563:66: ^( 'begin' ( statementList )? 'end' )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot(stream_BEGIN.nextNode(), root_1);
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:563:76: ( statementList )?
                            if (stream_statementList.hasNext()) {
                                adaptor.addChild(root_1, stream_statementList.nextTree());
                            }
                            stream_statementList.reset();

                            adaptor.addChild(root_1, stream_END.nextNode());
                            adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 139, compoundStatement_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "statementList"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:565:1: statementList : ( statement )? ( ';' ( statement )? )* ;
    public final DelphiParser.statementList_return statementList() throws RecognitionException {
        DelphiParser.statementList_return retval = new DelphiParser.statementList_return();
        retval.start = input.LT(1);
        int statementList_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal745 = null;
        ParserRuleReturnScope statement744 = null;
        ParserRuleReturnScope statement746 = null;

        Object char_literal745_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 140)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:565:30: ( ( statement )? ( ';' ( statement )? )* )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:565:32: ( statement )? ( ';' ( statement )? )*
            {
                root_0 = (Object) adaptor.nil();


                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:565:32: ( statement )?
                int alt244 = 2;
                switch (input.LA(1)) {
                    case ADD:
                    case ANSISTRING:
                    case ASM:
                    case ASSIGN:
                    case AT:
                    case AT2:
                    case BEGIN:
                    case BREAK:
                    case CASE:
                    case CONTAINS:
                    case CONTINUE:
                    case DEFAULT:
                    case DOT:
                    case EXIT:
                    case EXPORT:
                    case FINAL:
                    case FOR:
                    case GOTO:
                    case IF:
                    case IMPLEMENTS:
                    case INDEX:
                    case INHERITED:
                    case LBRACK:
                    case LOCAL:
                    case LPAREN:
                    case LT:
                    case MESSAGE:
                    case NAME:
                    case OBJECT:
                    case OPERATOR:
                    case OUT:
                    case POINTER:
                    case POINTER2:
                    case RAISE:
                    case READ:
                    case READONLY:
                    case REFERENCE:
                    case REGISTER:
                    case REMOVE:
                    case REPEAT:
                    case STORED:
                    case STRICT:
                    case STRING:
                    case TRY:
                    case TkHexNum:
                    case TkIdentifier:
                    case TkIntNum:
                    case VARIANT:
                    case WHILE:
                    case WITH:
                    case WRITE:
                    case 200: {
                        alt244 = 1;
                    }
                    break;
                    case SEMI: {
                        int LA244_2 = input.LA(2);
                        if ((synpred362_Delphi())) {
                            alt244 = 1;
                        }
                    }
                    break;
                    case FINALIZATION: {
                        int LA244_3 = input.LA(2);
                        if ((synpred362_Delphi())) {
                            alt244 = 1;
                        }
                    }
                    break;
                    case END: {
                        int LA244_4 = input.LA(2);
                        if ((synpred362_Delphi())) {
                            alt244 = 1;
                        }
                    }
                    break;
                    case EOF: {
                        int LA244_5 = input.LA(2);
                        if ((synpred362_Delphi())) {
                            alt244 = 1;
                        }
                    }
                    break;
                    case UNTIL: {
                        int LA244_6 = input.LA(2);
                        if ((synpred362_Delphi())) {
                            alt244 = 1;
                        }
                    }
                    break;
                    case EXCEPT: {
                        int LA244_7 = input.LA(2);
                        if ((synpred362_Delphi())) {
                            alt244 = 1;
                        }
                    }
                    break;
                    case FINALLY: {
                        int LA244_8 = input.LA(2);
                        if ((synpred362_Delphi())) {
                            alt244 = 1;
                        }
                    }
                    break;
                }
                switch (alt244) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:565:33: statement
                    {
                        pushFollow(FOLLOW_statement_in_statementList15960);
                        statement744 = statement();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) adaptor.addChild(root_0, statement744.getTree());

                    }
                    break;

                }

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:565:45: ( ';' ( statement )? )*
                loop246:
                while (true) {
                    int alt246 = 2;
                    int LA246_0 = input.LA(1);
                    if ((LA246_0 == SEMI)) {
                        int LA246_2 = input.LA(2);
                        if ((synpred364_Delphi())) {
                            alt246 = 1;
                        }

                    }

                    switch (alt246) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:565:46: ';' ( statement )?
                        {
                            char_literal745 = (Token) match(input, SEMI, FOLLOW_SEMI_in_statementList15965);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) {
                                char_literal745_tree = (Object) adaptor.create(char_literal745);
                                adaptor.addChild(root_0, char_literal745_tree);
                            }

                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:565:50: ( statement )?
                            int alt245 = 2;
                            switch (input.LA(1)) {
                                case ADD:
                                case ANSISTRING:
                                case ASM:
                                case ASSIGN:
                                case AT:
                                case AT2:
                                case BEGIN:
                                case BREAK:
                                case CASE:
                                case CONTAINS:
                                case CONTINUE:
                                case DEFAULT:
                                case DOT:
                                case EXIT:
                                case EXPORT:
                                case FINAL:
                                case FOR:
                                case GOTO:
                                case IF:
                                case IMPLEMENTS:
                                case INDEX:
                                case INHERITED:
                                case LBRACK:
                                case LOCAL:
                                case LPAREN:
                                case LT:
                                case MESSAGE:
                                case NAME:
                                case OBJECT:
                                case OPERATOR:
                                case OUT:
                                case POINTER:
                                case POINTER2:
                                case RAISE:
                                case READ:
                                case READONLY:
                                case REFERENCE:
                                case REGISTER:
                                case REMOVE:
                                case REPEAT:
                                case STORED:
                                case STRICT:
                                case STRING:
                                case TRY:
                                case TkHexNum:
                                case TkIdentifier:
                                case TkIntNum:
                                case VARIANT:
                                case WHILE:
                                case WITH:
                                case WRITE:
                                case 200: {
                                    alt245 = 1;
                                }
                                break;
                                case FINALIZATION: {
                                    int LA245_2 = input.LA(2);
                                    if ((synpred363_Delphi())) {
                                        alt245 = 1;
                                    }
                                }
                                break;
                                case END: {
                                    int LA245_3 = input.LA(2);
                                    if ((synpred363_Delphi())) {
                                        alt245 = 1;
                                    }
                                }
                                break;
                                case EOF: {
                                    int LA245_4 = input.LA(2);
                                    if ((synpred363_Delphi())) {
                                        alt245 = 1;
                                    }
                                }
                                break;
                                case SEMI: {
                                    int LA245_5 = input.LA(2);
                                    if ((synpred363_Delphi())) {
                                        alt245 = 1;
                                    }
                                }
                                break;
                                case UNTIL: {
                                    int LA245_6 = input.LA(2);
                                    if ((synpred363_Delphi())) {
                                        alt245 = 1;
                                    }
                                }
                                break;
                                case EXCEPT: {
                                    int LA245_7 = input.LA(2);
                                    if ((synpred363_Delphi())) {
                                        alt245 = 1;
                                    }
                                }
                                break;
                                case FINALLY: {
                                    int LA245_8 = input.LA(2);
                                    if ((synpred363_Delphi())) {
                                        alt245 = 1;
                                    }
                                }
                                break;
                            }
                            switch (alt245) {
                                case 1:
                                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:565:51: statement
                                {
                                    pushFollow(FOLLOW_statement_in_statementList15968);
                                    statement746 = statement();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if (state.backtracking == 0) adaptor.addChild(root_0, statement746.getTree());

                                }
                                break;

                            }

                        }
                        break;

                        default:
                            break loop246;
                    }
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 140, statementList_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "simpleStatement"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:567:1: simpleStatement : ( designator ':=' expression | designator | gotoStatement );
    public final DelphiParser.simpleStatement_return simpleStatement() throws RecognitionException {
        DelphiParser.simpleStatement_return retval = new DelphiParser.simpleStatement_return();
        retval.start = input.LT(1);
        int simpleStatement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal748 = null;
        ParserRuleReturnScope designator747 = null;
        ParserRuleReturnScope expression749 = null;
        ParserRuleReturnScope designator750 = null;
        ParserRuleReturnScope gotoStatement751 = null;

        Object string_literal748_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 141)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:567:30: ( designator ':=' expression | designator | gotoStatement )
            int alt247 = 3;
            switch (input.LA(1)) {
                case INHERITED: {
                    int LA247_1 = input.LA(2);
                    if ((synpred365_Delphi())) {
                        alt247 = 1;
                    } else if ((synpred366_Delphi())) {
                        alt247 = 2;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try {
                            input.consume();
                            NoViableAltException nvae =
                                    new NoViableAltException("", 247, 1, input);
                            throw nvae;
                        } finally {
                            input.rewind(nvaeMark);
                        }
                    }

                }
                break;
                case TkIdentifier: {
                    int LA247_2 = input.LA(2);
                    if ((synpred365_Delphi())) {
                        alt247 = 1;
                    } else if ((synpred366_Delphi())) {
                        alt247 = 2;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try {
                            input.consume();
                            NoViableAltException nvae =
                                    new NoViableAltException("", 247, 2, input);
                            throw nvae;
                        } finally {
                            input.rewind(nvaeMark);
                        }
                    }

                }
                break;
                case 200: {
                    int LA247_3 = input.LA(2);
                    if ((synpred365_Delphi())) {
                        alt247 = 1;
                    } else if ((synpred366_Delphi())) {
                        alt247 = 2;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try {
                            input.consume();
                            NoViableAltException nvae =
                                    new NoViableAltException("", 247, 3, input);
                            throw nvae;
                        } finally {
                            input.rewind(nvaeMark);
                        }
                    }

                }
                break;
                case EXIT: {
                    int LA247_4 = input.LA(2);
                    if ((synpred365_Delphi())) {
                        alt247 = 1;
                    } else if ((synpred366_Delphi())) {
                        alt247 = 2;
                    } else if ((true)) {
                        alt247 = 3;
                    }

                }
                break;
                case POINTER2: {
                    int LA247_5 = input.LA(2);
                    if ((synpred365_Delphi())) {
                        alt247 = 1;
                    } else if ((synpred366_Delphi())) {
                        alt247 = 2;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try {
                            input.consume();
                            NoViableAltException nvae =
                                    new NoViableAltException("", 247, 5, input);
                            throw nvae;
                        } finally {
                            input.rewind(nvaeMark);
                        }
                    }

                }
                break;
                case AT2: {
                    int LA247_6 = input.LA(2);
                    if ((synpred365_Delphi())) {
                        alt247 = 1;
                    } else if ((synpred366_Delphi())) {
                        alt247 = 2;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try {
                            input.consume();
                            NoViableAltException nvae =
                                    new NoViableAltException("", 247, 6, input);
                            throw nvae;
                        } finally {
                            input.rewind(nvaeMark);
                        }
                    }

                }
                break;
                case LT: {
                    int LA247_7 = input.LA(2);
                    if ((synpred365_Delphi())) {
                        alt247 = 1;
                    } else if ((synpred366_Delphi())) {
                        alt247 = 2;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try {
                            input.consume();
                            NoViableAltException nvae =
                                    new NoViableAltException("", 247, 7, input);
                            throw nvae;
                        } finally {
                            input.rewind(nvaeMark);
                        }
                    }

                }
                break;
                case LBRACK: {
                    int LA247_8 = input.LA(2);
                    if ((synpred365_Delphi())) {
                        alt247 = 1;
                    } else if ((synpred366_Delphi())) {
                        alt247 = 2;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try {
                            input.consume();
                            NoViableAltException nvae =
                                    new NoViableAltException("", 247, 8, input);
                            throw nvae;
                        } finally {
                            input.rewind(nvaeMark);
                        }
                    }

                }
                break;
                case LPAREN: {
                    int LA247_9 = input.LA(2);
                    if ((synpred365_Delphi())) {
                        alt247 = 1;
                    } else if ((synpred366_Delphi())) {
                        alt247 = 2;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try {
                            input.consume();
                            NoViableAltException nvae =
                                    new NoViableAltException("", 247, 9, input);
                            throw nvae;
                        } finally {
                            input.rewind(nvaeMark);
                        }
                    }

                }
                break;
                case ASSIGN: {
                    alt247 = 1;
                }
                break;
                case EOF:
                case AND:
                case AS:
                case COLON:
                case COMMA:
                case ControlString:
                case DIV:
                case DOTDOT:
                case ELSE:
                case END:
                case EQUAL:
                case EXCEPT:
                case FALSE:
                case FINALIZATION:
                case FINALLY:
                case FUNCTION:
                case GE:
                case GT:
                case IN:
                case IS:
                case LE:
                case MINUS:
                case MOD:
                case NIL:
                case NOT:
                case NOT_EQUAL:
                case ON:
                case OR:
                case PLUS:
                case PROCEDURE:
                case QuotedString:
                case SEMI:
                case SHL:
                case SHR:
                case SLASH:
                case STAR:
                case TRUE:
                case TkAsmHexNum:
                case TkHexNum:
                case TkIntNum:
                case TkRealNum:
                case UNTIL:
                case XOR:
                case 201: {
                    alt247 = 2;
                }
                break;
                case DOT: {
                    int LA247_17 = input.LA(2);
                    if ((synpred365_Delphi())) {
                        alt247 = 1;
                    } else if ((synpred366_Delphi())) {
                        alt247 = 2;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try {
                            input.consume();
                            NoViableAltException nvae =
                                    new NoViableAltException("", 247, 17, input);
                            throw nvae;
                        } finally {
                            input.rewind(nvaeMark);
                        }
                    }

                }
                break;
                case GOTO: {
                    alt247 = 3;
                }
                break;
                case BREAK: {
                    int LA247_42 = input.LA(2);
                    if ((synpred365_Delphi())) {
                        alt247 = 1;
                    } else if ((synpred366_Delphi())) {
                        alt247 = 2;
                    } else if ((true)) {
                        alt247 = 3;
                    }

                }
                break;
                case CONTINUE: {
                    int LA247_43 = input.LA(2);
                    if ((synpred365_Delphi())) {
                        alt247 = 1;
                    } else if ((synpred366_Delphi())) {
                        alt247 = 2;
                    } else if ((true)) {
                        alt247 = 3;
                    }

                }
                break;
                case ADD:
                case ANSISTRING:
                case AT:
                case CONTAINS:
                case DEFAULT:
                case EXPORT:
                case FINAL:
                case IMPLEMENTS:
                case INDEX:
                case LOCAL:
                case MESSAGE:
                case NAME:
                case OBJECT:
                case OPERATOR:
                case OUT:
                case POINTER:
                case READ:
                case READONLY:
                case REFERENCE:
                case REGISTER:
                case REMOVE:
                case STORED:
                case STRICT:
                case STRING:
                case VARIANT:
                case WRITE: {
                    int LA247_44 = input.LA(2);
                    if ((synpred365_Delphi())) {
                        alt247 = 1;
                    } else if ((synpred366_Delphi())) {
                        alt247 = 2;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try {
                            input.consume();
                            NoViableAltException nvae =
                                    new NoViableAltException("", 247, 44, input);
                            throw nvae;
                        } finally {
                            input.rewind(nvaeMark);
                        }
                    }

                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae =
                            new NoViableAltException("", 247, 0, input);
                    throw nvae;
            }
            switch (alt247) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:567:32: designator ':=' expression
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_designator_in_simpleStatement16022);
                    designator747 = designator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, designator747.getTree());

                    string_literal748 = (Token) match(input, ASSIGN, FOLLOW_ASSIGN_in_simpleStatement16024);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal748_tree = (Object) adaptor.create(string_literal748);
                        adaptor.addChild(root_0, string_literal748_tree);
                    }

                    pushFollow(FOLLOW_expression_in_simpleStatement16026);
                    expression749 = expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, expression749.getTree());

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:568:32: designator
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_designator_in_simpleStatement16059);
                    designator750 = designator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, designator750.getTree());

                }
                break;
                case 3:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:569:32: gotoStatement
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_gotoStatement_in_simpleStatement16093);
                    gotoStatement751 = gotoStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, gotoStatement751.getTree());

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 141, simpleStatement_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "gotoStatement"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:571:1: gotoStatement : ( 'goto' label | 'exit' ( '(' expression ')' )? | 'break' | 'continue' );
    public final DelphiParser.gotoStatement_return gotoStatement() throws RecognitionException {
        DelphiParser.gotoStatement_return retval = new DelphiParser.gotoStatement_return();
        retval.start = input.LT(1);
        int gotoStatement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal752 = null;
        Token string_literal754 = null;
        Token char_literal755 = null;
        Token char_literal757 = null;
        Token string_literal758 = null;
        Token string_literal759 = null;
        ParserRuleReturnScope label753 = null;
        ParserRuleReturnScope expression756 = null;

        Object string_literal752_tree = null;
        Object string_literal754_tree = null;
        Object char_literal755_tree = null;
        Object char_literal757_tree = null;
        Object string_literal758_tree = null;
        Object string_literal759_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 142)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:571:30: ( 'goto' label | 'exit' ( '(' expression ')' )? | 'break' | 'continue' )
            int alt249 = 4;
            switch (input.LA(1)) {
                case GOTO: {
                    alt249 = 1;
                }
                break;
                case EXIT: {
                    alt249 = 2;
                }
                break;
                case BREAK: {
                    alt249 = 3;
                }
                break;
                case CONTINUE: {
                    alt249 = 4;
                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae =
                            new NoViableAltException("", 249, 0, input);
                    throw nvae;
            }
            switch (alt249) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:571:32: 'goto' label
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal752 = (Token) match(input, GOTO, FOLLOW_GOTO_in_gotoStatement16145);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal752_tree = (Object) adaptor.create(string_literal752);
                        adaptor.addChild(root_0, string_literal752_tree);
                    }

                    pushFollow(FOLLOW_label_in_gotoStatement16147);
                    label753 = label();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, label753.getTree());

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:572:32: 'exit' ( '(' expression ')' )?
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal754 = (Token) match(input, EXIT, FOLLOW_EXIT_in_gotoStatement16180);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal754_tree = (Object) adaptor.create(string_literal754);
                        adaptor.addChild(root_0, string_literal754_tree);
                    }

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:572:39: ( '(' expression ')' )?
                    int alt248 = 2;
                    int LA248_0 = input.LA(1);
                    if ((LA248_0 == LPAREN)) {
                        int LA248_1 = input.LA(2);
                        if ((synpred368_Delphi())) {
                            alt248 = 1;
                        }
                    }
                    switch (alt248) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:572:40: '(' expression ')'
                        {
                            char_literal755 = (Token) match(input, LPAREN, FOLLOW_LPAREN_in_gotoStatement16183);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) {
                                char_literal755_tree = (Object) adaptor.create(char_literal755);
                                adaptor.addChild(root_0, char_literal755_tree);
                            }

                            pushFollow(FOLLOW_expression_in_gotoStatement16185);
                            expression756 = expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, expression756.getTree());

                            char_literal757 = (Token) match(input, RPAREN, FOLLOW_RPAREN_in_gotoStatement16187);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) {
                                char_literal757_tree = (Object) adaptor.create(char_literal757);
                                adaptor.addChild(root_0, char_literal757_tree);
                            }

                        }
                        break;

                    }

                }
                break;
                case 3:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:573:32: 'break'
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal758 = (Token) match(input, BREAK, FOLLOW_BREAK_in_gotoStatement16225);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal758_tree = (Object) adaptor.create(string_literal758);
                        adaptor.addChild(root_0, string_literal758_tree);
                    }

                }
                break;
                case 4:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:574:32: 'continue'
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal759 = (Token) match(input, CONTINUE, FOLLOW_CONTINUE_in_gotoStatement16284);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal759_tree = (Object) adaptor.create(string_literal759);
                        adaptor.addChild(root_0, string_literal759_tree);
                    }

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 142, gotoStatement_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "constExpression"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:579:1: constExpression : ( '(' recordConstExpression ( ';' recordConstExpression )* ')' | '(' constExpression ( ',' constExpression )* ')' | expression );
    public final DelphiParser.constExpression_return constExpression() throws RecognitionException {
        DelphiParser.constExpression_return retval = new DelphiParser.constExpression_return();
        retval.start = input.LT(1);
        int constExpression_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal760 = null;
        Token char_literal762 = null;
        Token char_literal764 = null;
        Token char_literal765 = null;
        Token char_literal767 = null;
        Token char_literal769 = null;
        ParserRuleReturnScope recordConstExpression761 = null;
        ParserRuleReturnScope recordConstExpression763 = null;
        ParserRuleReturnScope constExpression766 = null;
        ParserRuleReturnScope constExpression768 = null;
        ParserRuleReturnScope expression770 = null;

        Object char_literal760_tree = null;
        Object char_literal762_tree = null;
        Object char_literal764_tree = null;
        Object char_literal765_tree = null;
        Object char_literal767_tree = null;
        Object char_literal769_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 143)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:579:30: ( '(' recordConstExpression ( ';' recordConstExpression )* ')' | '(' constExpression ( ',' constExpression )* ')' | expression )
            int alt252 = 3;
            alt252 = dfa252.predict(input);
            switch (alt252) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:579:32: '(' recordConstExpression ( ';' recordConstExpression )* ')'
                {
                    root_0 = (Object) adaptor.nil();


                    char_literal760 = (Token) match(input, LPAREN, FOLLOW_LPAREN_in_constExpression16337);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal760_tree = (Object) adaptor.create(char_literal760);
                        adaptor.addChild(root_0, char_literal760_tree);
                    }

                    pushFollow(FOLLOW_recordConstExpression_in_constExpression16339);
                    recordConstExpression761 = recordConstExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, recordConstExpression761.getTree());

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:579:58: ( ';' recordConstExpression )*
                    loop250:
                    while (true) {
                        int alt250 = 2;
                        int LA250_0 = input.LA(1);
                        if ((LA250_0 == SEMI)) {
                            alt250 = 1;
                        }

                        switch (alt250) {
                            case 1:
                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:579:59: ';' recordConstExpression
                            {
                                char_literal762 = (Token) match(input, SEMI, FOLLOW_SEMI_in_constExpression16342);
                                if (state.failed) return retval;
                                if (state.backtracking == 0) {
                                    char_literal762_tree = (Object) adaptor.create(char_literal762);
                                    adaptor.addChild(root_0, char_literal762_tree);
                                }

                                pushFollow(FOLLOW_recordConstExpression_in_constExpression16344);
                                recordConstExpression763 = recordConstExpression();
                                state._fsp--;
                                if (state.failed) return retval;
                                if (state.backtracking == 0)
                                    adaptor.addChild(root_0, recordConstExpression763.getTree());

                            }
                            break;

                            default:
                                break loop250;
                        }
                    }

                    char_literal764 = (Token) match(input, RPAREN, FOLLOW_RPAREN_in_constExpression16348);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal764_tree = (Object) adaptor.create(char_literal764);
                        adaptor.addChild(root_0, char_literal764_tree);
                    }

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:580:32: '(' constExpression ( ',' constExpression )* ')'
                {
                    root_0 = (Object) adaptor.nil();


                    char_literal765 = (Token) match(input, LPAREN, FOLLOW_LPAREN_in_constExpression16382);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal765_tree = (Object) adaptor.create(char_literal765);
                        adaptor.addChild(root_0, char_literal765_tree);
                    }

                    pushFollow(FOLLOW_constExpression_in_constExpression16384);
                    constExpression766 = constExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, constExpression766.getTree());

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:580:52: ( ',' constExpression )*
                    loop251:
                    while (true) {
                        int alt251 = 2;
                        int LA251_0 = input.LA(1);
                        if ((LA251_0 == COMMA)) {
                            alt251 = 1;
                        }

                        switch (alt251) {
                            case 1:
                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:580:53: ',' constExpression
                            {
                                char_literal767 = (Token) match(input, COMMA, FOLLOW_COMMA_in_constExpression16387);
                                if (state.failed) return retval;
                                if (state.backtracking == 0) {
                                    char_literal767_tree = (Object) adaptor.create(char_literal767);
                                    adaptor.addChild(root_0, char_literal767_tree);
                                }

                                pushFollow(FOLLOW_constExpression_in_constExpression16389);
                                constExpression768 = constExpression();
                                state._fsp--;
                                if (state.failed) return retval;
                                if (state.backtracking == 0) adaptor.addChild(root_0, constExpression768.getTree());

                            }
                            break;

                            default:
                                break loop251;
                        }
                    }

                    char_literal769 = (Token) match(input, RPAREN, FOLLOW_RPAREN_in_constExpression16393);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal769_tree = (Object) adaptor.create(char_literal769);
                        adaptor.addChild(root_0, char_literal769_tree);
                    }

                }
                break;
                case 3:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:581:32: expression
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_expression_in_constExpression16426);
                    expression770 = expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, expression770.getTree());

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 143, constExpression_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "recordConstExpression"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:583:1: recordConstExpression : ident ':' constExpression ;
    public final DelphiParser.recordConstExpression_return recordConstExpression() throws RecognitionException {
        DelphiParser.recordConstExpression_return retval = new DelphiParser.recordConstExpression_return();
        retval.start = input.LT(1);
        int recordConstExpression_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal772 = null;
        ParserRuleReturnScope ident771 = null;
        ParserRuleReturnScope constExpression773 = null;

        Object char_literal772_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 144)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:583:30: ( ident ':' constExpression )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:583:32: ident ':' constExpression
            {
                root_0 = (Object) adaptor.nil();


                pushFollow(FOLLOW_ident_in_recordConstExpression16470);
                ident771 = ident();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, ident771.getTree());

                char_literal772 = (Token) match(input, COLON, FOLLOW_COLON_in_recordConstExpression16472);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    char_literal772_tree = (Object) adaptor.create(char_literal772);
                    adaptor.addChild(root_0, char_literal772_tree);
                }

                pushFollow(FOLLOW_constExpression_in_recordConstExpression16474);
                constExpression773 = constExpression();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, constExpression773.getTree());

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 144, recordConstExpression_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "tryStatement"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:588:1: tryStatement : ( 'try' ( statementList )? 'except' handlerList 'end' | 'try' ( statementList )? 'finally' ( statementList )? 'end' );
    public final DelphiParser.tryStatement_return tryStatement() throws RecognitionException {
        DelphiParser.tryStatement_return retval = new DelphiParser.tryStatement_return();
        retval.start = input.LT(1);
        int tryStatement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal774 = null;
        Token string_literal776 = null;
        Token string_literal778 = null;
        Token string_literal779 = null;
        Token string_literal781 = null;
        Token string_literal783 = null;
        ParserRuleReturnScope statementList775 = null;
        ParserRuleReturnScope handlerList777 = null;
        ParserRuleReturnScope statementList780 = null;
        ParserRuleReturnScope statementList782 = null;

        Object string_literal774_tree = null;
        Object string_literal776_tree = null;
        Object string_literal778_tree = null;
        Object string_literal779_tree = null;
        Object string_literal781_tree = null;
        Object string_literal783_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 145)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:588:30: ( 'try' ( statementList )? 'except' handlerList 'end' | 'try' ( statementList )? 'finally' ( statementList )? 'end' )
            int alt256 = 2;
            int LA256_0 = input.LA(1);
            if ((LA256_0 == TRY)) {
                int LA256_1 = input.LA(2);
                if ((synpred376_Delphi())) {
                    alt256 = 1;
                } else if ((true)) {
                    alt256 = 2;
                }

            } else {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae =
                        new NoViableAltException("", 256, 0, input);
                throw nvae;
            }

            switch (alt256) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:588:32: 'try' ( statementList )? 'except' handlerList 'end'
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal774 = (Token) match(input, TRY, FOLLOW_TRY_in_tryStatement16530);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal774_tree = (Object) adaptor.create(string_literal774);
                        adaptor.addChild(root_0, string_literal774_tree);
                    }

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:588:38: ( statementList )?
                    int alt253 = 2;
                    int LA253_0 = input.LA(1);
                    if ((LA253_0 == ADD || LA253_0 == ANSISTRING || LA253_0 == ASM || (LA253_0 >= ASSIGN && LA253_0 <= AT2) || (LA253_0 >= BEGIN && LA253_0 <= CASE) || (LA253_0 >= CONTAINS && LA253_0 <= CONTINUE) || LA253_0 == DEFAULT || LA253_0 == DOT || LA253_0 == EXIT || LA253_0 == EXPORT || LA253_0 == FINAL || LA253_0 == FOR || LA253_0 == GOTO || LA253_0 == IF || LA253_0 == IMPLEMENTS || (LA253_0 >= INDEX && LA253_0 <= INHERITED) || LA253_0 == LBRACK || (LA253_0 >= LOCAL && LA253_0 <= MESSAGE) || LA253_0 == NAME || LA253_0 == OBJECT || LA253_0 == OPERATOR || LA253_0 == OUT || (LA253_0 >= POINTER && LA253_0 <= POINTER2) || LA253_0 == RAISE || (LA253_0 >= READ && LA253_0 <= READONLY) || (LA253_0 >= REFERENCE && LA253_0 <= REGISTER) || (LA253_0 >= REMOVE && LA253_0 <= REPEAT) || LA253_0 == SEMI || (LA253_0 >= STORED && LA253_0 <= STRING) || LA253_0 == TRY || (LA253_0 >= TkHexNum && LA253_0 <= TkIntNum) || LA253_0 == VARIANT || (LA253_0 >= WHILE && LA253_0 <= WRITE) || LA253_0 == 200)) {
                        alt253 = 1;
                    } else if ((LA253_0 == EXCEPT)) {
                        int LA253_2 = input.LA(2);
                        if ((synpred375_Delphi())) {
                            alt253 = 1;
                        }
                    }
                    switch (alt253) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:588:39: statementList
                        {
                            pushFollow(FOLLOW_statementList_in_tryStatement16533);
                            statementList775 = statementList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, statementList775.getTree());

                        }
                        break;

                    }

                    string_literal776 = (Token) match(input, EXCEPT, FOLLOW_EXCEPT_in_tryStatement16537);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal776_tree = (Object) adaptor.create(string_literal776);
                        adaptor.addChild(root_0, string_literal776_tree);
                    }

                    pushFollow(FOLLOW_handlerList_in_tryStatement16539);
                    handlerList777 = handlerList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, handlerList777.getTree());

                    string_literal778 = (Token) match(input, END, FOLLOW_END_in_tryStatement16541);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal778_tree = (Object) adaptor.create(string_literal778);
                        adaptor.addChild(root_0, string_literal778_tree);
                    }

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:589:32: 'try' ( statementList )? 'finally' ( statementList )? 'end'
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal779 = (Token) match(input, TRY, FOLLOW_TRY_in_tryStatement16576);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal779_tree = (Object) adaptor.create(string_literal779);
                        adaptor.addChild(root_0, string_literal779_tree);
                    }

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:589:38: ( statementList )?
                    int alt254 = 2;
                    int LA254_0 = input.LA(1);
                    if ((LA254_0 == ADD || LA254_0 == ANSISTRING || LA254_0 == ASM || (LA254_0 >= ASSIGN && LA254_0 <= AT2) || (LA254_0 >= BEGIN && LA254_0 <= CASE) || (LA254_0 >= CONTAINS && LA254_0 <= CONTINUE) || LA254_0 == DEFAULT || LA254_0 == DOT || LA254_0 == EXIT || LA254_0 == EXPORT || LA254_0 == FINAL || LA254_0 == FOR || LA254_0 == GOTO || LA254_0 == IF || LA254_0 == IMPLEMENTS || (LA254_0 >= INDEX && LA254_0 <= INHERITED) || LA254_0 == LBRACK || (LA254_0 >= LOCAL && LA254_0 <= MESSAGE) || LA254_0 == NAME || LA254_0 == OBJECT || LA254_0 == OPERATOR || LA254_0 == OUT || (LA254_0 >= POINTER && LA254_0 <= POINTER2) || LA254_0 == RAISE || (LA254_0 >= READ && LA254_0 <= READONLY) || (LA254_0 >= REFERENCE && LA254_0 <= REGISTER) || (LA254_0 >= REMOVE && LA254_0 <= REPEAT) || LA254_0 == SEMI || (LA254_0 >= STORED && LA254_0 <= STRING) || LA254_0 == TRY || (LA254_0 >= TkHexNum && LA254_0 <= TkIntNum) || LA254_0 == VARIANT || (LA254_0 >= WHILE && LA254_0 <= WRITE) || LA254_0 == 200)) {
                        alt254 = 1;
                    } else if ((LA254_0 == FINALLY)) {
                        int LA254_2 = input.LA(2);
                        if ((synpred377_Delphi())) {
                            alt254 = 1;
                        }
                    }
                    switch (alt254) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:589:39: statementList
                        {
                            pushFollow(FOLLOW_statementList_in_tryStatement16579);
                            statementList780 = statementList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, statementList780.getTree());

                        }
                        break;

                    }

                    string_literal781 = (Token) match(input, FINALLY, FOLLOW_FINALLY_in_tryStatement16583);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal781_tree = (Object) adaptor.create(string_literal781);
                        adaptor.addChild(root_0, string_literal781_tree);
                    }

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:589:65: ( statementList )?
                    int alt255 = 2;
                    int LA255_0 = input.LA(1);
                    if ((LA255_0 == ADD || LA255_0 == ANSISTRING || LA255_0 == ASM || (LA255_0 >= ASSIGN && LA255_0 <= AT2) || (LA255_0 >= BEGIN && LA255_0 <= CASE) || (LA255_0 >= CONTAINS && LA255_0 <= CONTINUE) || LA255_0 == DEFAULT || LA255_0 == DOT || LA255_0 == EXIT || LA255_0 == EXPORT || LA255_0 == FINAL || LA255_0 == FOR || LA255_0 == GOTO || LA255_0 == IF || LA255_0 == IMPLEMENTS || (LA255_0 >= INDEX && LA255_0 <= INHERITED) || LA255_0 == LBRACK || (LA255_0 >= LOCAL && LA255_0 <= MESSAGE) || LA255_0 == NAME || LA255_0 == OBJECT || LA255_0 == OPERATOR || LA255_0 == OUT || (LA255_0 >= POINTER && LA255_0 <= POINTER2) || LA255_0 == RAISE || (LA255_0 >= READ && LA255_0 <= READONLY) || (LA255_0 >= REFERENCE && LA255_0 <= REGISTER) || (LA255_0 >= REMOVE && LA255_0 <= REPEAT) || LA255_0 == SEMI || (LA255_0 >= STORED && LA255_0 <= STRING) || LA255_0 == TRY || (LA255_0 >= TkHexNum && LA255_0 <= TkIntNum) || LA255_0 == VARIANT || (LA255_0 >= WHILE && LA255_0 <= WRITE) || LA255_0 == 200)) {
                        alt255 = 1;
                    } else if ((LA255_0 == END)) {
                        int LA255_2 = input.LA(2);
                        if ((synpred378_Delphi())) {
                            alt255 = 1;
                        }
                    }
                    switch (alt255) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:589:66: statementList
                        {
                            pushFollow(FOLLOW_statementList_in_tryStatement16586);
                            statementList782 = statementList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, statementList782.getTree());

                        }
                        break;

                    }

                    string_literal783 = (Token) match(input, END, FOLLOW_END_in_tryStatement16590);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal783_tree = (Object) adaptor.create(string_literal783);
                        adaptor.addChild(root_0, string_literal783_tree);
                    }

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 145, tryStatement_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "handlerList"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:591:1: handlerList : ( ( handler )* ( 'else' statementList )? | statementList );
    public final DelphiParser.handlerList_return handlerList() throws RecognitionException {
        DelphiParser.handlerList_return retval = new DelphiParser.handlerList_return();
        retval.start = input.LT(1);
        int handlerList_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal785 = null;
        ParserRuleReturnScope handler784 = null;
        ParserRuleReturnScope statementList786 = null;
        ParserRuleReturnScope statementList787 = null;

        Object string_literal785_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 146)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:591:30: ( ( handler )* ( 'else' statementList )? | statementList )
            int alt259 = 2;
            switch (input.LA(1)) {
                case ELSE:
                case ON: {
                    alt259 = 1;
                }
                break;
                case END: {
                    int LA259_2 = input.LA(2);
                    if ((synpred381_Delphi())) {
                        alt259 = 1;
                    } else if ((true)) {
                        alt259 = 2;
                    }

                }
                break;
                case ADD:
                case ANSISTRING:
                case ASM:
                case ASSIGN:
                case AT:
                case AT2:
                case BEGIN:
                case BREAK:
                case CASE:
                case CONTAINS:
                case CONTINUE:
                case DEFAULT:
                case DOT:
                case EXIT:
                case EXPORT:
                case FINAL:
                case FOR:
                case GOTO:
                case IF:
                case IMPLEMENTS:
                case INDEX:
                case INHERITED:
                case LBRACK:
                case LOCAL:
                case LPAREN:
                case LT:
                case MESSAGE:
                case NAME:
                case OBJECT:
                case OPERATOR:
                case OUT:
                case POINTER:
                case POINTER2:
                case RAISE:
                case READ:
                case READONLY:
                case REFERENCE:
                case REGISTER:
                case REMOVE:
                case REPEAT:
                case SEMI:
                case STORED:
                case STRICT:
                case STRING:
                case TRY:
                case TkHexNum:
                case TkIdentifier:
                case TkIntNum:
                case VARIANT:
                case WHILE:
                case WITH:
                case WRITE:
                case 200: {
                    alt259 = 2;
                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae =
                            new NoViableAltException("", 259, 0, input);
                    throw nvae;
            }
            switch (alt259) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:591:32: ( handler )* ( 'else' statementList )?
                {
                    root_0 = (Object) adaptor.nil();


                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:591:32: ( handler )*
                    loop257:
                    while (true) {
                        int alt257 = 2;
                        int LA257_0 = input.LA(1);
                        if ((LA257_0 == ON)) {
                            alt257 = 1;
                        }

                        switch (alt257) {
                            case 1:
                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:591:33: handler
                            {
                                pushFollow(FOLLOW_handler_in_handlerList16645);
                                handler784 = handler();
                                state._fsp--;
                                if (state.failed) return retval;
                                if (state.backtracking == 0) adaptor.addChild(root_0, handler784.getTree());

                            }
                            break;

                            default:
                                break loop257;
                        }
                    }

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:591:43: ( 'else' statementList )?
                    int alt258 = 2;
                    int LA258_0 = input.LA(1);
                    if ((LA258_0 == ELSE)) {
                        alt258 = 1;
                    }
                    switch (alt258) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:591:44: 'else' statementList
                        {
                            string_literal785 = (Token) match(input, ELSE, FOLLOW_ELSE_in_handlerList16650);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) {
                                string_literal785_tree = (Object) adaptor.create(string_literal785);
                                adaptor.addChild(root_0, string_literal785_tree);
                            }

                            pushFollow(FOLLOW_statementList_in_handlerList16652);
                            statementList786 = statementList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, statementList786.getTree());

                        }
                        break;

                    }

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:592:32: statementList
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_statementList_in_handlerList16687);
                    statementList787 = statementList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, statementList787.getTree());

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 146, handlerList_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "handler"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:594:1: handler : 'on' ( handlerIdent )? typeId 'do' handlerStatement ;
    public final DelphiParser.handler_return handler() throws RecognitionException {
        DelphiParser.handler_return retval = new DelphiParser.handler_return();
        retval.start = input.LT(1);
        int handler_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal788 = null;
        Token string_literal791 = null;
        ParserRuleReturnScope handlerIdent789 = null;
        ParserRuleReturnScope typeId790 = null;
        ParserRuleReturnScope handlerStatement792 = null;

        Object string_literal788_tree = null;
        Object string_literal791_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 147)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:594:30: ( 'on' ( handlerIdent )? typeId 'do' handlerStatement )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:594:32: 'on' ( handlerIdent )? typeId 'do' handlerStatement
            {
                root_0 = (Object) adaptor.nil();


                string_literal788 = (Token) match(input, ON, FOLLOW_ON_in_handler16745);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    string_literal788_tree = (Object) adaptor.create(string_literal788);
                    adaptor.addChild(root_0, string_literal788_tree);
                }

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:594:37: ( handlerIdent )?
                int alt260 = 2;
                switch (input.LA(1)) {
                    case TkIdentifier: {
                        int LA260_1 = input.LA(2);
                        if ((LA260_1 == COLON)) {
                            alt260 = 1;
                        }
                    }
                    break;
                    case 200: {
                        int LA260_2 = input.LA(2);
                        if ((LA260_2 == TkIdentifier)) {
                            int LA260_6 = input.LA(3);
                            if ((LA260_6 == COLON)) {
                                alt260 = 1;
                            }
                        }
                    }
                    break;
                    case ADD:
                    case ANSISTRING:
                    case AT:
                    case BREAK:
                    case CONTAINS:
                    case CONTINUE:
                    case DEFAULT:
                    case EXIT:
                    case EXPORT:
                    case FINAL:
                    case IMPLEMENTS:
                    case INDEX:
                    case LOCAL:
                    case MESSAGE:
                    case NAME:
                    case OBJECT:
                    case OPERATOR:
                    case OUT:
                    case POINTER:
                    case READ:
                    case READONLY:
                    case REFERENCE:
                    case REGISTER:
                    case REMOVE:
                    case STORED:
                    case STRICT:
                    case STRING:
                    case VARIANT:
                    case WRITE: {
                        int LA260_3 = input.LA(2);
                        if ((LA260_3 == COLON)) {
                            alt260 = 1;
                        }
                    }
                    break;
                }
                switch (alt260) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:594:38: handlerIdent
                    {
                        pushFollow(FOLLOW_handlerIdent_in_handler16748);
                        handlerIdent789 = handlerIdent();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) adaptor.addChild(root_0, handlerIdent789.getTree());

                    }
                    break;

                }

                pushFollow(FOLLOW_typeId_in_handler16752);
                typeId790 = typeId();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, typeId790.getTree());

                string_literal791 = (Token) match(input, DO, FOLLOW_DO_in_handler16754);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    string_literal791_tree = (Object) adaptor.create(string_literal791);
                    adaptor.addChild(root_0, string_literal791_tree);
                }

                pushFollow(FOLLOW_handlerStatement_in_handler16756);
                handlerStatement792 = handlerStatement();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, handlerStatement792.getTree());

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 147, handler_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "handlerIdent"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:596:1: handlerIdent : ident ':' ;
    public final DelphiParser.handlerIdent_return handlerIdent() throws RecognitionException {
        DelphiParser.handlerIdent_return retval = new DelphiParser.handlerIdent_return();
        retval.start = input.LT(1);
        int handlerIdent_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal794 = null;
        ParserRuleReturnScope ident793 = null;

        Object char_literal794_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 148)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:596:30: ( ident ':' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:596:32: ident ':'
            {
                root_0 = (Object) adaptor.nil();


                pushFollow(FOLLOW_ident_in_handlerIdent16811);
                ident793 = ident();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, ident793.getTree());

                char_literal794 = (Token) match(input, COLON, FOLLOW_COLON_in_handlerIdent16813);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    char_literal794_tree = (Object) adaptor.create(char_literal794);
                    adaptor.addChild(root_0, char_literal794_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 148, handlerIdent_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "handlerStatement"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:598:1: handlerStatement : ( statement ( ';' )? | ';' );
    public final DelphiParser.handlerStatement_return handlerStatement() throws RecognitionException {
        DelphiParser.handlerStatement_return retval = new DelphiParser.handlerStatement_return();
        retval.start = input.LT(1);
        int handlerStatement_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal796 = null;
        Token char_literal797 = null;
        ParserRuleReturnScope statement795 = null;

        Object char_literal796_tree = null;
        Object char_literal797_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 149)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:598:30: ( statement ( ';' )? | ';' )
            int alt262 = 2;
            int LA262_0 = input.LA(1);
            if ((LA262_0 == EOF || LA262_0 == ADD || LA262_0 == ANSISTRING || LA262_0 == ASM || (LA262_0 >= ASSIGN && LA262_0 <= AT2) || (LA262_0 >= BEGIN && LA262_0 <= CASE) || (LA262_0 >= CONTAINS && LA262_0 <= CONTINUE) || LA262_0 == DEFAULT || LA262_0 == DOT || (LA262_0 >= ELSE && LA262_0 <= END) || LA262_0 == EXIT || LA262_0 == EXPORT || LA262_0 == FINAL || LA262_0 == FOR || LA262_0 == GOTO || LA262_0 == IF || LA262_0 == IMPLEMENTS || (LA262_0 >= INDEX && LA262_0 <= INHERITED) || LA262_0 == LBRACK || (LA262_0 >= LOCAL && LA262_0 <= MESSAGE) || LA262_0 == NAME || LA262_0 == OBJECT || (LA262_0 >= ON && LA262_0 <= OPERATOR) || LA262_0 == OUT || (LA262_0 >= POINTER && LA262_0 <= POINTER2) || LA262_0 == RAISE || (LA262_0 >= READ && LA262_0 <= READONLY) || (LA262_0 >= REFERENCE && LA262_0 <= REGISTER) || (LA262_0 >= REMOVE && LA262_0 <= REPEAT) || (LA262_0 >= STORED && LA262_0 <= STRING) || LA262_0 == TRY || (LA262_0 >= TkHexNum && LA262_0 <= TkIntNum) || LA262_0 == VARIANT || (LA262_0 >= WHILE && LA262_0 <= WRITE) || LA262_0 == 200)) {
                alt262 = 1;
            } else if ((LA262_0 == SEMI)) {
                int LA262_2 = input.LA(2);
                if ((synpred384_Delphi())) {
                    alt262 = 1;
                } else if ((true)) {
                    alt262 = 2;
                }

            } else {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae =
                        new NoViableAltException("", 262, 0, input);
                throw nvae;
            }

            switch (alt262) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:598:32: statement ( ';' )?
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_statement_in_handlerStatement16862);
                    statement795 = statement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, statement795.getTree());

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:598:42: ( ';' )?
                    int alt261 = 2;
                    int LA261_0 = input.LA(1);
                    if ((LA261_0 == SEMI)) {
                        alt261 = 1;
                    }
                    switch (alt261) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:598:43: ';'
                        {
                            char_literal796 = (Token) match(input, SEMI, FOLLOW_SEMI_in_handlerStatement16865);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) {
                                char_literal796_tree = (Object) adaptor.create(char_literal796);
                                adaptor.addChild(root_0, char_literal796_tree);
                            }

                        }
                        break;

                    }

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:599:32: ';'
                {
                    root_0 = (Object) adaptor.nil();


                    char_literal797 = (Token) match(input, SEMI, FOLLOW_SEMI_in_handlerStatement16900);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal797_tree = (Object) adaptor.create(char_literal797);
                        adaptor.addChild(root_0, char_literal797_tree);
                    }

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 149, handlerStatement_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "raiseStatement"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:601:1: raiseStatement : 'raise' ( designator )? ( AT designator )? ;
    public final DelphiParser.raiseStatement_return raiseStatement() throws RecognitionException {
        DelphiParser.raiseStatement_return retval = new DelphiParser.raiseStatement_return();
        retval.start = input.LT(1);
        int raiseStatement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal798 = null;
        Token AT800 = null;
        ParserRuleReturnScope designator799 = null;
        ParserRuleReturnScope designator801 = null;

        Object string_literal798_tree = null;
        Object AT800_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 150)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:601:30: ( 'raise' ( designator )? ( AT designator )? )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:601:32: 'raise' ( designator )? ( AT designator )?
            {
                root_0 = (Object) adaptor.nil();


                string_literal798 = (Token) match(input, RAISE, FOLLOW_RAISE_in_raiseStatement16951);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    string_literal798_tree = (Object) adaptor.create(string_literal798);
                    adaptor.addChild(root_0, string_literal798_tree);
                }

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:601:40: ( designator )?
                int alt263 = 2;
                switch (input.LA(1)) {
                    case INHERITED: {
                        int LA263_1 = input.LA(2);
                        if ((synpred385_Delphi())) {
                            alt263 = 1;
                        }
                    }
                    break;
                    case TkIdentifier: {
                        int LA263_2 = input.LA(2);
                        if ((synpred385_Delphi())) {
                            alt263 = 1;
                        }
                    }
                    break;
                    case 200: {
                        int LA263_3 = input.LA(2);
                        if ((synpred385_Delphi())) {
                            alt263 = 1;
                        }
                    }
                    break;
                    case AT: {
                        int LA263_4 = input.LA(2);
                        if ((synpred385_Delphi())) {
                            alt263 = 1;
                        }
                    }
                    break;
                    case POINTER2: {
                        int LA263_5 = input.LA(2);
                        if ((synpred385_Delphi())) {
                            alt263 = 1;
                        }
                    }
                    break;
                    case AT2: {
                        int LA263_6 = input.LA(2);
                        if ((synpred385_Delphi())) {
                            alt263 = 1;
                        }
                    }
                    break;
                    case LT: {
                        int LA263_7 = input.LA(2);
                        if ((synpred385_Delphi())) {
                            alt263 = 1;
                        }
                    }
                    break;
                    case LBRACK: {
                        int LA263_8 = input.LA(2);
                        if ((synpred385_Delphi())) {
                            alt263 = 1;
                        }
                    }
                    break;
                    case LPAREN: {
                        int LA263_9 = input.LA(2);
                        if ((synpred385_Delphi())) {
                            alt263 = 1;
                        }
                    }
                    break;
                    case ADD:
                    case ANSISTRING:
                    case BREAK:
                    case CONTAINS:
                    case CONTINUE:
                    case DEFAULT:
                    case EXIT:
                    case EXPORT:
                    case FINAL:
                    case IMPLEMENTS:
                    case INDEX:
                    case LOCAL:
                    case MESSAGE:
                    case NAME:
                    case OBJECT:
                    case OPERATOR:
                    case OUT:
                    case POINTER:
                    case READ:
                    case READONLY:
                    case REFERENCE:
                    case REGISTER:
                    case REMOVE:
                    case STORED:
                    case STRICT:
                    case STRING:
                    case VARIANT:
                    case WRITE: {
                        int LA263_10 = input.LA(2);
                        if ((synpred385_Delphi())) {
                            alt263 = 1;
                        }
                    }
                    break;
                    case ELSE: {
                        int LA263_11 = input.LA(2);
                        if ((synpred385_Delphi())) {
                            alt263 = 1;
                        }
                    }
                    break;
                    case EOF: {
                        int LA263_12 = input.LA(2);
                        if ((synpred385_Delphi())) {
                            alt263 = 1;
                        }
                    }
                    break;
                    case SEMI: {
                        int LA263_13 = input.LA(2);
                        if ((synpred385_Delphi())) {
                            alt263 = 1;
                        }
                    }
                    break;
                    case END: {
                        int LA263_14 = input.LA(2);
                        if ((synpred385_Delphi())) {
                            alt263 = 1;
                        }
                    }
                    break;
                    case PROCEDURE: {
                        int LA263_15 = input.LA(2);
                        if ((synpred385_Delphi())) {
                            alt263 = 1;
                        }
                    }
                    break;
                    case FUNCTION: {
                        int LA263_16 = input.LA(2);
                        if ((synpred385_Delphi())) {
                            alt263 = 1;
                        }
                    }
                    break;
                    case DOT: {
                        int LA263_17 = input.LA(2);
                        if ((synpred385_Delphi())) {
                            alt263 = 1;
                        }
                    }
                    break;
                    case 201: {
                        int LA263_18 = input.LA(2);
                        if ((synpred385_Delphi())) {
                            alt263 = 1;
                        }
                    }
                    break;
                    case NOT: {
                        int LA263_19 = input.LA(2);
                        if ((synpred385_Delphi())) {
                            alt263 = 1;
                        }
                    }
                    break;
                    case PLUS: {
                        int LA263_20 = input.LA(2);
                        if ((synpred385_Delphi())) {
                            alt263 = 1;
                        }
                    }
                    break;
                    case MINUS: {
                        int LA263_21 = input.LA(2);
                        if ((synpred385_Delphi())) {
                            alt263 = 1;
                        }
                    }
                    break;
                    case TkHexNum:
                    case TkIntNum: {
                        int LA263_22 = input.LA(2);
                        if ((synpred385_Delphi())) {
                            alt263 = 1;
                        }
                    }
                    break;
                    case TkRealNum: {
                        int LA263_23 = input.LA(2);
                        if ((synpred385_Delphi())) {
                            alt263 = 1;
                        }
                    }
                    break;
                    case TkAsmHexNum: {
                        int LA263_24 = input.LA(2);
                        if ((synpred385_Delphi())) {
                            alt263 = 1;
                        }
                    }
                    break;
                    case TRUE: {
                        int LA263_25 = input.LA(2);
                        if ((synpred385_Delphi())) {
                            alt263 = 1;
                        }
                    }
                    break;
                    case FALSE: {
                        int LA263_26 = input.LA(2);
                        if ((synpred385_Delphi())) {
                            alt263 = 1;
                        }
                    }
                    break;
                    case NIL: {
                        int LA263_27 = input.LA(2);
                        if ((synpred385_Delphi())) {
                            alt263 = 1;
                        }
                    }
                    break;
                    case ControlString: {
                        int LA263_28 = input.LA(2);
                        if ((synpred385_Delphi())) {
                            alt263 = 1;
                        }
                    }
                    break;
                    case QuotedString: {
                        int LA263_29 = input.LA(2);
                        if ((synpred385_Delphi())) {
                            alt263 = 1;
                        }
                    }
                    break;
                    case AND:
                    case AS:
                    case DIV:
                    case MOD:
                    case OR:
                    case SHL:
                    case SHR:
                    case SLASH:
                    case STAR:
                    case XOR: {
                        int LA263_30 = input.LA(2);
                        if ((synpred385_Delphi())) {
                            alt263 = 1;
                        }
                    }
                    break;
                    case EQUAL: {
                        int LA263_31 = input.LA(2);
                        if ((synpred385_Delphi())) {
                            alt263 = 1;
                        }
                    }
                    break;
                    case GE:
                    case GT:
                    case IN:
                    case IS:
                    case LE:
                    case NOT_EQUAL: {
                        int LA263_32 = input.LA(2);
                        if ((synpred385_Delphi())) {
                            alt263 = 1;
                        }
                    }
                    break;
                    case DOTDOT: {
                        int LA263_33 = input.LA(2);
                        if ((synpred385_Delphi())) {
                            alt263 = 1;
                        }
                    }
                    break;
                    case COMMA: {
                        int LA263_34 = input.LA(2);
                        if ((synpred385_Delphi())) {
                            alt263 = 1;
                        }
                    }
                    break;
                    case COLON: {
                        int LA263_35 = input.LA(2);
                        if ((synpred385_Delphi())) {
                            alt263 = 1;
                        }
                    }
                    break;
                    case FINALIZATION: {
                        int LA263_36 = input.LA(2);
                        if ((synpred385_Delphi())) {
                            alt263 = 1;
                        }
                    }
                    break;
                    case UNTIL: {
                        int LA263_37 = input.LA(2);
                        if ((synpred385_Delphi())) {
                            alt263 = 1;
                        }
                    }
                    break;
                    case EXCEPT: {
                        int LA263_38 = input.LA(2);
                        if ((synpred385_Delphi())) {
                            alt263 = 1;
                        }
                    }
                    break;
                    case FINALLY: {
                        int LA263_39 = input.LA(2);
                        if ((synpred385_Delphi())) {
                            alt263 = 1;
                        }
                    }
                    break;
                    case ON: {
                        int LA263_40 = input.LA(2);
                        if ((synpred385_Delphi())) {
                            alt263 = 1;
                        }
                    }
                    break;
                }
                switch (alt263) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:601:41: designator
                    {
                        pushFollow(FOLLOW_designator_in_raiseStatement16954);
                        designator799 = designator();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) adaptor.addChild(root_0, designator799.getTree());

                    }
                    break;

                }

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:601:54: ( AT designator )?
                int alt264 = 2;
                int LA264_0 = input.LA(1);
                if ((LA264_0 == AT)) {
                    int LA264_1 = input.LA(2);
                    if ((synpred386_Delphi())) {
                        alt264 = 1;
                    }
                }
                switch (alt264) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:601:55: AT designator
                    {
                        AT800 = (Token) match(input, AT, FOLLOW_AT_in_raiseStatement16959);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) {
                            AT800_tree = (Object) adaptor.create(AT800);
                            adaptor.addChild(root_0, AT800_tree);
                        }

                        pushFollow(FOLLOW_designator_in_raiseStatement16961);
                        designator801 = designator();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) adaptor.addChild(root_0, designator801.getTree());

                    }
                    break;

                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 150, raiseStatement_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "assemblerStatement"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:606:1: assemblerStatement : 'asm' (~ ( 'end' ) )* 'end' ;
    public final DelphiParser.assemblerStatement_return assemblerStatement() throws RecognitionException {
        DelphiParser.assemblerStatement_return retval = new DelphiParser.assemblerStatement_return();
        retval.start = input.LT(1);
        int assemblerStatement_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal802 = null;
        Token set803 = null;
        Token string_literal804 = null;

        Object string_literal802_tree = null;
        Object set803_tree = null;
        Object string_literal804_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 151)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:606:30: ( 'asm' (~ ( 'end' ) )* 'end' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:606:32: 'asm' (~ ( 'end' ) )* 'end'
            {
                root_0 = (Object) adaptor.nil();


                string_literal802 = (Token) match(input, ASM, FOLLOW_ASM_in_assemblerStatement17025);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    string_literal802_tree = (Object) adaptor.create(string_literal802);
                    adaptor.addChild(root_0, string_literal802_tree);
                }

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:606:38: (~ ( 'end' ) )*
                loop265:
                while (true) {
                    int alt265 = 2;
                    int LA265_0 = input.LA(1);
                    if (((LA265_0 >= ABSOLUTE && LA265_0 <= ELSE) || (LA265_0 >= EQUAL && LA265_0 <= 201))) {
                        alt265 = 1;
                    }

                    switch (alt265) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
                        {
                            set803 = input.LT(1);
                            if ((input.LA(1) >= ABSOLUTE && input.LA(1) <= ELSE) || (input.LA(1) >= EQUAL && input.LA(1) <= 201)) {
                                input.consume();
                                if (state.backtracking == 0) adaptor.addChild(root_0, (Object) adaptor.create(set803));
                                state.errorRecovery = false;
                                state.failed = false;
                            } else {
                                if (state.backtracking > 0) {
                                    state.failed = true;
                                    return retval;
                                }
                                MismatchedSetException mse = new MismatchedSetException(null, input);
                                throw mse;
                            }
                        }
                        break;

                        default:
                            break loop265;
                    }
                }

                string_literal804 = (Token) match(input, END, FOLLOW_END_in_assemblerStatement17033);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    string_literal804_tree = (Object) adaptor.create(string_literal804);
                    adaptor.addChild(root_0, string_literal804_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 151, assemblerStatement_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "methodDirective"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:611:1: methodDirective : ( reintroduceDirective | overloadDirective | bindingDirective | abstractDirective | inlineDirective | callConvention | hintingDirective ';' | oldCallConventionDirective | dispIDDirective );
    public final DelphiParser.methodDirective_return methodDirective() throws RecognitionException {
        DelphiParser.methodDirective_return retval = new DelphiParser.methodDirective_return();
        retval.start = input.LT(1);
        int methodDirective_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal812 = null;
        ParserRuleReturnScope reintroduceDirective805 = null;
        ParserRuleReturnScope overloadDirective806 = null;
        ParserRuleReturnScope bindingDirective807 = null;
        ParserRuleReturnScope abstractDirective808 = null;
        ParserRuleReturnScope inlineDirective809 = null;
        ParserRuleReturnScope callConvention810 = null;
        ParserRuleReturnScope hintingDirective811 = null;
        ParserRuleReturnScope oldCallConventionDirective813 = null;
        ParserRuleReturnScope dispIDDirective814 = null;

        Object char_literal812_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 152)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:611:30: ( reintroduceDirective | overloadDirective | bindingDirective | abstractDirective | inlineDirective | callConvention | hintingDirective ';' | oldCallConventionDirective | dispIDDirective )
            int alt266 = 9;
            switch (input.LA(1)) {
                case REINTRODUCE: {
                    alt266 = 1;
                }
                break;
                case OVERLOAD: {
                    alt266 = 2;
                }
                break;
                case DYNAMIC:
                case MESSAGE:
                case OVERRIDE:
                case STATIC:
                case VIRTUAL: {
                    alt266 = 3;
                }
                break;
                case ABSTRACT:
                case FINAL: {
                    alt266 = 4;
                }
                break;
                case ASSEMBLER:
                case INLINE: {
                    alt266 = 5;
                }
                break;
                case CDECL:
                case EXPORT:
                case PASCAL:
                case REGISTER:
                case SAFECALL:
                case STDCALL: {
                    alt266 = 6;
                }
                break;
                case DEPRECATED:
                case EXPERIMENTAL:
                case LIBRARY:
                case PLATFORM: {
                    alt266 = 7;
                }
                break;
                case FAR:
                case LOCAL:
                case NEAR: {
                    alt266 = 8;
                }
                break;
                case DISPID: {
                    alt266 = 9;
                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae =
                            new NoViableAltException("", 266, 0, input);
                    throw nvae;
            }
            switch (alt266) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:611:32: reintroduceDirective
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_reintroduceDirective_in_methodDirective17106);
                    reintroduceDirective805 = reintroduceDirective();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, reintroduceDirective805.getTree());

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:612:32: overloadDirective
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_overloadDirective_in_methodDirective17148);
                    overloadDirective806 = overloadDirective();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, overloadDirective806.getTree());

                }
                break;
                case 3:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:613:32: bindingDirective
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_bindingDirective_in_methodDirective17193);
                    bindingDirective807 = bindingDirective();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, bindingDirective807.getTree());

                }
                break;
                case 4:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:614:32: abstractDirective
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_abstractDirective_in_methodDirective17239);
                    abstractDirective808 = abstractDirective();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, abstractDirective808.getTree());

                }
                break;
                case 5:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:615:32: inlineDirective
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_inlineDirective_in_methodDirective17284);
                    inlineDirective809 = inlineDirective();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, inlineDirective809.getTree());

                }
                break;
                case 6:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:616:32: callConvention
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_callConvention_in_methodDirective17331);
                    callConvention810 = callConvention();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, callConvention810.getTree());

                }
                break;
                case 7:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:617:32: hintingDirective ';'
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_hintingDirective_in_methodDirective17379);
                    hintingDirective811 = hintingDirective();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, hintingDirective811.getTree());

                    char_literal812 = (Token) match(input, SEMI, FOLLOW_SEMI_in_methodDirective17381);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal812_tree = (Object) adaptor.create(char_literal812);
                        adaptor.addChild(root_0, char_literal812_tree);
                    }

                }
                break;
                case 8:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:618:32: oldCallConventionDirective
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_oldCallConventionDirective_in_methodDirective17421);
                    oldCallConventionDirective813 = oldCallConventionDirective();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, oldCallConventionDirective813.getTree());

                }
                break;
                case 9:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:619:32: dispIDDirective
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_dispIDDirective_in_methodDirective17457);
                    dispIDDirective814 = dispIDDirective();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, dispIDDirective814.getTree());

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 152, methodDirective_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "functionDirective"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:621:1: functionDirective : ( overloadDirective | inlineDirective | callConvention | oldCallConventionDirective | hintingDirective ';' | ( callConventionNoSemi )? externalDirective | 'unsafe' ';' );
    public final DelphiParser.functionDirective_return functionDirective() throws RecognitionException {
        DelphiParser.functionDirective_return retval = new DelphiParser.functionDirective_return();
        retval.start = input.LT(1);
        int functionDirective_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal820 = null;
        Token string_literal823 = null;
        Token char_literal824 = null;
        ParserRuleReturnScope overloadDirective815 = null;
        ParserRuleReturnScope inlineDirective816 = null;
        ParserRuleReturnScope callConvention817 = null;
        ParserRuleReturnScope oldCallConventionDirective818 = null;
        ParserRuleReturnScope hintingDirective819 = null;
        ParserRuleReturnScope callConventionNoSemi821 = null;
        ParserRuleReturnScope externalDirective822 = null;

        Object char_literal820_tree = null;
        Object string_literal823_tree = null;
        Object char_literal824_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 153)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:621:30: ( overloadDirective | inlineDirective | callConvention | oldCallConventionDirective | hintingDirective ';' | ( callConventionNoSemi )? externalDirective | 'unsafe' ';' )
            int alt268 = 7;
            switch (input.LA(1)) {
                case OVERLOAD: {
                    alt268 = 1;
                }
                break;
                case ASSEMBLER:
                case INLINE: {
                    alt268 = 2;
                }
                break;
                case CDECL: {
                    int LA268_3 = input.LA(2);
                    if ((LA268_3 == SEMI)) {
                        alt268 = 3;
                    } else if ((LA268_3 == EXTERNAL || LA268_3 == VARARGS)) {
                        alt268 = 6;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try {
                            input.consume();
                            NoViableAltException nvae =
                                    new NoViableAltException("", 268, 3, input);
                            throw nvae;
                        } finally {
                            input.rewind(nvaeMark);
                        }
                    }

                }
                break;
                case PASCAL: {
                    int LA268_4 = input.LA(2);
                    if ((LA268_4 == SEMI)) {
                        alt268 = 3;
                    } else if ((LA268_4 == EXTERNAL || LA268_4 == VARARGS)) {
                        alt268 = 6;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try {
                            input.consume();
                            NoViableAltException nvae =
                                    new NoViableAltException("", 268, 4, input);
                            throw nvae;
                        } finally {
                            input.rewind(nvaeMark);
                        }
                    }

                }
                break;
                case REGISTER: {
                    int LA268_5 = input.LA(2);
                    if ((LA268_5 == SEMI)) {
                        alt268 = 3;
                    } else if ((LA268_5 == EXTERNAL || LA268_5 == VARARGS)) {
                        alt268 = 6;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try {
                            input.consume();
                            NoViableAltException nvae =
                                    new NoViableAltException("", 268, 5, input);
                            throw nvae;
                        } finally {
                            input.rewind(nvaeMark);
                        }
                    }

                }
                break;
                case SAFECALL: {
                    int LA268_6 = input.LA(2);
                    if ((LA268_6 == SEMI)) {
                        alt268 = 3;
                    } else if ((LA268_6 == EXTERNAL || LA268_6 == VARARGS)) {
                        alt268 = 6;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try {
                            input.consume();
                            NoViableAltException nvae =
                                    new NoViableAltException("", 268, 6, input);
                            throw nvae;
                        } finally {
                            input.rewind(nvaeMark);
                        }
                    }

                }
                break;
                case STDCALL: {
                    int LA268_7 = input.LA(2);
                    if ((LA268_7 == SEMI)) {
                        alt268 = 3;
                    } else if ((LA268_7 == EXTERNAL || LA268_7 == VARARGS)) {
                        alt268 = 6;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try {
                            input.consume();
                            NoViableAltException nvae =
                                    new NoViableAltException("", 268, 7, input);
                            throw nvae;
                        } finally {
                            input.rewind(nvaeMark);
                        }
                    }

                }
                break;
                case EXPORT: {
                    int LA268_8 = input.LA(2);
                    if ((LA268_8 == SEMI)) {
                        alt268 = 3;
                    } else if ((LA268_8 == EXTERNAL || LA268_8 == VARARGS)) {
                        alt268 = 6;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try {
                            input.consume();
                            NoViableAltException nvae =
                                    new NoViableAltException("", 268, 8, input);
                            throw nvae;
                        } finally {
                            input.rewind(nvaeMark);
                        }
                    }

                }
                break;
                case FAR:
                case LOCAL:
                case NEAR: {
                    alt268 = 4;
                }
                break;
                case DEPRECATED:
                case EXPERIMENTAL:
                case LIBRARY:
                case PLATFORM: {
                    alt268 = 5;
                }
                break;
                case EXTERNAL:
                case VARARGS: {
                    alt268 = 6;
                }
                break;
                case UNSAFE: {
                    alt268 = 7;
                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae =
                            new NoViableAltException("", 268, 0, input);
                    throw nvae;
            }
            switch (alt268) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:621:32: overloadDirective
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_overloadDirective_in_functionDirective17505);
                    overloadDirective815 = overloadDirective();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, overloadDirective815.getTree());

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:622:32: inlineDirective
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_inlineDirective_in_functionDirective17548);
                    inlineDirective816 = inlineDirective();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, inlineDirective816.getTree());

                }
                break;
                case 3:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:623:32: callConvention
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_callConvention_in_functionDirective17593);
                    callConvention817 = callConvention();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, callConvention817.getTree());

                }
                break;
                case 4:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:624:32: oldCallConventionDirective
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_oldCallConventionDirective_in_functionDirective17639);
                    oldCallConventionDirective818 = oldCallConventionDirective();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, oldCallConventionDirective818.getTree());

                }
                break;
                case 5:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:625:32: hintingDirective ';'
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_hintingDirective_in_functionDirective17673);
                    hintingDirective819 = hintingDirective();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, hintingDirective819.getTree());

                    char_literal820 = (Token) match(input, SEMI, FOLLOW_SEMI_in_functionDirective17675);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal820_tree = (Object) adaptor.create(char_literal820);
                        adaptor.addChild(root_0, char_literal820_tree);
                    }

                }
                break;
                case 6:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:626:32: ( callConventionNoSemi )? externalDirective
                {
                    root_0 = (Object) adaptor.nil();


                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:626:32: ( callConventionNoSemi )?
                    int alt267 = 2;
                    int LA267_0 = input.LA(1);
                    if ((LA267_0 == CDECL || LA267_0 == EXPORT || LA267_0 == PASCAL || LA267_0 == REGISTER || LA267_0 == SAFECALL || LA267_0 == STDCALL)) {
                        alt267 = 1;
                    }
                    switch (alt267) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:626:33: callConventionNoSemi
                        {
                            pushFollow(FOLLOW_callConventionNoSemi_in_functionDirective17715);
                            callConventionNoSemi821 = callConventionNoSemi();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, callConventionNoSemi821.getTree());

                        }
                        break;

                    }

                    pushFollow(FOLLOW_externalDirective_in_functionDirective17719);
                    externalDirective822 = externalDirective();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, externalDirective822.getTree());

                }
                break;
                case 7:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:627:32: 'unsafe' ';'
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal823 = (Token) match(input, UNSAFE, FOLLOW_UNSAFE_in_functionDirective17762);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal823_tree = (Object) adaptor.create(string_literal823);
                        adaptor.addChild(root_0, string_literal823_tree);
                    }

                    char_literal824 = (Token) match(input, SEMI, FOLLOW_SEMI_in_functionDirective17764);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal824_tree = (Object) adaptor.create(char_literal824);
                        adaptor.addChild(root_0, char_literal824_tree);
                    }

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 153, functionDirective_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "reintroduceDirective"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:629:1: reintroduceDirective : 'reintroduce' ';' ;
    public final DelphiParser.reintroduceDirective_return reintroduceDirective() throws RecognitionException {
        DelphiParser.reintroduceDirective_return retval = new DelphiParser.reintroduceDirective_return();
        retval.start = input.LT(1);
        int reintroduceDirective_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal825 = null;
        Token char_literal826 = null;

        Object string_literal825_tree = null;
        Object char_literal826_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 154)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:629:30: ( 'reintroduce' ';' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:629:32: 'reintroduce' ';'
            {
                root_0 = (Object) adaptor.nil();


                string_literal825 = (Token) match(input, REINTRODUCE, FOLLOW_REINTRODUCE_in_reintroduceDirective17823);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    string_literal825_tree = (Object) adaptor.create(string_literal825);
                    adaptor.addChild(root_0, string_literal825_tree);
                }

                char_literal826 = (Token) match(input, SEMI, FOLLOW_SEMI_in_reintroduceDirective17825);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    char_literal826_tree = (Object) adaptor.create(char_literal826);
                    adaptor.addChild(root_0, char_literal826_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 154, reintroduceDirective_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "overloadDirective"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:631:1: overloadDirective : 'overload' ( ';' )? ;
    public final DelphiParser.overloadDirective_return overloadDirective() throws RecognitionException {
        DelphiParser.overloadDirective_return retval = new DelphiParser.overloadDirective_return();
        retval.start = input.LT(1);
        int overloadDirective_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal827 = null;
        Token char_literal828 = null;

        Object string_literal827_tree = null;
        Object char_literal828_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 155)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:631:30: ( 'overload' ( ';' )? )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:631:32: 'overload' ( ';' )?
            {
                root_0 = (Object) adaptor.nil();


                string_literal827 = (Token) match(input, OVERLOAD, FOLLOW_OVERLOAD_in_overloadDirective17873);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    string_literal827_tree = (Object) adaptor.create(string_literal827);
                    adaptor.addChild(root_0, string_literal827_tree);
                }

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:631:43: ( ';' )?
                int alt269 = 2;
                int LA269_0 = input.LA(1);
                if ((LA269_0 == SEMI)) {
                    int LA269_1 = input.LA(2);
                    if ((synpred404_Delphi())) {
                        alt269 = 1;
                    }
                }
                switch (alt269) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:631:44: ';'
                    {
                        char_literal828 = (Token) match(input, SEMI, FOLLOW_SEMI_in_overloadDirective17876);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) {
                            char_literal828_tree = (Object) adaptor.create(char_literal828);
                            adaptor.addChild(root_0, char_literal828_tree);
                        }

                    }
                    break;

                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 155, overloadDirective_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "bindingDirective"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:633:1: bindingDirective : ( 'message' expression ';' | 'static' ';' | 'dynamic' ';' | 'override' ';' | 'virtual' ';' );
    public final DelphiParser.bindingDirective_return bindingDirective() throws RecognitionException {
        DelphiParser.bindingDirective_return retval = new DelphiParser.bindingDirective_return();
        retval.start = input.LT(1);
        int bindingDirective_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal829 = null;
        Token char_literal831 = null;
        Token string_literal832 = null;
        Token char_literal833 = null;
        Token string_literal834 = null;
        Token char_literal835 = null;
        Token string_literal836 = null;
        Token char_literal837 = null;
        Token string_literal838 = null;
        Token char_literal839 = null;
        ParserRuleReturnScope expression830 = null;

        Object string_literal829_tree = null;
        Object char_literal831_tree = null;
        Object string_literal832_tree = null;
        Object char_literal833_tree = null;
        Object string_literal834_tree = null;
        Object char_literal835_tree = null;
        Object string_literal836_tree = null;
        Object char_literal837_tree = null;
        Object string_literal838_tree = null;
        Object char_literal839_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 156)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:633:30: ( 'message' expression ';' | 'static' ';' | 'dynamic' ';' | 'override' ';' | 'virtual' ';' )
            int alt270 = 5;
            switch (input.LA(1)) {
                case MESSAGE: {
                    alt270 = 1;
                }
                break;
                case STATIC: {
                    alt270 = 2;
                }
                break;
                case DYNAMIC: {
                    alt270 = 3;
                }
                break;
                case OVERRIDE: {
                    alt270 = 4;
                }
                break;
                case VIRTUAL: {
                    alt270 = 5;
                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae =
                            new NoViableAltException("", 270, 0, input);
                    throw nvae;
            }
            switch (alt270) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:633:32: 'message' expression ';'
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal829 = (Token) match(input, MESSAGE, FOLLOW_MESSAGE_in_bindingDirective17931);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal829_tree = (Object) adaptor.create(string_literal829);
                        adaptor.addChild(root_0, string_literal829_tree);
                    }

                    pushFollow(FOLLOW_expression_in_bindingDirective17933);
                    expression830 = expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, expression830.getTree());

                    char_literal831 = (Token) match(input, SEMI, FOLLOW_SEMI_in_bindingDirective17935);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal831_tree = (Object) adaptor.create(char_literal831);
                        adaptor.addChild(root_0, char_literal831_tree);
                    }

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:634:32: 'static' ';'
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal832 = (Token) match(input, STATIC, FOLLOW_STATIC_in_bindingDirective17968);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal832_tree = (Object) adaptor.create(string_literal832);
                        adaptor.addChild(root_0, string_literal832_tree);
                    }

                    char_literal833 = (Token) match(input, SEMI, FOLLOW_SEMI_in_bindingDirective17970);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal833_tree = (Object) adaptor.create(char_literal833);
                        adaptor.addChild(root_0, char_literal833_tree);
                    }

                }
                break;
                case 3:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:635:32: 'dynamic' ';'
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal834 = (Token) match(input, DYNAMIC, FOLLOW_DYNAMIC_in_bindingDirective18003);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal834_tree = (Object) adaptor.create(string_literal834);
                        adaptor.addChild(root_0, string_literal834_tree);
                    }

                    char_literal835 = (Token) match(input, SEMI, FOLLOW_SEMI_in_bindingDirective18005);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal835_tree = (Object) adaptor.create(char_literal835);
                        adaptor.addChild(root_0, char_literal835_tree);
                    }

                }
                break;
                case 4:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:636:32: 'override' ';'
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal836 = (Token) match(input, OVERRIDE, FOLLOW_OVERRIDE_in_bindingDirective18038);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal836_tree = (Object) adaptor.create(string_literal836);
                        adaptor.addChild(root_0, string_literal836_tree);
                    }

                    char_literal837 = (Token) match(input, SEMI, FOLLOW_SEMI_in_bindingDirective18040);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal837_tree = (Object) adaptor.create(char_literal837);
                        adaptor.addChild(root_0, char_literal837_tree);
                    }

                }
                break;
                case 5:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:637:32: 'virtual' ';'
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal838 = (Token) match(input, VIRTUAL, FOLLOW_VIRTUAL_in_bindingDirective18073);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal838_tree = (Object) adaptor.create(string_literal838);
                        adaptor.addChild(root_0, string_literal838_tree);
                    }

                    char_literal839 = (Token) match(input, SEMI, FOLLOW_SEMI_in_bindingDirective18075);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal839_tree = (Object) adaptor.create(char_literal839);
                        adaptor.addChild(root_0, char_literal839_tree);
                    }

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 156, bindingDirective_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "abstractDirective"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:639:1: abstractDirective : ( 'abstract' ';' | 'final' ';' );
    public final DelphiParser.abstractDirective_return abstractDirective() throws RecognitionException {
        DelphiParser.abstractDirective_return retval = new DelphiParser.abstractDirective_return();
        retval.start = input.LT(1);
        int abstractDirective_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal840 = null;
        Token char_literal841 = null;
        Token string_literal842 = null;
        Token char_literal843 = null;

        Object string_literal840_tree = null;
        Object char_literal841_tree = null;
        Object string_literal842_tree = null;
        Object char_literal843_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 157)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:639:30: ( 'abstract' ';' | 'final' ';' )
            int alt271 = 2;
            int LA271_0 = input.LA(1);
            if ((LA271_0 == ABSTRACT)) {
                alt271 = 1;
            } else if ((LA271_0 == FINAL)) {
                alt271 = 2;
            } else {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae =
                        new NoViableAltException("", 271, 0, input);
                throw nvae;
            }

            switch (alt271) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:639:32: 'abstract' ';'
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal840 = (Token) match(input, ABSTRACT, FOLLOW_ABSTRACT_in_abstractDirective18123);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal840_tree = (Object) adaptor.create(string_literal840);
                        adaptor.addChild(root_0, string_literal840_tree);
                    }

                    char_literal841 = (Token) match(input, SEMI, FOLLOW_SEMI_in_abstractDirective18125);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal841_tree = (Object) adaptor.create(char_literal841);
                        adaptor.addChild(root_0, char_literal841_tree);
                    }

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:640:32: 'final' ';'
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal842 = (Token) match(input, FINAL, FOLLOW_FINAL_in_abstractDirective18158);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal842_tree = (Object) adaptor.create(string_literal842);
                        adaptor.addChild(root_0, string_literal842_tree);
                    }

                    char_literal843 = (Token) match(input, SEMI, FOLLOW_SEMI_in_abstractDirective18160);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal843_tree = (Object) adaptor.create(char_literal843);
                        adaptor.addChild(root_0, char_literal843_tree);
                    }

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 157, abstractDirective_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "inlineDirective"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:642:1: inlineDirective : ( 'inline' ';' | 'assembler' ';' );
    public final DelphiParser.inlineDirective_return inlineDirective() throws RecognitionException {
        DelphiParser.inlineDirective_return retval = new DelphiParser.inlineDirective_return();
        retval.start = input.LT(1);
        int inlineDirective_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal844 = null;
        Token char_literal845 = null;
        Token string_literal846 = null;
        Token char_literal847 = null;

        Object string_literal844_tree = null;
        Object char_literal845_tree = null;
        Object string_literal846_tree = null;
        Object char_literal847_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 158)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:642:30: ( 'inline' ';' | 'assembler' ';' )
            int alt272 = 2;
            int LA272_0 = input.LA(1);
            if ((LA272_0 == INLINE)) {
                alt272 = 1;
            } else if ((LA272_0 == ASSEMBLER)) {
                alt272 = 2;
            } else {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae =
                        new NoViableAltException("", 272, 0, input);
                throw nvae;
            }

            switch (alt272) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:642:32: 'inline' ';'
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal844 = (Token) match(input, INLINE, FOLLOW_INLINE_in_inlineDirective18210);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal844_tree = (Object) adaptor.create(string_literal844);
                        adaptor.addChild(root_0, string_literal844_tree);
                    }

                    char_literal845 = (Token) match(input, SEMI, FOLLOW_SEMI_in_inlineDirective18212);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal845_tree = (Object) adaptor.create(char_literal845);
                        adaptor.addChild(root_0, char_literal845_tree);
                    }

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:643:32: 'assembler' ';'
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal846 = (Token) match(input, ASSEMBLER, FOLLOW_ASSEMBLER_in_inlineDirective18245);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal846_tree = (Object) adaptor.create(string_literal846);
                        adaptor.addChild(root_0, string_literal846_tree);
                    }

                    char_literal847 = (Token) match(input, SEMI, FOLLOW_SEMI_in_inlineDirective18247);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal847_tree = (Object) adaptor.create(char_literal847);
                        adaptor.addChild(root_0, char_literal847_tree);
                    }

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 158, inlineDirective_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "callConvention"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:645:1: callConvention : ( 'cdecl' ';' | 'pascal' ';' | 'register' ';' | 'safecall' ';' | 'stdcall' ';' | 'export' ';' );
    public final DelphiParser.callConvention_return callConvention() throws RecognitionException {
        DelphiParser.callConvention_return retval = new DelphiParser.callConvention_return();
        retval.start = input.LT(1);
        int callConvention_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal848 = null;
        Token char_literal849 = null;
        Token string_literal850 = null;
        Token char_literal851 = null;
        Token string_literal852 = null;
        Token char_literal853 = null;
        Token string_literal854 = null;
        Token char_literal855 = null;
        Token string_literal856 = null;
        Token char_literal857 = null;
        Token string_literal858 = null;
        Token char_literal859 = null;

        Object string_literal848_tree = null;
        Object char_literal849_tree = null;
        Object string_literal850_tree = null;
        Object char_literal851_tree = null;
        Object string_literal852_tree = null;
        Object char_literal853_tree = null;
        Object string_literal854_tree = null;
        Object char_literal855_tree = null;
        Object string_literal856_tree = null;
        Object char_literal857_tree = null;
        Object string_literal858_tree = null;
        Object char_literal859_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 159)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:645:30: ( 'cdecl' ';' | 'pascal' ';' | 'register' ';' | 'safecall' ';' | 'stdcall' ';' | 'export' ';' )
            int alt273 = 6;
            switch (input.LA(1)) {
                case CDECL: {
                    alt273 = 1;
                }
                break;
                case PASCAL: {
                    alt273 = 2;
                }
                break;
                case REGISTER: {
                    alt273 = 3;
                }
                break;
                case SAFECALL: {
                    alt273 = 4;
                }
                break;
                case STDCALL: {
                    alt273 = 5;
                }
                break;
                case EXPORT: {
                    alt273 = 6;
                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae =
                            new NoViableAltException("", 273, 0, input);
                    throw nvae;
            }
            switch (alt273) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:645:32: 'cdecl' ';'
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal848 = (Token) match(input, CDECL, FOLLOW_CDECL_in_callConvention18299);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal848_tree = (Object) adaptor.create(string_literal848);
                        adaptor.addChild(root_0, string_literal848_tree);
                    }

                    char_literal849 = (Token) match(input, SEMI, FOLLOW_SEMI_in_callConvention18301);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal849_tree = (Object) adaptor.create(char_literal849);
                        adaptor.addChild(root_0, char_literal849_tree);
                    }

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:646:32: 'pascal' ';'
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal850 = (Token) match(input, PASCAL, FOLLOW_PASCAL_in_callConvention18338);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal850_tree = (Object) adaptor.create(string_literal850);
                        adaptor.addChild(root_0, string_literal850_tree);
                    }

                    char_literal851 = (Token) match(input, SEMI, FOLLOW_SEMI_in_callConvention18340);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal851_tree = (Object) adaptor.create(char_literal851);
                        adaptor.addChild(root_0, char_literal851_tree);
                    }

                }
                break;
                case 3:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:647:32: 'register' ';'
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal852 = (Token) match(input, REGISTER, FOLLOW_REGISTER_in_callConvention18376);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal852_tree = (Object) adaptor.create(string_literal852);
                        adaptor.addChild(root_0, string_literal852_tree);
                    }

                    char_literal853 = (Token) match(input, SEMI, FOLLOW_SEMI_in_callConvention18378);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal853_tree = (Object) adaptor.create(char_literal853);
                        adaptor.addChild(root_0, char_literal853_tree);
                    }

                }
                break;
                case 4:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:648:32: 'safecall' ';'
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal854 = (Token) match(input, SAFECALL, FOLLOW_SAFECALL_in_callConvention18412);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal854_tree = (Object) adaptor.create(string_literal854);
                        adaptor.addChild(root_0, string_literal854_tree);
                    }

                    char_literal855 = (Token) match(input, SEMI, FOLLOW_SEMI_in_callConvention18414);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal855_tree = (Object) adaptor.create(char_literal855);
                        adaptor.addChild(root_0, char_literal855_tree);
                    }

                }
                break;
                case 5:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:649:32: 'stdcall' ';'
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal856 = (Token) match(input, STDCALL, FOLLOW_STDCALL_in_callConvention18448);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal856_tree = (Object) adaptor.create(string_literal856);
                        adaptor.addChild(root_0, string_literal856_tree);
                    }

                    char_literal857 = (Token) match(input, SEMI, FOLLOW_SEMI_in_callConvention18450);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal857_tree = (Object) adaptor.create(char_literal857);
                        adaptor.addChild(root_0, char_literal857_tree);
                    }

                }
                break;
                case 6:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:650:32: 'export' ';'
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal858 = (Token) match(input, EXPORT, FOLLOW_EXPORT_in_callConvention18485);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal858_tree = (Object) adaptor.create(string_literal858);
                        adaptor.addChild(root_0, string_literal858_tree);
                    }

                    char_literal859 = (Token) match(input, SEMI, FOLLOW_SEMI_in_callConvention18487);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal859_tree = (Object) adaptor.create(char_literal859);
                        adaptor.addChild(root_0, char_literal859_tree);
                    }

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 159, callConvention_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "callConventionNoSemi"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:652:1: callConventionNoSemi : ( 'cdecl' | 'pascal' | 'register' | 'safecall' | 'stdcall' | 'export' );
    public final DelphiParser.callConventionNoSemi_return callConventionNoSemi() throws RecognitionException {
        DelphiParser.callConventionNoSemi_return retval = new DelphiParser.callConventionNoSemi_return();
        retval.start = input.LT(1);
        int callConventionNoSemi_StartIndex = input.index();

        Object root_0 = null;

        Token set860 = null;

        Object set860_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 160)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:652:30: ( 'cdecl' | 'pascal' | 'register' | 'safecall' | 'stdcall' | 'export' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
            {
                root_0 = (Object) adaptor.nil();


                set860 = input.LT(1);
                if (input.LA(1) == CDECL || input.LA(1) == EXPORT || input.LA(1) == PASCAL || input.LA(1) == REGISTER || input.LA(1) == SAFECALL || input.LA(1) == STDCALL) {
                    input.consume();
                    if (state.backtracking == 0) adaptor.addChild(root_0, (Object) adaptor.create(set860));
                    state.errorRecovery = false;
                    state.failed = false;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 160, callConventionNoSemi_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "oldCallConventionDirective"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:659:1: oldCallConventionDirective : ( 'far' ';' | 'local' ';' | 'near' ';' );
    public final DelphiParser.oldCallConventionDirective_return oldCallConventionDirective() throws RecognitionException {
        DelphiParser.oldCallConventionDirective_return retval = new DelphiParser.oldCallConventionDirective_return();
        retval.start = input.LT(1);
        int oldCallConventionDirective_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal861 = null;
        Token char_literal862 = null;
        Token string_literal863 = null;
        Token char_literal864 = null;
        Token string_literal865 = null;
        Token char_literal866 = null;

        Object string_literal861_tree = null;
        Object char_literal862_tree = null;
        Object string_literal863_tree = null;
        Object char_literal864_tree = null;
        Object string_literal865_tree = null;
        Object char_literal866_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 161)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:659:30: ( 'far' ';' | 'local' ';' | 'near' ';' )
            int alt274 = 3;
            switch (input.LA(1)) {
                case FAR: {
                    alt274 = 1;
                }
                break;
                case LOCAL: {
                    alt274 = 2;
                }
                break;
                case NEAR: {
                    alt274 = 3;
                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae =
                            new NoViableAltException("", 274, 0, input);
                    throw nvae;
            }
            switch (alt274) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:659:32: 'far' ';'
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal861 = (Token) match(input, FAR, FOLLOW_FAR_in_oldCallConventionDirective18753);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal861_tree = (Object) adaptor.create(string_literal861);
                        adaptor.addChild(root_0, string_literal861_tree);
                    }

                    char_literal862 = (Token) match(input, SEMI, FOLLOW_SEMI_in_oldCallConventionDirective18755);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal862_tree = (Object) adaptor.create(char_literal862);
                        adaptor.addChild(root_0, char_literal862_tree);
                    }

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:660:32: 'local' ';'
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal863 = (Token) match(input, LOCAL, FOLLOW_LOCAL_in_oldCallConventionDirective18794);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal863_tree = (Object) adaptor.create(string_literal863);
                        adaptor.addChild(root_0, string_literal863_tree);
                    }

                    char_literal864 = (Token) match(input, SEMI, FOLLOW_SEMI_in_oldCallConventionDirective18796);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal864_tree = (Object) adaptor.create(char_literal864);
                        adaptor.addChild(root_0, char_literal864_tree);
                    }

                }
                break;
                case 3:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:661:32: 'near' ';'
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal865 = (Token) match(input, NEAR, FOLLOW_NEAR_in_oldCallConventionDirective18833);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal865_tree = (Object) adaptor.create(string_literal865);
                        adaptor.addChild(root_0, string_literal865_tree);
                    }

                    char_literal866 = (Token) match(input, SEMI, FOLLOW_SEMI_in_oldCallConventionDirective18835);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal866_tree = (Object) adaptor.create(char_literal866);
                        adaptor.addChild(root_0, char_literal866_tree);
                    }

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 161, oldCallConventionDirective_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "hintingDirective"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:663:1: hintingDirective : ( 'deprecated' ( stringFactor )? | 'experimental' | 'platform' | 'library' );
    public final DelphiParser.hintingDirective_return hintingDirective() throws RecognitionException {
        DelphiParser.hintingDirective_return retval = new DelphiParser.hintingDirective_return();
        retval.start = input.LT(1);
        int hintingDirective_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal867 = null;
        Token string_literal869 = null;
        Token string_literal870 = null;
        Token string_literal871 = null;
        ParserRuleReturnScope stringFactor868 = null;

        Object string_literal867_tree = null;
        Object string_literal869_tree = null;
        Object string_literal870_tree = null;
        Object string_literal871_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 162)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:663:30: ( 'deprecated' ( stringFactor )? | 'experimental' | 'platform' | 'library' )
            int alt276 = 4;
            switch (input.LA(1)) {
                case DEPRECATED: {
                    alt276 = 1;
                }
                break;
                case EXPERIMENTAL: {
                    alt276 = 2;
                }
                break;
                case PLATFORM: {
                    alt276 = 3;
                }
                break;
                case LIBRARY: {
                    alt276 = 4;
                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae =
                            new NoViableAltException("", 276, 0, input);
                    throw nvae;
            }
            switch (alt276) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:663:32: 'deprecated' ( stringFactor )?
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal867 = (Token) match(input, DEPRECATED, FOLLOW_DEPRECATED_in_hintingDirective18889);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal867_tree = (Object) adaptor.create(string_literal867);
                        adaptor.addChild(root_0, string_literal867_tree);
                    }

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:663:45: ( stringFactor )?
                    int alt275 = 2;
                    int LA275_0 = input.LA(1);
                    if ((LA275_0 == ControlString || LA275_0 == QuotedString)) {
                        alt275 = 1;
                    }
                    switch (alt275) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:663:46: stringFactor
                        {
                            pushFollow(FOLLOW_stringFactor_in_hintingDirective18892);
                            stringFactor868 = stringFactor();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, stringFactor868.getTree());

                        }
                        break;

                    }

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:664:32: 'experimental'
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal869 = (Token) match(input, EXPERIMENTAL, FOLLOW_EXPERIMENTAL_in_hintingDirective18927);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal869_tree = (Object) adaptor.create(string_literal869);
                        adaptor.addChild(root_0, string_literal869_tree);
                    }

                }
                break;
                case 3:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:665:32: 'platform'
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal870 = (Token) match(input, PLATFORM, FOLLOW_PLATFORM_in_hintingDirective18962);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal870_tree = (Object) adaptor.create(string_literal870);
                        adaptor.addChild(root_0, string_literal870_tree);
                    }

                }
                break;
                case 4:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:666:32: 'library'
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal871 = (Token) match(input, LIBRARY, FOLLOW_LIBRARY_in_hintingDirective18995);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal871_tree = (Object) adaptor.create(string_literal871);
                        adaptor.addChild(root_0, string_literal871_tree);
                    }

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 162, hintingDirective_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "externalDirective"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:668:1: externalDirective : ( 'varargs' ';' | 'external' ';' | 'external' constExpression ( externalSpecifier )* ';' );
    public final DelphiParser.externalDirective_return externalDirective() throws RecognitionException {
        DelphiParser.externalDirective_return retval = new DelphiParser.externalDirective_return();
        retval.start = input.LT(1);
        int externalDirective_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal872 = null;
        Token char_literal873 = null;
        Token string_literal874 = null;
        Token char_literal875 = null;
        Token string_literal876 = null;
        Token char_literal879 = null;
        ParserRuleReturnScope constExpression877 = null;
        ParserRuleReturnScope externalSpecifier878 = null;

        Object string_literal872_tree = null;
        Object char_literal873_tree = null;
        Object string_literal874_tree = null;
        Object char_literal875_tree = null;
        Object string_literal876_tree = null;
        Object char_literal879_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 163)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:668:30: ( 'varargs' ';' | 'external' ';' | 'external' constExpression ( externalSpecifier )* ';' )
            int alt278 = 3;
            int LA278_0 = input.LA(1);
            if ((LA278_0 == VARARGS)) {
                alt278 = 1;
            } else if ((LA278_0 == EXTERNAL)) {
                int LA278_2 = input.LA(2);
                if ((LA278_2 == SEMI)) {
                    int LA278_3 = input.LA(3);
                    if ((synpred428_Delphi())) {
                        alt278 = 2;
                    } else if ((true)) {
                        alt278 = 3;
                    }

                } else if (((LA278_2 >= ADD && LA278_2 <= ANSISTRING) || LA278_2 == AS || (LA278_2 >= AT && LA278_2 <= AT2) || LA278_2 == BREAK || (LA278_2 >= CONTAINS && LA278_2 <= ControlString) || LA278_2 == DEFAULT || LA278_2 == DIV || LA278_2 == DOT || LA278_2 == EQUAL || LA278_2 == EXIT || LA278_2 == EXPORT || LA278_2 == FALSE || LA278_2 == FINAL || (LA278_2 >= FUNCTION && LA278_2 <= GE) || LA278_2 == GT || (LA278_2 >= IMPLEMENTS && LA278_2 <= INHERITED) || LA278_2 == IS || LA278_2 == LBRACK || LA278_2 == LE || (LA278_2 >= LOCAL && LA278_2 <= NAME) || LA278_2 == NIL || (LA278_2 >= NOT && LA278_2 <= OBJECT) || (LA278_2 >= OPERATOR && LA278_2 <= OUT) || (LA278_2 >= PLUS && LA278_2 <= POINTER2) || LA278_2 == PROCEDURE || LA278_2 == QuotedString || (LA278_2 >= READ && LA278_2 <= READONLY) || (LA278_2 >= REFERENCE && LA278_2 <= REGISTER) || LA278_2 == REMOVE || (LA278_2 >= SHL && LA278_2 <= STAR) || (LA278_2 >= STORED && LA278_2 <= STRING) || LA278_2 == TRUE || LA278_2 == TkAsmHexNum || (LA278_2 >= TkHexNum && LA278_2 <= TkIntNum) || LA278_2 == TkRealNum || LA278_2 == VARIANT || LA278_2 == WRITE || (LA278_2 >= XOR && LA278_2 <= 201))) {
                    alt278 = 3;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try {
                        input.consume();
                        NoViableAltException nvae =
                                new NoViableAltException("", 278, 2, input);
                        throw nvae;
                    } finally {
                        input.rewind(nvaeMark);
                    }
                }

            } else {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae =
                        new NoViableAltException("", 278, 0, input);
                throw nvae;
            }

            switch (alt278) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:668:32: 'varargs' ';'
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal872 = (Token) match(input, VARARGS, FOLLOW_VARARGS_in_externalDirective19043);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal872_tree = (Object) adaptor.create(string_literal872);
                        adaptor.addChild(root_0, string_literal872_tree);
                    }

                    char_literal873 = (Token) match(input, SEMI, FOLLOW_SEMI_in_externalDirective19045);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal873_tree = (Object) adaptor.create(char_literal873);
                        adaptor.addChild(root_0, char_literal873_tree);
                    }

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:669:32: 'external' ';'
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal874 = (Token) match(input, EXTERNAL, FOLLOW_EXTERNAL_in_externalDirective19081);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal874_tree = (Object) adaptor.create(string_literal874);
                        adaptor.addChild(root_0, string_literal874_tree);
                    }

                    char_literal875 = (Token) match(input, SEMI, FOLLOW_SEMI_in_externalDirective19083);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal875_tree = (Object) adaptor.create(char_literal875);
                        adaptor.addChild(root_0, char_literal875_tree);
                    }

                }
                break;
                case 3:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:670:32: 'external' constExpression ( externalSpecifier )* ';'
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal876 = (Token) match(input, EXTERNAL, FOLLOW_EXTERNAL_in_externalDirective19116);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal876_tree = (Object) adaptor.create(string_literal876);
                        adaptor.addChild(root_0, string_literal876_tree);
                    }

                    pushFollow(FOLLOW_constExpression_in_externalDirective19118);
                    constExpression877 = constExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, constExpression877.getTree());

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:670:59: ( externalSpecifier )*
                    loop277:
                    while (true) {
                        int alt277 = 2;
                        int LA277_0 = input.LA(1);
                        if ((LA277_0 == INDEX || LA277_0 == NAME)) {
                            alt277 = 1;
                        }

                        switch (alt277) {
                            case 1:
                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:670:60: externalSpecifier
                            {
                                pushFollow(FOLLOW_externalSpecifier_in_externalDirective19121);
                                externalSpecifier878 = externalSpecifier();
                                state._fsp--;
                                if (state.failed) return retval;
                                if (state.backtracking == 0) adaptor.addChild(root_0, externalSpecifier878.getTree());

                            }
                            break;

                            default:
                                break loop277;
                        }
                    }

                    char_literal879 = (Token) match(input, SEMI, FOLLOW_SEMI_in_externalDirective19125);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal879_tree = (Object) adaptor.create(char_literal879);
                        adaptor.addChild(root_0, char_literal879_tree);
                    }

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 163, externalDirective_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "externalSpecifier"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:672:1: externalSpecifier : ( 'name' constExpression | 'index' constExpression );
    public final DelphiParser.externalSpecifier_return externalSpecifier() throws RecognitionException {
        DelphiParser.externalSpecifier_return retval = new DelphiParser.externalSpecifier_return();
        retval.start = input.LT(1);
        int externalSpecifier_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal880 = null;
        Token string_literal882 = null;
        ParserRuleReturnScope constExpression881 = null;
        ParserRuleReturnScope constExpression883 = null;

        Object string_literal880_tree = null;
        Object string_literal882_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 164)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:672:30: ( 'name' constExpression | 'index' constExpression )
            int alt279 = 2;
            int LA279_0 = input.LA(1);
            if ((LA279_0 == NAME)) {
                alt279 = 1;
            } else if ((LA279_0 == INDEX)) {
                alt279 = 2;
            } else {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae =
                        new NoViableAltException("", 279, 0, input);
                throw nvae;
            }

            switch (alt279) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:672:32: 'name' constExpression
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal880 = (Token) match(input, NAME, FOLLOW_NAME_in_externalSpecifier19174);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal880_tree = (Object) adaptor.create(string_literal880);
                        adaptor.addChild(root_0, string_literal880_tree);
                    }

                    pushFollow(FOLLOW_constExpression_in_externalSpecifier19176);
                    constExpression881 = constExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, constExpression881.getTree());

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:673:32: 'index' constExpression
                {
                    root_0 = (Object) adaptor.nil();


                    string_literal882 = (Token) match(input, INDEX, FOLLOW_INDEX_in_externalSpecifier19209);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        string_literal882_tree = (Object) adaptor.create(string_literal882);
                        adaptor.addChild(root_0, string_literal882_tree);
                    }

                    pushFollow(FOLLOW_constExpression_in_externalSpecifier19211);
                    constExpression883 = constExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, constExpression883.getTree());

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 164, externalSpecifier_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "dispIDDirective"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:675:1: dispIDDirective : 'dispid' expression ';' ;
    public final DelphiParser.dispIDDirective_return dispIDDirective() throws RecognitionException {
        DelphiParser.dispIDDirective_return retval = new DelphiParser.dispIDDirective_return();
        retval.start = input.LT(1);
        int dispIDDirective_StartIndex = input.index();

        Object root_0 = null;

        Token string_literal884 = null;
        Token char_literal886 = null;
        ParserRuleReturnScope expression885 = null;

        Object string_literal884_tree = null;
        Object char_literal886_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 165)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:675:30: ( 'dispid' expression ';' )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:675:32: 'dispid' expression ';'
            {
                root_0 = (Object) adaptor.nil();


                string_literal884 = (Token) match(input, DISPID, FOLLOW_DISPID_in_dispIDDirective19264);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    string_literal884_tree = (Object) adaptor.create(string_literal884);
                    adaptor.addChild(root_0, string_literal884_tree);
                }

                pushFollow(FOLLOW_expression_in_dispIDDirective19266);
                expression885 = expression();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, expression885.getTree());

                char_literal886 = (Token) match(input, SEMI, FOLLOW_SEMI_in_dispIDDirective19268);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    char_literal886_tree = (Object) adaptor.create(char_literal886);
                    adaptor.addChild(root_0, char_literal886_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 165, dispIDDirective_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "ident"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:680:1: ident : ( TkIdentifier | '&' TkIdentifier | usedKeywordsAsNames );
    public final DelphiParser.ident_return ident() throws RecognitionException {
        DelphiParser.ident_return retval = new DelphiParser.ident_return();
        retval.start = input.LT(1);
        int ident_StartIndex = input.index();

        Object root_0 = null;

        Token TkIdentifier887 = null;
        Token char_literal888 = null;
        Token TkIdentifier889 = null;
        ParserRuleReturnScope usedKeywordsAsNames890 = null;

        Object TkIdentifier887_tree = null;
        Object char_literal888_tree = null;
        Object TkIdentifier889_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 166)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:680:30: ( TkIdentifier | '&' TkIdentifier | usedKeywordsAsNames )
            int alt280 = 3;
            switch (input.LA(1)) {
                case TkIdentifier: {
                    alt280 = 1;
                }
                break;
                case 200: {
                    alt280 = 2;
                }
                break;
                case ADD:
                case ANSISTRING:
                case AT:
                case BREAK:
                case CONTAINS:
                case CONTINUE:
                case DEFAULT:
                case EXIT:
                case EXPORT:
                case FINAL:
                case IMPLEMENTS:
                case INDEX:
                case LOCAL:
                case MESSAGE:
                case NAME:
                case OBJECT:
                case OPERATOR:
                case OUT:
                case POINTER:
                case READ:
                case READONLY:
                case REFERENCE:
                case REGISTER:
                case REMOVE:
                case STORED:
                case STRICT:
                case STRING:
                case VARIANT:
                case WRITE: {
                    alt280 = 3;
                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae =
                            new NoViableAltException("", 280, 0, input);
                    throw nvae;
            }
            switch (alt280) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:680:32: TkIdentifier
                {
                    root_0 = (Object) adaptor.nil();


                    TkIdentifier887 = (Token) match(input, TkIdentifier, FOLLOW_TkIdentifier_in_ident19331);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        TkIdentifier887_tree = (Object) adaptor.create(TkIdentifier887);
                        adaptor.addChild(root_0, TkIdentifier887_tree);
                    }

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:681:32: '&' TkIdentifier
                {
                    root_0 = (Object) adaptor.nil();


                    char_literal888 = (Token) match(input, 200, FOLLOW_200_in_ident19364);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        char_literal888_tree = (Object) adaptor.create(char_literal888);
                        adaptor.addChild(root_0, char_literal888_tree);
                    }

                    TkIdentifier889 = (Token) match(input, TkIdentifier, FOLLOW_TkIdentifier_in_ident19366);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        TkIdentifier889_tree = (Object) adaptor.create(TkIdentifier889);
                        adaptor.addChild(root_0, TkIdentifier889_tree);
                    }

                }
                break;
                case 3:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:682:32: usedKeywordsAsNames
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_usedKeywordsAsNames_in_ident19399);
                    usedKeywordsAsNames890 = usedKeywordsAsNames();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, usedKeywordsAsNames890.getTree());

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 166, ident_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "usedKeywordsAsNames"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:684:1: usedKeywordsAsNames : ( ( NAME | READONLY | ADD | AT | MESSAGE | POINTER | INDEX | DEFAULT | STRING | CONTINUE ) | ( READ | WRITE | REGISTER | VARIANT | OPERATOR | REMOVE | LOCAL | REFERENCE | CONTAINS | FINAL ) | ( BREAK | EXIT | STRICT | OUT | OBJECT | EXPORT | ANSISTRING | IMPLEMENTS | STORED ) );
    public final DelphiParser.usedKeywordsAsNames_return usedKeywordsAsNames() throws RecognitionException {
        DelphiParser.usedKeywordsAsNames_return retval = new DelphiParser.usedKeywordsAsNames_return();
        retval.start = input.LT(1);
        int usedKeywordsAsNames_StartIndex = input.index();

        Object root_0 = null;

        Token set891 = null;

        Object set891_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 167)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:684:30: ( ( NAME | READONLY | ADD | AT | MESSAGE | POINTER | INDEX | DEFAULT | STRING | CONTINUE ) | ( READ | WRITE | REGISTER | VARIANT | OPERATOR | REMOVE | LOCAL | REFERENCE | CONTAINS | FINAL ) | ( BREAK | EXIT | STRICT | OUT | OBJECT | EXPORT | ANSISTRING | IMPLEMENTS | STORED ) )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
            {
                root_0 = (Object) adaptor.nil();


                set891 = input.LT(1);
                if (input.LA(1) == ADD || input.LA(1) == ANSISTRING || input.LA(1) == AT || input.LA(1) == BREAK || (input.LA(1) >= CONTAINS && input.LA(1) <= CONTINUE) || input.LA(1) == DEFAULT || input.LA(1) == EXIT || input.LA(1) == EXPORT || input.LA(1) == FINAL || input.LA(1) == IMPLEMENTS || input.LA(1) == INDEX || input.LA(1) == LOCAL || input.LA(1) == MESSAGE || input.LA(1) == NAME || input.LA(1) == OBJECT || input.LA(1) == OPERATOR || input.LA(1) == OUT || input.LA(1) == POINTER || (input.LA(1) >= READ && input.LA(1) <= READONLY) || (input.LA(1) >= REFERENCE && input.LA(1) <= REGISTER) || input.LA(1) == REMOVE || (input.LA(1) >= STORED && input.LA(1) <= STRING) || input.LA(1) == VARIANT || input.LA(1) == WRITE) {
                    input.consume();
                    if (state.backtracking == 0) adaptor.addChild(root_0, (Object) adaptor.create(set891));
                    state.errorRecovery = false;
                    state.failed = false;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 167, usedKeywordsAsNames_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "identList"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:688:1: identList : ident ( ',' ident )* -> ^( ident ( ident )* ) ;
    public final DelphiParser.identList_return identList() throws RecognitionException {
        DelphiParser.identList_return retval = new DelphiParser.identList_return();
        retval.start = input.LT(1);
        int identList_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal893 = null;
        ParserRuleReturnScope ident892 = null;
        ParserRuleReturnScope ident894 = null;

        Object char_literal893_tree = null;
        RewriteRuleTokenStream stream_COMMA = new RewriteRuleTokenStream(adaptor, "token COMMA");
        RewriteRuleSubtreeStream stream_ident = new RewriteRuleSubtreeStream(adaptor, "rule ident");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 168)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:688:30: ( ident ( ',' ident )* -> ^( ident ( ident )* ) )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:688:32: ident ( ',' ident )*
            {
                pushFollow(FOLLOW_ident_in_identList19721);
                ident892 = ident();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_ident.add(ident892.getTree());
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:688:38: ( ',' ident )*
                loop281:
                while (true) {
                    int alt281 = 2;
                    int LA281_0 = input.LA(1);
                    if ((LA281_0 == COMMA)) {
                        alt281 = 1;
                    }

                    switch (alt281) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:688:39: ',' ident
                        {
                            char_literal893 = (Token) match(input, COMMA, FOLLOW_COMMA_in_identList19724);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_COMMA.add(char_literal893);

                            pushFollow(FOLLOW_ident_in_identList19726);
                            ident894 = ident();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_ident.add(ident894.getTree());
                        }
                        break;

                        default:
                            break loop281;
                    }
                }

                // AST REWRITE
                // elements: ident, ident
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 688:51: -> ^( ident ( ident )* )
                    {
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:688:54: ^( ident ( ident )* )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot(stream_ident.nextNode(), root_1);
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:688:62: ( ident )*
                            while (stream_ident.hasNext()) {
                                adaptor.addChild(root_1, stream_ident.nextTree());
                            }
                            stream_ident.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 168, identList_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "identListFlat"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:690:1: identListFlat : ident ( ',' ident )* -> ident ( ident )* ;
    public final DelphiParser.identListFlat_return identListFlat() throws RecognitionException {
        DelphiParser.identListFlat_return retval = new DelphiParser.identListFlat_return();
        retval.start = input.LT(1);
        int identListFlat_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal896 = null;
        ParserRuleReturnScope ident895 = null;
        ParserRuleReturnScope ident897 = null;

        Object char_literal896_tree = null;
        RewriteRuleTokenStream stream_COMMA = new RewriteRuleTokenStream(adaptor, "token COMMA");
        RewriteRuleSubtreeStream stream_ident = new RewriteRuleSubtreeStream(adaptor, "rule ident");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 169)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:690:30: ( ident ( ',' ident )* -> ident ( ident )* )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:690:32: ident ( ',' ident )*
            {
                pushFollow(FOLLOW_ident_in_identListFlat19791);
                ident895 = ident();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_ident.add(ident895.getTree());
                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:690:38: ( ',' ident )*
                loop282:
                while (true) {
                    int alt282 = 2;
                    int LA282_0 = input.LA(1);
                    if ((LA282_0 == COMMA)) {
                        alt282 = 1;
                    }

                    switch (alt282) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:690:39: ',' ident
                        {
                            char_literal896 = (Token) match(input, COMMA, FOLLOW_COMMA_in_identListFlat19794);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_COMMA.add(char_literal896);

                            pushFollow(FOLLOW_ident_in_identListFlat19796);
                            ident897 = ident();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_ident.add(ident897.getTree());
                        }
                        break;

                        default:
                            break loop282;
                    }
                }

                // AST REWRITE
                // elements: ident, ident
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 690:51: -> ident ( ident )*
                    {
                        adaptor.addChild(root_0, stream_ident.nextTree());
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:690:60: ( ident )*
                        while (stream_ident.hasNext()) {
                            adaptor.addChild(root_0, stream_ident.nextTree());
                        }
                        stream_ident.reset();

                    }


                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 169, identListFlat_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "label"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:692:1: label : ( TkIdentifier | TkIntNum | TkHexNum | usedKeywordsAsNames );
    public final DelphiParser.label_return label() throws RecognitionException {
        DelphiParser.label_return retval = new DelphiParser.label_return();
        retval.start = input.LT(1);
        int label_StartIndex = input.index();

        Object root_0 = null;

        Token TkIdentifier898 = null;
        Token TkIntNum899 = null;
        Token TkHexNum900 = null;
        ParserRuleReturnScope usedKeywordsAsNames901 = null;

        Object TkIdentifier898_tree = null;
        Object TkIntNum899_tree = null;
        Object TkHexNum900_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 170)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:692:30: ( TkIdentifier | TkIntNum | TkHexNum | usedKeywordsAsNames )
            int alt283 = 4;
            switch (input.LA(1)) {
                case TkIdentifier: {
                    alt283 = 1;
                }
                break;
                case TkIntNum: {
                    alt283 = 2;
                }
                break;
                case TkHexNum: {
                    alt283 = 3;
                }
                break;
                case ADD:
                case ANSISTRING:
                case AT:
                case BREAK:
                case CONTAINS:
                case CONTINUE:
                case DEFAULT:
                case EXIT:
                case EXPORT:
                case FINAL:
                case IMPLEMENTS:
                case INDEX:
                case LOCAL:
                case MESSAGE:
                case NAME:
                case OBJECT:
                case OPERATOR:
                case OUT:
                case POINTER:
                case READ:
                case READONLY:
                case REFERENCE:
                case REGISTER:
                case REMOVE:
                case STORED:
                case STRICT:
                case STRING:
                case VARIANT:
                case WRITE: {
                    alt283 = 4;
                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae =
                            new NoViableAltException("", 283, 0, input);
                    throw nvae;
            }
            switch (alt283) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:692:32: TkIdentifier
                {
                    root_0 = (Object) adaptor.nil();


                    TkIdentifier898 = (Token) match(input, TkIdentifier, FOLLOW_TkIdentifier_in_label19928);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        TkIdentifier898_tree = (Object) adaptor.create(TkIdentifier898);
                        adaptor.addChild(root_0, TkIdentifier898_tree);
                    }

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:693:32: TkIntNum
                {
                    root_0 = (Object) adaptor.nil();


                    TkIntNum899 = (Token) match(input, TkIntNum, FOLLOW_TkIntNum_in_label19961);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        TkIntNum899_tree = (Object) adaptor.create(TkIntNum899);
                        adaptor.addChild(root_0, TkIntNum899_tree);
                    }

                }
                break;
                case 3:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:694:32: TkHexNum
                {
                    root_0 = (Object) adaptor.nil();


                    TkHexNum900 = (Token) match(input, TkHexNum, FOLLOW_TkHexNum_in_label19994);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) {
                        TkHexNum900_tree = (Object) adaptor.create(TkHexNum900);
                        adaptor.addChild(root_0, TkHexNum900_tree);
                    }

                }
                break;
                case 4:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:695:32: usedKeywordsAsNames
                {
                    root_0 = (Object) adaptor.nil();


                    pushFollow(FOLLOW_usedKeywordsAsNames_in_label20027);
                    usedKeywordsAsNames901 = usedKeywordsAsNames();
                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, usedKeywordsAsNames901.getTree());

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 170, label_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "intNum"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:697:1: intNum : ( TkIntNum | TkHexNum );
    public final DelphiParser.intNum_return intNum() throws RecognitionException {
        DelphiParser.intNum_return retval = new DelphiParser.intNum_return();
        retval.start = input.LT(1);
        int intNum_StartIndex = input.index();

        Object root_0 = null;

        Token set902 = null;

        Object set902_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 171)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:697:30: ( TkIntNum | TkHexNum )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
            {
                root_0 = (Object) adaptor.nil();


                set902 = input.LT(1);
                if (input.LA(1) == TkHexNum || input.LA(1) == TkIntNum) {
                    input.consume();
                    if (state.backtracking == 0) adaptor.addChild(root_0, (Object) adaptor.create(set902));
                    state.errorRecovery = false;
                    state.failed = false;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 171, intNum_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "realNum"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:700:1: realNum : TkRealNum ;
    public final DelphiParser.realNum_return realNum() throws RecognitionException {
        DelphiParser.realNum_return retval = new DelphiParser.realNum_return();
        retval.start = input.LT(1);
        int realNum_StartIndex = input.index();

        Object root_0 = null;

        Token TkRealNum903 = null;

        Object TkRealNum903_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 172)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:700:30: ( TkRealNum )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:700:32: TkRealNum
            {
                root_0 = (Object) adaptor.nil();


                TkRealNum903 = (Token) match(input, TkRealNum, FOLLOW_TkRealNum_in_realNum20206);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    TkRealNum903_tree = (Object) adaptor.create(TkRealNum903);
                    adaptor.addChild(root_0, TkRealNum903_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 172, realNum_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "namespacedQualifiedIdent"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:702:1: namespacedQualifiedIdent : ( namespaceName '.' )? qualifiedIdent ;
    public final DelphiParser.namespacedQualifiedIdent_return namespacedQualifiedIdent() throws RecognitionException {
        DelphiParser.namespacedQualifiedIdent_return retval = new DelphiParser.namespacedQualifiedIdent_return();
        retval.start = input.LT(1);
        int namespacedQualifiedIdent_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal905 = null;
        ParserRuleReturnScope namespaceName904 = null;
        ParserRuleReturnScope qualifiedIdent906 = null;

        Object char_literal905_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 173)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:702:30: ( ( namespaceName '.' )? qualifiedIdent )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:702:32: ( namespaceName '.' )? qualifiedIdent
            {
                root_0 = (Object) adaptor.nil();


                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:702:32: ( namespaceName '.' )?
                int alt284 = 2;
                switch (input.LA(1)) {
                    case TkIdentifier: {
                        int LA284_1 = input.LA(2);
                        if ((LA284_1 == DOT)) {
                            int LA284_4 = input.LA(3);
                            if ((synpred467_Delphi())) {
                                alt284 = 1;
                            }
                        }
                    }
                    break;
                    case 200: {
                        int LA284_2 = input.LA(2);
                        if ((LA284_2 == TkIdentifier)) {
                            int LA284_6 = input.LA(3);
                            if ((LA284_6 == DOT)) {
                                int LA284_9 = input.LA(4);
                                if ((synpred467_Delphi())) {
                                    alt284 = 1;
                                }
                            }
                        }
                    }
                    break;
                    case ADD:
                    case ANSISTRING:
                    case AT:
                    case BREAK:
                    case CONTAINS:
                    case CONTINUE:
                    case DEFAULT:
                    case EXIT:
                    case EXPORT:
                    case FINAL:
                    case IMPLEMENTS:
                    case INDEX:
                    case LOCAL:
                    case MESSAGE:
                    case NAME:
                    case OBJECT:
                    case OPERATOR:
                    case OUT:
                    case POINTER:
                    case READ:
                    case READONLY:
                    case REFERENCE:
                    case REGISTER:
                    case REMOVE:
                    case STORED:
                    case STRICT:
                    case STRING:
                    case VARIANT:
                    case WRITE: {
                        int LA284_3 = input.LA(2);
                        if ((LA284_3 == DOT)) {
                            int LA284_7 = input.LA(3);
                            if ((synpred467_Delphi())) {
                                alt284 = 1;
                            }
                        }
                    }
                    break;
                }
                switch (alt284) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:702:33: namespaceName '.'
                    {
                        pushFollow(FOLLOW_namespaceName_in_namespacedQualifiedIdent20277);
                        namespaceName904 = namespaceName();
                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) adaptor.addChild(root_0, namespaceName904.getTree());

                        char_literal905 = (Token) match(input, DOT, FOLLOW_DOT_in_namespacedQualifiedIdent20279);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) {
                            char_literal905_tree = (Object) adaptor.create(char_literal905);
                            adaptor.addChild(root_0, char_literal905_tree);
                        }

                    }
                    break;

                }

                pushFollow(FOLLOW_qualifiedIdent_in_namespacedQualifiedIdent20283);
                qualifiedIdent906 = qualifiedIdent();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, qualifiedIdent906.getTree());

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 173, namespacedQualifiedIdent_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "namespaceName"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:704:1: namespaceName : ident ( '.' ident )* ;
    public final DelphiParser.namespaceName_return namespaceName() throws RecognitionException {
        DelphiParser.namespaceName_return retval = new DelphiParser.namespaceName_return();
        retval.start = input.LT(1);
        int namespaceName_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal908 = null;
        ParserRuleReturnScope ident907 = null;
        ParserRuleReturnScope ident909 = null;

        Object char_literal908_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 174)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:704:30: ( ident ( '.' ident )* )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:704:32: ident ( '.' ident )*
            {
                root_0 = (Object) adaptor.nil();


                pushFollow(FOLLOW_ident_in_namespaceName20335);
                ident907 = ident();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, ident907.getTree());

                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:704:38: ( '.' ident )*
                loop285:
                while (true) {
                    int alt285 = 2;
                    alt285 = dfa285.predict(input);
                    switch (alt285) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:704:39: '.' ident
                        {
                            char_literal908 = (Token) match(input, DOT, FOLLOW_DOT_in_namespaceName20338);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) {
                                char_literal908_tree = (Object) adaptor.create(char_literal908);
                                adaptor.addChild(root_0, char_literal908_tree);
                            }

                            pushFollow(FOLLOW_ident_in_namespaceName20340);
                            ident909 = ident();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, ident909.getTree());

                        }
                        break;

                        default:
                            break loop285;
                    }
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 174, namespaceName_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start "qualifiedIdent"
    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:706:1: qualifiedIdent : ( ident '.' )* ident ;
    public final DelphiParser.qualifiedIdent_return qualifiedIdent() throws RecognitionException {
        DelphiParser.qualifiedIdent_return retval = new DelphiParser.qualifiedIdent_return();
        retval.start = input.LT(1);
        int qualifiedIdent_StartIndex = input.index();

        Object root_0 = null;

        Token char_literal911 = null;
        ParserRuleReturnScope ident910 = null;
        ParserRuleReturnScope ident912 = null;

        Object char_literal911_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 175)) {
                return retval;
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:706:30: ( ( ident '.' )* ident )
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:706:33: ( ident '.' )* ident
            {
                root_0 = (Object) adaptor.nil();


                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:706:33: ( ident '.' )*
                loop286:
                while (true) {
                    int alt286 = 2;
                    switch (input.LA(1)) {
                        case TkIdentifier: {
                            int LA286_1 = input.LA(2);
                            if ((LA286_1 == DOT)) {
                                switch (input.LA(3)) {
                                    case TkIdentifier: {
                                        int LA286_7 = input.LA(4);
                                        if ((synpred469_Delphi())) {
                                            alt286 = 1;
                                        }

                                    }
                                    break;
                                    case 200: {
                                        int LA286_8 = input.LA(4);
                                        if ((LA286_8 == TkIdentifier)) {
                                            int LA286_11 = input.LA(5);
                                            if ((synpred469_Delphi())) {
                                                alt286 = 1;
                                            }

                                        }

                                    }
                                    break;
                                    case ADD:
                                    case ANSISTRING:
                                    case AT:
                                    case BREAK:
                                    case CONTAINS:
                                    case CONTINUE:
                                    case DEFAULT:
                                    case EXIT:
                                    case EXPORT:
                                    case FINAL:
                                    case IMPLEMENTS:
                                    case INDEX:
                                    case LOCAL:
                                    case MESSAGE:
                                    case NAME:
                                    case OBJECT:
                                    case OPERATOR:
                                    case OUT:
                                    case POINTER:
                                    case READ:
                                    case READONLY:
                                    case REFERENCE:
                                    case REGISTER:
                                    case REMOVE:
                                    case STORED:
                                    case STRICT:
                                    case STRING:
                                    case VARIANT:
                                    case WRITE: {
                                        int LA286_9 = input.LA(4);
                                        if ((synpred469_Delphi())) {
                                            alt286 = 1;
                                        }

                                    }
                                    break;
                                }
                            }

                        }
                        break;
                        case 200: {
                            int LA286_2 = input.LA(2);
                            if ((LA286_2 == TkIdentifier)) {
                                int LA286_6 = input.LA(3);
                                if ((LA286_6 == DOT)) {
                                    switch (input.LA(4)) {
                                        case TkIdentifier: {
                                            int LA286_7 = input.LA(5);
                                            if ((synpred469_Delphi())) {
                                                alt286 = 1;
                                            }

                                        }
                                        break;
                                        case 200: {
                                            int LA286_8 = input.LA(5);
                                            if ((LA286_8 == TkIdentifier)) {
                                                int LA286_11 = input.LA(6);
                                                if ((synpred469_Delphi())) {
                                                    alt286 = 1;
                                                }

                                            }

                                        }
                                        break;
                                        case ADD:
                                        case ANSISTRING:
                                        case AT:
                                        case BREAK:
                                        case CONTAINS:
                                        case CONTINUE:
                                        case DEFAULT:
                                        case EXIT:
                                        case EXPORT:
                                        case FINAL:
                                        case IMPLEMENTS:
                                        case INDEX:
                                        case LOCAL:
                                        case MESSAGE:
                                        case NAME:
                                        case OBJECT:
                                        case OPERATOR:
                                        case OUT:
                                        case POINTER:
                                        case READ:
                                        case READONLY:
                                        case REFERENCE:
                                        case REGISTER:
                                        case REMOVE:
                                        case STORED:
                                        case STRICT:
                                        case STRING:
                                        case VARIANT:
                                        case WRITE: {
                                            int LA286_9 = input.LA(5);
                                            if ((synpred469_Delphi())) {
                                                alt286 = 1;
                                            }

                                        }
                                        break;
                                    }
                                }

                            }

                        }
                        break;
                        case ADD:
                        case ANSISTRING:
                        case AT:
                        case BREAK:
                        case CONTAINS:
                        case CONTINUE:
                        case DEFAULT:
                        case EXIT:
                        case EXPORT:
                        case FINAL:
                        case IMPLEMENTS:
                        case INDEX:
                        case LOCAL:
                        case MESSAGE:
                        case NAME:
                        case OBJECT:
                        case OPERATOR:
                        case OUT:
                        case POINTER:
                        case READ:
                        case READONLY:
                        case REFERENCE:
                        case REGISTER:
                        case REMOVE:
                        case STORED:
                        case STRICT:
                        case STRING:
                        case VARIANT:
                        case WRITE: {
                            int LA286_3 = input.LA(2);
                            if ((LA286_3 == DOT)) {
                                switch (input.LA(3)) {
                                    case TkIdentifier: {
                                        int LA286_7 = input.LA(4);
                                        if ((synpred469_Delphi())) {
                                            alt286 = 1;
                                        }

                                    }
                                    break;
                                    case 200: {
                                        int LA286_8 = input.LA(4);
                                        if ((LA286_8 == TkIdentifier)) {
                                            int LA286_11 = input.LA(5);
                                            if ((synpred469_Delphi())) {
                                                alt286 = 1;
                                            }

                                        }

                                    }
                                    break;
                                    case ADD:
                                    case ANSISTRING:
                                    case AT:
                                    case BREAK:
                                    case CONTAINS:
                                    case CONTINUE:
                                    case DEFAULT:
                                    case EXIT:
                                    case EXPORT:
                                    case FINAL:
                                    case IMPLEMENTS:
                                    case INDEX:
                                    case LOCAL:
                                    case MESSAGE:
                                    case NAME:
                                    case OBJECT:
                                    case OPERATOR:
                                    case OUT:
                                    case POINTER:
                                    case READ:
                                    case READONLY:
                                    case REFERENCE:
                                    case REGISTER:
                                    case REMOVE:
                                    case STORED:
                                    case STRICT:
                                    case STRING:
                                    case VARIANT:
                                    case WRITE: {
                                        int LA286_9 = input.LA(4);
                                        if ((synpred469_Delphi())) {
                                            alt286 = 1;
                                        }

                                    }
                                    break;
                                }
                            }

                        }
                        break;
                    }
                    switch (alt286) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:706:34: ident '.'
                        {
                            pushFollow(FOLLOW_ident_in_qualifiedIdent20395);
                            ident910 = ident();
                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, ident910.getTree());

                            char_literal911 = (Token) match(input, DOT, FOLLOW_DOT_in_qualifiedIdent20397);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) {
                                char_literal911_tree = (Object) adaptor.create(char_literal911);
                                adaptor.addChild(root_0, char_literal911_tree);
                            }

                        }
                        break;

                        default:
                            break loop286;
                    }
                }

                pushFollow(FOLLOW_ident_in_qualifiedIdent20402);
                ident912 = ident();
                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, ident912.getTree());

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (Object) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
            // do for sure before leaving
            if (state.backtracking > 0) {
                memoize(input, 175, qualifiedIdent_StartIndex);
            }

        }
        return retval;
    }

    // $ANTLR start synpred23_Delphi
    public final void synpred23_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:33: ( declSection )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:33: declSection
        {
            pushFollow(FOLLOW_declSection_in_synpred23_Delphi1584);
            declSection();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred24_Delphi
    public final void synpred24_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:48: ( blockBody )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:48: blockBody
        {
            pushFollow(FOLLOW_blockBody_in_synpred24_Delphi1589);
            blockBody();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred30_Delphi
    public final void synpred30_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:135:32: ( exportedProcHeading )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:135:32: exportedProcHeading
        {
            pushFollow(FOLLOW_exportedProcHeading_in_synpred30_Delphi1866);
            exportedProcHeading();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred31_Delphi
    public final void synpred31_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:136:32: ( methodDecl )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:136:32: methodDecl
        {
            pushFollow(FOLLOW_methodDecl_in_synpred31_Delphi1899);
            methodDecl();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred32_Delphi
    public final void synpred32_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:137:32: ( procDecl )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:137:32: procDecl
        {
            pushFollow(FOLLOW_procDecl_in_synpred32_Delphi1932);
            procDecl();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred36_Delphi
    public final void synpred36_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:143:32: ( exportedProcHeading )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:143:32: exportedProcHeading
        {
            pushFollow(FOLLOW_exportedProcHeading_in_synpred36_Delphi2116);
            exportedProcHeading();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred38_Delphi
    public final void synpred38_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:145:32: ( procDecl )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:145:32: procDecl
        {
            pushFollow(FOLLOW_procDecl_in_synpred38_Delphi2182);
            procDecl();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred40_Delphi
    public final void synpred40_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:150:42: ( constDeclaration )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:150:42: constDeclaration
        {
            pushFollow(FOLLOW_constDeclaration_in_synpred40_Delphi2331);
            constDeclaration();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred42_Delphi
    public final void synpred42_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:155:33: ( customAttribute )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:155:33: customAttribute
        {
            pushFollow(FOLLOW_customAttribute_in_synpred42_Delphi2486);
            customAttribute();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred45_Delphi
    public final void synpred45_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:157:56: ( typeDeclaration )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:157:56: typeDeclaration
        {
            pushFollow(FOLLOW_typeDeclaration_in_synpred45_Delphi2580);
            typeDeclaration();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred46_Delphi
    public final void synpred46_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:159:33: ( customAttribute )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:159:33: customAttribute
        {
            pushFollow(FOLLOW_customAttribute_in_synpred46_Delphi2646);
            customAttribute();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred48_Delphi
    public final void synpred48_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:161:55: ( varDeclaration )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:161:55: varDeclaration
        {
            pushFollow(FOLLOW_varDeclaration_in_synpred48_Delphi2743);
            varDeclaration();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred50_Delphi
    public final void synpred50_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:33: ( customAttribute )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:33: customAttribute
        {
            pushFollow(FOLLOW_customAttribute_in_synpred50_Delphi2903);
            customAttribute();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred53_Delphi
    public final void synpred53_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:169:32: ( 'absolute' ident )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:169:32: 'absolute' ident
        {
            match(input, ABSOLUTE, FOLLOW_ABSOLUTE_in_synpred53_Delphi2995);
            if (state.failed) return;

            pushFollow(FOLLOW_ident_in_synpred53_Delphi2997);
            ident();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred54_Delphi
    public final void synpred54_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:170:32: ( 'absolute' constExpression )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:170:32: 'absolute' constExpression
        {
            match(input, ABSOLUTE, FOLLOW_ABSOLUTE_in_synpred54_Delphi3030);
            if (state.failed) return;

            pushFollow(FOLLOW_constExpression_in_synpred54_Delphi3032);
            constExpression();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred61_Delphi
    public final void synpred61_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:180:32: ( strucType )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:180:32: strucType
        {
            pushFollow(FOLLOW_strucType_in_synpred61_Delphi3277);
            strucType();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred62_Delphi
    public final void synpred62_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:181:32: ( pointerType )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:181:32: pointerType
        {
            pushFollow(FOLLOW_pointerType_in_synpred62_Delphi3310);
            pointerType();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred63_Delphi
    public final void synpred63_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:182:32: ( stringType )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:182:32: stringType
        {
            pushFollow(FOLLOW_stringType_in_synpred63_Delphi3343);
            stringType();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred64_Delphi
    public final void synpred64_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:183:32: ( procedureType )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:183:32: procedureType
        {
            pushFollow(FOLLOW_procedureType_in_synpred64_Delphi3376);
            procedureType();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred65_Delphi
    public final void synpred65_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:184:32: ( variantType )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:184:32: variantType
        {
            pushFollow(FOLLOW_variantType_in_synpred65_Delphi3410);
            variantType();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred67_Delphi
    public final void synpred67_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:50: ( genericPostfix )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:50: genericPostfix
        {
            pushFollow(FOLLOW_genericPostfix_in_synpred67_Delphi3451);
            genericPostfix();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred68_Delphi
    public final void synpred68_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:32: ( ( 'type' )? typeId ( genericPostfix )? )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:32: ( 'type' )? typeId ( genericPostfix )?
        {
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:32: ( 'type' )?
            int alt289 = 2;
            int LA289_0 = input.LA(1);
            if ((LA289_0 == TYPE)) {
                alt289 = 1;
            }
            switch (alt289) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:33: 'type'
                {
                    match(input, TYPE, FOLLOW_TYPE_in_synpred68_Delphi3444);
                    if (state.failed) return;

                }
                break;

            }

            pushFollow(FOLLOW_typeId_in_synpred68_Delphi3448);
            typeId();
            state._fsp--;
            if (state.failed) return;

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:49: ( genericPostfix )?
            int alt290 = 2;
            int LA290_0 = input.LA(1);
            if ((LA290_0 == LT)) {
                alt290 = 1;
            }
            switch (alt290) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:50: genericPostfix
                {
                    pushFollow(FOLLOW_genericPostfix_in_synpred68_Delphi3451);
                    genericPostfix();
                    state._fsp--;
                    if (state.failed) return;

                }
                break;

            }

        }

    }

    // $ANTLR start synpred78_Delphi
    public final void synpred78_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:204:32: ( 'const' )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:204:32: 'const'
        {
            match(input, CONST, FOLLOW_CONST_in_synpred78_Delphi4004);
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred79_Delphi
    public final void synpred79_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:210:40: ( 'of' typeDecl )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:210:40: 'of' typeDecl
        {
            match(input, OF, FOLLOW_OF_in_synpred79_Delphi4176);
            if (state.failed) return;

            pushFollow(FOLLOW_typeDecl_in_synpred79_Delphi4178);
            typeDecl();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred81_Delphi
    public final void synpred81_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:215:42: ( '[' expression ']' )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:215:42: '[' expression ']'
        {
            match(input, LBRACK, FOLLOW_LBRACK_in_synpred81_Delphi4327);
            if (state.failed) return;

            pushFollow(FOLLOW_expression_in_synpred81_Delphi4329);
            expression();
            state._fsp--;
            if (state.failed) return;

            match(input, RBRACK, FOLLOW_RBRACK_in_synpred81_Delphi4331);
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred84_Delphi
    public final void synpred84_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:216:54: ( codePageNumber )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:216:54: codePageNumber
        {
            pushFollow(FOLLOW_codePageNumber_in_synpred84_Delphi4378);
            codePageNumber();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred85_Delphi
    public final void synpred85_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:220:32: ( methodType )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:220:32: methodType
        {
            pushFollow(FOLLOW_methodType_in_synpred85_Delphi4487);
            methodType();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred86_Delphi
    public final void synpred86_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:221:32: ( simpleProcedureType )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:221:32: simpleProcedureType
        {
            pushFollow(FOLLOW_simpleProcedureType_in_synpred86_Delphi4520);
            simpleProcedureType();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred88_Delphi
    public final void synpred88_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:226:55: ( ( ';' )? callConventionNoSemi )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:226:55: ( ';' )? callConventionNoSemi
        {
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:226:55: ( ';' )?
            int alt296 = 2;
            int LA296_0 = input.LA(1);
            if ((LA296_0 == SEMI)) {
                alt296 = 1;
            }
            switch (alt296) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:226:56: ';'
                {
                    match(input, SEMI, FOLLOW_SEMI_in_synpred88_Delphi4663);
                    if (state.failed) return;

                }
                break;

            }

            pushFollow(FOLLOW_callConventionNoSemi_in_synpred88_Delphi4667);
            callConventionNoSemi();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred90_Delphi
    public final void synpred90_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:230:74: ( customAttribute )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:230:74: customAttribute
        {
            pushFollow(FOLLOW_customAttribute_in_synpred90_Delphi4775);
            customAttribute();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred92_Delphi
    public final void synpred92_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:231:45: ( formalParameterSection )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:231:45: formalParameterSection
        {
            pushFollow(FOLLOW_formalParameterSection_in_synpred92_Delphi4830);
            formalParameterSection();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred93_Delphi
    public final void synpred93_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:235:32: ( ident )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:235:32: ident
        {
            pushFollow(FOLLOW_ident_in_synpred93_Delphi4942);
            ident();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred94_Delphi
    public final void synpred94_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:236:32: ( subRangeType )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:236:32: subRangeType
        {
            pushFollow(FOLLOW_subRangeType_in_synpred94_Delphi4975);
            subRangeType();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred95_Delphi
    public final void synpred95_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:239:49: ( '..' constExpression )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:239:49: '..' constExpression
        {
            match(input, DOTDOT, FOLLOW_DOTDOT_in_synpred95_Delphi5064);
            if (state.failed) return;

            pushFollow(FOLLOW_constExpression_in_synpred95_Delphi5066);
            constExpression();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred100_Delphi
    public final void synpred100_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:250:32: ( simpleGenericDefinition )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:250:32: simpleGenericDefinition
        {
            pushFollow(FOLLOW_simpleGenericDefinition_in_synpred100_Delphi5323);
            simpleGenericDefinition();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred109_Delphi
    public final void synpred109_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:269:32: ( classTypeTypeDecl )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:269:32: classTypeTypeDecl
        {
            pushFollow(FOLLOW_classTypeTypeDecl_in_synpred109_Delphi5786);
            classTypeTypeDecl();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred110_Delphi
    public final void synpred110_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:270:32: ( classTypeDecl )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:270:32: classTypeDecl
        {
            pushFollow(FOLLOW_classTypeDecl_in_synpred110_Delphi5819);
            classTypeDecl();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred118_Delphi
    public final void synpred118_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:279:32: ( 'class' ( classState )? ( classParent )? ( classItem )* 'end' )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:279:32: 'class' ( classState )? ( classParent )? ( classItem )* 'end'
        {
            match(input, CLASS, FOLLOW_CLASS_in_synpred118_Delphi6144);
            if (state.failed) return;

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:279:40: ( classState )?
            int alt301 = 2;
            int LA301_0 = input.LA(1);
            if ((LA301_0 == ABSTRACT || LA301_0 == SEALED)) {
                alt301 = 1;
            }
            switch (alt301) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:279:41: classState
                {
                    pushFollow(FOLLOW_classState_in_synpred118_Delphi6147);
                    classState();
                    state._fsp--;
                    if (state.failed) return;

                }
                break;

            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:279:54: ( classParent )?
            int alt302 = 2;
            int LA302_0 = input.LA(1);
            if ((LA302_0 == LPAREN)) {
                alt302 = 1;
            }
            switch (alt302) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:279:55: classParent
                {
                    pushFollow(FOLLOW_classParent_in_synpred118_Delphi6152);
                    classParent();
                    state._fsp--;
                    if (state.failed) return;

                }
                break;

            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:279:69: ( classItem )*
            loop303:
            while (true) {
                int alt303 = 2;
                int LA303_0 = input.LA(1);
                if ((LA303_0 == ADD || LA303_0 == ANSISTRING || LA303_0 == AT || LA303_0 == AUTOMATED || LA303_0 == BREAK || LA303_0 == CLASS || (LA303_0 >= CONST && LA303_0 <= CONTINUE) || LA303_0 == DEFAULT || LA303_0 == DESTRUCTOR || LA303_0 == EXIT || LA303_0 == EXPORT || LA303_0 == FINAL || LA303_0 == FUNCTION || LA303_0 == IMPLEMENTS || LA303_0 == INDEX || LA303_0 == LBRACK || LA303_0 == LOCAL || LA303_0 == MESSAGE || LA303_0 == NAME || LA303_0 == OBJECT || LA303_0 == OPERATOR || LA303_0 == OUT || LA303_0 == POINTER || (LA303_0 >= PRIVATE && LA303_0 <= PROCEDURE) || (LA303_0 >= PROPERTY && LA303_0 <= PUBLISHED) || (LA303_0 >= READ && LA303_0 <= READONLY) || (LA303_0 >= REFERENCE && LA303_0 <= REGISTER) || LA303_0 == REMOVE || LA303_0 == RESOURCESTRING || (LA303_0 >= STORED && LA303_0 <= STRING) || LA303_0 == THREADVAR || LA303_0 == TYPE || LA303_0 == TkIdentifier || LA303_0 == VAR || LA303_0 == VARIANT || LA303_0 == WRITE || LA303_0 == 200)) {
                    alt303 = 1;
                }

                switch (alt303) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:279:70: classItem
                    {
                        pushFollow(FOLLOW_classItem_in_synpred118_Delphi6157);
                        classItem();
                        state._fsp--;
                        if (state.failed) return;

                    }
                    break;

                    default:
                        break loop303;
                }
            }

            match(input, END, FOLLOW_END_in_synpred118_Delphi6161);
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred119_Delphi
    public final void synpred119_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:280:41: ( classParent )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:280:41: classParent
        {
            pushFollow(FOLLOW_classParent_in_synpred119_Delphi6215);
            classParent();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred122_Delphi
    public final void synpred122_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:287:32: ( visibility )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:287:32: visibility
        {
            pushFollow(FOLLOW_visibility_in_synpred122_Delphi6451);
            visibility();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred123_Delphi
    public final void synpred123_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:288:32: ( classMethod )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:288:32: classMethod
        {
            pushFollow(FOLLOW_classMethod_in_synpred123_Delphi6484);
            classMethod();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred124_Delphi
    public final void synpred124_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:289:32: ( classField )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:289:32: classField
        {
            pushFollow(FOLLOW_classField_in_synpred124_Delphi6517);
            classField();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred125_Delphi
    public final void synpred125_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:290:32: ( classProperty )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:290:32: classProperty
        {
            pushFollow(FOLLOW_classProperty_in_synpred125_Delphi6550);
            classProperty();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred132_Delphi
    public final void synpred132_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:298:32: ( classMethod )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:298:32: classMethod
        {
            pushFollow(FOLLOW_classMethod_in_synpred132_Delphi6820);
            classMethod();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred133_Delphi
    public final void synpred133_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:299:32: ( classProperty )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:299:32: classProperty
        {
            pushFollow(FOLLOW_classProperty_in_synpred133_Delphi6853);
            classProperty();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred138_Delphi
    public final void synpred138_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:302:32: ( interfaceKey ( classParent )? ( interfaceGuid )? ( interfaceItem )* 'end' )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:302:32: interfaceKey ( classParent )? ( interfaceGuid )? ( interfaceItem )* 'end'
        {
            pushFollow(FOLLOW_interfaceKey_in_synpred138_Delphi6939);
            interfaceKey();
            state._fsp--;
            if (state.failed) return;

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:302:45: ( classParent )?
            int alt304 = 2;
            int LA304_0 = input.LA(1);
            if ((LA304_0 == LPAREN)) {
                alt304 = 1;
            }
            switch (alt304) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:302:46: classParent
                {
                    pushFollow(FOLLOW_classParent_in_synpred138_Delphi6942);
                    classParent();
                    state._fsp--;
                    if (state.failed) return;

                }
                break;

            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:302:60: ( interfaceGuid )?
            int alt305 = 2;
            int LA305_0 = input.LA(1);
            if ((LA305_0 == LBRACK)) {
                int LA305_1 = input.LA(2);
                if ((LA305_1 == QuotedString)) {
                    alt305 = 1;
                }
            }
            switch (alt305) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:302:61: interfaceGuid
                {
                    pushFollow(FOLLOW_interfaceGuid_in_synpred138_Delphi6947);
                    interfaceGuid();
                    state._fsp--;
                    if (state.failed) return;

                }
                break;

            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:302:77: ( interfaceItem )*
            loop306:
            while (true) {
                int alt306 = 2;
                int LA306_0 = input.LA(1);
                if ((LA306_0 == CLASS || LA306_0 == CONSTRUCTOR || LA306_0 == DESTRUCTOR || LA306_0 == FUNCTION || LA306_0 == LBRACK || LA306_0 == OPERATOR || LA306_0 == PROCEDURE || LA306_0 == PROPERTY)) {
                    alt306 = 1;
                }

                switch (alt306) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:302:78: interfaceItem
                    {
                        pushFollow(FOLLOW_interfaceItem_in_synpred138_Delphi6952);
                        interfaceItem();
                        state._fsp--;
                        if (state.failed) return;

                    }
                    break;

                    default:
                        break loop306;
                }
            }

            match(input, END, FOLLOW_END_in_synpred138_Delphi6956);
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred139_Delphi
    public final void synpred139_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:304:46: ( classParent )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:304:46: classParent
        {
            pushFollow(FOLLOW_classParent_in_synpred139_Delphi7051);
            classParent();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred141_Delphi
    public final void synpred141_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:312:32: ( classMethod )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:312:32: classMethod
        {
            pushFollow(FOLLOW_classMethod_in_synpred141_Delphi7295);
            classMethod();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred142_Delphi
    public final void synpred142_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:313:33: ( 'class' )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:313:33: 'class'
        {
            match(input, CLASS, FOLLOW_CLASS_in_synpred142_Delphi7329);
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred145_Delphi
    public final void synpred145_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:317:32: ( visibility )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:317:32: visibility
        {
            pushFollow(FOLLOW_visibility_in_synpred145_Delphi7469);
            visibility();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred146_Delphi
    public final void synpred146_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:318:32: ( classMethod )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:318:32: classMethod
        {
            pushFollow(FOLLOW_classMethod_in_synpred146_Delphi7502);
            classMethod();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred147_Delphi
    public final void synpred147_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:321:32: ( simpleRecord )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:321:32: simpleRecord
        {
            pushFollow(FOLLOW_simpleRecord_in_synpred147_Delphi7590);
            simpleRecord();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred148_Delphi
    public final void synpred148_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:324:42: ( recordField )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:324:42: recordField
        {
            pushFollow(FOLLOW_recordField_in_synpred148_Delphi7679);
            recordField();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred151_Delphi
    public final void synpred151_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:328:32: ( visibility )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:328:32: visibility
        {
            pushFollow(FOLLOW_visibility_in_synpred151_Delphi7829);
            visibility();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred152_Delphi
    public final void synpred152_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:329:32: ( classMethod )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:329:32: classMethod
        {
            pushFollow(FOLLOW_classMethod_in_synpred152_Delphi7867);
            classMethod();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred153_Delphi
    public final void synpred153_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:330:32: ( classProperty )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:330:32: classProperty
        {
            pushFollow(FOLLOW_classProperty_in_synpred153_Delphi7900);
            classProperty();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred156_Delphi
    public final void synpred156_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:333:32: ( recordField )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:333:32: recordField
        {
            pushFollow(FOLLOW_recordField_in_synpred156_Delphi7999);
            recordField();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred170_Delphi
    public final void synpred170_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:349:32: ( classMethod )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:349:32: classMethod
        {
            pushFollow(FOLLOW_classMethod_in_synpred170_Delphi8557);
            classMethod();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred171_Delphi
    public final void synpred171_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:33: ( customAttribute )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:33: customAttribute
        {
            pushFollow(FOLLOW_customAttribute_in_synpred171_Delphi8645);
            customAttribute();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred176_Delphi
    public final void synpred176_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:32: ( ( customAttribute )? ( 'class' )? methodKey ident ( genericDefinition )? ( formalParameterSection )? ';' ( methodDirective )* )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:32: ( customAttribute )? ( 'class' )? methodKey ident ( genericDefinition )? ( formalParameterSection )? ';' ( methodDirective )*
        {
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:32: ( customAttribute )?
            int alt307 = 2;
            switch (input.LA(1)) {
                case LBRACK: {
                    alt307 = 1;
                }
                break;
                case CLASS: {
                    int LA307_2 = input.LA(2);
                    if ((synpred171_Delphi())) {
                        alt307 = 1;
                    }
                }
                break;
                case CONSTRUCTOR:
                case DESTRUCTOR:
                case PROCEDURE: {
                    int LA307_3 = input.LA(2);
                    if ((synpred171_Delphi())) {
                        alt307 = 1;
                    }
                }
                break;
            }
            switch (alt307) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:33: customAttribute
                {
                    pushFollow(FOLLOW_customAttribute_in_synpred176_Delphi8645);
                    customAttribute();
                    state._fsp--;
                    if (state.failed) return;

                }
                break;

            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:51: ( 'class' )?
            int alt308 = 2;
            int LA308_0 = input.LA(1);
            if ((LA308_0 == CLASS)) {
                alt308 = 1;
            }
            switch (alt308) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:52: 'class'
                {
                    match(input, CLASS, FOLLOW_CLASS_in_synpred176_Delphi8650);
                    if (state.failed) return;

                }
                break;

            }

            pushFollow(FOLLOW_methodKey_in_synpred176_Delphi8654);
            methodKey();
            state._fsp--;
            if (state.failed) return;

            pushFollow(FOLLOW_ident_in_synpred176_Delphi8656);
            ident();
            state._fsp--;
            if (state.failed) return;

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:78: ( genericDefinition )?
            int alt309 = 2;
            int LA309_0 = input.LA(1);
            if ((LA309_0 == LT)) {
                alt309 = 1;
            }
            switch (alt309) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:79: genericDefinition
                {
                    pushFollow(FOLLOW_genericDefinition_in_synpred176_Delphi8659);
                    genericDefinition();
                    state._fsp--;
                    if (state.failed) return;

                }
                break;

            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:99: ( formalParameterSection )?
            int alt310 = 2;
            int LA310_0 = input.LA(1);
            if ((LA310_0 == LPAREN)) {
                alt310 = 1;
            }
            switch (alt310) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:100: formalParameterSection
                {
                    pushFollow(FOLLOW_formalParameterSection_in_synpred176_Delphi8664);
                    formalParameterSection();
                    state._fsp--;
                    if (state.failed) return;

                }
                break;

            }

            match(input, SEMI, FOLLOW_SEMI_in_synpred176_Delphi8668);
            if (state.failed) return;

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:129: ( methodDirective )*
            loop311:
            while (true) {
                int alt311 = 2;
                int LA311_0 = input.LA(1);
                if ((LA311_0 == ABSTRACT || LA311_0 == ASSEMBLER || LA311_0 == CDECL || LA311_0 == DEPRECATED || LA311_0 == DISPID || LA311_0 == DYNAMIC || (LA311_0 >= EXPERIMENTAL && LA311_0 <= EXPORT) || LA311_0 == FAR || LA311_0 == FINAL || LA311_0 == INLINE || (LA311_0 >= LIBRARY && LA311_0 <= LOCAL) || LA311_0 == MESSAGE || LA311_0 == NEAR || (LA311_0 >= OVERLOAD && LA311_0 <= OVERRIDE) || (LA311_0 >= PASCAL && LA311_0 <= PLATFORM) || (LA311_0 >= REGISTER && LA311_0 <= REINTRODUCE) || LA311_0 == SAFECALL || (LA311_0 >= STATIC && LA311_0 <= STDCALL) || LA311_0 == VIRTUAL)) {
                    alt311 = 1;
                }

                switch (alt311) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:130: methodDirective
                    {
                        pushFollow(FOLLOW_methodDirective_in_synpred176_Delphi8671);
                        methodDirective();
                        state._fsp--;
                        if (state.failed) return;

                    }
                    break;

                    default:
                        break loop311;
                }
            }

        }

    }

    // $ANTLR start synpred177_Delphi
    public final void synpred177_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:33: ( customAttribute )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:33: customAttribute
        {
            pushFollow(FOLLOW_customAttribute_in_synpred177_Delphi8779);
            customAttribute();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred181_Delphi
    public final void synpred181_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:131: ( customAttribute )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:131: customAttribute
        {
            pushFollow(FOLLOW_customAttribute_in_synpred181_Delphi8805);
            customAttribute();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred183_Delphi
    public final void synpred183_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:32: ( ( customAttribute )? ( 'class' )? 'function' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' ( methodDirective )* )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:32: ( customAttribute )? ( 'class' )? 'function' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' ( methodDirective )*
        {
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:32: ( customAttribute )?
            int alt312 = 2;
            switch (input.LA(1)) {
                case LBRACK: {
                    alt312 = 1;
                }
                break;
                case CLASS: {
                    int LA312_2 = input.LA(2);
                    if ((synpred177_Delphi())) {
                        alt312 = 1;
                    }
                }
                break;
                case FUNCTION: {
                    int LA312_3 = input.LA(2);
                    if ((synpred177_Delphi())) {
                        alt312 = 1;
                    }
                }
                break;
            }
            switch (alt312) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:33: customAttribute
                {
                    pushFollow(FOLLOW_customAttribute_in_synpred183_Delphi8779);
                    customAttribute();
                    state._fsp--;
                    if (state.failed) return;

                }
                break;

            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:51: ( 'class' )?
            int alt313 = 2;
            int LA313_0 = input.LA(1);
            if ((LA313_0 == CLASS)) {
                alt313 = 1;
            }
            switch (alt313) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:52: 'class'
                {
                    match(input, CLASS, FOLLOW_CLASS_in_synpred183_Delphi8784);
                    if (state.failed) return;

                }
                break;

            }

            match(input, FUNCTION, FOLLOW_FUNCTION_in_synpred183_Delphi8788);
            if (state.failed) return;

            pushFollow(FOLLOW_ident_in_synpred183_Delphi8790);
            ident();
            state._fsp--;
            if (state.failed) return;

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:79: ( genericDefinition )?
            int alt314 = 2;
            int LA314_0 = input.LA(1);
            if ((LA314_0 == LT)) {
                alt314 = 1;
            }
            switch (alt314) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:80: genericDefinition
                {
                    pushFollow(FOLLOW_genericDefinition_in_synpred183_Delphi8793);
                    genericDefinition();
                    state._fsp--;
                    if (state.failed) return;

                }
                break;

            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:100: ( formalParameterSection )?
            int alt315 = 2;
            int LA315_0 = input.LA(1);
            if ((LA315_0 == LPAREN)) {
                alt315 = 1;
            }
            switch (alt315) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:101: formalParameterSection
                {
                    pushFollow(FOLLOW_formalParameterSection_in_synpred183_Delphi8798);
                    formalParameterSection();
                    state._fsp--;
                    if (state.failed) return;

                }
                break;

            }

            match(input, COLON, FOLLOW_COLON_in_synpred183_Delphi8802);
            if (state.failed) return;

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:130: ( customAttribute )?
            int alt316 = 2;
            switch (input.LA(1)) {
                case LBRACK: {
                    int LA316_1 = input.LA(2);
                    if ((synpred181_Delphi())) {
                        alt316 = 1;
                    }
                }
                break;
                case PACKED: {
                    int LA316_2 = input.LA(2);
                    if ((synpred181_Delphi())) {
                        alt316 = 1;
                    }
                }
                break;
                case ARRAY: {
                    int LA316_3 = input.LA(2);
                    if ((synpred181_Delphi())) {
                        alt316 = 1;
                    }
                }
                break;
                case SET: {
                    int LA316_4 = input.LA(2);
                    if ((synpred181_Delphi())) {
                        alt316 = 1;
                    }
                }
                break;
                case FILE: {
                    int LA316_5 = input.LA(2);
                    if ((synpred181_Delphi())) {
                        alt316 = 1;
                    }
                }
                break;
                case CLASS: {
                    int LA316_6 = input.LA(2);
                    if ((synpred181_Delphi())) {
                        alt316 = 1;
                    }
                }
                break;
                case DISPINTERFACE:
                case INTERFACE: {
                    int LA316_7 = input.LA(2);
                    if ((synpred181_Delphi())) {
                        alt316 = 1;
                    }
                }
                break;
                case OBJECT: {
                    int LA316_8 = input.LA(2);
                    if ((synpred181_Delphi())) {
                        alt316 = 1;
                    }
                }
                break;
                case RECORD: {
                    int LA316_9 = input.LA(2);
                    if ((synpred181_Delphi())) {
                        alt316 = 1;
                    }
                }
                break;
                case POINTER2: {
                    int LA316_10 = input.LA(2);
                    if ((synpred181_Delphi())) {
                        alt316 = 1;
                    }
                }
                break;
                case POINTER: {
                    int LA316_11 = input.LA(2);
                    if ((synpred181_Delphi())) {
                        alt316 = 1;
                    }
                }
                break;
                case STRING: {
                    int LA316_12 = input.LA(2);
                    if ((synpred181_Delphi())) {
                        alt316 = 1;
                    }
                }
                break;
                case TYPE: {
                    int LA316_13 = input.LA(2);
                    if ((synpred181_Delphi())) {
                        alt316 = 1;
                    }
                }
                break;
                case ANSISTRING: {
                    int LA316_14 = input.LA(2);
                    if ((synpred181_Delphi())) {
                        alt316 = 1;
                    }
                }
                break;
                case FUNCTION: {
                    int LA316_15 = input.LA(2);
                    if ((synpred181_Delphi())) {
                        alt316 = 1;
                    }
                }
                break;
                case PROCEDURE: {
                    int LA316_16 = input.LA(2);
                    if ((synpred181_Delphi())) {
                        alt316 = 1;
                    }
                }
                break;
                case REFERENCE: {
                    int LA316_17 = input.LA(2);
                    if ((synpred181_Delphi())) {
                        alt316 = 1;
                    }
                }
                break;
                case VARIANT: {
                    int LA316_18 = input.LA(2);
                    if ((synpred181_Delphi())) {
                        alt316 = 1;
                    }
                }
                break;
                case TkIdentifier: {
                    int LA316_19 = input.LA(2);
                    if ((synpred181_Delphi())) {
                        alt316 = 1;
                    }
                }
                break;
                case 200: {
                    int LA316_20 = input.LA(2);
                    if ((synpred181_Delphi())) {
                        alt316 = 1;
                    }
                }
                break;
                case ADD:
                case AT:
                case BREAK:
                case CONTAINS:
                case CONTINUE:
                case DEFAULT:
                case EXIT:
                case EXPORT:
                case FINAL:
                case IMPLEMENTS:
                case INDEX:
                case LOCAL:
                case MESSAGE:
                case NAME:
                case OPERATOR:
                case OUT:
                case READ:
                case READONLY:
                case REGISTER:
                case REMOVE:
                case STORED:
                case STRICT:
                case WRITE: {
                    int LA316_21 = input.LA(2);
                    if ((synpred181_Delphi())) {
                        alt316 = 1;
                    }
                }
                break;
                case LPAREN: {
                    int LA316_22 = input.LA(2);
                    if ((synpred181_Delphi())) {
                        alt316 = 1;
                    }
                }
                break;
                case AT2: {
                    int LA316_23 = input.LA(2);
                    if ((synpred181_Delphi())) {
                        alt316 = 1;
                    }
                }
                break;
                case 201: {
                    int LA316_24 = input.LA(2);
                    if ((synpred181_Delphi())) {
                        alt316 = 1;
                    }
                }
                break;
                case NOT: {
                    int LA316_25 = input.LA(2);
                    if ((synpred181_Delphi())) {
                        alt316 = 1;
                    }
                }
                break;
                case PLUS: {
                    int LA316_26 = input.LA(2);
                    if ((synpred181_Delphi())) {
                        alt316 = 1;
                    }
                }
                break;
                case MINUS: {
                    int LA316_27 = input.LA(2);
                    if ((synpred181_Delphi())) {
                        alt316 = 1;
                    }
                }
                break;
                case TkHexNum:
                case TkIntNum: {
                    int LA316_28 = input.LA(2);
                    if ((synpred181_Delphi())) {
                        alt316 = 1;
                    }
                }
                break;
                case TkRealNum: {
                    int LA316_29 = input.LA(2);
                    if ((synpred181_Delphi())) {
                        alt316 = 1;
                    }
                }
                break;
                case TkAsmHexNum: {
                    int LA316_30 = input.LA(2);
                    if ((synpred181_Delphi())) {
                        alt316 = 1;
                    }
                }
                break;
                case TRUE: {
                    int LA316_31 = input.LA(2);
                    if ((synpred181_Delphi())) {
                        alt316 = 1;
                    }
                }
                break;
                case FALSE: {
                    int LA316_32 = input.LA(2);
                    if ((synpred181_Delphi())) {
                        alt316 = 1;
                    }
                }
                break;
                case NIL: {
                    int LA316_33 = input.LA(2);
                    if ((synpred181_Delphi())) {
                        alt316 = 1;
                    }
                }
                break;
                case ControlString: {
                    int LA316_34 = input.LA(2);
                    if ((synpred181_Delphi())) {
                        alt316 = 1;
                    }
                }
                break;
                case QuotedString: {
                    int LA316_35 = input.LA(2);
                    if ((synpred181_Delphi())) {
                        alt316 = 1;
                    }
                }
                break;
                case INHERITED: {
                    int LA316_36 = input.LA(2);
                    if ((synpred181_Delphi())) {
                        alt316 = 1;
                    }
                }
                break;
                case DOT: {
                    int LA316_37 = input.LA(2);
                    if ((synpred181_Delphi())) {
                        alt316 = 1;
                    }
                }
                break;
                case LT: {
                    int LA316_38 = input.LA(2);
                    if ((synpred181_Delphi())) {
                        alt316 = 1;
                    }
                }
                break;
                case AND:
                case AS:
                case DIV:
                case MOD:
                case OR:
                case SHL:
                case SHR:
                case SLASH:
                case STAR:
                case XOR: {
                    int LA316_39 = input.LA(2);
                    if ((synpred181_Delphi())) {
                        alt316 = 1;
                    }
                }
                break;
                case EQUAL: {
                    int LA316_40 = input.LA(2);
                    if ((synpred181_Delphi())) {
                        alt316 = 1;
                    }
                }
                break;
                case GE:
                case GT:
                case IN:
                case IS:
                case LE:
                case NOT_EQUAL: {
                    int LA316_41 = input.LA(2);
                    if ((synpred181_Delphi())) {
                        alt316 = 1;
                    }
                }
                break;
                case DOTDOT: {
                    int LA316_42 = input.LA(2);
                    if ((synpred181_Delphi())) {
                        alt316 = 1;
                    }
                }
                break;
                case SEMI: {
                    int LA316_43 = input.LA(2);
                    if ((synpred181_Delphi())) {
                        alt316 = 1;
                    }
                }
                break;
            }
            switch (alt316) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:131: customAttribute
                {
                    pushFollow(FOLLOW_customAttribute_in_synpred183_Delphi8805);
                    customAttribute();
                    state._fsp--;
                    if (state.failed) return;

                }
                break;

            }

            pushFollow(FOLLOW_typeDecl_in_synpred183_Delphi8809);
            typeDecl();
            state._fsp--;
            if (state.failed) return;

            match(input, SEMI, FOLLOW_SEMI_in_synpred183_Delphi8811);
            if (state.failed) return;

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:162: ( methodDirective )*
            loop317:
            while (true) {
                int alt317 = 2;
                int LA317_0 = input.LA(1);
                if ((LA317_0 == ABSTRACT || LA317_0 == ASSEMBLER || LA317_0 == CDECL || LA317_0 == DEPRECATED || LA317_0 == DISPID || LA317_0 == DYNAMIC || (LA317_0 >= EXPERIMENTAL && LA317_0 <= EXPORT) || LA317_0 == FAR || LA317_0 == FINAL || LA317_0 == INLINE || (LA317_0 >= LIBRARY && LA317_0 <= LOCAL) || LA317_0 == MESSAGE || LA317_0 == NEAR || (LA317_0 >= OVERLOAD && LA317_0 <= OVERRIDE) || (LA317_0 >= PASCAL && LA317_0 <= PLATFORM) || (LA317_0 >= REGISTER && LA317_0 <= REINTRODUCE) || LA317_0 == SAFECALL || (LA317_0 >= STATIC && LA317_0 <= STDCALL) || LA317_0 == VIRTUAL)) {
                    alt317 = 1;
                }

                switch (alt317) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:163: methodDirective
                    {
                        pushFollow(FOLLOW_methodDirective_in_synpred183_Delphi8814);
                        methodDirective();
                        state._fsp--;
                        if (state.failed) return;

                    }
                    break;

                    default:
                        break loop317;
                }
            }

        }

    }

    // $ANTLR start synpred184_Delphi
    public final void synpred184_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:33: ( customAttribute )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:33: customAttribute
        {
            pushFollow(FOLLOW_customAttribute_in_synpred184_Delphi8931);
            customAttribute();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred188_Delphi
    public final void synpred188_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:131: ( customAttribute )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:131: customAttribute
        {
            pushFollow(FOLLOW_customAttribute_in_synpred188_Delphi8957);
            customAttribute();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred189_Delphi
    public final void synpred189_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:33: ( customAttribute )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:33: customAttribute
        {
            pushFollow(FOLLOW_customAttribute_in_synpred189_Delphi9121);
            customAttribute();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred191_Delphi
    public final void synpred191_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:362:33: ( customAttribute )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:362:33: customAttribute
        {
            pushFollow(FOLLOW_customAttribute_in_synpred191_Delphi9242);
            customAttribute();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred198_Delphi
    public final void synpred198_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:369:52: ( ';' )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:369:52: ';'
        {
            match(input, SEMI, FOLLOW_SEMI_in_synpred198_Delphi9502);
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred202_Delphi
    public final void synpred202_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:374:32: ( 'default' expression )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:374:32: 'default' expression
        {
            match(input, DEFAULT, FOLLOW_DEFAULT_in_synpred202_Delphi9653);
            if (state.failed) return;

            pushFollow(FOLLOW_expression_in_synpred202_Delphi9655);
            expression();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred203_Delphi
    public final void synpred203_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:375:32: ( 'default' )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:375:32: 'default'
        {
            match(input, DEFAULT, FOLLOW_DEFAULT_in_synpred203_Delphi9688);
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred206_Delphi
    public final void synpred206_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:380:32: ( 'default' expression ';' )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:380:32: 'default' expression ';'
        {
            match(input, DEFAULT, FOLLOW_DEFAULT_in_synpred206_Delphi9853);
            if (state.failed) return;

            pushFollow(FOLLOW_expression_in_synpred206_Delphi9855);
            expression();
            state._fsp--;
            if (state.failed) return;

            match(input, SEMI, FOLLOW_SEMI_in_synpred206_Delphi9857);
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred207_Delphi
    public final void synpred207_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:381:32: ( 'default' ';' )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:381:32: 'default' ';'
        {
            match(input, DEFAULT, FOLLOW_DEFAULT_in_synpred207_Delphi9890);
            if (state.failed) return;

            match(input, SEMI, FOLLOW_SEMI_in_synpred207_Delphi9892);
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred220_Delphi
    public final void synpred220_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:403:81: ( customAttribute )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:403:81: customAttribute
        {
            pushFollow(FOLLOW_customAttribute_in_synpred220_Delphi10490);
            customAttribute();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred221_Delphi
    public final void synpred221_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:403:113: ( functionDirective )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:403:113: functionDirective
        {
            pushFollow(FOLLOW_functionDirective_in_synpred221_Delphi10499);
            functionDirective();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred224_Delphi
    public final void synpred224_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:404:80: ( functionDirective )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:404:80: functionDirective
        {
            pushFollow(FOLLOW_functionDirective_in_synpred224_Delphi10546);
            functionDirective();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred225_Delphi
    public final void synpred225_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:406:55: ( methodDirective )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:406:55: methodDirective
        {
            pushFollow(FOLLOW_methodDirective_in_synpred225_Delphi10608);
            methodDirective();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred226_Delphi
    public final void synpred226_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:406:74: ( methodBody )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:406:74: methodBody
        {
            pushFollow(FOLLOW_methodBody_in_synpred226_Delphi10613);
            methodBody();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred227_Delphi
    public final void synpred227_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:408:33: ( customAttribute )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:408:33: customAttribute
        {
            pushFollow(FOLLOW_customAttribute_in_synpred227_Delphi10673);
            customAttribute();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred230_Delphi
    public final void synpred230_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:408:32: ( ( customAttribute )? ( 'class' )? methodKey methodName ( formalParameterSection )? )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:408:32: ( customAttribute )? ( 'class' )? methodKey methodName ( formalParameterSection )?
        {
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:408:32: ( customAttribute )?
            int alt324 = 2;
            switch (input.LA(1)) {
                case LBRACK: {
                    alt324 = 1;
                }
                break;
                case CLASS: {
                    int LA324_2 = input.LA(2);
                    if ((synpred227_Delphi())) {
                        alt324 = 1;
                    }
                }
                break;
                case CONSTRUCTOR:
                case DESTRUCTOR:
                case PROCEDURE: {
                    int LA324_3 = input.LA(2);
                    if ((synpred227_Delphi())) {
                        alt324 = 1;
                    }
                }
                break;
            }
            switch (alt324) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:408:33: customAttribute
                {
                    pushFollow(FOLLOW_customAttribute_in_synpred230_Delphi10673);
                    customAttribute();
                    state._fsp--;
                    if (state.failed) return;

                }
                break;

            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:408:51: ( 'class' )?
            int alt325 = 2;
            int LA325_0 = input.LA(1);
            if ((LA325_0 == CLASS)) {
                alt325 = 1;
            }
            switch (alt325) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:408:52: 'class'
                {
                    match(input, CLASS, FOLLOW_CLASS_in_synpred230_Delphi10678);
                    if (state.failed) return;

                }
                break;

            }

            pushFollow(FOLLOW_methodKey_in_synpred230_Delphi10683);
            methodKey();
            state._fsp--;
            if (state.failed) return;

            pushFollow(FOLLOW_methodName_in_synpred230_Delphi10685);
            methodName();
            state._fsp--;
            if (state.failed) return;

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:408:84: ( formalParameterSection )?
            int alt326 = 2;
            int LA326_0 = input.LA(1);
            if ((LA326_0 == LPAREN)) {
                alt326 = 1;
            }
            switch (alt326) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:408:85: formalParameterSection
                {
                    pushFollow(FOLLOW_formalParameterSection_in_synpred230_Delphi10688);
                    formalParameterSection();
                    state._fsp--;
                    if (state.failed) return;

                }
                break;

            }

        }

    }

    // $ANTLR start synpred231_Delphi
    public final void synpred231_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:33: ( customAttribute )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:33: customAttribute
        {
            pushFollow(FOLLOW_customAttribute_in_synpred231_Delphi10786);
            customAttribute();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred234_Delphi
    public final void synpred234_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:116: ( customAttribute )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:116: customAttribute
        {
            pushFollow(FOLLOW_customAttribute_in_synpred234_Delphi10808);
            customAttribute();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred236_Delphi
    public final void synpred236_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:32: ( ( customAttribute )? ( 'class' )? 'function' methodName ( formalParameterSection )? ( ':' ( customAttribute )? typeDecl )? )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:32: ( customAttribute )? ( 'class' )? 'function' methodName ( formalParameterSection )? ( ':' ( customAttribute )? typeDecl )?
        {
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:32: ( customAttribute )?
            int alt328 = 2;
            switch (input.LA(1)) {
                case LBRACK: {
                    alt328 = 1;
                }
                break;
                case CLASS: {
                    int LA328_2 = input.LA(2);
                    if ((synpred231_Delphi())) {
                        alt328 = 1;
                    }
                }
                break;
                case FUNCTION: {
                    int LA328_3 = input.LA(2);
                    if ((synpred231_Delphi())) {
                        alt328 = 1;
                    }
                }
                break;
            }
            switch (alt328) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:33: customAttribute
                {
                    pushFollow(FOLLOW_customAttribute_in_synpred236_Delphi10786);
                    customAttribute();
                    state._fsp--;
                    if (state.failed) return;

                }
                break;

            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:51: ( 'class' )?
            int alt329 = 2;
            int LA329_0 = input.LA(1);
            if ((LA329_0 == CLASS)) {
                alt329 = 1;
            }
            switch (alt329) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:52: 'class'
                {
                    match(input, CLASS, FOLLOW_CLASS_in_synpred236_Delphi10791);
                    if (state.failed) return;

                }
                break;

            }

            match(input, FUNCTION, FOLLOW_FUNCTION_in_synpred236_Delphi10795);
            if (state.failed) return;

            pushFollow(FOLLOW_methodName_in_synpred236_Delphi10797);
            methodName();
            state._fsp--;
            if (state.failed) return;

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:84: ( formalParameterSection )?
            int alt330 = 2;
            int LA330_0 = input.LA(1);
            if ((LA330_0 == LPAREN)) {
                alt330 = 1;
            }
            switch (alt330) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:85: formalParameterSection
                {
                    pushFollow(FOLLOW_formalParameterSection_in_synpred236_Delphi10800);
                    formalParameterSection();
                    state._fsp--;
                    if (state.failed) return;

                }
                break;

            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:110: ( ':' ( customAttribute )? typeDecl )?
            int alt332 = 2;
            int LA332_0 = input.LA(1);
            if ((LA332_0 == COLON)) {
                alt332 = 1;
            }
            switch (alt332) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:111: ':' ( customAttribute )? typeDecl
                {
                    match(input, COLON, FOLLOW_COLON_in_synpred236_Delphi10805);
                    if (state.failed) return;

                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:115: ( customAttribute )?
                    int alt331 = 2;
                    switch (input.LA(1)) {
                        case LBRACK: {
                            int LA331_1 = input.LA(2);
                            if ((synpred234_Delphi())) {
                                alt331 = 1;
                            }
                        }
                        break;
                        case PACKED: {
                            int LA331_2 = input.LA(2);
                            if ((synpred234_Delphi())) {
                                alt331 = 1;
                            }
                        }
                        break;
                        case ARRAY: {
                            int LA331_3 = input.LA(2);
                            if ((synpred234_Delphi())) {
                                alt331 = 1;
                            }
                        }
                        break;
                        case SET: {
                            int LA331_4 = input.LA(2);
                            if ((synpred234_Delphi())) {
                                alt331 = 1;
                            }
                        }
                        break;
                        case FILE: {
                            int LA331_5 = input.LA(2);
                            if ((synpred234_Delphi())) {
                                alt331 = 1;
                            }
                        }
                        break;
                        case CLASS: {
                            int LA331_6 = input.LA(2);
                            if ((synpred234_Delphi())) {
                                alt331 = 1;
                            }
                        }
                        break;
                        case DISPINTERFACE:
                        case INTERFACE: {
                            int LA331_7 = input.LA(2);
                            if ((synpred234_Delphi())) {
                                alt331 = 1;
                            }
                        }
                        break;
                        case OBJECT: {
                            int LA331_8 = input.LA(2);
                            if ((synpred234_Delphi())) {
                                alt331 = 1;
                            }
                        }
                        break;
                        case RECORD: {
                            int LA331_9 = input.LA(2);
                            if ((synpred234_Delphi())) {
                                alt331 = 1;
                            }
                        }
                        break;
                        case POINTER2: {
                            int LA331_10 = input.LA(2);
                            if ((synpred234_Delphi())) {
                                alt331 = 1;
                            }
                        }
                        break;
                        case POINTER: {
                            int LA331_11 = input.LA(2);
                            if ((synpred234_Delphi())) {
                                alt331 = 1;
                            }
                        }
                        break;
                        case STRING: {
                            int LA331_12 = input.LA(2);
                            if ((synpred234_Delphi())) {
                                alt331 = 1;
                            }
                        }
                        break;
                        case TYPE: {
                            int LA331_13 = input.LA(2);
                            if ((synpred234_Delphi())) {
                                alt331 = 1;
                            }
                        }
                        break;
                        case ANSISTRING: {
                            int LA331_14 = input.LA(2);
                            if ((synpred234_Delphi())) {
                                alt331 = 1;
                            }
                        }
                        break;
                        case FUNCTION: {
                            int LA331_15 = input.LA(2);
                            if ((synpred234_Delphi())) {
                                alt331 = 1;
                            }
                        }
                        break;
                        case PROCEDURE: {
                            int LA331_16 = input.LA(2);
                            if ((synpred234_Delphi())) {
                                alt331 = 1;
                            }
                        }
                        break;
                        case REFERENCE: {
                            int LA331_17 = input.LA(2);
                            if ((synpred234_Delphi())) {
                                alt331 = 1;
                            }
                        }
                        break;
                        case VARIANT: {
                            int LA331_18 = input.LA(2);
                            if ((synpred234_Delphi())) {
                                alt331 = 1;
                            }
                        }
                        break;
                        case TkIdentifier: {
                            int LA331_19 = input.LA(2);
                            if ((synpred234_Delphi())) {
                                alt331 = 1;
                            }
                        }
                        break;
                        case 200: {
                            int LA331_20 = input.LA(2);
                            if ((synpred234_Delphi())) {
                                alt331 = 1;
                            }
                        }
                        break;
                        case ADD:
                        case AT:
                        case BREAK:
                        case CONTAINS:
                        case CONTINUE:
                        case DEFAULT:
                        case EXIT:
                        case EXPORT:
                        case FINAL:
                        case IMPLEMENTS:
                        case INDEX:
                        case LOCAL:
                        case MESSAGE:
                        case NAME:
                        case OPERATOR:
                        case OUT:
                        case READ:
                        case READONLY:
                        case REGISTER:
                        case REMOVE:
                        case STORED:
                        case STRICT:
                        case WRITE: {
                            int LA331_21 = input.LA(2);
                            if ((synpred234_Delphi())) {
                                alt331 = 1;
                            }
                        }
                        break;
                        case LPAREN: {
                            int LA331_22 = input.LA(2);
                            if ((synpred234_Delphi())) {
                                alt331 = 1;
                            }
                        }
                        break;
                        case AT2: {
                            int LA331_23 = input.LA(2);
                            if ((synpred234_Delphi())) {
                                alt331 = 1;
                            }
                        }
                        break;
                        case 201: {
                            int LA331_24 = input.LA(2);
                            if ((synpred234_Delphi())) {
                                alt331 = 1;
                            }
                        }
                        break;
                        case NOT: {
                            int LA331_25 = input.LA(2);
                            if ((synpred234_Delphi())) {
                                alt331 = 1;
                            }
                        }
                        break;
                        case PLUS: {
                            int LA331_26 = input.LA(2);
                            if ((synpred234_Delphi())) {
                                alt331 = 1;
                            }
                        }
                        break;
                        case MINUS: {
                            int LA331_27 = input.LA(2);
                            if ((synpred234_Delphi())) {
                                alt331 = 1;
                            }
                        }
                        break;
                        case TkHexNum:
                        case TkIntNum: {
                            int LA331_28 = input.LA(2);
                            if ((synpred234_Delphi())) {
                                alt331 = 1;
                            }
                        }
                        break;
                        case TkRealNum: {
                            int LA331_29 = input.LA(2);
                            if ((synpred234_Delphi())) {
                                alt331 = 1;
                            }
                        }
                        break;
                        case TkAsmHexNum: {
                            int LA331_30 = input.LA(2);
                            if ((synpred234_Delphi())) {
                                alt331 = 1;
                            }
                        }
                        break;
                        case TRUE: {
                            int LA331_31 = input.LA(2);
                            if ((synpred234_Delphi())) {
                                alt331 = 1;
                            }
                        }
                        break;
                        case FALSE: {
                            int LA331_32 = input.LA(2);
                            if ((synpred234_Delphi())) {
                                alt331 = 1;
                            }
                        }
                        break;
                        case NIL: {
                            int LA331_33 = input.LA(2);
                            if ((synpred234_Delphi())) {
                                alt331 = 1;
                            }
                        }
                        break;
                        case ControlString: {
                            int LA331_34 = input.LA(2);
                            if ((synpred234_Delphi())) {
                                alt331 = 1;
                            }
                        }
                        break;
                        case QuotedString: {
                            int LA331_35 = input.LA(2);
                            if ((synpred234_Delphi())) {
                                alt331 = 1;
                            }
                        }
                        break;
                        case INHERITED: {
                            int LA331_36 = input.LA(2);
                            if ((synpred234_Delphi())) {
                                alt331 = 1;
                            }
                        }
                        break;
                        case DOT: {
                            int LA331_37 = input.LA(2);
                            if ((synpred234_Delphi())) {
                                alt331 = 1;
                            }
                        }
                        break;
                        case LT: {
                            int LA331_38 = input.LA(2);
                            if ((synpred234_Delphi())) {
                                alt331 = 1;
                            }
                        }
                        break;
                        case AND:
                        case AS:
                        case DIV:
                        case MOD:
                        case OR:
                        case SHL:
                        case SHR:
                        case SLASH:
                        case STAR:
                        case XOR: {
                            int LA331_39 = input.LA(2);
                            if ((synpred234_Delphi())) {
                                alt331 = 1;
                            }
                        }
                        break;
                        case EQUAL: {
                            int LA331_40 = input.LA(2);
                            if ((synpred234_Delphi())) {
                                alt331 = 1;
                            }
                        }
                        break;
                        case GE:
                        case GT:
                        case IN:
                        case IS:
                        case LE:
                        case NOT_EQUAL: {
                            int LA331_41 = input.LA(2);
                            if ((synpred234_Delphi())) {
                                alt331 = 1;
                            }
                        }
                        break;
                        case DOTDOT: {
                            int LA331_42 = input.LA(2);
                            if ((synpred234_Delphi())) {
                                alt331 = 1;
                            }
                        }
                        break;
                        case EOF: {
                            int LA331_43 = input.LA(2);
                            if ((synpred234_Delphi())) {
                                alt331 = 1;
                            }
                        }
                        break;
                    }
                    switch (alt331) {
                        case 1:
                            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:116: customAttribute
                        {
                            pushFollow(FOLLOW_customAttribute_in_synpred236_Delphi10808);
                            customAttribute();
                            state._fsp--;
                            if (state.failed) return;

                        }
                        break;

                    }

                    pushFollow(FOLLOW_typeDecl_in_synpred236_Delphi10812);
                    typeDecl();
                    state._fsp--;
                    if (state.failed) return;

                }
                break;

            }

        }

    }

    // $ANTLR start synpred237_Delphi
    public final void synpred237_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:33: ( customAttribute )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:33: customAttribute
        {
            pushFollow(FOLLOW_customAttribute_in_synpred237_Delphi10921);
            customAttribute();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred239_Delphi
    public final void synpred239_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:113: ( customAttribute )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:113: customAttribute
        {
            pushFollow(FOLLOW_customAttribute_in_synpred239_Delphi10940);
            customAttribute();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred247_Delphi
    public final void synpred247_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:53: ( functionDirective )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:53: functionDirective
        {
            pushFollow(FOLLOW_functionDirective_in_synpred247_Delphi11324);
            functionDirective();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred248_Delphi
    public final void synpred248_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:74: ( procBody )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:74: procBody
        {
            pushFollow(FOLLOW_procBody_in_synpred248_Delphi11329);
            procBody();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred249_Delphi
    public final void synpred249_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:33: ( customAttribute )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:33: customAttribute
        {
            pushFollow(FOLLOW_customAttribute_in_synpred249_Delphi11395);
            customAttribute();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred251_Delphi
    public final void synpred251_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:32: ( ( customAttribute )? 'procedure' ident ( formalParameterSection )? )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:32: ( customAttribute )? 'procedure' ident ( formalParameterSection )?
        {
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:32: ( customAttribute )?
            int alt335 = 2;
            int LA335_0 = input.LA(1);
            if ((LA335_0 == LBRACK)) {
                alt335 = 1;
            } else if ((LA335_0 == PROCEDURE)) {
                int LA335_2 = input.LA(2);
                if ((synpred249_Delphi())) {
                    alt335 = 1;
                }
            }
            switch (alt335) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:33: customAttribute
                {
                    pushFollow(FOLLOW_customAttribute_in_synpred251_Delphi11395);
                    customAttribute();
                    state._fsp--;
                    if (state.failed) return;

                }
                break;

            }

            match(input, PROCEDURE, FOLLOW_PROCEDURE_in_synpred251_Delphi11399);
            if (state.failed) return;

            pushFollow(FOLLOW_ident_in_synpred251_Delphi11401);
            ident();
            state._fsp--;
            if (state.failed) return;

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:69: ( formalParameterSection )?
            int alt336 = 2;
            int LA336_0 = input.LA(1);
            if ((LA336_0 == LPAREN)) {
                alt336 = 1;
            }
            switch (alt336) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:70: formalParameterSection
                {
                    pushFollow(FOLLOW_formalParameterSection_in_synpred251_Delphi11404);
                    formalParameterSection();
                    state._fsp--;
                    if (state.failed) return;

                }
                break;

            }

        }

    }

    // $ANTLR start synpred252_Delphi
    public final void synpred252_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:425:33: ( customAttribute )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:425:33: customAttribute
        {
            pushFollow(FOLLOW_customAttribute_in_synpred252_Delphi11504);
            customAttribute();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred256_Delphi
    public final void synpred256_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:432:33: ( customAttribute )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:432:33: customAttribute
        {
            pushFollow(FOLLOW_customAttribute_in_synpred256_Delphi11746);
            customAttribute();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred262_Delphi
    public final void synpred262_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:441:47: ( functionDirective )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:441:47: functionDirective
        {
            pushFollow(FOLLOW_functionDirective_in_synpred262_Delphi12058);
            functionDirective();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred264_Delphi
    public final void synpred264_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:442:44: ( 'name' expression )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:442:44: 'name' expression
        {
            match(input, NAME, FOLLOW_NAME_in_synpred264_Delphi12099);
            if (state.failed) return;

            pushFollow(FOLLOW_expression_in_synpred264_Delphi12101);
            expression();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred265_Delphi
    public final void synpred265_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:442:64: ( 'index' expression )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:442:64: 'index' expression
        {
            match(input, INDEX, FOLLOW_INDEX_in_synpred265_Delphi12105);
            if (state.failed) return;

            pushFollow(FOLLOW_expression_in_synpred265_Delphi12107);
            expression();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred266_Delphi
    public final void synpred266_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:442:86: ( functionDirective )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:442:86: functionDirective
        {
            pushFollow(FOLLOW_functionDirective_in_synpred266_Delphi12112);
            functionDirective();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred268_Delphi
    public final void synpred268_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:450:33: ( customAttributeDecl )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:450:33: customAttributeDecl
        {
            pushFollow(FOLLOW_customAttributeDecl_in_synpred268_Delphi12250);
            customAttributeDecl();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred269_Delphi
    public final void synpred269_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:452:67: ( expressionList )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:452:67: expressionList
        {
            pushFollow(FOLLOW_expressionList_in_synpred269_Delphi12306);
            expressionList();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred271_Delphi
    public final void synpred271_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:458:32: ( anonymousExpression )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:458:32: anonymousExpression
        {
            pushFollow(FOLLOW_anonymousExpression_in_synpred271_Delphi12427);
            anonymousExpression();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred272_Delphi
    public final void synpred272_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:459:50: ( relOp simpleExpression )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:459:50: relOp simpleExpression
        {
            pushFollow(FOLLOW_relOp_in_synpred272_Delphi12471);
            relOp();
            state._fsp--;
            if (state.failed) return;

            pushFollow(FOLLOW_simpleExpression_in_synpred272_Delphi12473);
            simpleExpression();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred273_Delphi
    public final void synpred273_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:459:76: ( '=' expression )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:459:76: '=' expression
        {
            match(input, EQUAL, FOLLOW_EQUAL_in_synpred273_Delphi12478);
            if (state.failed) return;

            pushFollow(FOLLOW_expression_in_synpred273_Delphi12480);
            expression();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred274_Delphi
    public final void synpred274_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:461:45: ( formalParameterSection )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:461:45: formalParameterSection
        {
            pushFollow(FOLLOW_formalParameterSection_in_synpred274_Delphi12561);
            formalParameterSection();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred277_Delphi
    public final void synpred277_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:464:40: ( operator factor )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:464:40: operator factor
        {
            pushFollow(FOLLOW_operator_in_synpred277_Delphi12661);
            operator();
            state._fsp--;
            if (state.failed) return;

            pushFollow(FOLLOW_factor_in_synpred277_Delphi12663);
            factor();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred278_Delphi
    public final void synpred278_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:466:32: ( '@' factor )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:466:32: '@' factor
        {
            match(input, AT2, FOLLOW_AT2_in_synpred278_Delphi12724);
            if (state.failed) return;

            pushFollow(FOLLOW_factor_in_synpred278_Delphi12726);
            factor();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred279_Delphi
    public final void synpred279_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:467:32: ( '@@' factor )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:467:32: '@@' factor
        {
            match(input, 201, FOLLOW_201_in_synpred279_Delphi12759);
            if (state.failed) return;

            pushFollow(FOLLOW_factor_in_synpred279_Delphi12761);
            factor();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred280_Delphi
    public final void synpred280_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:468:32: ( 'not' factor )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:468:32: 'not' factor
        {
            match(input, NOT, FOLLOW_NOT_in_synpred280_Delphi12801);
            if (state.failed) return;

            pushFollow(FOLLOW_factor_in_synpred280_Delphi12803);
            factor();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred281_Delphi
    public final void synpred281_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:469:32: ( '+' factor )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:469:32: '+' factor
        {
            match(input, PLUS, FOLLOW_PLUS_in_synpred281_Delphi12836);
            if (state.failed) return;

            pushFollow(FOLLOW_factor_in_synpred281_Delphi12838);
            factor();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred282_Delphi
    public final void synpred282_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:470:32: ( '-' factor )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:470:32: '-' factor
        {
            match(input, MINUS, FOLLOW_MINUS_in_synpred282_Delphi12871);
            if (state.failed) return;

            pushFollow(FOLLOW_factor_in_synpred282_Delphi12873);
            factor();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred283_Delphi
    public final void synpred283_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:471:32: ( '^' ident )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:471:32: '^' ident
        {
            match(input, POINTER2, FOLLOW_POINTER2_in_synpred283_Delphi12906);
            if (state.failed) return;

            pushFollow(FOLLOW_ident_in_synpred283_Delphi12908);
            ident();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred284_Delphi
    public final void synpred284_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:472:32: ( intNum )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:472:32: intNum
        {
            pushFollow(FOLLOW_intNum_in_synpred284_Delphi12952);
            intNum();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred285_Delphi
    public final void synpred285_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:473:32: ( realNum )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:473:32: realNum
        {
            pushFollow(FOLLOW_realNum_in_synpred285_Delphi12985);
            realNum();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred286_Delphi
    public final void synpred286_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:474:32: ( TkAsmHexNum )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:474:32: TkAsmHexNum
        {
            match(input, TkAsmHexNum, FOLLOW_TkAsmHexNum_in_synpred286_Delphi13018);
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred287_Delphi
    public final void synpred287_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:475:32: ( 'true' )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:475:32: 'true'
        {
            match(input, TRUE, FOLLOW_TRUE_in_synpred287_Delphi13061);
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred288_Delphi
    public final void synpred288_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:476:32: ( 'false' )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:476:32: 'false'
        {
            match(input, FALSE, FOLLOW_FALSE_in_synpred288_Delphi13094);
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred289_Delphi
    public final void synpred289_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:477:32: ( 'nil' )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:477:32: 'nil'
        {
            match(input, NIL, FOLLOW_NIL_in_synpred289_Delphi13127);
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred290_Delphi
    public final void synpred290_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:478:52: ( '^' )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:478:52: '^'
        {
            match(input, POINTER2, FOLLOW_POINTER2_in_synpred290_Delphi13167);
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred291_Delphi
    public final void synpred291_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:478:59: ( '.' expression )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:478:59: '.' expression
        {
            match(input, DOT, FOLLOW_DOT_in_synpred291_Delphi13172);
            if (state.failed) return;

            pushFollow(FOLLOW_expression_in_synpred291_Delphi13174);
            expression();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred292_Delphi
    public final void synpred292_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:478:32: ( '(' expression ')' ( '^' )? ( '.' expression )? )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:478:32: '(' expression ')' ( '^' )? ( '.' expression )?
        {
            match(input, LPAREN, FOLLOW_LPAREN_in_synpred292_Delphi13160);
            if (state.failed) return;

            pushFollow(FOLLOW_expression_in_synpred292_Delphi13162);
            expression();
            state._fsp--;
            if (state.failed) return;

            match(input, RPAREN, FOLLOW_RPAREN_in_synpred292_Delphi13164);
            if (state.failed) return;

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:478:51: ( '^' )?
            int alt342 = 2;
            int LA342_0 = input.LA(1);
            if ((LA342_0 == POINTER2)) {
                alt342 = 1;
            }
            switch (alt342) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:478:52: '^'
                {
                    match(input, POINTER2, FOLLOW_POINTER2_in_synpred292_Delphi13167);
                    if (state.failed) return;

                }
                break;

            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:478:58: ( '.' expression )?
            int alt343 = 2;
            int LA343_0 = input.LA(1);
            if ((LA343_0 == DOT)) {
                alt343 = 1;
            }
            switch (alt343) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:478:59: '.' expression
                {
                    match(input, DOT, FOLLOW_DOT_in_synpred292_Delphi13172);
                    if (state.failed) return;

                    pushFollow(FOLLOW_expression_in_synpred292_Delphi13174);
                    expression();
                    state._fsp--;
                    if (state.failed) return;

                }
                break;

            }

        }

    }

    // $ANTLR start synpred293_Delphi
    public final void synpred293_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:479:32: ( stringFactor )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:479:32: stringFactor
        {
            pushFollow(FOLLOW_stringFactor_in_synpred293_Delphi13217);
            stringFactor();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred294_Delphi
    public final void synpred294_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:480:32: ( setSection )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:480:32: setSection
        {
            pushFollow(FOLLOW_setSection_in_synpred294_Delphi13250);
            setSection();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred295_Delphi
    public final void synpred295_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:481:32: ( designator )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:481:32: designator
        {
            pushFollow(FOLLOW_designator_in_synpred295_Delphi13283);
            designator();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred296_Delphi
    public final void synpred296_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:484:47: ( QuotedString ControlString )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:484:47: QuotedString ControlString
        {
            match(input, QuotedString, FOLLOW_QuotedString_in_synpred296_Delphi13378);
            if (state.failed) return;

            match(input, ControlString, FOLLOW_ControlString_in_synpred296_Delphi13380);
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred297_Delphi
    public final void synpred297_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:484:77: ( QuotedString )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:484:77: QuotedString
        {
            match(input, QuotedString, FOLLOW_QuotedString_in_synpred297_Delphi13385);
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred299_Delphi
    public final void synpred299_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:485:46: ( ControlString QuotedString )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:485:46: ControlString QuotedString
        {
            match(input, ControlString, FOLLOW_ControlString_in_synpred299_Delphi13423);
            if (state.failed) return;

            match(input, QuotedString, FOLLOW_QuotedString_in_synpred299_Delphi13425);
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred300_Delphi
    public final void synpred300_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:485:76: ( ControlString )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:485:76: ControlString
        {
            match(input, ControlString, FOLLOW_ControlString_in_synpred300_Delphi13430);
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred303_Delphi
    public final void synpred303_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:487:37: ( expression ( ( ',' | '..' ) expression )* )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:487:37: expression ( ( ',' | '..' ) expression )*
        {
            pushFollow(FOLLOW_expression_in_synpred303_Delphi13490);
            expression();
            state._fsp--;
            if (state.failed) return;

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:487:48: ( ( ',' | '..' ) expression )*
            loop346:
            while (true) {
                int alt346 = 2;
                int LA346_0 = input.LA(1);
                if ((LA346_0 == COMMA || LA346_0 == DOTDOT)) {
                    alt346 = 1;
                }

                switch (alt346) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:487:49: ( ',' | '..' ) expression
                    {
                        if (input.LA(1) == COMMA || input.LA(1) == DOTDOT) {
                            input.consume();
                            state.errorRecovery = false;
                            state.failed = false;
                        } else {
                            if (state.backtracking > 0) {
                                state.failed = true;
                                return;
                            }
                            MismatchedSetException mse = new MismatchedSetException(null, input);
                            throw mse;
                        }
                        pushFollow(FOLLOW_expression_in_synpred303_Delphi13501);
                        expression();
                        state._fsp--;
                        if (state.failed) return;

                    }
                    break;

                    default:
                        break loop346;
                }
            }

        }

    }

    // $ANTLR start synpred304_Delphi
    public final void synpred304_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:33: ( 'inherited' )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:33: 'inherited'
        {
            match(input, INHERITED, FOLLOW_INHERITED_in_synpred304_Delphi13564);
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred305_Delphi
    public final void synpred305_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:50: ( namespacedQualifiedIdent )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:50: namespacedQualifiedIdent
        {
            pushFollow(FOLLOW_namespacedQualifiedIdent_in_synpred305_Delphi13571);
            namespacedQualifiedIdent();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred306_Delphi
    public final void synpred306_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:49: ( ( namespacedQualifiedIdent | typeId ) )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:49: ( namespacedQualifiedIdent | typeId )
        {
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:49: ( namespacedQualifiedIdent | typeId )
            int alt347 = 2;
            switch (input.LA(1)) {
                case TkIdentifier: {
                    int LA347_1 = input.LA(2);
                    if ((synpred305_Delphi())) {
                        alt347 = 1;
                    } else if ((true)) {
                        alt347 = 2;
                    }

                }
                break;
                case 200: {
                    int LA347_2 = input.LA(2);
                    if ((LA347_2 == TkIdentifier)) {
                        int LA347_6 = input.LA(3);
                        if ((synpred305_Delphi())) {
                            alt347 = 1;
                        } else if ((true)) {
                            alt347 = 2;
                        }

                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return;
                        }
                        int nvaeMark = input.mark();
                        try {
                            input.consume();
                            NoViableAltException nvae =
                                    new NoViableAltException("", 347, 2, input);
                            throw nvae;
                        } finally {
                            input.rewind(nvaeMark);
                        }
                    }

                }
                break;
                case ADD:
                case ANSISTRING:
                case AT:
                case BREAK:
                case CONTAINS:
                case CONTINUE:
                case DEFAULT:
                case EXIT:
                case EXPORT:
                case FINAL:
                case IMPLEMENTS:
                case INDEX:
                case LOCAL:
                case MESSAGE:
                case NAME:
                case OBJECT:
                case OPERATOR:
                case OUT:
                case POINTER:
                case READ:
                case READONLY:
                case REFERENCE:
                case REGISTER:
                case REMOVE:
                case STORED:
                case STRICT:
                case STRING:
                case VARIANT:
                case WRITE: {
                    int LA347_3 = input.LA(2);
                    if ((synpred305_Delphi())) {
                        alt347 = 1;
                    } else if ((true)) {
                        alt347 = 2;
                    }

                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return;
                    }
                    NoViableAltException nvae =
                            new NoViableAltException("", 347, 0, input);
                    throw nvae;
            }
            switch (alt347) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:50: namespacedQualifiedIdent
                {
                    pushFollow(FOLLOW_namespacedQualifiedIdent_in_synpred306_Delphi13571);
                    namespacedQualifiedIdent();
                    state._fsp--;
                    if (state.failed) return;

                }
                break;
                case 2:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:77: typeId
                {
                    pushFollow(FOLLOW_typeId_in_synpred306_Delphi13575);
                    typeId();
                    state._fsp--;
                    if (state.failed) return;

                }
                break;

            }

        }

    }

    // $ANTLR start synpred307_Delphi
    public final void synpred307_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:89: ( designatorItem )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:89: designatorItem
        {
            pushFollow(FOLLOW_designatorItem_in_synpred307_Delphi13582);
            designatorItem();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred317_Delphi
    public final void synpred317_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:496:37: ( expression ( colonConstruct )? ( ',' expression ( colonConstruct )? )* )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:496:37: expression ( colonConstruct )? ( ',' expression ( colonConstruct )? )*
        {
            pushFollow(FOLLOW_expression_in_synpred317_Delphi13816);
            expression();
            state._fsp--;
            if (state.failed) return;

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:496:48: ( colonConstruct )?
            int alt350 = 2;
            int LA350_0 = input.LA(1);
            if ((LA350_0 == COLON)) {
                alt350 = 1;
            }
            switch (alt350) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:496:49: colonConstruct
                {
                    pushFollow(FOLLOW_colonConstruct_in_synpred317_Delphi13819);
                    colonConstruct();
                    state._fsp--;
                    if (state.failed) return;

                }
                break;

            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:496:66: ( ',' expression ( colonConstruct )? )*
            loop352:
            while (true) {
                int alt352 = 2;
                int LA352_0 = input.LA(1);
                if ((LA352_0 == COMMA)) {
                    alt352 = 1;
                }

                switch (alt352) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:496:67: ',' expression ( colonConstruct )?
                    {
                        match(input, COMMA, FOLLOW_COMMA_in_synpred317_Delphi13824);
                        if (state.failed) return;

                        pushFollow(FOLLOW_expression_in_synpred317_Delphi13826);
                        expression();
                        state._fsp--;
                        if (state.failed) return;

                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:496:82: ( colonConstruct )?
                        int alt351 = 2;
                        int LA351_0 = input.LA(1);
                        if ((LA351_0 == COLON)) {
                            alt351 = 1;
                        }
                        switch (alt351) {
                            case 1:
                                // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:496:83: colonConstruct
                            {
                                pushFollow(FOLLOW_colonConstruct_in_synpred317_Delphi13829);
                                colonConstruct();
                                state._fsp--;
                                if (state.failed) return;

                            }
                            break;

                        }

                    }
                    break;

                    default:
                        break loop352;
                }
            }

        }

    }

    // $ANTLR start synpred348_Delphi
    public final void synpred348_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:539:32: ( label ':' statement )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:539:32: label ':' statement
        {
            pushFollow(FOLLOW_label_in_synpred348_Delphi15083);
            label();
            state._fsp--;
            if (state.failed) return;

            match(input, COLON, FOLLOW_COLON_in_synpred348_Delphi15085);
            if (state.failed) return;

            pushFollow(FOLLOW_statement_in_synpred348_Delphi15087);
            statement();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred349_Delphi
    public final void synpred349_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:542:66: ( 'else' statement )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:542:66: 'else' statement
        {
            match(input, ELSE, FOLLOW_ELSE_in_synpred349_Delphi15183);
            if (state.failed) return;

            pushFollow(FOLLOW_statement_in_synpred349_Delphi15185);
            statement();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred356_Delphi
    public final void synpred356_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:550:42: ( statementList )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:550:42: statementList
        {
            pushFollow(FOLLOW_statementList_in_synpred356_Delphi15453);
            statementList();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred357_Delphi
    public final void synpred357_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:554:32: ( 'for' designator ':=' expression 'to' expression 'do' statement )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:554:32: 'for' designator ':=' expression 'to' expression 'do' statement
        {
            match(input, FOR, FOLLOW_FOR_in_synpred357_Delphi15569);
            if (state.failed) return;

            pushFollow(FOLLOW_designator_in_synpred357_Delphi15571);
            designator();
            state._fsp--;
            if (state.failed) return;

            match(input, ASSIGN, FOLLOW_ASSIGN_in_synpred357_Delphi15573);
            if (state.failed) return;

            pushFollow(FOLLOW_expression_in_synpred357_Delphi15575);
            expression();
            state._fsp--;
            if (state.failed) return;

            match(input, TO, FOLLOW_TO_in_synpred357_Delphi15577);
            if (state.failed) return;

            pushFollow(FOLLOW_expression_in_synpred357_Delphi15579);
            expression();
            state._fsp--;
            if (state.failed) return;

            match(input, DO, FOLLOW_DO_in_synpred357_Delphi15581);
            if (state.failed) return;

            pushFollow(FOLLOW_statement_in_synpred357_Delphi15583);
            statement();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred358_Delphi
    public final void synpred358_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:555:32: ( 'for' designator ':=' expression 'downto' expression 'do' statement )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:555:32: 'for' designator ':=' expression 'downto' expression 'do' statement
        {
            match(input, FOR, FOLLOW_FOR_in_synpred358_Delphi15616);
            if (state.failed) return;

            pushFollow(FOLLOW_designator_in_synpred358_Delphi15618);
            designator();
            state._fsp--;
            if (state.failed) return;

            match(input, ASSIGN, FOLLOW_ASSIGN_in_synpred358_Delphi15620);
            if (state.failed) return;

            pushFollow(FOLLOW_expression_in_synpred358_Delphi15622);
            expression();
            state._fsp--;
            if (state.failed) return;

            match(input, DOWNTO, FOLLOW_DOWNTO_in_synpred358_Delphi15624);
            if (state.failed) return;

            pushFollow(FOLLOW_expression_in_synpred358_Delphi15626);
            expression();
            state._fsp--;
            if (state.failed) return;

            match(input, DO, FOLLOW_DO_in_synpred358_Delphi15628);
            if (state.failed) return;

            pushFollow(FOLLOW_statement_in_synpred358_Delphi15630);
            statement();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred359_Delphi
    public final void synpred359_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:560:32: ( designator 'as' designator )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:560:32: designator 'as' designator
        {
            pushFollow(FOLLOW_designator_in_synpred359_Delphi15788);
            designator();
            state._fsp--;
            if (state.failed) return;

            match(input, AS, FOLLOW_AS_in_synpred359_Delphi15790);
            if (state.failed) return;

            pushFollow(FOLLOW_designator_in_synpred359_Delphi15792);
            designator();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred361_Delphi
    public final void synpred361_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:563:41: ( statementList )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:563:41: statementList
        {
            pushFollow(FOLLOW_statementList_in_synpred361_Delphi15890);
            statementList();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred362_Delphi
    public final void synpred362_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:565:33: ( statement )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:565:33: statement
        {
            pushFollow(FOLLOW_statement_in_synpred362_Delphi15960);
            statement();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred363_Delphi
    public final void synpred363_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:565:51: ( statement )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:565:51: statement
        {
            pushFollow(FOLLOW_statement_in_synpred363_Delphi15968);
            statement();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred364_Delphi
    public final void synpred364_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:565:46: ( ';' ( statement )? )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:565:46: ';' ( statement )?
        {
            match(input, SEMI, FOLLOW_SEMI_in_synpred364_Delphi15965);
            if (state.failed) return;

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:565:50: ( statement )?
            int alt354 = 2;
            int LA354_0 = input.LA(1);
            if ((LA354_0 == ADD || LA354_0 == ANSISTRING || LA354_0 == ASM || (LA354_0 >= ASSIGN && LA354_0 <= AT2) || (LA354_0 >= BEGIN && LA354_0 <= CASE) || (LA354_0 >= CONTAINS && LA354_0 <= CONTINUE) || LA354_0 == DEFAULT || LA354_0 == DOT || LA354_0 == EXIT || LA354_0 == EXPORT || LA354_0 == FINAL || LA354_0 == FOR || LA354_0 == GOTO || LA354_0 == IF || LA354_0 == IMPLEMENTS || (LA354_0 >= INDEX && LA354_0 <= INHERITED) || LA354_0 == LBRACK || (LA354_0 >= LOCAL && LA354_0 <= MESSAGE) || LA354_0 == NAME || LA354_0 == OBJECT || LA354_0 == OPERATOR || LA354_0 == OUT || (LA354_0 >= POINTER && LA354_0 <= POINTER2) || LA354_0 == RAISE || (LA354_0 >= READ && LA354_0 <= READONLY) || (LA354_0 >= REFERENCE && LA354_0 <= REGISTER) || (LA354_0 >= REMOVE && LA354_0 <= REPEAT) || (LA354_0 >= STORED && LA354_0 <= STRING) || LA354_0 == TRY || (LA354_0 >= TkHexNum && LA354_0 <= TkIntNum) || LA354_0 == VARIANT || (LA354_0 >= WHILE && LA354_0 <= WRITE) || LA354_0 == 200)) {
                alt354 = 1;
            } else if ((LA354_0 == EOF)) {
                int LA354_2 = input.LA(2);
                if ((synpred363_Delphi())) {
                    alt354 = 1;
                }
            }
            switch (alt354) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:565:51: statement
                {
                    pushFollow(FOLLOW_statement_in_synpred364_Delphi15968);
                    statement();
                    state._fsp--;
                    if (state.failed) return;

                }
                break;

            }

        }

    }

    // $ANTLR start synpred365_Delphi
    public final void synpred365_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:567:32: ( designator ':=' expression )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:567:32: designator ':=' expression
        {
            pushFollow(FOLLOW_designator_in_synpred365_Delphi16022);
            designator();
            state._fsp--;
            if (state.failed) return;

            match(input, ASSIGN, FOLLOW_ASSIGN_in_synpred365_Delphi16024);
            if (state.failed) return;

            pushFollow(FOLLOW_expression_in_synpred365_Delphi16026);
            expression();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred366_Delphi
    public final void synpred366_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:568:32: ( designator )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:568:32: designator
        {
            pushFollow(FOLLOW_designator_in_synpred366_Delphi16059);
            designator();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred368_Delphi
    public final void synpred368_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:572:40: ( '(' expression ')' )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:572:40: '(' expression ')'
        {
            match(input, LPAREN, FOLLOW_LPAREN_in_synpred368_Delphi16183);
            if (state.failed) return;

            pushFollow(FOLLOW_expression_in_synpred368_Delphi16185);
            expression();
            state._fsp--;
            if (state.failed) return;

            match(input, RPAREN, FOLLOW_RPAREN_in_synpred368_Delphi16187);
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred372_Delphi
    public final void synpred372_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:579:32: ( '(' recordConstExpression ( ';' recordConstExpression )* ')' )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:579:32: '(' recordConstExpression ( ';' recordConstExpression )* ')'
        {
            match(input, LPAREN, FOLLOW_LPAREN_in_synpred372_Delphi16337);
            if (state.failed) return;

            pushFollow(FOLLOW_recordConstExpression_in_synpred372_Delphi16339);
            recordConstExpression();
            state._fsp--;
            if (state.failed) return;

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:579:58: ( ';' recordConstExpression )*
            loop356:
            while (true) {
                int alt356 = 2;
                int LA356_0 = input.LA(1);
                if ((LA356_0 == SEMI)) {
                    alt356 = 1;
                }

                switch (alt356) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:579:59: ';' recordConstExpression
                    {
                        match(input, SEMI, FOLLOW_SEMI_in_synpred372_Delphi16342);
                        if (state.failed) return;

                        pushFollow(FOLLOW_recordConstExpression_in_synpred372_Delphi16344);
                        recordConstExpression();
                        state._fsp--;
                        if (state.failed) return;

                    }
                    break;

                    default:
                        break loop356;
                }
            }

            match(input, RPAREN, FOLLOW_RPAREN_in_synpred372_Delphi16348);
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred374_Delphi
    public final void synpred374_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:580:32: ( '(' constExpression ( ',' constExpression )* ')' )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:580:32: '(' constExpression ( ',' constExpression )* ')'
        {
            match(input, LPAREN, FOLLOW_LPAREN_in_synpred374_Delphi16382);
            if (state.failed) return;

            pushFollow(FOLLOW_constExpression_in_synpred374_Delphi16384);
            constExpression();
            state._fsp--;
            if (state.failed) return;

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:580:52: ( ',' constExpression )*
            loop357:
            while (true) {
                int alt357 = 2;
                int LA357_0 = input.LA(1);
                if ((LA357_0 == COMMA)) {
                    alt357 = 1;
                }

                switch (alt357) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:580:53: ',' constExpression
                    {
                        match(input, COMMA, FOLLOW_COMMA_in_synpred374_Delphi16387);
                        if (state.failed) return;

                        pushFollow(FOLLOW_constExpression_in_synpred374_Delphi16389);
                        constExpression();
                        state._fsp--;
                        if (state.failed) return;

                    }
                    break;

                    default:
                        break loop357;
                }
            }

            match(input, RPAREN, FOLLOW_RPAREN_in_synpred374_Delphi16393);
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred375_Delphi
    public final void synpred375_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:588:39: ( statementList )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:588:39: statementList
        {
            pushFollow(FOLLOW_statementList_in_synpred375_Delphi16533);
            statementList();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred376_Delphi
    public final void synpred376_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:588:32: ( 'try' ( statementList )? 'except' handlerList 'end' )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:588:32: 'try' ( statementList )? 'except' handlerList 'end'
        {
            match(input, TRY, FOLLOW_TRY_in_synpred376_Delphi16530);
            if (state.failed) return;

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:588:38: ( statementList )?
            int alt358 = 2;
            int LA358_0 = input.LA(1);
            if ((LA358_0 == ADD || LA358_0 == ANSISTRING || LA358_0 == ASM || (LA358_0 >= ASSIGN && LA358_0 <= AT2) || (LA358_0 >= BEGIN && LA358_0 <= CASE) || (LA358_0 >= CONTAINS && LA358_0 <= CONTINUE) || LA358_0 == DEFAULT || LA358_0 == DOT || LA358_0 == EXIT || LA358_0 == EXPORT || LA358_0 == FINAL || LA358_0 == FOR || LA358_0 == GOTO || LA358_0 == IF || LA358_0 == IMPLEMENTS || (LA358_0 >= INDEX && LA358_0 <= INHERITED) || LA358_0 == LBRACK || (LA358_0 >= LOCAL && LA358_0 <= MESSAGE) || LA358_0 == NAME || LA358_0 == OBJECT || LA358_0 == OPERATOR || LA358_0 == OUT || (LA358_0 >= POINTER && LA358_0 <= POINTER2) || LA358_0 == RAISE || (LA358_0 >= READ && LA358_0 <= READONLY) || (LA358_0 >= REFERENCE && LA358_0 <= REGISTER) || (LA358_0 >= REMOVE && LA358_0 <= REPEAT) || LA358_0 == SEMI || (LA358_0 >= STORED && LA358_0 <= STRING) || LA358_0 == TRY || (LA358_0 >= TkHexNum && LA358_0 <= TkIntNum) || LA358_0 == VARIANT || (LA358_0 >= WHILE && LA358_0 <= WRITE) || LA358_0 == 200)) {
                alt358 = 1;
            } else if ((LA358_0 == EXCEPT)) {
                int LA358_2 = input.LA(2);
                if ((synpred375_Delphi())) {
                    alt358 = 1;
                }
            }
            switch (alt358) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:588:39: statementList
                {
                    pushFollow(FOLLOW_statementList_in_synpred376_Delphi16533);
                    statementList();
                    state._fsp--;
                    if (state.failed) return;

                }
                break;

            }

            match(input, EXCEPT, FOLLOW_EXCEPT_in_synpred376_Delphi16537);
            if (state.failed) return;

            pushFollow(FOLLOW_handlerList_in_synpred376_Delphi16539);
            handlerList();
            state._fsp--;
            if (state.failed) return;

            match(input, END, FOLLOW_END_in_synpred376_Delphi16541);
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred377_Delphi
    public final void synpred377_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:589:39: ( statementList )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:589:39: statementList
        {
            pushFollow(FOLLOW_statementList_in_synpred377_Delphi16579);
            statementList();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred378_Delphi
    public final void synpred378_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:589:66: ( statementList )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:589:66: statementList
        {
            pushFollow(FOLLOW_statementList_in_synpred378_Delphi16586);
            statementList();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred381_Delphi
    public final void synpred381_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:591:32: ( ( handler )* ( 'else' statementList )? )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:591:32: ( handler )* ( 'else' statementList )?
        {
            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:591:32: ( handler )*
            loop359:
            while (true) {
                int alt359 = 2;
                int LA359_0 = input.LA(1);
                if ((LA359_0 == ON)) {
                    alt359 = 1;
                }

                switch (alt359) {
                    case 1:
                        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:591:33: handler
                    {
                        pushFollow(FOLLOW_handler_in_synpred381_Delphi16645);
                        handler();
                        state._fsp--;
                        if (state.failed) return;

                    }
                    break;

                    default:
                        break loop359;
                }
            }

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:591:43: ( 'else' statementList )?
            int alt360 = 2;
            int LA360_0 = input.LA(1);
            if ((LA360_0 == ELSE)) {
                alt360 = 1;
            }
            switch (alt360) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:591:44: 'else' statementList
                {
                    match(input, ELSE, FOLLOW_ELSE_in_synpred381_Delphi16650);
                    if (state.failed) return;

                    pushFollow(FOLLOW_statementList_in_synpred381_Delphi16652);
                    statementList();
                    state._fsp--;
                    if (state.failed) return;

                }
                break;

            }

        }

    }

    // $ANTLR start synpred384_Delphi
    public final void synpred384_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:598:32: ( statement ( ';' )? )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:598:32: statement ( ';' )?
        {
            pushFollow(FOLLOW_statement_in_synpred384_Delphi16862);
            statement();
            state._fsp--;
            if (state.failed) return;

            // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:598:42: ( ';' )?
            int alt361 = 2;
            int LA361_0 = input.LA(1);
            if ((LA361_0 == SEMI)) {
                alt361 = 1;
            }
            switch (alt361) {
                case 1:
                    // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:598:43: ';'
                {
                    match(input, SEMI, FOLLOW_SEMI_in_synpred384_Delphi16865);
                    if (state.failed) return;

                }
                break;

            }

        }

    }

    // $ANTLR start synpred385_Delphi
    public final void synpred385_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:601:41: ( designator )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:601:41: designator
        {
            pushFollow(FOLLOW_designator_in_synpred385_Delphi16954);
            designator();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred386_Delphi
    public final void synpred386_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:601:55: ( AT designator )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:601:55: AT designator
        {
            match(input, AT, FOLLOW_AT_in_synpred386_Delphi16959);
            if (state.failed) return;

            pushFollow(FOLLOW_designator_in_synpred386_Delphi16961);
            designator();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred404_Delphi
    public final void synpred404_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:631:44: ( ';' )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:631:44: ';'
        {
            match(input, SEMI, FOLLOW_SEMI_in_synpred404_Delphi17876);
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred428_Delphi
    public final void synpred428_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:669:32: ( 'external' ';' )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:669:32: 'external' ';'
        {
            match(input, EXTERNAL, FOLLOW_EXTERNAL_in_synpred428_Delphi19081);
            if (state.failed) return;

            match(input, SEMI, FOLLOW_SEMI_in_synpred428_Delphi19083);
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred467_Delphi
    public final void synpred467_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:702:33: ( namespaceName '.' )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:702:33: namespaceName '.'
        {
            pushFollow(FOLLOW_namespaceName_in_synpred467_Delphi20277);
            namespaceName();
            state._fsp--;
            if (state.failed) return;

            match(input, DOT, FOLLOW_DOT_in_synpred467_Delphi20279);
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred468_Delphi
    public final void synpred468_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:704:39: ( '.' ident )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:704:39: '.' ident
        {
            match(input, DOT, FOLLOW_DOT_in_synpred468_Delphi20338);
            if (state.failed) return;

            pushFollow(FOLLOW_ident_in_synpred468_Delphi20340);
            ident();
            state._fsp--;
            if (state.failed) return;

        }

    }

    // $ANTLR start synpred469_Delphi
    public final void synpred469_Delphi_fragment() throws RecognitionException {
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:706:34: ( ident '.' )
        // org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:706:34: ident '.'
        {
            pushFollow(FOLLOW_ident_in_synpred469_Delphi20395);
            ident();
            state._fsp--;
            if (state.failed) return;

            match(input, DOT, FOLLOW_DOT_in_synpred469_Delphi20397);
            if (state.failed) return;

        }

    }

    public final boolean synpred220_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred220_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred356_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred356_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred31_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred31_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred32_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred32_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred36_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred36_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred357_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred357_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred358_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred358_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred30_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred30_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred262_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred262_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred299_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred299_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred297_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred297_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred317_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred317_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred296_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred296_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred125_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred125_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred132_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred132_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred269_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred269_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred293_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred293_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred295_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred295_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred123_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred123_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred256_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred256_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred265_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred265_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred79_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred79_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred171_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred171_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred227_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred227_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred252_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred252_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred68_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred68_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred64_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred64_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred385_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred385_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred361_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred361_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred404_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred404_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred40_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred40_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred225_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred225_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred221_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred221_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred42_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred42_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred198_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred198_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred24_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred364_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred364_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred363_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred363_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred61_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred61_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred62_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred62_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred349_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred349_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred176_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred176_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred251_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred251_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred84_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred84_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred139_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred139_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred305_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred305_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred306_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred306_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred273_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred273_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred153_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred153_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred291_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred291_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred288_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred288_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred289_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred289_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred124_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred124_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred277_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred277_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred292_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred292_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred248_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred248_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred266_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred266_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred183_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred183_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred237_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred237_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred65_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred65_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred386_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred386_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred54_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred54_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred375_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred375_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred368_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred368_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred226_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred226_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred203_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred203_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred50_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred50_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred372_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred372_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred202_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred202_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred188_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred188_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred189_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred189_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred207_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred207_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred206_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred206_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred148_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred148_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred467_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred467_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred468_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred468_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred94_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred94_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred90_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred90_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred92_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred92_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred93_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred93_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred95_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred95_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred145_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred145_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred281_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred281_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred469_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred469_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred147_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred147_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred283_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred283_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred280_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred280_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred146_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred146_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred282_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred282_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred284_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred284_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred142_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred142_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred285_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred285_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred109_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred109_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred300_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred300_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred151_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred151_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred249_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred249_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred274_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred274_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred278_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred278_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred247_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred247_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred86_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred86_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred88_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred88_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred118_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred118_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred110_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred110_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred428_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred428_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred191_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred191_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred378_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred378_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred234_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred234_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred236_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred236_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred184_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred184_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred46_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred46_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred376_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred376_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred53_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred53_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred230_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred230_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred365_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred365_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred48_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred48_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred374_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred374_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred362_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred362_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred381_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred381_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred177_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred177_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred81_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred81_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred23_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred348_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred348_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred304_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred304_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred271_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred271_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred156_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred156_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred272_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred272_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred138_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred138_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred290_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred290_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred303_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred303_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred307_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred307_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred286_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred286_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred141_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred141_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred287_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred287_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred133_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred133_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred268_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred268_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred294_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred294_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred122_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred122_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred152_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred152_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred279_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred279_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred78_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred78_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred264_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred264_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred85_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred85_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred119_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred119_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred170_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred170_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred100_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred100_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred181_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred181_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred38_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred38_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred67_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred67_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred63_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred63_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred359_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred359_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred239_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred239_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred384_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred384_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred45_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred45_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred224_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred224_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred231_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred231_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred366_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred366_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred377_Delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred377_Delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public static class file_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class program_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class programHead_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class programParmSeq_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class library_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class libraryHead_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class packageE_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class packageHead_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class unit_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class unitHead_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class unitInterface_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class unitImplementation_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class unitBlock_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class unitInitialization_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class unitFinalization_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class containsClause_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class requiresClause_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class usesClause_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class usesFileClause_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class namespaceFileNameList_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class namespaceFileName_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class namespaceNameList_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class block_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class blockBody_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class declSection_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class interfaceDecl_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class labelDeclSection_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class constSection_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class constKey_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class constDeclaration_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class typeSection_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class typeDeclaration_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class varSection_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class varKey_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class varDeclaration_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class varValueSpec_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class exportsSection_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class exportItem_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class typeDecl_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class strucType_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class strucTypePart_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class arrayType_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class arrayIndex_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class arraySubType_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class setType_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class fileType_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class pointerType_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class stringType_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class codePageNumber_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class procedureType_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class methodType_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class simpleProcedureType_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class procedureReference_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class procedureTypeHeading_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class variantType_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class simpleType_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class subRangeType_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class enumType_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class typeId_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class genericTypeIdent_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class genericDefinition_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class simpleGenericDefinition_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class constrainedGenericDefinition_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class constrainedGeneric_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class genericConstraint_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class genericPostfix_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class classDecl_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class classTypeTypeDecl_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class classTypeDecl_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class classState_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class classParent_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class classItem_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class classHelperDecl_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class classHelperItem_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class interfaceTypeDecl_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class interfaceKey_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class interfaceGuid_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class interfaceItem_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class objectDecl_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class objectItem_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class recordDecl_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class simpleRecord_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class variantRecord_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class recordItem_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class recordField_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class recordVariantField_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class recordVariantSection_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class recordVariant_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class recordHelperDecl_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class recordHelperItem_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class classMethod_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class classField_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class classProperty_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class classPropertyArray_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class classPropertyIndex_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class classPropertySpecifier_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class classPropertyEndSpecifier_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class classPropertyReadWrite_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class classPropertyDispInterface_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class visibility_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class exportedProcHeading_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class methodDecl_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class methodDeclHeading_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class methodKey_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class methodName_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class procDecl_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class procDeclHeading_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class formalParameterSection_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class formalParameterList_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class formalParameter_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class parmType_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class methodBody_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class procBody_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class customAttribute_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class customAttributeList_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class customAttributeDecl_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class expression_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class anonymousExpression_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class simpleExpression_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class factor_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class stringFactor_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class setSection_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class designator_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class designatorItem_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class expressionList_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class colonConstruct_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class operator_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class relOp_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class statement_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class ifStatement_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class caseStatement_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class caseItem_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class caseLabel_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class repeatStatement_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class whileStatement_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class forStatement_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class withStatement_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class withItem_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class compoundStatement_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class statementList_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class simpleStatement_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class gotoStatement_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class constExpression_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class recordConstExpression_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class tryStatement_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class handlerList_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class handler_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class handlerIdent_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class handlerStatement_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class raiseStatement_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class assemblerStatement_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class methodDirective_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class functionDirective_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class reintroduceDirective_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class overloadDirective_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class bindingDirective_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class abstractDirective_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class inlineDirective_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class callConvention_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class callConventionNoSemi_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class oldCallConventionDirective_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class hintingDirective_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class externalDirective_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class externalSpecifier_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class dispIDDirective_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class ident_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class usedKeywordsAsNames_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class identList_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class identListFlat_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class label_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class intNum_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class realNum_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class namespacedQualifiedIdent_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class namespaceName_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    public static class qualifiedIdent_return extends ParserRuleReturnScope {
        Object tree;

        @Override
        public Object getTree() {
            return tree;
        }
    }

    protected class DFA26 extends DFA {

        public DFA26(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 26;
            this.eot = DFA26_eot;
            this.eof = DFA26_eof;
            this.min = DFA26_min;
            this.max = DFA26_max;
            this.accept = DFA26_accept;
            this.special = DFA26_special;
            this.transition = DFA26_transition;
        }

        @Override
        public String getDescription() {
            return "()* loopback of 150:41: ( constDeclaration )*";
        }

        @Override
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream) _input;
            int _s = s;
            switch (s) {
                case 0:
                    int LA26_10 = input.LA(1);

                    int index26_10 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred40_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index26_10);
                    if (s >= 0) return s;
                    break;

                case 1:
                    int LA26_17 = input.LA(1);

                    int index26_17 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred40_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index26_17);
                    if (s >= 0) return s;
                    break;

                case 2:
                    int LA26_24 = input.LA(1);

                    int index26_24 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred40_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index26_24);
                    if (s >= 0) return s;
                    break;

                case 3:
                    int LA26_25 = input.LA(1);

                    int index26_25 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred40_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index26_25);
                    if (s >= 0) return s;
                    break;

                case 4:
                    int LA26_26 = input.LA(1);

                    int index26_26 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred40_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index26_26);
                    if (s >= 0) return s;
                    break;

                case 5:
                    int LA26_29 = input.LA(1);

                    int index26_29 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred40_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index26_29);
                    if (s >= 0) return s;
                    break;

                case 6:
                    int LA26_30 = input.LA(1);

                    int index26_30 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred40_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index26_30);
                    if (s >= 0) return s;
                    break;

                case 7:
                    int LA26_32 = input.LA(1);

                    int index26_32 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred40_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index26_32);
                    if (s >= 0) return s;
                    break;

                case 8:
                    int LA26_38 = input.LA(1);

                    int index26_38 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred40_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index26_38);
                    if (s >= 0) return s;
                    break;

                case 9:
                    int LA26_41 = input.LA(1);

                    int index26_41 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred40_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index26_41);
                    if (s >= 0) return s;
                    break;

                case 10:
                    int LA26_43 = input.LA(1);

                    int index26_43 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred40_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index26_43);
                    if (s >= 0) return s;
                    break;

                case 11:
                    int LA26_53 = input.LA(1);

                    int index26_53 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred40_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index26_53);
                    if (s >= 0) return s;
                    break;

                case 12:
                    int LA26_77 = input.LA(1);

                    int index26_77 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred40_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index26_77);
                    if (s >= 0) return s;
                    break;

                case 13:
                    int LA26_78 = input.LA(1);

                    int index26_78 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred40_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index26_78);
                    if (s >= 0) return s;
                    break;

                case 14:
                    int LA26_79 = input.LA(1);

                    int index26_79 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred40_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index26_79);
                    if (s >= 0) return s;
                    break;

                case 15:
                    int LA26_91 = input.LA(1);

                    int index26_91 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred40_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index26_91);
                    if (s >= 0) return s;
                    break;

                case 16:
                    int LA26_97 = input.LA(1);

                    int index26_97 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred40_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index26_97);
                    if (s >= 0) return s;
                    break;
            }
            if (state.backtracking > 0) {
                state.failed = true;
                return -1;
            }
            NoViableAltException nvae =
                    new NoViableAltException(getDescription(), 26, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    protected class DFA30 extends DFA {

        public DFA30(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 30;
            this.eot = DFA30_eot;
            this.eof = DFA30_eof;
            this.min = DFA30_min;
            this.max = DFA30_max;
            this.accept = DFA30_accept;
            this.special = DFA30_special;
            this.transition = DFA30_transition;
        }

        @Override
        public String getDescription() {
            return "()* loopback of 157:55: ( typeDeclaration )*";
        }

        @Override
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream) _input;
            int _s = s;
            switch (s) {
                case 0:
                    int LA30_10 = input.LA(1);

                    int index30_10 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred45_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index30_10);
                    if (s >= 0) return s;
                    break;

                case 1:
                    int LA30_17 = input.LA(1);

                    int index30_17 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred45_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index30_17);
                    if (s >= 0) return s;
                    break;

                case 2:
                    int LA30_24 = input.LA(1);

                    int index30_24 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred45_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index30_24);
                    if (s >= 0) return s;
                    break;

                case 3:
                    int LA30_25 = input.LA(1);

                    int index30_25 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred45_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index30_25);
                    if (s >= 0) return s;
                    break;

                case 4:
                    int LA30_26 = input.LA(1);

                    int index30_26 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred45_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index30_26);
                    if (s >= 0) return s;
                    break;

                case 5:
                    int LA30_29 = input.LA(1);

                    int index30_29 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred45_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index30_29);
                    if (s >= 0) return s;
                    break;

                case 6:
                    int LA30_30 = input.LA(1);

                    int index30_30 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred45_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index30_30);
                    if (s >= 0) return s;
                    break;

                case 7:
                    int LA30_32 = input.LA(1);

                    int index30_32 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred45_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index30_32);
                    if (s >= 0) return s;
                    break;

                case 8:
                    int LA30_38 = input.LA(1);

                    int index30_38 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred45_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index30_38);
                    if (s >= 0) return s;
                    break;

                case 9:
                    int LA30_41 = input.LA(1);

                    int index30_41 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred45_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index30_41);
                    if (s >= 0) return s;
                    break;

                case 10:
                    int LA30_43 = input.LA(1);

                    int index30_43 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred45_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index30_43);
                    if (s >= 0) return s;
                    break;

                case 11:
                    int LA30_53 = input.LA(1);

                    int index30_53 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred45_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index30_53);
                    if (s >= 0) return s;
                    break;

                case 12:
                    int LA30_77 = input.LA(1);

                    int index30_77 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred45_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index30_77);
                    if (s >= 0) return s;
                    break;

                case 13:
                    int LA30_78 = input.LA(1);

                    int index30_78 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred45_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index30_78);
                    if (s >= 0) return s;
                    break;

                case 14:
                    int LA30_79 = input.LA(1);

                    int index30_79 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred45_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index30_79);
                    if (s >= 0) return s;
                    break;

                case 15:
                    int LA30_91 = input.LA(1);

                    int index30_91 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred45_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index30_91);
                    if (s >= 0) return s;
                    break;

                case 16:
                    int LA30_97 = input.LA(1);

                    int index30_97 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred45_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index30_97);
                    if (s >= 0) return s;
                    break;
            }
            if (state.backtracking > 0) {
                state.failed = true;
                return -1;
            }
            NoViableAltException nvae =
                    new NoViableAltException(getDescription(), 30, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    protected class DFA33 extends DFA {

        public DFA33(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 33;
            this.eot = DFA33_eot;
            this.eof = DFA33_eof;
            this.min = DFA33_min;
            this.max = DFA33_max;
            this.accept = DFA33_accept;
            this.special = DFA33_special;
            this.transition = DFA33_transition;
        }

        @Override
        public String getDescription() {
            return "()* loopback of 161:54: ( varDeclaration )*";
        }

        @Override
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream) _input;
            int _s = s;
            switch (s) {
                case 0:
                    int LA33_10 = input.LA(1);

                    int index33_10 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred48_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index33_10);
                    if (s >= 0) return s;
                    break;

                case 1:
                    int LA33_17 = input.LA(1);

                    int index33_17 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred48_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index33_17);
                    if (s >= 0) return s;
                    break;

                case 2:
                    int LA33_24 = input.LA(1);

                    int index33_24 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred48_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index33_24);
                    if (s >= 0) return s;
                    break;

                case 3:
                    int LA33_25 = input.LA(1);

                    int index33_25 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred48_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index33_25);
                    if (s >= 0) return s;
                    break;

                case 4:
                    int LA33_26 = input.LA(1);

                    int index33_26 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred48_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index33_26);
                    if (s >= 0) return s;
                    break;

                case 5:
                    int LA33_29 = input.LA(1);

                    int index33_29 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred48_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index33_29);
                    if (s >= 0) return s;
                    break;

                case 6:
                    int LA33_30 = input.LA(1);

                    int index33_30 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred48_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index33_30);
                    if (s >= 0) return s;
                    break;

                case 7:
                    int LA33_32 = input.LA(1);

                    int index33_32 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred48_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index33_32);
                    if (s >= 0) return s;
                    break;

                case 8:
                    int LA33_38 = input.LA(1);

                    int index33_38 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred48_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index33_38);
                    if (s >= 0) return s;
                    break;

                case 9:
                    int LA33_41 = input.LA(1);

                    int index33_41 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred48_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index33_41);
                    if (s >= 0) return s;
                    break;

                case 10:
                    int LA33_43 = input.LA(1);

                    int index33_43 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred48_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index33_43);
                    if (s >= 0) return s;
                    break;

                case 11:
                    int LA33_53 = input.LA(1);

                    int index33_53 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred48_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index33_53);
                    if (s >= 0) return s;
                    break;

                case 12:
                    int LA33_77 = input.LA(1);

                    int index33_77 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred48_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index33_77);
                    if (s >= 0) return s;
                    break;

                case 13:
                    int LA33_78 = input.LA(1);

                    int index33_78 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred48_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index33_78);
                    if (s >= 0) return s;
                    break;

                case 14:
                    int LA33_79 = input.LA(1);

                    int index33_79 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred48_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index33_79);
                    if (s >= 0) return s;
                    break;

                case 15:
                    int LA33_91 = input.LA(1);

                    int index33_91 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred48_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index33_91);
                    if (s >= 0) return s;
                    break;

                case 16:
                    int LA33_97 = input.LA(1);

                    int index33_97 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred48_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index33_97);
                    if (s >= 0) return s;
                    break;
            }
            if (state.backtracking > 0) {
                state.failed = true;
                return -1;
            }
            NoViableAltException nvae =
                    new NoViableAltException(getDescription(), 33, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    protected class DFA46 extends DFA {

        public DFA46(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 46;
            this.eot = DFA46_eot;
            this.eof = DFA46_eof;
            this.min = DFA46_min;
            this.max = DFA46_max;
            this.accept = DFA46_accept;
            this.special = DFA46_special;
            this.transition = DFA46_transition;
        }

        @Override
        public String getDescription() {
            return "180:1: typeDecl : ( strucType | pointerType | stringType | procedureType | variantType | ( 'type' )? typeId ( genericPostfix )? | simpleType );";
        }

        @Override
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream) _input;
            int _s = s;
            switch (s) {
                case 0:
                    int LA46_5 = input.LA(1);

                    int index46_5 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred61_Delphi())) {
                        s = 1;
                    } else if ((true)) {
                        s = 21;
                    }

                    input.seek(index46_5);
                    if (s >= 0) return s;
                    break;

                case 1:
                    int LA46_7 = input.LA(1);

                    int index46_7 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred61_Delphi())) {
                        s = 1;
                    } else if ((synpred68_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 21;
                    }

                    input.seek(index46_7);
                    if (s >= 0) return s;
                    break;

                case 2:
                    int LA46_9 = input.LA(1);

                    int index46_9 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred62_Delphi())) {
                        s = 113;
                    } else if ((true)) {
                        s = 21;
                    }

                    input.seek(index46_9);
                    if (s >= 0) return s;
                    break;

                case 3:
                    int LA46_10 = input.LA(1);

                    int index46_10 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred62_Delphi())) {
                        s = 113;
                    } else if ((synpred68_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 21;
                    }

                    input.seek(index46_10);
                    if (s >= 0) return s;
                    break;

                case 4:
                    int LA46_11 = input.LA(1);

                    int index46_11 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred63_Delphi())) {
                        s = 114;
                    } else if ((synpred68_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 21;
                    }

                    input.seek(index46_11);
                    if (s >= 0) return s;
                    break;

                case 5:
                    int LA46_12 = input.LA(1);

                    int index46_12 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred63_Delphi())) {
                        s = 114;
                    } else if ((synpred68_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 21;
                    }

                    input.seek(index46_12);
                    if (s >= 0) return s;
                    break;

                case 6:
                    int LA46_13 = input.LA(1);

                    int index46_13 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred63_Delphi())) {
                        s = 114;
                    } else if ((synpred68_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 21;
                    }

                    input.seek(index46_13);
                    if (s >= 0) return s;
                    break;

                case 7:
                    int LA46_14 = input.LA(1);

                    int index46_14 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred64_Delphi())) {
                        s = 115;
                    } else if ((true)) {
                        s = 21;
                    }

                    input.seek(index46_14);
                    if (s >= 0) return s;
                    break;

                case 8:
                    int LA46_15 = input.LA(1);

                    int index46_15 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred64_Delphi())) {
                        s = 115;
                    } else if ((true)) {
                        s = 21;
                    }

                    input.seek(index46_15);
                    if (s >= 0) return s;
                    break;

                case 9:
                    int LA46_16 = input.LA(1);

                    int index46_16 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred64_Delphi())) {
                        s = 115;
                    } else if ((synpred68_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 21;
                    }

                    input.seek(index46_16);
                    if (s >= 0) return s;
                    break;

                case 10:
                    int LA46_17 = input.LA(1);

                    int index46_17 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred65_Delphi())) {
                        s = 116;
                    } else if ((synpred68_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 21;
                    }

                    input.seek(index46_17);
                    if (s >= 0) return s;
                    break;

                case 11:
                    int LA46_18 = input.LA(1);

                    int index46_18 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred68_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 21;
                    }

                    input.seek(index46_18);
                    if (s >= 0) return s;
                    break;

                case 12:
                    int LA46_19 = input.LA(1);

                    int index46_19 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred68_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 21;
                    }

                    input.seek(index46_19);
                    if (s >= 0) return s;
                    break;

                case 13:
                    int LA46_20 = input.LA(1);

                    int index46_20 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred68_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 21;
                    }

                    input.seek(index46_20);
                    if (s >= 0) return s;
                    break;

                case 14:
                    int LA46_51 = input.LA(1);

                    int index46_51 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred68_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 21;
                    }

                    input.seek(index46_51);
                    if (s >= 0) return s;
                    break;

                case 15:
                    int LA46_55 = input.LA(1);

                    int index46_55 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred68_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 21;
                    }

                    input.seek(index46_55);
                    if (s >= 0) return s;
                    break;

                case 16:
                    int LA46_62 = input.LA(1);

                    int index46_62 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred68_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 21;
                    }

                    input.seek(index46_62);
                    if (s >= 0) return s;
                    break;

                case 17:
                    int LA46_74 = input.LA(1);

                    int index46_74 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred68_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 21;
                    }

                    input.seek(index46_74);
                    if (s >= 0) return s;
                    break;

                case 18:
                    int LA46_76 = input.LA(1);

                    int index46_76 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred68_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 21;
                    }

                    input.seek(index46_76);
                    if (s >= 0) return s;
                    break;

                case 19:
                    int LA46_77 = input.LA(1);

                    int index46_77 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred68_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 21;
                    }

                    input.seek(index46_77);
                    if (s >= 0) return s;
                    break;

                case 20:
                    int LA46_78 = input.LA(1);

                    int index46_78 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred68_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 21;
                    }

                    input.seek(index46_78);
                    if (s >= 0) return s;
                    break;

                case 21:
                    int LA46_81 = input.LA(1);

                    int index46_81 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred68_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 21;
                    }

                    input.seek(index46_81);
                    if (s >= 0) return s;
                    break;

                case 22:
                    int LA46_82 = input.LA(1);

                    int index46_82 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred68_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 21;
                    }

                    input.seek(index46_82);
                    if (s >= 0) return s;
                    break;

                case 23:
                    int LA46_84 = input.LA(1);

                    int index46_84 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred68_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 21;
                    }

                    input.seek(index46_84);
                    if (s >= 0) return s;
                    break;

                case 24:
                    int LA46_90 = input.LA(1);

                    int index46_90 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred68_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 21;
                    }

                    input.seek(index46_90);
                    if (s >= 0) return s;
                    break;

                case 25:
                    int LA46_93 = input.LA(1);

                    int index46_93 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred68_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 21;
                    }

                    input.seek(index46_93);
                    if (s >= 0) return s;
                    break;

                case 26:
                    int LA46_100 = input.LA(1);

                    int index46_100 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred68_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 21;
                    }

                    input.seek(index46_100);
                    if (s >= 0) return s;
                    break;
            }
            if (state.backtracking > 0) {
                state.failed = true;
                return -1;
            }
            NoViableAltException nvae =
                    new NoViableAltException(getDescription(), 46, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    protected class DFA53 extends DFA {

        public DFA53(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 53;
            this.eot = DFA53_eot;
            this.eof = DFA53_eof;
            this.min = DFA53_min;
            this.max = DFA53_max;
            this.accept = DFA53_accept;
            this.special = DFA53_special;
            this.transition = DFA53_transition;
        }

        @Override
        public String getDescription() {
            return "200:1: arrayIndex : ( typeId | expression '..' expression );";
        }
    }

    protected class DFA57 extends DFA {

        public DFA57(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 57;
            this.eot = DFA57_eot;
            this.eof = DFA57_eof;
            this.min = DFA57_min;
            this.max = DFA57_max;
            this.accept = DFA57_accept;
            this.special = DFA57_special;
            this.transition = DFA57_transition;
        }

        @Override
        public String getDescription() {
            return "215:41: ( '[' expression ']' )?";
        }

        @Override
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream) _input;
            int _s = s;
            switch (s) {
                case 0:
                    int LA57_1 = input.LA(1);

                    int index57_1 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred81_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index57_1);
                    if (s >= 0) return s;
                    break;
            }
            if (state.backtracking > 0) {
                state.failed = true;
                return -1;
            }
            NoViableAltException nvae =
                    new NoViableAltException(getDescription(), 57, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    protected class DFA65 extends DFA {

        public DFA65(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 65;
            this.eot = DFA65_eot;
            this.eof = DFA65_eof;
            this.min = DFA65_min;
            this.max = DFA65_max;
            this.accept = DFA65_accept;
            this.special = DFA65_special;
            this.transition = DFA65_transition;
        }

        @Override
        public String getDescription() {
            return "230:73: ( customAttribute )?";
        }

        @Override
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream) _input;
            int _s = s;
            switch (s) {
                case 0:
                    int LA65_1 = input.LA(1);

                    int index65_1 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_1);
                    if (s >= 0) return s;
                    break;

                case 1:
                    int LA65_2 = input.LA(1);

                    int index65_2 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_2);
                    if (s >= 0) return s;
                    break;

                case 2:
                    int LA65_3 = input.LA(1);

                    int index65_3 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_3);
                    if (s >= 0) return s;
                    break;

                case 3:
                    int LA65_4 = input.LA(1);

                    int index65_4 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_4);
                    if (s >= 0) return s;
                    break;

                case 4:
                    int LA65_5 = input.LA(1);

                    int index65_5 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_5);
                    if (s >= 0) return s;
                    break;

                case 5:
                    int LA65_6 = input.LA(1);

                    int index65_6 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_6);
                    if (s >= 0) return s;
                    break;

                case 6:
                    int LA65_7 = input.LA(1);

                    int index65_7 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_7);
                    if (s >= 0) return s;
                    break;

                case 7:
                    int LA65_8 = input.LA(1);

                    int index65_8 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_8);
                    if (s >= 0) return s;
                    break;

                case 8:
                    int LA65_9 = input.LA(1);

                    int index65_9 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_9);
                    if (s >= 0) return s;
                    break;

                case 9:
                    int LA65_10 = input.LA(1);

                    int index65_10 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_10);
                    if (s >= 0) return s;
                    break;

                case 10:
                    int LA65_11 = input.LA(1);

                    int index65_11 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_11);
                    if (s >= 0) return s;
                    break;

                case 11:
                    int LA65_12 = input.LA(1);

                    int index65_12 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_12);
                    if (s >= 0) return s;
                    break;

                case 12:
                    int LA65_13 = input.LA(1);

                    int index65_13 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_13);
                    if (s >= 0) return s;
                    break;

                case 13:
                    int LA65_14 = input.LA(1);

                    int index65_14 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_14);
                    if (s >= 0) return s;
                    break;

                case 14:
                    int LA65_15 = input.LA(1);

                    int index65_15 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_15);
                    if (s >= 0) return s;
                    break;

                case 15:
                    int LA65_16 = input.LA(1);

                    int index65_16 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_16);
                    if (s >= 0) return s;
                    break;

                case 16:
                    int LA65_17 = input.LA(1);

                    int index65_17 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_17);
                    if (s >= 0) return s;
                    break;

                case 17:
                    int LA65_18 = input.LA(1);

                    int index65_18 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_18);
                    if (s >= 0) return s;
                    break;

                case 18:
                    int LA65_19 = input.LA(1);

                    int index65_19 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_19);
                    if (s >= 0) return s;
                    break;

                case 19:
                    int LA65_20 = input.LA(1);

                    int index65_20 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_20);
                    if (s >= 0) return s;
                    break;

                case 20:
                    int LA65_21 = input.LA(1);

                    int index65_21 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_21);
                    if (s >= 0) return s;
                    break;

                case 21:
                    int LA65_22 = input.LA(1);

                    int index65_22 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_22);
                    if (s >= 0) return s;
                    break;

                case 22:
                    int LA65_23 = input.LA(1);

                    int index65_23 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_23);
                    if (s >= 0) return s;
                    break;

                case 23:
                    int LA65_24 = input.LA(1);

                    int index65_24 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_24);
                    if (s >= 0) return s;
                    break;

                case 24:
                    int LA65_25 = input.LA(1);

                    int index65_25 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_25);
                    if (s >= 0) return s;
                    break;

                case 25:
                    int LA65_26 = input.LA(1);

                    int index65_26 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_26);
                    if (s >= 0) return s;
                    break;

                case 26:
                    int LA65_27 = input.LA(1);

                    int index65_27 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_27);
                    if (s >= 0) return s;
                    break;

                case 27:
                    int LA65_28 = input.LA(1);

                    int index65_28 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_28);
                    if (s >= 0) return s;
                    break;

                case 28:
                    int LA65_29 = input.LA(1);

                    int index65_29 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_29);
                    if (s >= 0) return s;
                    break;

                case 29:
                    int LA65_30 = input.LA(1);

                    int index65_30 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_30);
                    if (s >= 0) return s;
                    break;

                case 30:
                    int LA65_31 = input.LA(1);

                    int index65_31 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_31);
                    if (s >= 0) return s;
                    break;

                case 31:
                    int LA65_32 = input.LA(1);

                    int index65_32 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_32);
                    if (s >= 0) return s;
                    break;

                case 32:
                    int LA65_33 = input.LA(1);

                    int index65_33 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_33);
                    if (s >= 0) return s;
                    break;

                case 33:
                    int LA65_34 = input.LA(1);

                    int index65_34 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_34);
                    if (s >= 0) return s;
                    break;

                case 34:
                    int LA65_35 = input.LA(1);

                    int index65_35 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_35);
                    if (s >= 0) return s;
                    break;

                case 35:
                    int LA65_36 = input.LA(1);

                    int index65_36 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_36);
                    if (s >= 0) return s;
                    break;

                case 36:
                    int LA65_37 = input.LA(1);

                    int index65_37 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_37);
                    if (s >= 0) return s;
                    break;

                case 37:
                    int LA65_38 = input.LA(1);

                    int index65_38 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_38);
                    if (s >= 0) return s;
                    break;

                case 38:
                    int LA65_39 = input.LA(1);

                    int index65_39 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_39);
                    if (s >= 0) return s;
                    break;

                case 39:
                    int LA65_40 = input.LA(1);

                    int index65_40 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_40);
                    if (s >= 0) return s;
                    break;

                case 40:
                    int LA65_41 = input.LA(1);

                    int index65_41 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_41);
                    if (s >= 0) return s;
                    break;

                case 41:
                    int LA65_42 = input.LA(1);

                    int index65_42 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_42);
                    if (s >= 0) return s;
                    break;

                case 42:
                    int LA65_43 = input.LA(1);

                    int index65_43 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_43);
                    if (s >= 0) return s;
                    break;

                case 43:
                    int LA65_44 = input.LA(1);

                    int index65_44 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_44);
                    if (s >= 0) return s;
                    break;

                case 44:
                    int LA65_45 = input.LA(1);

                    int index65_45 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_45);
                    if (s >= 0) return s;
                    break;

                case 45:
                    int LA65_46 = input.LA(1);

                    int index65_46 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_46);
                    if (s >= 0) return s;
                    break;

                case 46:
                    int LA65_47 = input.LA(1);

                    int index65_47 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_47);
                    if (s >= 0) return s;
                    break;

                case 47:
                    int LA65_48 = input.LA(1);

                    int index65_48 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_48);
                    if (s >= 0) return s;
                    break;

                case 48:
                    int LA65_49 = input.LA(1);

                    int index65_49 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_49);
                    if (s >= 0) return s;
                    break;

                case 49:
                    int LA65_50 = input.LA(1);

                    int index65_50 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_50);
                    if (s >= 0) return s;
                    break;

                case 50:
                    int LA65_51 = input.LA(1);

                    int index65_51 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_51);
                    if (s >= 0) return s;
                    break;

                case 51:
                    int LA65_52 = input.LA(1);

                    int index65_52 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_52);
                    if (s >= 0) return s;
                    break;

                case 52:
                    int LA65_53 = input.LA(1);

                    int index65_53 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_53);
                    if (s >= 0) return s;
                    break;

                case 53:
                    int LA65_54 = input.LA(1);

                    int index65_54 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_54);
                    if (s >= 0) return s;
                    break;

                case 54:
                    int LA65_55 = input.LA(1);

                    int index65_55 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_55);
                    if (s >= 0) return s;
                    break;

                case 55:
                    int LA65_56 = input.LA(1);

                    int index65_56 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_56);
                    if (s >= 0) return s;
                    break;

                case 56:
                    int LA65_57 = input.LA(1);

                    int index65_57 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_57);
                    if (s >= 0) return s;
                    break;

                case 57:
                    int LA65_58 = input.LA(1);

                    int index65_58 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_58);
                    if (s >= 0) return s;
                    break;

                case 58:
                    int LA65_59 = input.LA(1);

                    int index65_59 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_59);
                    if (s >= 0) return s;
                    break;

                case 59:
                    int LA65_60 = input.LA(1);

                    int index65_60 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_60);
                    if (s >= 0) return s;
                    break;

                case 60:
                    int LA65_61 = input.LA(1);

                    int index65_61 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_61);
                    if (s >= 0) return s;
                    break;

                case 61:
                    int LA65_62 = input.LA(1);

                    int index65_62 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_62);
                    if (s >= 0) return s;
                    break;

                case 62:
                    int LA65_63 = input.LA(1);

                    int index65_63 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_63);
                    if (s >= 0) return s;
                    break;

                case 63:
                    int LA65_64 = input.LA(1);

                    int index65_64 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_64);
                    if (s >= 0) return s;
                    break;

                case 64:
                    int LA65_65 = input.LA(1);

                    int index65_65 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_65);
                    if (s >= 0) return s;
                    break;

                case 65:
                    int LA65_66 = input.LA(1);

                    int index65_66 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_66);
                    if (s >= 0) return s;
                    break;

                case 66:
                    int LA65_67 = input.LA(1);

                    int index65_67 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_67);
                    if (s >= 0) return s;
                    break;

                case 67:
                    int LA65_68 = input.LA(1);

                    int index65_68 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_68);
                    if (s >= 0) return s;
                    break;

                case 68:
                    int LA65_69 = input.LA(1);

                    int index65_69 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_69);
                    if (s >= 0) return s;
                    break;

                case 69:
                    int LA65_70 = input.LA(1);

                    int index65_70 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_70);
                    if (s >= 0) return s;
                    break;

                case 70:
                    int LA65_71 = input.LA(1);

                    int index65_71 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_71);
                    if (s >= 0) return s;
                    break;

                case 71:
                    int LA65_72 = input.LA(1);

                    int index65_72 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_72);
                    if (s >= 0) return s;
                    break;

                case 72:
                    int LA65_73 = input.LA(1);

                    int index65_73 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_73);
                    if (s >= 0) return s;
                    break;

                case 73:
                    int LA65_74 = input.LA(1);

                    int index65_74 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_74);
                    if (s >= 0) return s;
                    break;

                case 74:
                    int LA65_75 = input.LA(1);

                    int index65_75 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_75);
                    if (s >= 0) return s;
                    break;

                case 75:
                    int LA65_76 = input.LA(1);

                    int index65_76 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_76);
                    if (s >= 0) return s;
                    break;

                case 76:
                    int LA65_77 = input.LA(1);

                    int index65_77 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_77);
                    if (s >= 0) return s;
                    break;

                case 77:
                    int LA65_78 = input.LA(1);

                    int index65_78 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_78);
                    if (s >= 0) return s;
                    break;

                case 78:
                    int LA65_79 = input.LA(1);

                    int index65_79 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_79);
                    if (s >= 0) return s;
                    break;

                case 79:
                    int LA65_80 = input.LA(1);

                    int index65_80 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_80);
                    if (s >= 0) return s;
                    break;

                case 80:
                    int LA65_81 = input.LA(1);

                    int index65_81 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_81);
                    if (s >= 0) return s;
                    break;

                case 81:
                    int LA65_82 = input.LA(1);

                    int index65_82 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_82);
                    if (s >= 0) return s;
                    break;

                case 82:
                    int LA65_83 = input.LA(1);

                    int index65_83 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_83);
                    if (s >= 0) return s;
                    break;

                case 83:
                    int LA65_84 = input.LA(1);

                    int index65_84 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_84);
                    if (s >= 0) return s;
                    break;

                case 84:
                    int LA65_85 = input.LA(1);

                    int index65_85 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_85);
                    if (s >= 0) return s;
                    break;

                case 85:
                    int LA65_86 = input.LA(1);

                    int index65_86 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_86);
                    if (s >= 0) return s;
                    break;

                case 86:
                    int LA65_87 = input.LA(1);

                    int index65_87 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_87);
                    if (s >= 0) return s;
                    break;

                case 87:
                    int LA65_88 = input.LA(1);

                    int index65_88 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_88);
                    if (s >= 0) return s;
                    break;

                case 88:
                    int LA65_89 = input.LA(1);

                    int index65_89 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_89);
                    if (s >= 0) return s;
                    break;

                case 89:
                    int LA65_90 = input.LA(1);

                    int index65_90 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_90);
                    if (s >= 0) return s;
                    break;

                case 90:
                    int LA65_91 = input.LA(1);

                    int index65_91 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_91);
                    if (s >= 0) return s;
                    break;

                case 91:
                    int LA65_92 = input.LA(1);

                    int index65_92 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_92);
                    if (s >= 0) return s;
                    break;

                case 92:
                    int LA65_93 = input.LA(1);

                    int index65_93 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_93);
                    if (s >= 0) return s;
                    break;

                case 93:
                    int LA65_94 = input.LA(1);

                    int index65_94 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_94);
                    if (s >= 0) return s;
                    break;

                case 94:
                    int LA65_95 = input.LA(1);

                    int index65_95 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_95);
                    if (s >= 0) return s;
                    break;

                case 95:
                    int LA65_96 = input.LA(1);

                    int index65_96 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_96);
                    if (s >= 0) return s;
                    break;

                case 96:
                    int LA65_97 = input.LA(1);

                    int index65_97 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_97);
                    if (s >= 0) return s;
                    break;

                case 97:
                    int LA65_98 = input.LA(1);

                    int index65_98 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_98);
                    if (s >= 0) return s;
                    break;

                case 98:
                    int LA65_99 = input.LA(1);

                    int index65_99 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_99);
                    if (s >= 0) return s;
                    break;

                case 99:
                    int LA65_100 = input.LA(1);

                    int index65_100 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_100);
                    if (s >= 0) return s;
                    break;

                case 100:
                    int LA65_101 = input.LA(1);

                    int index65_101 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_101);
                    if (s >= 0) return s;
                    break;

                case 101:
                    int LA65_102 = input.LA(1);

                    int index65_102 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_102);
                    if (s >= 0) return s;
                    break;

                case 102:
                    int LA65_103 = input.LA(1);

                    int index65_103 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_103);
                    if (s >= 0) return s;
                    break;

                case 103:
                    int LA65_104 = input.LA(1);

                    int index65_104 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_104);
                    if (s >= 0) return s;
                    break;

                case 104:
                    int LA65_105 = input.LA(1);

                    int index65_105 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_105);
                    if (s >= 0) return s;
                    break;

                case 105:
                    int LA65_106 = input.LA(1);

                    int index65_106 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_106);
                    if (s >= 0) return s;
                    break;

                case 106:
                    int LA65_107 = input.LA(1);

                    int index65_107 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_107);
                    if (s >= 0) return s;
                    break;

                case 107:
                    int LA65_108 = input.LA(1);

                    int index65_108 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_108);
                    if (s >= 0) return s;
                    break;

                case 108:
                    int LA65_109 = input.LA(1);

                    int index65_109 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_109);
                    if (s >= 0) return s;
                    break;

                case 109:
                    int LA65_110 = input.LA(1);

                    int index65_110 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_110);
                    if (s >= 0) return s;
                    break;

                case 110:
                    int LA65_111 = input.LA(1);

                    int index65_111 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred90_Delphi())) {
                        s = 112;
                    } else if ((true)) {
                        s = 113;
                    }

                    input.seek(index65_111);
                    if (s >= 0) return s;
                    break;
            }
            if (state.backtracking > 0) {
                state.failed = true;
                return -1;
            }
            NoViableAltException nvae =
                    new NoViableAltException(getDescription(), 65, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    protected class DFA66 extends DFA {

        public DFA66(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 66;
            this.eot = DFA66_eot;
            this.eof = DFA66_eof;
            this.min = DFA66_min;
            this.max = DFA66_max;
            this.accept = DFA66_accept;
            this.special = DFA66_special;
            this.transition = DFA66_transition;
        }

        @Override
        public String getDescription() {
            return "231:44: ( formalParameterSection )?";
        }

        @Override
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream) _input;
            int _s = s;
            switch (s) {
                case 0:
                    int LA66_1 = input.LA(1);

                    int index66_1 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred92_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index66_1);
                    if (s >= 0) return s;
                    break;
            }
            if (state.backtracking > 0) {
                state.failed = true;
                return -1;
            }
            NoViableAltException nvae =
                    new NoViableAltException(getDescription(), 66, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    protected class DFA68 extends DFA {

        public DFA68(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 68;
            this.eot = DFA68_eot;
            this.eof = DFA68_eof;
            this.min = DFA68_min;
            this.max = DFA68_max;
            this.accept = DFA68_accept;
            this.special = DFA68_special;
            this.transition = DFA68_transition;
        }

        @Override
        public String getDescription() {
            return "235:1: simpleType : ( ident | subRangeType | enumType );";
        }

        @Override
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream) _input;
            int _s = s;
            switch (s) {
                case 0:
                    int LA68_1 = input.LA(1);

                    int index68_1 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred93_Delphi())) {
                        s = 100;
                    } else if ((synpred94_Delphi())) {
                        s = 5;
                    }

                    input.seek(index68_1);
                    if (s >= 0) return s;
                    break;

                case 1:
                    int LA68_2 = input.LA(1);

                    int index68_2 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred93_Delphi())) {
                        s = 100;
                    } else if ((synpred94_Delphi())) {
                        s = 5;
                    }

                    input.seek(index68_2);
                    if (s >= 0) return s;
                    break;

                case 2:
                    int LA68_3 = input.LA(1);

                    int index68_3 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred93_Delphi())) {
                        s = 100;
                    } else if ((synpred94_Delphi())) {
                        s = 5;
                    }

                    input.seek(index68_3);
                    if (s >= 0) return s;
                    break;

                case 3:
                    int LA68_4 = input.LA(1);

                    int index68_4 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred94_Delphi())) {
                        s = 5;
                    } else if ((true)) {
                        s = 101;
                    }

                    input.seek(index68_4);
                    if (s >= 0) return s;
                    break;

                case 4:
                    int LA68_37 = input.LA(1);

                    int index68_37 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred93_Delphi())) {
                        s = 100;
                    } else if ((synpred94_Delphi())) {
                        s = 5;
                    }

                    input.seek(index68_37);
                    if (s >= 0) return s;
                    break;

                case 5:
                    int LA68_41 = input.LA(1);

                    int index68_41 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred93_Delphi())) {
                        s = 100;
                    } else if ((synpred94_Delphi())) {
                        s = 5;
                    }

                    input.seek(index68_41);
                    if (s >= 0) return s;
                    break;

                case 6:
                    int LA68_49 = input.LA(1);

                    int index68_49 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred93_Delphi())) {
                        s = 100;
                    } else if ((synpred94_Delphi())) {
                        s = 5;
                    }

                    input.seek(index68_49);
                    if (s >= 0) return s;
                    break;

                case 7:
                    int LA68_62 = input.LA(1);

                    int index68_62 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred93_Delphi())) {
                        s = 100;
                    } else if ((synpred94_Delphi())) {
                        s = 5;
                    }

                    input.seek(index68_62);
                    if (s >= 0) return s;
                    break;

                case 8:
                    int LA68_64 = input.LA(1);

                    int index68_64 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred93_Delphi())) {
                        s = 100;
                    } else if ((synpred94_Delphi())) {
                        s = 5;
                    }

                    input.seek(index68_64);
                    if (s >= 0) return s;
                    break;

                case 9:
                    int LA68_65 = input.LA(1);

                    int index68_65 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred93_Delphi())) {
                        s = 100;
                    } else if ((synpred94_Delphi())) {
                        s = 5;
                    }

                    input.seek(index68_65);
                    if (s >= 0) return s;
                    break;

                case 10:
                    int LA68_66 = input.LA(1);

                    int index68_66 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred93_Delphi())) {
                        s = 100;
                    } else if ((synpred94_Delphi())) {
                        s = 5;
                    }

                    input.seek(index68_66);
                    if (s >= 0) return s;
                    break;

                case 11:
                    int LA68_69 = input.LA(1);

                    int index68_69 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred93_Delphi())) {
                        s = 100;
                    } else if ((synpred94_Delphi())) {
                        s = 5;
                    }

                    input.seek(index68_69);
                    if (s >= 0) return s;
                    break;

                case 12:
                    int LA68_70 = input.LA(1);

                    int index68_70 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred93_Delphi())) {
                        s = 100;
                    } else if ((synpred94_Delphi())) {
                        s = 5;
                    }

                    input.seek(index68_70);
                    if (s >= 0) return s;
                    break;

                case 13:
                    int LA68_72 = input.LA(1);

                    int index68_72 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred93_Delphi())) {
                        s = 100;
                    } else if ((synpred94_Delphi())) {
                        s = 5;
                    }

                    input.seek(index68_72);
                    if (s >= 0) return s;
                    break;

                case 14:
                    int LA68_78 = input.LA(1);

                    int index68_78 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred93_Delphi())) {
                        s = 100;
                    } else if ((synpred94_Delphi())) {
                        s = 5;
                    }

                    input.seek(index68_78);
                    if (s >= 0) return s;
                    break;

                case 15:
                    int LA68_81 = input.LA(1);

                    int index68_81 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred93_Delphi())) {
                        s = 100;
                    } else if ((synpred94_Delphi())) {
                        s = 5;
                    }

                    input.seek(index68_81);
                    if (s >= 0) return s;
                    break;

                case 16:
                    int LA68_88 = input.LA(1);

                    int index68_88 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred93_Delphi())) {
                        s = 100;
                    } else if ((synpred94_Delphi())) {
                        s = 5;
                    }

                    input.seek(index68_88);
                    if (s >= 0) return s;
                    break;
            }
            if (state.backtracking > 0) {
                state.failed = true;
                return -1;
            }
            NoViableAltException nvae =
                    new NoViableAltException(getDescription(), 68, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    protected class DFA85 extends DFA {

        public DFA85(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 85;
            this.eot = DFA85_eot;
            this.eof = DFA85_eof;
            this.min = DFA85_min;
            this.max = DFA85_max;
            this.accept = DFA85_accept;
            this.special = DFA85_special;
            this.transition = DFA85_transition;
        }

        @Override
        public String getDescription() {
            return "280:40: ( classParent )?";
        }

        @Override
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream) _input;
            int _s = s;
            switch (s) {
                case 0:
                    int LA85_32 = input.LA(1);

                    int index85_32 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred119_Delphi())) {
                        s = 21;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index85_32);
                    if (s >= 0) return s;
                    break;

                case 1:
                    int LA85_34 = input.LA(1);

                    int index85_34 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred119_Delphi())) {
                        s = 21;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index85_34);
                    if (s >= 0) return s;
                    break;

                case 2:
                    int LA85_49 = input.LA(1);

                    int index85_49 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred119_Delphi())) {
                        s = 21;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index85_49);
                    if (s >= 0) return s;
                    break;

                case 3:
                    int LA85_90 = input.LA(1);

                    int index85_90 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred119_Delphi())) {
                        s = 21;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index85_90);
                    if (s >= 0) return s;
                    break;

                case 4:
                    int LA85_55 = input.LA(1);

                    int index85_55 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred119_Delphi())) {
                        s = 21;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index85_55);
                    if (s >= 0) return s;
                    break;

                case 5:
                    int LA85_83 = input.LA(1);

                    int index85_83 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred119_Delphi())) {
                        s = 21;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index85_83);
                    if (s >= 0) return s;
                    break;

                case 6:
                    int LA85_57 = input.LA(1);

                    int index85_57 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred119_Delphi())) {
                        s = 21;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index85_57);
                    if (s >= 0) return s;
                    break;

                case 7:
                    int LA85_82 = input.LA(1);

                    int index85_82 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred119_Delphi())) {
                        s = 21;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index85_82);
                    if (s >= 0) return s;
                    break;

                case 8:
                    int LA85_66 = input.LA(1);

                    int index85_66 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred119_Delphi())) {
                        s = 21;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index85_66);
                    if (s >= 0) return s;
                    break;

                case 9:
                    int LA85_67 = input.LA(1);

                    int index85_67 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred119_Delphi())) {
                        s = 21;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index85_67);
                    if (s >= 0) return s;
                    break;

                case 10:
                    int LA85_71 = input.LA(1);

                    int index85_71 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred119_Delphi())) {
                        s = 21;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index85_71);
                    if (s >= 0) return s;
                    break;

                case 11:
                    int LA85_87 = input.LA(1);

                    int index85_87 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred119_Delphi())) {
                        s = 21;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index85_87);
                    if (s >= 0) return s;
                    break;

                case 12:
                    int LA85_11 = input.LA(1);

                    int index85_11 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred119_Delphi())) {
                        s = 21;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index85_11);
                    if (s >= 0) return s;
                    break;

                case 13:
                    int LA85_9 = input.LA(1);

                    int index85_9 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred119_Delphi())) {
                        s = 21;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index85_9);
                    if (s >= 0) return s;
                    break;

                case 14:
                    int LA85_22 = input.LA(1);

                    int index85_22 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred119_Delphi())) {
                        s = 21;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index85_22);
                    if (s >= 0) return s;
                    break;

                case 15:
                    int LA85_23 = input.LA(1);

                    int index85_23 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred119_Delphi())) {
                        s = 21;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index85_23);
                    if (s >= 0) return s;
                    break;

                case 16:
                    int LA85_25 = input.LA(1);

                    int index85_25 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred119_Delphi())) {
                        s = 21;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index85_25);
                    if (s >= 0) return s;
                    break;

                case 17:
                    int LA85_35 = input.LA(1);

                    int index85_35 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred119_Delphi())) {
                        s = 21;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index85_35);
                    if (s >= 0) return s;
                    break;

                case 18:
                    int LA85_39 = input.LA(1);

                    int index85_39 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred119_Delphi())) {
                        s = 21;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index85_39);
                    if (s >= 0) return s;
                    break;

                case 19:
                    int LA85_62 = input.LA(1);

                    int index85_62 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred119_Delphi())) {
                        s = 21;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index85_62);
                    if (s >= 0) return s;
                    break;
            }
            if (state.backtracking > 0) {
                state.failed = true;
                return -1;
            }
            NoViableAltException nvae =
                    new NoViableAltException(getDescription(), 85, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    protected class DFA97 extends DFA {

        public DFA97(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 97;
            this.eot = DFA97_eot;
            this.eof = DFA97_eof;
            this.min = DFA97_min;
            this.max = DFA97_max;
            this.accept = DFA97_accept;
            this.special = DFA97_special;
            this.transition = DFA97_transition;
        }

        @Override
        public String getDescription() {
            return "304:45: ( classParent )?";
        }

        @Override
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream) _input;
            int _s = s;
            switch (s) {
                case 0:
                    int LA97_9 = input.LA(1);

                    int index97_9 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred139_Delphi())) {
                        s = 21;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index97_9);
                    if (s >= 0) return s;
                    break;

                case 1:
                    int LA97_11 = input.LA(1);

                    int index97_11 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred139_Delphi())) {
                        s = 21;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index97_11);
                    if (s >= 0) return s;
                    break;

                case 2:
                    int LA97_22 = input.LA(1);

                    int index97_22 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred139_Delphi())) {
                        s = 21;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index97_22);
                    if (s >= 0) return s;
                    break;

                case 3:
                    int LA97_23 = input.LA(1);

                    int index97_23 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred139_Delphi())) {
                        s = 21;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index97_23);
                    if (s >= 0) return s;
                    break;

                case 4:
                    int LA97_25 = input.LA(1);

                    int index97_25 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred139_Delphi())) {
                        s = 21;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index97_25);
                    if (s >= 0) return s;
                    break;

                case 5:
                    int LA97_35 = input.LA(1);

                    int index97_35 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred139_Delphi())) {
                        s = 21;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index97_35);
                    if (s >= 0) return s;
                    break;

                case 6:
                    int LA97_39 = input.LA(1);

                    int index97_39 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred139_Delphi())) {
                        s = 21;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index97_39);
                    if (s >= 0) return s;
                    break;

                case 7:
                    int LA97_62 = input.LA(1);

                    int index97_62 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred139_Delphi())) {
                        s = 21;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index97_62);
                    if (s >= 0) return s;
                    break;

                case 8:
                    int LA97_57 = input.LA(1);

                    int index97_57 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred139_Delphi())) {
                        s = 21;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index97_57);
                    if (s >= 0) return s;
                    break;

                case 9:
                    int LA97_34 = input.LA(1);

                    int index97_34 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred139_Delphi())) {
                        s = 21;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index97_34);
                    if (s >= 0) return s;
                    break;

                case 10:
                    int LA97_32 = input.LA(1);

                    int index97_32 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred139_Delphi())) {
                        s = 21;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index97_32);
                    if (s >= 0) return s;
                    break;

                case 11:
                    int LA97_49 = input.LA(1);

                    int index97_49 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred139_Delphi())) {
                        s = 21;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index97_49);
                    if (s >= 0) return s;
                    break;

                case 12:
                    int LA97_90 = input.LA(1);

                    int index97_90 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred139_Delphi())) {
                        s = 21;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index97_90);
                    if (s >= 0) return s;
                    break;

                case 13:
                    int LA97_87 = input.LA(1);

                    int index97_87 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred139_Delphi())) {
                        s = 21;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index97_87);
                    if (s >= 0) return s;
                    break;

                case 14:
                    int LA97_55 = input.LA(1);

                    int index97_55 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred139_Delphi())) {
                        s = 21;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index97_55);
                    if (s >= 0) return s;
                    break;

                case 15:
                    int LA97_66 = input.LA(1);

                    int index97_66 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred139_Delphi())) {
                        s = 21;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index97_66);
                    if (s >= 0) return s;
                    break;

                case 16:
                    int LA97_67 = input.LA(1);

                    int index97_67 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred139_Delphi())) {
                        s = 21;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index97_67);
                    if (s >= 0) return s;
                    break;

                case 17:
                    int LA97_71 = input.LA(1);

                    int index97_71 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred139_Delphi())) {
                        s = 21;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index97_71);
                    if (s >= 0) return s;
                    break;

                case 18:
                    int LA97_82 = input.LA(1);

                    int index97_82 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred139_Delphi())) {
                        s = 21;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index97_82);
                    if (s >= 0) return s;
                    break;

                case 19:
                    int LA97_83 = input.LA(1);

                    int index97_83 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred139_Delphi())) {
                        s = 21;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index97_83);
                    if (s >= 0) return s;
                    break;
            }
            if (state.backtracking > 0) {
                state.failed = true;
                return -1;
            }
            NoViableAltException nvae =
                    new NoViableAltException(getDescription(), 97, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    protected class DFA105 extends DFA {

        public DFA105(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 105;
            this.eot = DFA105_eot;
            this.eof = DFA105_eof;
            this.min = DFA105_min;
            this.max = DFA105_max;
            this.accept = DFA105_accept;
            this.special = DFA105_special;
            this.transition = DFA105_transition;
        }

        @Override
        public String getDescription() {
            return "()* loopback of 324:41: ( recordField )*";
        }

        @Override
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream) _input;
            int _s = s;
            switch (s) {
                case 0:
                    int LA105_8 = input.LA(1);

                    int index105_8 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred148_Delphi())) {
                        s = 16;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index105_8);
                    if (s >= 0) return s;
                    break;

                case 1:
                    int LA105_9 = input.LA(1);

                    int index105_9 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred148_Delphi())) {
                        s = 16;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index105_9);
                    if (s >= 0) return s;
                    break;

                case 2:
                    int LA105_10 = input.LA(1);

                    int index105_10 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred148_Delphi())) {
                        s = 16;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index105_10);
                    if (s >= 0) return s;
                    break;

                case 3:
                    int LA105_12 = input.LA(1);

                    int index105_12 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred148_Delphi())) {
                        s = 16;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index105_12);
                    if (s >= 0) return s;
                    break;

                case 4:
                    int LA105_17 = input.LA(1);

                    int index105_17 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred148_Delphi())) {
                        s = 16;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index105_17);
                    if (s >= 0) return s;
                    break;

                case 5:
                    int LA105_18 = input.LA(1);

                    int index105_18 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred148_Delphi())) {
                        s = 16;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index105_18);
                    if (s >= 0) return s;
                    break;

                case 6:
                    int LA105_20 = input.LA(1);

                    int index105_20 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred148_Delphi())) {
                        s = 16;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index105_20);
                    if (s >= 0) return s;
                    break;

                case 7:
                    int LA105_21 = input.LA(1);

                    int index105_21 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred148_Delphi())) {
                        s = 16;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index105_21);
                    if (s >= 0) return s;
                    break;
            }
            if (state.backtracking > 0) {
                state.failed = true;
                return -1;
            }
            NoViableAltException nvae =
                    new NoViableAltException(getDescription(), 105, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    protected class DFA159 extends DFA {

        public DFA159(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 159;
            this.eot = DFA159_eot;
            this.eof = DFA159_eof;
            this.min = DFA159_min;
            this.max = DFA159_max;
            this.accept = DFA159_accept;
            this.special = DFA159_special;
            this.transition = DFA159_transition;
        }

        @Override
        public String getDescription() {
            return "()* loopback of 403:112: ( functionDirective )*";
        }

        @Override
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream) _input;
            int _s = s;
            switch (s) {
                case 0:
                    int LA159_33 = input.LA(1);

                    int index159_33 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred221_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index159_33);
                    if (s >= 0) return s;
                    break;

                case 1:
                    int LA159_34 = input.LA(1);

                    int index159_34 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred221_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index159_34);
                    if (s >= 0) return s;
                    break;

                case 2:
                    int LA159_35 = input.LA(1);

                    int index159_35 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred221_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index159_35);
                    if (s >= 0) return s;
                    break;

                case 3:
                    int LA159_36 = input.LA(1);

                    int index159_36 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred221_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index159_36);
                    if (s >= 0) return s;
                    break;

                case 4:
                    int LA159_37 = input.LA(1);

                    int index159_37 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred221_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index159_37);
                    if (s >= 0) return s;
                    break;

                case 5:
                    int LA159_38 = input.LA(1);

                    int index159_38 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred221_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index159_38);
                    if (s >= 0) return s;
                    break;

                case 6:
                    int LA159_39 = input.LA(1);

                    int index159_39 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred221_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index159_39);
                    if (s >= 0) return s;
                    break;

                case 7:
                    int LA159_40 = input.LA(1);

                    int index159_40 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred221_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index159_40);
                    if (s >= 0) return s;
                    break;

                case 8:
                    int LA159_41 = input.LA(1);

                    int index159_41 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred221_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index159_41);
                    if (s >= 0) return s;
                    break;

                case 9:
                    int LA159_42 = input.LA(1);

                    int index159_42 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred221_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index159_42);
                    if (s >= 0) return s;
                    break;

                case 10:
                    int LA159_43 = input.LA(1);

                    int index159_43 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred221_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index159_43);
                    if (s >= 0) return s;
                    break;

                case 11:
                    int LA159_44 = input.LA(1);

                    int index159_44 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred221_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index159_44);
                    if (s >= 0) return s;
                    break;

                case 12:
                    int LA159_45 = input.LA(1);

                    int index159_45 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred221_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index159_45);
                    if (s >= 0) return s;
                    break;

                case 13:
                    int LA159_46 = input.LA(1);

                    int index159_46 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred221_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index159_46);
                    if (s >= 0) return s;
                    break;

                case 14:
                    int LA159_47 = input.LA(1);

                    int index159_47 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred221_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index159_47);
                    if (s >= 0) return s;
                    break;

                case 15:
                    int LA159_48 = input.LA(1);

                    int index159_48 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred221_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index159_48);
                    if (s >= 0) return s;
                    break;

                case 16:
                    int LA159_49 = input.LA(1);

                    int index159_49 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred221_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index159_49);
                    if (s >= 0) return s;
                    break;

                case 17:
                    int LA159_50 = input.LA(1);

                    int index159_50 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred221_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index159_50);
                    if (s >= 0) return s;
                    break;

                case 18:
                    int LA159_51 = input.LA(1);

                    int index159_51 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred221_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index159_51);
                    if (s >= 0) return s;
                    break;
            }
            if (state.backtracking > 0) {
                state.failed = true;
                return -1;
            }
            NoViableAltException nvae =
                    new NoViableAltException(getDescription(), 159, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    protected class DFA161 extends DFA {

        public DFA161(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 161;
            this.eot = DFA161_eot;
            this.eof = DFA161_eof;
            this.min = DFA161_min;
            this.max = DFA161_max;
            this.accept = DFA161_accept;
            this.special = DFA161_special;
            this.transition = DFA161_transition;
        }

        @Override
        public String getDescription() {
            return "()* loopback of 404:79: ( functionDirective )*";
        }

        @Override
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream) _input;
            int _s = s;
            switch (s) {
                case 0:
                    int LA161_33 = input.LA(1);

                    int index161_33 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred224_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index161_33);
                    if (s >= 0) return s;
                    break;

                case 1:
                    int LA161_34 = input.LA(1);

                    int index161_34 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred224_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index161_34);
                    if (s >= 0) return s;
                    break;

                case 2:
                    int LA161_35 = input.LA(1);

                    int index161_35 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred224_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index161_35);
                    if (s >= 0) return s;
                    break;

                case 3:
                    int LA161_36 = input.LA(1);

                    int index161_36 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred224_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index161_36);
                    if (s >= 0) return s;
                    break;

                case 4:
                    int LA161_37 = input.LA(1);

                    int index161_37 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred224_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index161_37);
                    if (s >= 0) return s;
                    break;

                case 5:
                    int LA161_38 = input.LA(1);

                    int index161_38 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred224_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index161_38);
                    if (s >= 0) return s;
                    break;

                case 6:
                    int LA161_39 = input.LA(1);

                    int index161_39 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred224_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index161_39);
                    if (s >= 0) return s;
                    break;

                case 7:
                    int LA161_40 = input.LA(1);

                    int index161_40 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred224_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index161_40);
                    if (s >= 0) return s;
                    break;

                case 8:
                    int LA161_41 = input.LA(1);

                    int index161_41 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred224_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index161_41);
                    if (s >= 0) return s;
                    break;

                case 9:
                    int LA161_42 = input.LA(1);

                    int index161_42 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred224_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index161_42);
                    if (s >= 0) return s;
                    break;

                case 10:
                    int LA161_43 = input.LA(1);

                    int index161_43 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred224_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index161_43);
                    if (s >= 0) return s;
                    break;

                case 11:
                    int LA161_44 = input.LA(1);

                    int index161_44 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred224_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index161_44);
                    if (s >= 0) return s;
                    break;

                case 12:
                    int LA161_45 = input.LA(1);

                    int index161_45 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred224_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index161_45);
                    if (s >= 0) return s;
                    break;

                case 13:
                    int LA161_46 = input.LA(1);

                    int index161_46 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred224_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index161_46);
                    if (s >= 0) return s;
                    break;

                case 14:
                    int LA161_47 = input.LA(1);

                    int index161_47 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred224_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index161_47);
                    if (s >= 0) return s;
                    break;

                case 15:
                    int LA161_48 = input.LA(1);

                    int index161_48 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred224_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index161_48);
                    if (s >= 0) return s;
                    break;

                case 16:
                    int LA161_49 = input.LA(1);

                    int index161_49 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred224_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index161_49);
                    if (s >= 0) return s;
                    break;

                case 17:
                    int LA161_50 = input.LA(1);

                    int index161_50 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred224_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index161_50);
                    if (s >= 0) return s;
                    break;

                case 18:
                    int LA161_51 = input.LA(1);

                    int index161_51 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred224_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index161_51);
                    if (s >= 0) return s;
                    break;
            }
            if (state.backtracking > 0) {
                state.failed = true;
                return -1;
            }
            NoViableAltException nvae =
                    new NoViableAltException(getDescription(), 161, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    protected class DFA163 extends DFA {

        public DFA163(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 163;
            this.eot = DFA163_eot;
            this.eof = DFA163_eof;
            this.min = DFA163_min;
            this.max = DFA163_max;
            this.accept = DFA163_accept;
            this.special = DFA163_special;
            this.transition = DFA163_transition;
        }

        @Override
        public String getDescription() {
            return "()* loopback of 406:54: ( methodDirective )*";
        }

        @Override
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream) _input;
            int _s = s;
            switch (s) {
                case 0:
                    int LA163_28 = input.LA(1);

                    int index163_28 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred225_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index163_28);
                    if (s >= 0) return s;
                    break;

                case 1:
                    int LA163_33 = input.LA(1);

                    int index163_33 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred225_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index163_33);
                    if (s >= 0) return s;
                    break;

                case 2:
                    int LA163_34 = input.LA(1);

                    int index163_34 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred225_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index163_34);
                    if (s >= 0) return s;
                    break;

                case 3:
                    int LA163_35 = input.LA(1);

                    int index163_35 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred225_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index163_35);
                    if (s >= 0) return s;
                    break;

                case 4:
                    int LA163_36 = input.LA(1);

                    int index163_36 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred225_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index163_36);
                    if (s >= 0) return s;
                    break;

                case 5:
                    int LA163_37 = input.LA(1);

                    int index163_37 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred225_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index163_37);
                    if (s >= 0) return s;
                    break;

                case 6:
                    int LA163_38 = input.LA(1);

                    int index163_38 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred225_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index163_38);
                    if (s >= 0) return s;
                    break;

                case 7:
                    int LA163_39 = input.LA(1);

                    int index163_39 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred225_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index163_39);
                    if (s >= 0) return s;
                    break;

                case 8:
                    int LA163_40 = input.LA(1);

                    int index163_40 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred225_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index163_40);
                    if (s >= 0) return s;
                    break;

                case 9:
                    int LA163_41 = input.LA(1);

                    int index163_41 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred225_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index163_41);
                    if (s >= 0) return s;
                    break;

                case 10:
                    int LA163_42 = input.LA(1);

                    int index163_42 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred225_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index163_42);
                    if (s >= 0) return s;
                    break;

                case 11:
                    int LA163_43 = input.LA(1);

                    int index163_43 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred225_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index163_43);
                    if (s >= 0) return s;
                    break;

                case 12:
                    int LA163_44 = input.LA(1);

                    int index163_44 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred225_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index163_44);
                    if (s >= 0) return s;
                    break;

                case 13:
                    int LA163_45 = input.LA(1);

                    int index163_45 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred225_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index163_45);
                    if (s >= 0) return s;
                    break;

                case 14:
                    int LA163_46 = input.LA(1);

                    int index163_46 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred225_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index163_46);
                    if (s >= 0) return s;
                    break;

                case 15:
                    int LA163_47 = input.LA(1);

                    int index163_47 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred225_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index163_47);
                    if (s >= 0) return s;
                    break;

                case 16:
                    int LA163_48 = input.LA(1);

                    int index163_48 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred225_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index163_48);
                    if (s >= 0) return s;
                    break;

                case 17:
                    int LA163_97 = input.LA(1);

                    int index163_97 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred225_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index163_97);
                    if (s >= 0) return s;
                    break;

                case 18:
                    int LA163_101 = input.LA(1);

                    int index163_101 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred225_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index163_101);
                    if (s >= 0) return s;
                    break;
            }
            if (state.backtracking > 0) {
                state.failed = true;
                return -1;
            }
            NoViableAltException nvae =
                    new NoViableAltException(getDescription(), 163, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    protected class DFA180 extends DFA {

        public DFA180(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 180;
            this.eot = DFA180_eot;
            this.eof = DFA180_eof;
            this.min = DFA180_min;
            this.max = DFA180_max;
            this.accept = DFA180_accept;
            this.special = DFA180_special;
            this.transition = DFA180_transition;
        }

        @Override
        public String getDescription() {
            return "419:59: ( '.' ident ( genericDefinition )? )?";
        }
    }

    protected class DFA182 extends DFA {

        public DFA182(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 182;
            this.eot = DFA182_eot;
            this.eof = DFA182_eof;
            this.min = DFA182_min;
            this.max = DFA182_max;
            this.accept = DFA182_accept;
            this.special = DFA182_special;
            this.transition = DFA182_transition;
        }

        @Override
        public String getDescription() {
            return "()* loopback of 421:52: ( functionDirective )*";
        }

        @Override
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream) _input;
            int _s = s;
            switch (s) {
                case 0:
                    int LA182_2 = input.LA(1);

                    int index182_2 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred247_Delphi())) {
                        s = 101;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index182_2);
                    if (s >= 0) return s;
                    break;

                case 1:
                    int LA182_35 = input.LA(1);

                    int index182_35 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred247_Delphi())) {
                        s = 101;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index182_35);
                    if (s >= 0) return s;
                    break;

                case 2:
                    int LA182_36 = input.LA(1);

                    int index182_36 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred247_Delphi())) {
                        s = 101;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index182_36);
                    if (s >= 0) return s;
                    break;

                case 3:
                    int LA182_37 = input.LA(1);

                    int index182_37 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred247_Delphi())) {
                        s = 101;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index182_37);
                    if (s >= 0) return s;
                    break;

                case 4:
                    int LA182_38 = input.LA(1);

                    int index182_38 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred247_Delphi())) {
                        s = 101;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index182_38);
                    if (s >= 0) return s;
                    break;

                case 5:
                    int LA182_39 = input.LA(1);

                    int index182_39 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred247_Delphi())) {
                        s = 101;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index182_39);
                    if (s >= 0) return s;
                    break;

                case 6:
                    int LA182_40 = input.LA(1);

                    int index182_40 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred247_Delphi())) {
                        s = 101;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index182_40);
                    if (s >= 0) return s;
                    break;

                case 7:
                    int LA182_41 = input.LA(1);

                    int index182_41 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred247_Delphi())) {
                        s = 101;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index182_41);
                    if (s >= 0) return s;
                    break;

                case 8:
                    int LA182_42 = input.LA(1);

                    int index182_42 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred247_Delphi())) {
                        s = 101;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index182_42);
                    if (s >= 0) return s;
                    break;

                case 9:
                    int LA182_43 = input.LA(1);

                    int index182_43 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred247_Delphi())) {
                        s = 101;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index182_43);
                    if (s >= 0) return s;
                    break;

                case 10:
                    int LA182_44 = input.LA(1);

                    int index182_44 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred247_Delphi())) {
                        s = 101;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index182_44);
                    if (s >= 0) return s;
                    break;

                case 11:
                    int LA182_45 = input.LA(1);

                    int index182_45 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred247_Delphi())) {
                        s = 101;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index182_45);
                    if (s >= 0) return s;
                    break;

                case 12:
                    int LA182_46 = input.LA(1);

                    int index182_46 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred247_Delphi())) {
                        s = 101;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index182_46);
                    if (s >= 0) return s;
                    break;

                case 13:
                    int LA182_47 = input.LA(1);

                    int index182_47 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred247_Delphi())) {
                        s = 101;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index182_47);
                    if (s >= 0) return s;
                    break;

                case 14:
                    int LA182_48 = input.LA(1);

                    int index182_48 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred247_Delphi())) {
                        s = 101;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index182_48);
                    if (s >= 0) return s;
                    break;

                case 15:
                    int LA182_49 = input.LA(1);

                    int index182_49 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred247_Delphi())) {
                        s = 101;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index182_49);
                    if (s >= 0) return s;
                    break;

                case 16:
                    int LA182_50 = input.LA(1);

                    int index182_50 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred247_Delphi())) {
                        s = 101;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index182_50);
                    if (s >= 0) return s;
                    break;

                case 17:
                    int LA182_51 = input.LA(1);

                    int index182_51 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred247_Delphi())) {
                        s = 101;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index182_51);
                    if (s >= 0) return s;
                    break;

                case 18:
                    int LA182_52 = input.LA(1);

                    int index182_52 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred247_Delphi())) {
                        s = 101;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index182_52);
                    if (s >= 0) return s;
                    break;
            }
            if (state.backtracking > 0) {
                state.failed = true;
                return -1;
            }
            NoViableAltException nvae =
                    new NoViableAltException(getDescription(), 182, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    protected class DFA195 extends DFA {

        public DFA195(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 195;
            this.eot = DFA195_eot;
            this.eof = DFA195_eof;
            this.min = DFA195_min;
            this.max = DFA195_max;
            this.accept = DFA195_accept;
            this.special = DFA195_special;
            this.transition = DFA195_transition;
        }

        @Override
        public String getDescription() {
            return "()* loopback of 441:46: ( functionDirective )*";
        }

        @Override
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream) _input;
            int _s = s;
            switch (s) {
                case 0:
                    int LA195_33 = input.LA(1);

                    int index195_33 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred262_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index195_33);
                    if (s >= 0) return s;
                    break;

                case 1:
                    int LA195_34 = input.LA(1);

                    int index195_34 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred262_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index195_34);
                    if (s >= 0) return s;
                    break;

                case 2:
                    int LA195_35 = input.LA(1);

                    int index195_35 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred262_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index195_35);
                    if (s >= 0) return s;
                    break;

                case 3:
                    int LA195_36 = input.LA(1);

                    int index195_36 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred262_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index195_36);
                    if (s >= 0) return s;
                    break;

                case 4:
                    int LA195_37 = input.LA(1);

                    int index195_37 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred262_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index195_37);
                    if (s >= 0) return s;
                    break;

                case 5:
                    int LA195_38 = input.LA(1);

                    int index195_38 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred262_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index195_38);
                    if (s >= 0) return s;
                    break;

                case 6:
                    int LA195_39 = input.LA(1);

                    int index195_39 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred262_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index195_39);
                    if (s >= 0) return s;
                    break;

                case 7:
                    int LA195_40 = input.LA(1);

                    int index195_40 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred262_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index195_40);
                    if (s >= 0) return s;
                    break;

                case 8:
                    int LA195_41 = input.LA(1);

                    int index195_41 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred262_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index195_41);
                    if (s >= 0) return s;
                    break;

                case 9:
                    int LA195_42 = input.LA(1);

                    int index195_42 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred262_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index195_42);
                    if (s >= 0) return s;
                    break;

                case 10:
                    int LA195_43 = input.LA(1);

                    int index195_43 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred262_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index195_43);
                    if (s >= 0) return s;
                    break;

                case 11:
                    int LA195_44 = input.LA(1);

                    int index195_44 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred262_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index195_44);
                    if (s >= 0) return s;
                    break;

                case 12:
                    int LA195_45 = input.LA(1);

                    int index195_45 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred262_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index195_45);
                    if (s >= 0) return s;
                    break;

                case 13:
                    int LA195_46 = input.LA(1);

                    int index195_46 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred262_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index195_46);
                    if (s >= 0) return s;
                    break;

                case 14:
                    int LA195_47 = input.LA(1);

                    int index195_47 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred262_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index195_47);
                    if (s >= 0) return s;
                    break;

                case 15:
                    int LA195_48 = input.LA(1);

                    int index195_48 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred262_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index195_48);
                    if (s >= 0) return s;
                    break;

                case 16:
                    int LA195_49 = input.LA(1);

                    int index195_49 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred262_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index195_49);
                    if (s >= 0) return s;
                    break;

                case 17:
                    int LA195_50 = input.LA(1);

                    int index195_50 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred262_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index195_50);
                    if (s >= 0) return s;
                    break;

                case 18:
                    int LA195_51 = input.LA(1);

                    int index195_51 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred262_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index195_51);
                    if (s >= 0) return s;
                    break;
            }
            if (state.backtracking > 0) {
                state.failed = true;
                return -1;
            }
            NoViableAltException nvae =
                    new NoViableAltException(getDescription(), 195, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    protected class DFA205 extends DFA {

        public DFA205(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 205;
            this.eot = DFA205_eot;
            this.eof = DFA205_eof;
            this.min = DFA205_min;
            this.max = DFA205_max;
            this.accept = DFA205_accept;
            this.special = DFA205_special;
            this.transition = DFA205_transition;
        }

        @Override
        public String getDescription() {
            return "461:44: ( formalParameterSection )?";
        }

        @Override
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream) _input;
            int _s = s;
            switch (s) {
                case 0:
                    int LA205_1 = input.LA(1);

                    int index205_1 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred274_Delphi())) {
                        s = 100;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index205_1);
                    if (s >= 0) return s;
                    break;
            }
            if (state.backtracking > 0) {
                state.failed = true;
                return -1;
            }
            NoViableAltException nvae =
                    new NoViableAltException(getDescription(), 205, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    protected class DFA211 extends DFA {

        public DFA211(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 211;
            this.eot = DFA211_eot;
            this.eof = DFA211_eof;
            this.min = DFA211_min;
            this.max = DFA211_max;
            this.accept = DFA211_accept;
            this.special = DFA211_special;
            this.transition = DFA211_transition;
        }

        @Override
        public String getDescription() {
            return "466:1: factor : ( '@' factor | '@@' factor | 'not' factor | '+' factor | '-' factor | '^' ident | intNum | realNum | TkAsmHexNum | 'true' | 'false' | 'nil' | '(' expression ')' ( '^' )? ( '.' expression )? | stringFactor | setSection | designator | typeId '(' expression ')' );";
        }

        @Override
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream) _input;
            int _s = s;
            switch (s) {
                case 0:
                    int LA211_1 = input.LA(1);

                    int index211_1 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred278_Delphi())) {
                        s = 100;
                    } else if ((synpred295_Delphi())) {
                        s = 17;
                    }

                    input.seek(index211_1);
                    if (s >= 0) return s;
                    break;

                case 1:
                    int LA211_2 = input.LA(1);

                    int index211_2 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred279_Delphi())) {
                        s = 101;
                    } else if ((synpred295_Delphi())) {
                        s = 17;
                    }

                    input.seek(index211_2);
                    if (s >= 0) return s;
                    break;

                case 2:
                    int LA211_3 = input.LA(1);

                    int index211_3 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred280_Delphi())) {
                        s = 102;
                    } else if ((synpred295_Delphi())) {
                        s = 17;
                    }

                    input.seek(index211_3);
                    if (s >= 0) return s;
                    break;

                case 3:
                    int LA211_4 = input.LA(1);

                    int index211_4 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred281_Delphi())) {
                        s = 103;
                    } else if ((synpred295_Delphi())) {
                        s = 17;
                    }

                    input.seek(index211_4);
                    if (s >= 0) return s;
                    break;

                case 4:
                    int LA211_5 = input.LA(1);

                    int index211_5 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred282_Delphi())) {
                        s = 104;
                    } else if ((synpred295_Delphi())) {
                        s = 17;
                    }

                    input.seek(index211_5);
                    if (s >= 0) return s;
                    break;

                case 5:
                    int LA211_6 = input.LA(1);

                    int index211_6 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred283_Delphi())) {
                        s = 105;
                    } else if ((synpred295_Delphi())) {
                        s = 17;
                    }

                    input.seek(index211_6);
                    if (s >= 0) return s;
                    break;

                case 6:
                    int LA211_7 = input.LA(1);

                    int index211_7 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred284_Delphi())) {
                        s = 106;
                    } else if ((synpred295_Delphi())) {
                        s = 17;
                    }

                    input.seek(index211_7);
                    if (s >= 0) return s;
                    break;

                case 7:
                    int LA211_8 = input.LA(1);

                    int index211_8 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred285_Delphi())) {
                        s = 107;
                    } else if ((synpred295_Delphi())) {
                        s = 17;
                    }

                    input.seek(index211_8);
                    if (s >= 0) return s;
                    break;

                case 8:
                    int LA211_9 = input.LA(1);

                    int index211_9 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred286_Delphi())) {
                        s = 108;
                    } else if ((synpred295_Delphi())) {
                        s = 17;
                    }

                    input.seek(index211_9);
                    if (s >= 0) return s;
                    break;

                case 9:
                    int LA211_10 = input.LA(1);

                    int index211_10 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred287_Delphi())) {
                        s = 109;
                    } else if ((synpred295_Delphi())) {
                        s = 17;
                    }

                    input.seek(index211_10);
                    if (s >= 0) return s;
                    break;

                case 10:
                    int LA211_11 = input.LA(1);

                    int index211_11 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred288_Delphi())) {
                        s = 110;
                    } else if ((synpred295_Delphi())) {
                        s = 17;
                    }

                    input.seek(index211_11);
                    if (s >= 0) return s;
                    break;

                case 11:
                    int LA211_12 = input.LA(1);

                    int index211_12 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred289_Delphi())) {
                        s = 111;
                    } else if ((synpred295_Delphi())) {
                        s = 17;
                    }

                    input.seek(index211_12);
                    if (s >= 0) return s;
                    break;

                case 12:
                    int LA211_13 = input.LA(1);

                    int index211_13 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred292_Delphi())) {
                        s = 112;
                    } else if ((synpred295_Delphi())) {
                        s = 17;
                    }

                    input.seek(index211_13);
                    if (s >= 0) return s;
                    break;

                case 13:
                    int LA211_14 = input.LA(1);

                    int index211_14 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred293_Delphi())) {
                        s = 113;
                    } else if ((synpred295_Delphi())) {
                        s = 17;
                    }

                    input.seek(index211_14);
                    if (s >= 0) return s;
                    break;

                case 14:
                    int LA211_15 = input.LA(1);

                    int index211_15 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred293_Delphi())) {
                        s = 113;
                    } else if ((synpred295_Delphi())) {
                        s = 17;
                    }

                    input.seek(index211_15);
                    if (s >= 0) return s;
                    break;

                case 15:
                    int LA211_16 = input.LA(1);

                    int index211_16 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred294_Delphi())) {
                        s = 114;
                    } else if ((synpred295_Delphi())) {
                        s = 17;
                    }

                    input.seek(index211_16);
                    if (s >= 0) return s;
                    break;

                case 16:
                    int LA211_18 = input.LA(1);

                    int index211_18 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred295_Delphi())) {
                        s = 17;
                    } else if ((true)) {
                        s = 115;
                    }

                    input.seek(index211_18);
                    if (s >= 0) return s;
                    break;

                case 17:
                    int LA211_19 = input.LA(1);

                    int index211_19 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred295_Delphi())) {
                        s = 17;
                    } else if ((true)) {
                        s = 115;
                    }

                    input.seek(index211_19);
                    if (s >= 0) return s;
                    break;

                case 18:
                    int LA211_20 = input.LA(1);

                    int index211_20 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred295_Delphi())) {
                        s = 17;
                    } else if ((true)) {
                        s = 115;
                    }

                    input.seek(index211_20);
                    if (s >= 0) return s;
                    break;

                case 19:
                    int LA211_26 = input.LA(1);

                    int index211_26 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred295_Delphi())) {
                        s = 17;
                    } else if ((true)) {
                        s = 115;
                    }

                    input.seek(index211_26);
                    if (s >= 0) return s;
                    break;

                case 20:
                    int LA211_34 = input.LA(1);

                    int index211_34 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred295_Delphi())) {
                        s = 17;
                    } else if ((true)) {
                        s = 115;
                    }

                    input.seek(index211_34);
                    if (s >= 0) return s;
                    break;

                case 21:
                    int LA211_35 = input.LA(1);

                    int index211_35 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred295_Delphi())) {
                        s = 17;
                    } else if ((true)) {
                        s = 115;
                    }

                    input.seek(index211_35);
                    if (s >= 0) return s;
                    break;

                case 22:
                    int LA211_36 = input.LA(1);

                    int index211_36 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred295_Delphi())) {
                        s = 17;
                    } else if ((true)) {
                        s = 115;
                    }

                    input.seek(index211_36);
                    if (s >= 0) return s;
                    break;

                case 23:
                    int LA211_39 = input.LA(1);

                    int index211_39 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred295_Delphi())) {
                        s = 17;
                    } else if ((true)) {
                        s = 115;
                    }

                    input.seek(index211_39);
                    if (s >= 0) return s;
                    break;

                case 24:
                    int LA211_40 = input.LA(1);

                    int index211_40 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred295_Delphi())) {
                        s = 17;
                    } else if ((true)) {
                        s = 115;
                    }

                    input.seek(index211_40);
                    if (s >= 0) return s;
                    break;

                case 25:
                    int LA211_42 = input.LA(1);

                    int index211_42 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred295_Delphi())) {
                        s = 17;
                    } else if ((true)) {
                        s = 115;
                    }

                    input.seek(index211_42);
                    if (s >= 0) return s;
                    break;

                case 26:
                    int LA211_48 = input.LA(1);

                    int index211_48 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred295_Delphi())) {
                        s = 17;
                    } else if ((true)) {
                        s = 115;
                    }

                    input.seek(index211_48);
                    if (s >= 0) return s;
                    break;

                case 27:
                    int LA211_51 = input.LA(1);

                    int index211_51 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred295_Delphi())) {
                        s = 17;
                    } else if ((true)) {
                        s = 115;
                    }

                    input.seek(index211_51);
                    if (s >= 0) return s;
                    break;

                case 28:
                    int LA211_53 = input.LA(1);

                    int index211_53 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred295_Delphi())) {
                        s = 17;
                    } else if ((true)) {
                        s = 115;
                    }

                    input.seek(index211_53);
                    if (s >= 0) return s;
                    break;

                case 29:
                    int LA211_76 = input.LA(1);

                    int index211_76 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred295_Delphi())) {
                        s = 17;
                    } else if ((true)) {
                        s = 115;
                    }

                    input.seek(index211_76);
                    if (s >= 0) return s;
                    break;

                case 30:
                    int LA211_91 = input.LA(1);

                    int index211_91 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred295_Delphi())) {
                        s = 17;
                    } else if ((true)) {
                        s = 115;
                    }

                    input.seek(index211_91);
                    if (s >= 0) return s;
                    break;

                case 31:
                    int LA211_97 = input.LA(1);

                    int index211_97 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred295_Delphi())) {
                        s = 17;
                    } else if ((true)) {
                        s = 115;
                    }

                    input.seek(index211_97);
                    if (s >= 0) return s;
                    break;
            }
            if (state.backtracking > 0) {
                state.failed = true;
                return -1;
            }
            NoViableAltException nvae =
                    new NoViableAltException(getDescription(), 211, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    protected class DFA222 extends DFA {

        public DFA222(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 222;
            this.eot = DFA222_eot;
            this.eof = DFA222_eof;
            this.min = DFA222_min;
            this.max = DFA222_max;
            this.accept = DFA222_accept;
            this.special = DFA222_special;
            this.transition = DFA222_transition;
        }

        @Override
        public String getDescription() {
            return "()* loopback of 490:88: ( designatorItem )*";
        }

        @Override
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream) _input;
            int _s = s;
            switch (s) {
                case 0:
                    int LA222_3 = input.LA(1);

                    int index222_3 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred307_Delphi())) {
                        s = 104;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index222_3);
                    if (s >= 0) return s;
                    break;

                case 1:
                    int LA222_49 = input.LA(1);

                    int index222_49 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred307_Delphi())) {
                        s = 104;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index222_49);
                    if (s >= 0) return s;
                    break;

                case 2:
                    int LA222_54 = input.LA(1);

                    int index222_54 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred307_Delphi())) {
                        s = 104;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index222_54);
                    if (s >= 0) return s;
                    break;

                case 3:
                    int LA222_61 = input.LA(1);

                    int index222_61 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred307_Delphi())) {
                        s = 104;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index222_61);
                    if (s >= 0) return s;
                    break;

                case 4:
                    int LA222_66 = input.LA(1);

                    int index222_66 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred307_Delphi())) {
                        s = 104;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index222_66);
                    if (s >= 0) return s;
                    break;

                case 5:
                    int LA222_73 = input.LA(1);

                    int index222_73 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred307_Delphi())) {
                        s = 104;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index222_73);
                    if (s >= 0) return s;
                    break;
            }
            if (state.backtracking > 0) {
                state.failed = true;
                return -1;
            }
            NoViableAltException nvae =
                    new NoViableAltException(getDescription(), 222, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    protected class DFA252 extends DFA {

        public DFA252(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 252;
            this.eot = DFA252_eot;
            this.eof = DFA252_eof;
            this.min = DFA252_min;
            this.max = DFA252_max;
            this.accept = DFA252_accept;
            this.special = DFA252_special;
            this.transition = DFA252_transition;
        }

        @Override
        public String getDescription() {
            return "579:1: constExpression : ( '(' recordConstExpression ( ';' recordConstExpression )* ')' | '(' constExpression ( ',' constExpression )* ')' | expression );";
        }

        @Override
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream) _input;
            int _s = s;
            switch (s) {
                case 0:
                    int LA252_1 = input.LA(1);

                    int index252_1 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred372_Delphi())) {
                        s = 100;
                    } else if ((synpred374_Delphi())) {
                        s = 101;
                    } else if ((true)) {
                        s = 2;
                    }

                    input.seek(index252_1);
                    if (s >= 0) return s;
                    break;
            }
            if (state.backtracking > 0) {
                state.failed = true;
                return -1;
            }
            NoViableAltException nvae =
                    new NoViableAltException(getDescription(), 252, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    protected class DFA285 extends DFA {

        public DFA285(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 285;
            this.eot = DFA285_eot;
            this.eof = DFA285_eof;
            this.min = DFA285_min;
            this.max = DFA285_max;
            this.accept = DFA285_accept;
            this.special = DFA285_special;
            this.transition = DFA285_transition;
        }

        @Override
        public String getDescription() {
            return "()* loopback of 704:38: ( '.' ident )*";
        }

        @Override
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream) _input;
            int _s = s;
            switch (s) {
                case 0:
                    int LA285_6 = input.LA(1);

                    int index285_6 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred468_Delphi())) {
                        s = 19;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index285_6);
                    if (s >= 0) return s;
                    break;

                case 1:
                    int LA285_17 = input.LA(1);

                    int index285_17 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred468_Delphi())) {
                        s = 12;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index285_17);
                    if (s >= 0) return s;
                    break;

                case 2:
                    int LA285_44 = input.LA(1);

                    int index285_44 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred468_Delphi())) {
                        s = 12;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index285_44);
                    if (s >= 0) return s;
                    break;

                case 3:
                    int LA285_68 = input.LA(1);

                    int index285_68 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred468_Delphi())) {
                        s = 12;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index285_68);
                    if (s >= 0) return s;
                    break;

                case 4:
                    int LA285_11 = input.LA(1);

                    int index285_11 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred468_Delphi())) {
                        s = 19;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index285_11);
                    if (s >= 0) return s;
                    break;

                case 5:
                    int LA285_18 = input.LA(1);

                    int index285_18 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred468_Delphi())) {
                        s = 12;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index285_18);
                    if (s >= 0) return s;
                    break;

                case 6:
                    int LA285_45 = input.LA(1);

                    int index285_45 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred468_Delphi())) {
                        s = 12;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index285_45);
                    if (s >= 0) return s;
                    break;

                case 7:
                    int LA285_62 = input.LA(1);

                    int index285_62 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred468_Delphi())) {
                        s = 12;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index285_62);
                    if (s >= 0) return s;
                    break;

                case 8:
                    int LA285_58 = input.LA(1);

                    int index285_58 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred468_Delphi())) {
                        s = 12;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index285_58);
                    if (s >= 0) return s;
                    break;

                case 9:
                    int LA285_59 = input.LA(1);

                    int index285_59 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred468_Delphi())) {
                        s = 12;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index285_59);
                    if (s >= 0) return s;
                    break;

                case 10:
                    int LA285_60 = input.LA(1);

                    int index285_60 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred468_Delphi())) {
                        s = 12;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index285_60);
                    if (s >= 0) return s;
                    break;

                case 11:
                    int LA285_61 = input.LA(1);

                    int index285_61 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred468_Delphi())) {
                        s = 12;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index285_61);
                    if (s >= 0) return s;
                    break;

                case 12:
                    int LA285_63 = input.LA(1);

                    int index285_63 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred468_Delphi())) {
                        s = 12;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index285_63);
                    if (s >= 0) return s;
                    break;

                case 13:
                    int LA285_64 = input.LA(1);

                    int index285_64 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred468_Delphi())) {
                        s = 12;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index285_64);
                    if (s >= 0) return s;
                    break;

                case 14:
                    int LA285_66 = input.LA(1);

                    int index285_66 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred468_Delphi())) {
                        s = 12;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index285_66);
                    if (s >= 0) return s;
                    break;

                case 15:
                    int LA285_85 = input.LA(1);

                    int index285_85 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred468_Delphi())) {
                        s = 69;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index285_85);
                    if (s >= 0) return s;
                    break;

                case 16:
                    int LA285_47 = input.LA(1);

                    int index285_47 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred468_Delphi())) {
                        s = 12;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index285_47);
                    if (s >= 0) return s;
                    break;

                case 17:
                    int LA285_22 = input.LA(1);

                    int index285_22 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred468_Delphi())) {
                        s = 12;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index285_22);
                    if (s >= 0) return s;
                    break;

                case 18:
                    int LA285_27 = input.LA(1);

                    int index285_27 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred468_Delphi())) {
                        s = 12;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index285_27);
                    if (s >= 0) return s;
                    break;

                case 19:
                    int LA285_99 = input.LA(1);

                    int index285_99 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred468_Delphi())) {
                        s = 69;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index285_99);
                    if (s >= 0) return s;
                    break;

                case 20:
                    int LA285_28 = input.LA(1);

                    int index285_28 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred468_Delphi())) {
                        s = 12;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index285_28);
                    if (s >= 0) return s;
                    break;

                case 21:
                    int LA285_29 = input.LA(1);

                    int index285_29 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred468_Delphi())) {
                        s = 12;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index285_29);
                    if (s >= 0) return s;
                    break;

                case 22:
                    int LA285_98 = input.LA(1);

                    int index285_98 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred468_Delphi())) {
                        s = 69;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index285_98);
                    if (s >= 0) return s;
                    break;

                case 23:
                    int LA285_49 = input.LA(1);

                    int index285_49 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred468_Delphi())) {
                        s = 12;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index285_49);
                    if (s >= 0) return s;
                    break;

                case 24:
                    int LA285_74 = input.LA(1);

                    int index285_74 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred468_Delphi())) {
                        s = 69;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index285_74);
                    if (s >= 0) return s;
                    break;

                case 25:
                    int LA285_76 = input.LA(1);

                    int index285_76 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred468_Delphi())) {
                        s = 69;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index285_76);
                    if (s >= 0) return s;
                    break;

                case 26:
                    int LA285_52 = input.LA(1);

                    int index285_52 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred468_Delphi())) {
                        s = 12;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index285_52);
                    if (s >= 0) return s;
                    break;

                case 27:
                    int LA285_53 = input.LA(1);

                    int index285_53 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred468_Delphi())) {
                        s = 12;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index285_53);
                    if (s >= 0) return s;
                    break;

                case 28:
                    int LA285_54 = input.LA(1);

                    int index285_54 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred468_Delphi())) {
                        s = 12;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index285_54);
                    if (s >= 0) return s;
                    break;

                case 29:
                    int LA285_55 = input.LA(1);

                    int index285_55 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred468_Delphi())) {
                        s = 12;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index285_55);
                    if (s >= 0) return s;
                    break;

                case 30:
                    int LA285_119 = input.LA(1);

                    int index285_119 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred468_Delphi())) {
                        s = 69;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index285_119);
                    if (s >= 0) return s;
                    break;

                case 31:
                    int LA285_72 = input.LA(1);

                    int index285_72 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred468_Delphi())) {
                        s = 69;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index285_72);
                    if (s >= 0) return s;
                    break;

                case 32:
                    int LA285_143 = input.LA(1);

                    int index285_143 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred468_Delphi())) {
                        s = 69;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index285_143);
                    if (s >= 0) return s;
                    break;

                case 33:
                    int LA285_78 = input.LA(1);

                    int index285_78 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred468_Delphi())) {
                        s = 69;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index285_78);
                    if (s >= 0) return s;
                    break;

                case 34:
                    int LA285_120 = input.LA(1);

                    int index285_120 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred468_Delphi())) {
                        s = 69;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index285_120);
                    if (s >= 0) return s;
                    break;

                case 35:
                    int LA285_80 = input.LA(1);

                    int index285_80 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred468_Delphi())) {
                        s = 69;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index285_80);
                    if (s >= 0) return s;
                    break;

                case 36:
                    int LA285_101 = input.LA(1);

                    int index285_101 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred468_Delphi())) {
                        s = 69;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index285_101);
                    if (s >= 0) return s;
                    break;

                case 37:
                    int LA285_103 = input.LA(1);

                    int index285_103 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred468_Delphi())) {
                        s = 69;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index285_103);
                    if (s >= 0) return s;
                    break;

                case 38:
                    int LA285_115 = input.LA(1);

                    int index285_115 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred468_Delphi())) {
                        s = 69;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index285_115);
                    if (s >= 0) return s;
                    break;

                case 39:
                    int LA285_108 = input.LA(1);

                    int index285_108 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred468_Delphi())) {
                        s = 69;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index285_108);
                    if (s >= 0) return s;
                    break;

                case 40:
                    int LA285_110 = input.LA(1);

                    int index285_110 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred468_Delphi())) {
                        s = 69;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index285_110);
                    if (s >= 0) return s;
                    break;

                case 41:
                    int LA285_111 = input.LA(1);

                    int index285_111 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred468_Delphi())) {
                        s = 69;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index285_111);
                    if (s >= 0) return s;
                    break;

                case 42:
                    int LA285_112 = input.LA(1);

                    int index285_112 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred468_Delphi())) {
                        s = 69;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index285_112);
                    if (s >= 0) return s;
                    break;

                case 43:
                    int LA285_113 = input.LA(1);

                    int index285_113 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred468_Delphi())) {
                        s = 69;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index285_113);
                    if (s >= 0) return s;
                    break;

                case 44:
                    int LA285_114 = input.LA(1);

                    int index285_114 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred468_Delphi())) {
                        s = 69;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index285_114);
                    if (s >= 0) return s;
                    break;

                case 45:
                    int LA285_116 = input.LA(1);

                    int index285_116 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred468_Delphi())) {
                        s = 69;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index285_116);
                    if (s >= 0) return s;
                    break;

                case 46:
                    int LA285_142 = input.LA(1);

                    int index285_142 = input.index();
                    input.rewind();
                    s = -1;
                    if ((synpred468_Delphi())) {
                        s = 69;
                    } else if ((true)) {
                        s = 1;
                    }

                    input.seek(index285_142);
                    if (s >= 0) return s;
                    break;
            }
            if (state.backtracking > 0) {
                state.failed = true;
                return -1;
            }
            NoViableAltException nvae =
                    new NoViableAltException(getDescription(), 285, _s, input);
            error(nvae);
            throw nvae;
        }
    }
}
